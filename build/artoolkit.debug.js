// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('warning: addFunction(): You should provide a wasm function signature string as a second argument. This is not necessary for asm.js and asm2wasm, but is required for the LLVM wasm backend, so it is recommended for full portability.');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  else if (returnType === 'boolean') ret = Boolean(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  assert(__cxa_demangle_func);
  try {
    var s =
      func.substr(1);
    var len = lengthBytesUTF8(s)+1;
    var buf = _malloc(len);
    stringToUTF8(s, buf, len);
    var status = _malloc(4);
    var ret = __cxa_demangle_func(buf, 0, 0, status);
    if (HEAP32[((status)>>2)] === 0 && ret) {
      return Pointer_stringify(ret);
    }
    // otherwise, libcxxabi failed
  } catch(e) {
    // ignore problems here
  } finally {
    if (buf) _free(buf);
    if (status) _free(status);
    if (ret) _free(ret);
  }
  // failure when using libcxxabi, don't demangle
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

if (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {
  var ret;
  try {
    if (ArrayBuffer.transfer) {
      ret = ArrayBuffer.transfer(buffer, size);
    } else {
      var oldHEAP8 = HEAP8;
      ret = new ArrayBuffer(size);
      var temp = new Int8Array(ret);
      temp.set(oldHEAP8);
    }
  } catch(e) {
    return false;
  }
  var success = _emscripten_replace_memory(ret);
  if (!success) return false;
  return ret;
};

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(HEAP32[DYNAMICTOP_PTR>>2] > TOTAL_MEMORY); // This function should only ever be called after the ceiling of the dynamic heap has already been bumped to exceed the current total size of the asm.js heap.


  var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
  var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.

  if (HEAP32[DYNAMICTOP_PTR>>2] > LIMIT) {
    Module.printErr('Cannot enlarge memory, asked to go up to ' + HEAP32[DYNAMICTOP_PTR>>2] + ' bytes, but the limit is ' + LIMIT + ' bytes!');
    return false;
  }

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;
  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.

  while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.
    if (TOTAL_MEMORY <= 536870912) {
      TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...
    } else {
      // ..., but after that, add smaller increments towards 2GB, which we cannot reach
      TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);
      if (TOTAL_MEMORY === OLD_TOTAL_MEMORY) {
        warnOnce('Cannot ask for more memory since we reached the practical limit in browsers (which is just below 2GB), so the request would have failed. Requesting only ' + TOTAL_MEMORY);
      }
    }
  }

  var start = Date.now();

  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
  if (!replacement || replacement.byteLength != TOTAL_MEMORY) {
    Module.printErr('Failed to grow the heap from ' + OLD_TOTAL_MEMORY + ' bytes to ' + TOTAL_MEMORY + ' bytes, not enough memory!');
    if (replacement) {
      Module.printErr('Expected to get back a buffer of size ' + TOTAL_MEMORY + ' bytes, but instead got back a buffer of size ' + replacement.byteLength);
    }
    // restore the state to before this call, we failed
    TOTAL_MEMORY = OLD_TOTAL_MEMORY;
    return false;
  }

  // everything worked

  updateGlobalBuffer(replacement);
  updateGlobalBufferViews();

  if (!Module["usingWasm"]) {
    Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);
  }


  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 268435456;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4, $5) { if (!artoolkit["frameMalloc"]) { artoolkit["frameMalloc"] = ({}); } var frameMalloc = artoolkit["frameMalloc"]; frameMalloc["framepointer"] = $1; frameMalloc["framesize"] = $2; frameMalloc["camera"] = $3; frameMalloc["transform"] = $4; frameMalloc["videoLumaPointer"] = $5; },
 function($0, $1, $2, $3) { if (!artoolkit["multiEachMarkerInfo"]) { artoolkit["multiEachMarkerInfo"] = ({}); } var multiEachMarker = artoolkit["multiEachMarkerInfo"]; multiEachMarker['visible'] = $0; multiEachMarker['pattId'] = $1; multiEachMarker['pattType'] = $2; multiEachMarker['width'] = $3; },
 function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32) { var $a = arguments; var i = 12; if (!artoolkit["markerInfo"]) { artoolkit["markerInfo"] = ({ pos: [0,0], line: [[0,0,0], [0,0,0], [0,0,0], [0,0,0]], vertex: [[0,0], [0,0], [0,0], [0,0]] }); } var markerInfo = artoolkit["markerInfo"]; markerInfo["area"] = $0; markerInfo["id"] = $1; markerInfo["idPatt"] = $2; markerInfo["idMatrix"] = $3; markerInfo["dir"] = $4; markerInfo["dirPatt"] = $5; markerInfo["dirMatrix"] = $6; markerInfo["cf"] = $7; markerInfo["cfPatt"] = $8; markerInfo["cfMatrix"] = $9; markerInfo["pos"][0] = $10; markerInfo["pos"][1] = $11; markerInfo["line"][0][0] = $a[i++]; markerInfo["line"][0][1] = $a[i++]; markerInfo["line"][0][2] = $a[i++]; markerInfo["line"][1][0] = $a[i++]; markerInfo["line"][1][1] = $a[i++]; markerInfo["line"][1][2] = $a[i++]; markerInfo["line"][2][0] = $a[i++]; markerInfo["line"][2][1] = $a[i++]; markerInfo["line"][2][2] = $a[i++]; markerInfo["line"][3][0] = $a[i++]; markerInfo["line"][3][1] = $a[i++]; markerInfo["line"][3][2] = $a[i++]; markerInfo["vertex"][0][0] = $a[i++]; markerInfo["vertex"][0][1] = $a[i++]; markerInfo["vertex"][1][0] = $a[i++]; markerInfo["vertex"][1][1] = $a[i++]; markerInfo["vertex"][2][0] = $a[i++]; markerInfo["vertex"][2][1] = $a[i++]; markerInfo["vertex"][3][0] = $a[i++]; markerInfo["vertex"][3][1] = $a[i++]; markerInfo["errorCorrected"] = $a[i++]; }];

function _emscripten_asm_const_iiiiiii(code, a0, a1, a2, a3, a4, a5) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
}

function _emscripten_asm_const_iiiid(code, a0, a1, a2, a3) {
  return ASM_CONSTS[code](a0, a1, a2, a3);
}

function _emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi(code, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 19072;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_ARToolKitJS_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } }, { func: function() { ___emscripten_environ_constructor() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  var ENV={};function ___buildEnvironment(environ) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = getMemory(TOTAL_ENV_SIZE);
        envPtr = getMemory(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in ENV) {
        if (typeof ENV[key] === 'string') {
          var line = key + '=' + ENV[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_constant(name, type, value) {
      name = readLatin1String(name);
      whenDependentTypesAreResolved([], [type], function(type) {
          type = type[0];
          Module[name] = type['fromWireType'](value);
          return [];
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module["asm"]['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module["asm"]['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Uint8ClampedArray) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function _abort() {
      Module['abort']();
    }

   

   

  var _emscripten_asm_const_int=true;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }



   

  var _llvm_ceil_f32=Math_ceil;

  var _llvm_ctlz_i32=true;

  var _llvm_fabs_f64=Math_abs;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

   
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_di": nullFunc_di, "nullFunc_dii": nullFunc_dii, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vid": nullFunc_vid, "nullFunc_vii": nullFunc_vii, "nullFunc_viid": nullFunc_viid, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "invoke_di": invoke_di, "invoke_dii": invoke_dii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vid": invoke_vid, "invoke_vii": invoke_vii, "invoke_viid": invoke_viid, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___buildEnvironment": ___buildEnvironment, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_throw": ___cxa_throw, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "__embind_register_bool": __embind_register_bool, "__embind_register_constant": __embind_register_constant, "__embind_register_emval": __embind_register_emval, "__embind_register_float": __embind_register_float, "__embind_register_function": __embind_register_function, "__embind_register_integer": __embind_register_integer, "__embind_register_memory_view": __embind_register_memory_view, "__embind_register_std_string": __embind_register_std_string, "__embind_register_std_wstring": __embind_register_std_wstring, "__embind_register_void": __embind_register_void, "__emval_decref": __emval_decref, "__emval_register": __emval_register, "__exit": __exit, "_abort": _abort, "_embind_repr": _embind_repr, "_emscripten_asm_const_iiiid": _emscripten_asm_const_iiiid, "_emscripten_asm_const_iiiiiii": _emscripten_asm_const_iiiiiii, "_emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi": _emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_exit": _exit, "_llvm_ceil_f32": _llvm_ceil_f32, "_llvm_fabs_f64": _llvm_fabs_f64, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "count_emval_handles": count_emval_handles, "craftInvokerFunction": craftInvokerFunction, "createNamedFunction": createNamedFunction, "embind__requireFunction": embind__requireFunction, "embind_init_charCodes": embind_init_charCodes, "ensureOverloadTable": ensureOverloadTable, "exposePublicSymbol": exposePublicSymbol, "extendError": extendError, "floatReadValueFromPointer": floatReadValueFromPointer, "getShiftFromSize": getShiftFromSize, "getTypeName": getTypeName, "get_first_emval": get_first_emval, "heap32VectorToArray": heap32VectorToArray, "init_emval": init_emval, "integerReadValueFromPointer": integerReadValueFromPointer, "makeLegalFunctionName": makeLegalFunctionName, "new_": new_, "readLatin1String": readLatin1String, "registerType": registerType, "replacePublicSymbol": replacePublicSymbol, "runDestructors": runDestructors, "simpleReadValueFromPointer": simpleReadValueFromPointer, "throwBindingError": throwBindingError, "throwInternalError": throwInternalError, "throwUnboundTypeError": throwUnboundTypeError, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var Int8View = global.Int8Array;
  var HEAP8 = new Int8View(buffer);
  var Int16View = global.Int16Array;
  var HEAP16 = new Int16View(buffer);
  var Int32View = global.Int32Array;
  var HEAP32 = new Int32View(buffer);
  var Uint8View = global.Uint8Array;
  var HEAPU8 = new Uint8View(buffer);
  var Uint16View = global.Uint16Array;
  var HEAPU16 = new Uint16View(buffer);
  var Uint32View = global.Uint32Array;
  var HEAPU32 = new Uint32View(buffer);
  var Float32View = global.Float32Array;
  var HEAPF32 = new Float32View(buffer);
  var Float64View = global.Float64Array;
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var invoke_di=env.invoke_di;
  var invoke_dii=env.invoke_dii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vid=env.invoke_vid;
  var invoke_vii=env.invoke_vii;
  var invoke_viid=env.invoke_viid;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_throw=env.___cxa_throw;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall221=env.___syscall221;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var __embind_register_bool=env.__embind_register_bool;
  var __embind_register_constant=env.__embind_register_constant;
  var __embind_register_emval=env.__embind_register_emval;
  var __embind_register_float=env.__embind_register_float;
  var __embind_register_function=env.__embind_register_function;
  var __embind_register_integer=env.__embind_register_integer;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var __embind_register_std_string=env.__embind_register_std_string;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var __embind_register_void=env.__embind_register_void;
  var __emval_decref=env.__emval_decref;
  var __emval_register=env.__emval_register;
  var __exit=env.__exit;
  var _abort=env._abort;
  var _embind_repr=env._embind_repr;
  var _emscripten_asm_const_iiiid=env._emscripten_asm_const_iiiid;
  var _emscripten_asm_const_iiiiiii=env._emscripten_asm_const_iiiiiii;
  var _emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi=env._emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _exit=env._exit;
  var _llvm_ceil_f32=env._llvm_ceil_f32;
  var _llvm_fabs_f64=env._llvm_fabs_f64;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var count_emval_handles=env.count_emval_handles;
  var craftInvokerFunction=env.craftInvokerFunction;
  var createNamedFunction=env.createNamedFunction;
  var embind__requireFunction=env.embind__requireFunction;
  var embind_init_charCodes=env.embind_init_charCodes;
  var ensureOverloadTable=env.ensureOverloadTable;
  var exposePublicSymbol=env.exposePublicSymbol;
  var extendError=env.extendError;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var getShiftFromSize=env.getShiftFromSize;
  var getTypeName=env.getTypeName;
  var get_first_emval=env.get_first_emval;
  var heap32VectorToArray=env.heap32VectorToArray;
  var init_emval=env.init_emval;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var new_=env.new_;
  var readLatin1String=env.readLatin1String;
  var registerType=env.registerType;
  var replacePublicSymbol=env.replacePublicSymbol;
  var runDestructors=env.runDestructors;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var throwBindingError=env.throwBindingError;
  var throwInternalError=env.throwInternalError;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function _arPattGetImage2($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = +$10;
 $11 = $11 | 0;
 var $$0 = 0, $$01442 = 0, $$01443 = 0, $$01464 = 0, $$01468 = 0, $$01474 = 0, $$01495 = 0, $$1 = 0, $$10 = 0, $$101453 = 0, $$101484 = 0, $$101505 = 0, $$11 = 0, $$111454 = 0, $$111485 = 0, $$111506 = 0, $$11444 = 0, $$11465 = 0, $$11469 = 0, $$11475 = 0, $$11496 = 0, $$12 = 0, $$121455 = 0, $$121486 = 0, $$121507 = 0, $$13 = 0, $$131456 = 0, $$131487 = 0, $$131508 = 0, $$14 = 0, $$141457 = 0, $$141488 = 0, $$141509 = 0, $$15 = 0, $$151458 = 0, $$151489 = 0, $$151510 = 0, $$16 = 0, $$161459 = 0, $$161490 = 0, $$161511 = 0, $$17 = 0, $$171460 = 0, $$171491 = 0, $$171512 = 0, $$18 = 0, $$181461 = 0, $$181492 = 0, $$181513 = 0, $$19 = 0, $$191462 = 0, $$191493 = 0, $$191514 = 0, $$2 = 0, $$20 = 0, $$201463 = 0, $$201494 = 0, $$201515 = 0, $$21 = 0, $$21445 = 0, $$21466 = 0, $$21470 = 0, $$21476 = 0, $$21497 = 0, $$22 = 0, $$23 = 0, $$3 = 0, $$31446 = 0, $$31471 = 0, $$31477 = 0, $$31498 = 0, $$4 = 0, $$41447 = 0, $$41478 = 0, $$41499 = 0, $$5 = 0, $$51448 = 0, $$51479 = 0, $$51500 = 0, $$6 = 0, $$61449 = 0, $$61480 = 0, $$61501 = 0, $$7 = 0, $$71450 = 0, $$71481 = 0, $$71502 = 0, $$8 = 0, $$81451 = 0, $$81482 = 0, $$81503 = 0, $$9 = 0, $$91452 = 0, $$91483 = 0, $$91504 = 0, $101 = 0, $1016 = 0, $102 = 0, $1026 = 0, $1032 = 0.0, $1038 = 0.0, $1039 = 0.0, $1043 = 0, $1049 = 0, $105 = 0.0, $1053 = 0, $1055 = 0, $106 = 0.0, $1061 = 0, $1062 = 0, $1066 = 0, $1070 = 0, $1074 = 0, $1077 = 0, $108 = 0, $1082 = 0.0, $1083 = 0.0, $1084 = 0.0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1099 = 0.0, $110 = 0, $1105 = 0.0, $1112 = 0.0, $112 = 0.0, $1122 = 0.0, $113 = 0.0, $1131 = 0.0, $1132 = 0.0, $114 = 0.0, $115 = 0, $1153 = 0, $1156 = 0, $116 = 0, $1164 = 0, $1165 = 0, $1169 = 0, $117 = 0, $1178 = 0, $118 = 0, $1185 = 0, $119 = 0, $1190 = 0.0, $1191 = 0.0, $1192 = 0.0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1207 = 0.0, $121 = 0, $1213 = 0.0, $122 = 0, $1220 = 0.0, $123 = 0, $1230 = 0.0, $1239 = 0.0, $1240 = 0.0, $1261 = 0, $1264 = 0, $1272 = 0, $1273 = 0, $1277 = 0, $1286 = 0, $129 = 0.0, $1293 = 0, $1298 = 0.0, $1299 = 0.0, $13 = 0, $1300 = 0.0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $1315 = 0.0, $1321 = 0.0, $1328 = 0.0, $1338 = 0.0, $1347 = 0.0, $1348 = 0.0, $135 = 0.0, $1369 = 0, $1380 = 0, $1381 = 0, $1385 = 0, $1390 = 0, $1397 = 0, $14 = 0, $1402 = 0, $1409 = 0, $1412 = 0.0, $1413 = 0.0, $1414 = 0.0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0.0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1429 = 0.0, $1435 = 0.0, $1442 = 0.0, $1452 = 0.0, $1461 = 0.0, $1462 = 0.0, $1483 = 0, $15 = 0, $1502 = 0, $1509 = 0.0, $1510 = 0.0, $1511 = 0.0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0.0, $1520 = 0, $1526 = 0.0, $1532 = 0.0, $1539 = 0.0, $1549 = 0.0, $1558 = 0.0, $1559 = 0.0, $1580 = 0, $1599 = 0, $16 = 0, $1606 = 0.0, $1607 = 0.0, $1608 = 0.0, $1609 = 0, $161 = 0.0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $162 = 0.0, $1623 = 0.0, $1629 = 0.0, $1636 = 0.0, $1646 = 0.0, $1655 = 0.0, $1656 = 0.0, $1677 = 0, $1697 = 0, $1702 = 0.0, $1703 = 0.0, $1704 = 0.0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1719 = 0.0, $1725 = 0.0, $1732 = 0.0, $1742 = 0.0, $1751 = 0.0, $1752 = 0.0, $1773 = 0, $1780 = 0, $1785 = 0.0, $1786 = 0.0, $1787 = 0.0, $1788 = 0, $1789 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1802 = 0.0, $1808 = 0.0, $1815 = 0.0, $1825 = 0.0, $183 = 0, $1834 = 0.0, $1835 = 0.0, $1858 = 0, $1865 = 0, $1870 = 0.0, $1871 = 0.0, $1872 = 0.0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $1880 = 0, $1881 = 0, $1887 = 0.0, $1893 = 0.0, $1900 = 0.0, $1910 = 0.0, $1919 = 0.0, $192 = 0, $1920 = 0.0, $193 = 0, $1942 = 0, $1949 = 0, $1954 = 0.0, $1955 = 0.0, $1956 = 0.0, $1957 = 0, $1958 = 0, $1959 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1971 = 0.0, $1977 = 0.0, $1984 = 0.0, $1994 = 0.0, $2003 = 0.0, $2004 = 0.0, $201 = 0, $2025 = 0, $2028 = 0, $2036 = 0, $2051 = 0, $2056 = 0.0, $2057 = 0.0, $2058 = 0.0, $2059 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2073 = 0.0, $2079 = 0.0, $208 = 0, $2086 = 0.0, $2096 = 0.0, $2105 = 0.0, $2106 = 0.0, $2127 = 0, $213 = 0.0, $2130 = 0, $2138 = 0, $214 = 0.0, $215 = 0.0, $2153 = 0, $2158 = 0.0, $2159 = 0.0, $216 = 0, $2160 = 0.0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2175 = 0.0, $218 = 0, $2181 = 0.0, $2188 = 0.0, $219 = 0, $2198 = 0.0, $220 = 0, $2207 = 0.0, $2208 = 0.0, $221 = 0, $222 = 0, $2229 = 0, $223 = 0, $2232 = 0, $224 = 0, $2251 = 0, $2256 = 0, $2263 = 0, $230 = 0.0, $236 = 0.0, $243 = 0.0, $253 = 0.0, $262 = 0.0, $263 = 0.0, $284 = 0, $292 = 0, $293 = 0, $301 = 0, $309 = 0, $31 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $33 = 0.0, $331 = 0.0, $337 = 0.0, $34 = 0.0, $344 = 0.0, $354 = 0.0, $363 = 0.0, $364 = 0.0, $37 = 0.0, $385 = 0, $39 = 0.0, $394 = 0, $395 = 0, $40 = 0.0, $403 = 0, $410 = 0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0, $419 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $43 = 0, $432 = 0.0, $438 = 0.0, $445 = 0.0, $45 = 0.0, $455 = 0.0, $464 = 0.0, $465 = 0.0, $47 = 0.0, $48 = 0.0, $486 = 0, $494 = 0, $495 = 0, $503 = 0, $51 = 0.0, $511 = 0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $53 = 0.0, $533 = 0.0, $539 = 0.0, $54 = 0.0, $546 = 0.0, $556 = 0.0, $565 = 0.0, $566 = 0.0, $57 = 0, $58 = 0.0, $587 = 0, $596 = 0, $597 = 0, $60 = 0.0, $605 = 0, $613 = 0, $618 = 0.0, $619 = 0.0, $620 = 0.0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $635 = 0.0, $64 = 0.0, $641 = 0.0, $648 = 0.0, $658 = 0.0, $66 = 0.0, $667 = 0.0, $668 = 0.0, $689 = 0, $69 = 0, $691 = 0, $696 = 0, $697 = 0, $701 = 0, $705 = 0, $710 = 0.0, $711 = 0.0, $712 = 0.0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $720 = 0, $721 = 0, $727 = 0.0, $733 = 0.0, $740 = 0.0, $75 = 0, $750 = 0.0, $759 = 0.0, $760 = 0.0, $781 = 0, $79 = 0, $790 = 0, $791 = 0, $799 = 0, $807 = 0, $812 = 0.0, $813 = 0.0, $814 = 0.0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $829 = 0.0, $835 = 0.0, $842 = 0.0, $852 = 0.0, $861 = 0.0, $862 = 0.0, $881 = 0, $884 = 0, $889 = 0.0, $903 = 0.0, $904 = 0.0, $908 = 0, $914 = 0, $918 = 0, $920 = 0, $926 = 0, $927 = 0, $931 = 0, $935 = 0, $939 = 0, $942 = 0, $947 = 0.0, $948 = 0.0, $949 = 0.0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $964 = 0.0, $970 = 0.0, $977 = 0.0, $987 = 0.0, $996 = 0.0, $997 = 0.0, $spec$select1520 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $vararg_buffer5 = sp + 224 | 0;
 $vararg_buffer3 = sp + 216 | 0;
 $vararg_buffer1 = sp + 208 | 0;
 $vararg_buffer = sp + 200 | 0;
 $12 = sp + 136 | 0;
 $13 = sp + 72 | 0;
 $14 = sp;
 $15 = sp + 232 | 0;
 $16 = sp + 228 | 0;
 HEAPF64[$12 >> 3] = 100.0;
 HEAPF64[$12 + 8 >> 3] = 100.0;
 HEAPF64[$12 + 16 >> 3] = 110.0;
 HEAPF64[$12 + 24 >> 3] = 100.0;
 HEAPF64[$12 + 32 >> 3] = 110.0;
 HEAPF64[$12 + 40 >> 3] = 110.0;
 HEAPF64[$12 + 48 >> 3] = 100.0;
 HEAPF64[$12 + 56 >> 3] = 110.0;
 $$01474 = 0;
 while (1) {
  if (($$01474 | 0) == 4) break;
  HEAPF64[$13 + ($$01474 << 4) >> 3] = +HEAPF64[$9 + ($$01474 << 4) >> 3];
  HEAPF64[$13 + ($$01474 << 4) + 8 >> 3] = +HEAPF64[$9 + ($$01474 << 4) + 8 >> 3];
  $$01474 = $$01474 + 1 | 0;
 }
 _get_cpara($12, $13, $14);
 $31 = +HEAPF64[$13 >> 3];
 $33 = +HEAPF64[$13 + 16 >> 3];
 $34 = $31 - $33;
 $37 = +HEAPF64[$13 + 8 >> 3];
 $39 = +HEAPF64[$13 + 24 >> 3];
 $40 = $37 - $39;
 $43 = ~~($34 * $34 + $40 * $40);
 $45 = +HEAPF64[$13 + 32 >> 3];
 $47 = +HEAPF64[$13 + 48 >> 3];
 $48 = $45 - $47;
 $51 = +HEAPF64[$13 + 40 >> 3];
 $53 = +HEAPF64[$13 + 56 >> 3];
 $54 = $51 - $53;
 $57 = ~~($48 * $48 + $54 * $54);
 $58 = $33 - $45;
 $60 = $39 - $51;
 $63 = ~~($58 * $58 + $60 * $60);
 $64 = $47 - $31;
 $66 = $53 - $37;
 $69 = ~~($64 * $64 + $66 * $66);
 $75 = ~~(+((($57 | 0) > ($43 | 0) ? $57 : $43) | 0) * $10 * $10);
 $79 = ~~(+((($69 | 0) > ($63 | 0) ? $69 : $63) | 0) * $10 * $10);
 if (!$0) {
  $$01464 = $2;
  while (1) if (($$01464 | 0) < ($3 | 0) & (Math_imul($$01464, $$01464) | 0) < ($75 | 0)) $$01464 = $$01464 << 1; else break;
  $$01468 = $2;
  while (1) if (($$01468 | 0) < ($3 | 0) & (Math_imul($$01468, $$01468) | 0) < ($79 | 0)) $$01468 = $$01468 << 1; else {
   $$21466 = $$01464;
   $$21470 = $$01468;
   break;
  }
 } else {
  $$11465 = $2;
  while (1) if (($$11465 | 0) < ($3 | 0) & (Math_imul($$11465 << 2, $$11465) | 0) < ($75 | 0)) $$11465 = $$11465 << 1; else break;
  $$11469 = $2;
  while (1) if (($$11469 | 0) < ($3 | 0) & (Math_imul($$11469 << 2, $$11469) | 0) < ($79 | 0)) $$11469 = $$11469 << 1; else {
   $$21466 = $$11465;
   $$21470 = $$11469;
   break;
  }
 }
 $spec$select1520 = ($$21466 | 0) > ($3 | 0) ? $3 : $$21466;
 $$31471 = ($$21470 | 0) > ($3 | 0) ? $3 : $$21470;
 $101 = ($spec$select1520 | 0) / ($2 | 0) | 0;
 $102 = ($$31471 | 0) / ($2 | 0) | 0;
 $105 = (1.0 - $10) * .5 * 10.0;
 $106 = $10 * 10.0;
 $108 = Math_imul($2, $2) | 0;
 L19 : do if (!$1) {
  $109 = $108 * 3 | 0;
  $110 = _calloc($109, 4) | 0;
  if (!$110) {
   _arLog(0, 3, 5051, $vararg_buffer);
   _exit(1);
  }
  L24 : do switch ($7 | 0) {
  case 0:
   {
    $112 = $105 + 100.0;
    $113 = +($$31471 | 0);
    $114 = +($spec$select1520 | 0);
    $115 = $14 + 48 | 0;
    $116 = $14 + 56 | 0;
    $117 = $14 + 64 | 0;
    $118 = $14 + 8 | 0;
    $119 = $14 + 16 | 0;
    $120 = $14 + 24 | 0;
    $121 = $14 + 32 | 0;
    $122 = $14 + 40 | 0;
    $123 = ($0 | 0) == 1;
    $$01495 = 0;
    while (1) {
     if (($$01495 | 0) >= ($$31471 | 0)) break L24;
     $129 = $112 + $106 * (+($$01495 | 0) + .5) / $113;
     $$11475 = 0;
     while (1) {
      if (($$11475 | 0) >= ($spec$select1520 | 0)) break;
      $135 = $112 + $106 * (+($$11475 | 0) + .5) / $114;
      $142 = +HEAPF64[$117 >> 3] + ($135 * +HEAPF64[$115 >> 3] + $129 * +HEAPF64[$116 >> 3]);
      if ($142 == 0.0) {
       $2263 = $110;
       label = 306;
       break L19;
      }
      $152 = (+HEAPF64[$119 >> 3] + ($135 * +HEAPF64[$14 >> 3] + $129 * +HEAPF64[$118 >> 3])) / $142;
      HEAPF32[$15 >> 2] = $152;
      $161 = (+HEAPF64[$122 >> 3] + ($135 * +HEAPF64[$120 >> 3] + $129 * +HEAPF64[$121 >> 3])) / $142;
      HEAPF32[$16 >> 2] = $161;
      _arParamIdeal2ObservLTf($8, $152, $161, $15, $16) | 0;
      $162 = +HEAPF32[$15 >> 2];
      if ($123) {
       $$01442 = ((~~($162 + 1.0) | 0) / 2 | 0) << 1;
       $$01443 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$01442 = ~~($162 + .5);
       $$01443 = ~~(+HEAPF32[$16 >> 2] + .5);
      }
      if (($$01442 | 0) > -1) if (($$01443 | 0) < ($6 | 0) & (($$01443 | 0) > -1 & ($$01442 | 0) < ($5 | 0))) {
       $183 = ((Math_imul($$01443, $5) | 0) + $$01442 | 0) * 3 | 0;
       $192 = ((Math_imul(($$01495 | 0) / ($102 | 0) | 0, $2) | 0) + (($$11475 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $193 = $110 + ($192 << 2) | 0;
       HEAP32[$193 >> 2] = (HEAP32[$193 >> 2] | 0) + (HEAPU8[$4 + ($183 + 2) >> 0] | 0);
       $201 = $110 + ($192 + 1 << 2) | 0;
       HEAP32[$201 >> 2] = (HEAP32[$201 >> 2] | 0) + (HEAPU8[$4 + ($183 + 1) >> 0] | 0);
       $208 = $110 + ($192 + 2 << 2) | 0;
       HEAP32[$208 >> 2] = (HEAP32[$208 >> 2] | 0) + (HEAPU8[$4 + $183 >> 0] | 0);
      }
      $$11475 = $$11475 + 1 | 0;
     }
     $$01495 = $$01495 + 1 | 0;
    }
    break;
   }
  case 1:
   {
    $213 = $105 + 100.0;
    $214 = +($$31471 | 0);
    $215 = +($spec$select1520 | 0);
    $216 = $14 + 48 | 0;
    $217 = $14 + 56 | 0;
    $218 = $14 + 64 | 0;
    $219 = $14 + 8 | 0;
    $220 = $14 + 16 | 0;
    $221 = $14 + 24 | 0;
    $222 = $14 + 32 | 0;
    $223 = $14 + 40 | 0;
    $224 = ($0 | 0) == 1;
    $$11496 = 0;
    while (1) {
     if (($$11496 | 0) >= ($$31471 | 0)) break L24;
     $230 = $213 + $106 * (+($$11496 | 0) + .5) / $214;
     $$21476 = 0;
     while (1) {
      if (($$21476 | 0) >= ($spec$select1520 | 0)) break;
      $236 = $213 + $106 * (+($$21476 | 0) + .5) / $215;
      $243 = +HEAPF64[$218 >> 3] + ($236 * +HEAPF64[$216 >> 3] + $230 * +HEAPF64[$217 >> 3]);
      if ($243 == 0.0) {
       $2263 = $110;
       label = 306;
       break L19;
      }
      $253 = (+HEAPF64[$220 >> 3] + ($236 * +HEAPF64[$14 >> 3] + $230 * +HEAPF64[$219 >> 3])) / $243;
      HEAPF32[$15 >> 2] = $253;
      $262 = (+HEAPF64[$223 >> 3] + ($236 * +HEAPF64[$221 >> 3] + $230 * +HEAPF64[$222 >> 3])) / $243;
      HEAPF32[$16 >> 2] = $262;
      _arParamIdeal2ObservLTf($8, $253, $262, $15, $16) | 0;
      $263 = +HEAPF32[$15 >> 2];
      if ($224) {
       $$1 = ((~~($263 + 1.0) | 0) / 2 | 0) << 1;
       $$11444 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$1 = ~~($263 + .5);
       $$11444 = ~~(+HEAPF32[$16 >> 2] + .5);
      }
      if (($$1 | 0) > -1) if (($$11444 | 0) < ($6 | 0) & (($$11444 | 0) > -1 & ($$1 | 0) < ($5 | 0))) {
       $284 = ((Math_imul($$11444, $5) | 0) + $$1 | 0) * 3 | 0;
       $292 = ((Math_imul(($$11496 | 0) / ($102 | 0) | 0, $2) | 0) + (($$21476 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $293 = $110 + ($292 << 2) | 0;
       HEAP32[$293 >> 2] = (HEAP32[$293 >> 2] | 0) + (HEAPU8[$4 + $284 >> 0] | 0);
       $301 = $110 + ($292 + 1 << 2) | 0;
       HEAP32[$301 >> 2] = (HEAP32[$301 >> 2] | 0) + (HEAPU8[$4 + ($284 + 1) >> 0] | 0);
       $309 = $110 + ($292 + 2 << 2) | 0;
       HEAP32[$309 >> 2] = (HEAP32[$309 >> 2] | 0) + (HEAPU8[$4 + ($284 + 2) >> 0] | 0);
      }
      $$21476 = $$21476 + 1 | 0;
     }
     $$11496 = $$11496 + 1 | 0;
    }
    break;
   }
  case 2:
   {
    $314 = $105 + 100.0;
    $315 = +($$31471 | 0);
    $316 = +($spec$select1520 | 0);
    $317 = $14 + 48 | 0;
    $318 = $14 + 56 | 0;
    $319 = $14 + 64 | 0;
    $320 = $14 + 8 | 0;
    $321 = $14 + 16 | 0;
    $322 = $14 + 24 | 0;
    $323 = $14 + 32 | 0;
    $324 = $14 + 40 | 0;
    $325 = ($0 | 0) == 1;
    $$21497 = 0;
    while (1) {
     if (($$21497 | 0) >= ($$31471 | 0)) break L24;
     $331 = $314 + $106 * (+($$21497 | 0) + .5) / $315;
     $$31477 = 0;
     while (1) {
      if (($$31477 | 0) >= ($spec$select1520 | 0)) break;
      $337 = $314 + $106 * (+($$31477 | 0) + .5) / $316;
      $344 = +HEAPF64[$319 >> 3] + ($337 * +HEAPF64[$317 >> 3] + $331 * +HEAPF64[$318 >> 3]);
      if ($344 == 0.0) {
       $2263 = $110;
       label = 306;
       break L19;
      }
      $354 = (+HEAPF64[$321 >> 3] + ($337 * +HEAPF64[$14 >> 3] + $331 * +HEAPF64[$320 >> 3])) / $344;
      HEAPF32[$15 >> 2] = $354;
      $363 = (+HEAPF64[$324 >> 3] + ($337 * +HEAPF64[$322 >> 3] + $331 * +HEAPF64[$323 >> 3])) / $344;
      HEAPF32[$16 >> 2] = $363;
      _arParamIdeal2ObservLTf($8, $354, $363, $15, $16) | 0;
      $364 = +HEAPF32[$15 >> 2];
      if ($325) {
       $$2 = ((~~($364 + 1.0) | 0) / 2 | 0) << 1;
       $$21445 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$2 = ~~($364 + .5);
       $$21445 = ~~(+HEAPF32[$16 >> 2] + .5);
      }
      if (($$2 | 0) > -1) if (($$21445 | 0) < ($6 | 0) & (($$21445 | 0) > -1 & ($$2 | 0) < ($5 | 0))) {
       $385 = (Math_imul($$21445, $5) | 0) + $$2 << 2;
       $394 = ((Math_imul(($$21497 | 0) / ($102 | 0) | 0, $2) | 0) + (($$31477 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $395 = $110 + ($394 << 2) | 0;
       HEAP32[$395 >> 2] = (HEAP32[$395 >> 2] | 0) + (HEAPU8[$4 + ($385 | 2) >> 0] | 0);
       $403 = $110 + ($394 + 1 << 2) | 0;
       HEAP32[$403 >> 2] = (HEAP32[$403 >> 2] | 0) + (HEAPU8[$4 + ($385 | 1) >> 0] | 0);
       $410 = $110 + ($394 + 2 << 2) | 0;
       HEAP32[$410 >> 2] = (HEAP32[$410 >> 2] | 0) + (HEAPU8[$4 + $385 >> 0] | 0);
      }
      $$31477 = $$31477 + 1 | 0;
     }
     $$21497 = $$21497 + 1 | 0;
    }
    break;
   }
  case 3:
   {
    $415 = $105 + 100.0;
    $416 = +($$31471 | 0);
    $417 = +($spec$select1520 | 0);
    $418 = $14 + 48 | 0;
    $419 = $14 + 56 | 0;
    $420 = $14 + 64 | 0;
    $421 = $14 + 8 | 0;
    $422 = $14 + 16 | 0;
    $423 = $14 + 24 | 0;
    $424 = $14 + 32 | 0;
    $425 = $14 + 40 | 0;
    $426 = ($0 | 0) == 1;
    $$31498 = 0;
    while (1) {
     if (($$31498 | 0) >= ($$31471 | 0)) break L24;
     $432 = $415 + $106 * (+($$31498 | 0) + .5) / $416;
     $$41478 = 0;
     while (1) {
      if (($$41478 | 0) >= ($spec$select1520 | 0)) break;
      $438 = $415 + $106 * (+($$41478 | 0) + .5) / $417;
      $445 = +HEAPF64[$420 >> 3] + ($438 * +HEAPF64[$418 >> 3] + $432 * +HEAPF64[$419 >> 3]);
      if ($445 == 0.0) {
       $2263 = $110;
       label = 306;
       break L19;
      }
      $455 = (+HEAPF64[$422 >> 3] + ($438 * +HEAPF64[$14 >> 3] + $432 * +HEAPF64[$421 >> 3])) / $445;
      HEAPF32[$15 >> 2] = $455;
      $464 = (+HEAPF64[$425 >> 3] + ($438 * +HEAPF64[$423 >> 3] + $432 * +HEAPF64[$424 >> 3])) / $445;
      HEAPF32[$16 >> 2] = $464;
      _arParamIdeal2ObservLTf($8, $455, $464, $15, $16) | 0;
      $465 = +HEAPF32[$15 >> 2];
      if ($426) {
       $$3 = ((~~($465 + 1.0) | 0) / 2 | 0) << 1;
       $$31446 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$3 = ~~($465 + .5);
       $$31446 = ~~(+HEAPF32[$16 >> 2] + .5);
      }
      if (($$3 | 0) > -1) if (($$31446 | 0) < ($6 | 0) & (($$31446 | 0) > -1 & ($$3 | 0) < ($5 | 0))) {
       $486 = (Math_imul($$31446, $5) | 0) + $$3 << 2;
       $494 = ((Math_imul(($$31498 | 0) / ($102 | 0) | 0, $2) | 0) + (($$41478 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $495 = $110 + ($494 << 2) | 0;
       HEAP32[$495 >> 2] = (HEAP32[$495 >> 2] | 0) + (HEAPU8[$4 + $486 >> 0] | 0);
       $503 = $110 + ($494 + 1 << 2) | 0;
       HEAP32[$503 >> 2] = (HEAP32[$503 >> 2] | 0) + (HEAPU8[$4 + ($486 | 1) >> 0] | 0);
       $511 = $110 + ($494 + 2 << 2) | 0;
       HEAP32[$511 >> 2] = (HEAP32[$511 >> 2] | 0) + (HEAPU8[$4 + ($486 | 2) >> 0] | 0);
      }
      $$41478 = $$41478 + 1 | 0;
     }
     $$31498 = $$31498 + 1 | 0;
    }
    break;
   }
  case 4:
   {
    $516 = $105 + 100.0;
    $517 = +($$31471 | 0);
    $518 = +($spec$select1520 | 0);
    $519 = $14 + 48 | 0;
    $520 = $14 + 56 | 0;
    $521 = $14 + 64 | 0;
    $522 = $14 + 8 | 0;
    $523 = $14 + 16 | 0;
    $524 = $14 + 24 | 0;
    $525 = $14 + 32 | 0;
    $526 = $14 + 40 | 0;
    $527 = ($0 | 0) == 1;
    $$41499 = 0;
    while (1) {
     if (($$41499 | 0) >= ($$31471 | 0)) break L24;
     $533 = $516 + $106 * (+($$41499 | 0) + .5) / $517;
     $$51479 = 0;
     while (1) {
      if (($$51479 | 0) >= ($spec$select1520 | 0)) break;
      $539 = $516 + $106 * (+($$51479 | 0) + .5) / $518;
      $546 = +HEAPF64[$521 >> 3] + ($539 * +HEAPF64[$519 >> 3] + $533 * +HEAPF64[$520 >> 3]);
      if ($546 == 0.0) {
       $2263 = $110;
       label = 306;
       break L19;
      }
      $556 = (+HEAPF64[$523 >> 3] + ($539 * +HEAPF64[$14 >> 3] + $533 * +HEAPF64[$522 >> 3])) / $546;
      HEAPF32[$15 >> 2] = $556;
      $565 = (+HEAPF64[$526 >> 3] + ($539 * +HEAPF64[$524 >> 3] + $533 * +HEAPF64[$525 >> 3])) / $546;
      HEAPF32[$16 >> 2] = $565;
      _arParamIdeal2ObservLTf($8, $556, $565, $15, $16) | 0;
      $566 = +HEAPF32[$15 >> 2];
      if ($527) {
       $$4 = ((~~($566 + 1.0) | 0) / 2 | 0) << 1;
       $$41447 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$4 = ~~($566 + .5);
       $$41447 = ~~(+HEAPF32[$16 >> 2] + .5);
      }
      if (($$4 | 0) > -1) if (($$41447 | 0) < ($6 | 0) & (($$41447 | 0) > -1 & ($$4 | 0) < ($5 | 0))) {
       $587 = (Math_imul($$41447, $5) | 0) + $$4 << 2;
       $596 = ((Math_imul(($$41499 | 0) / ($102 | 0) | 0, $2) | 0) + (($$51479 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $597 = $110 + ($596 << 2) | 0;
       HEAP32[$597 >> 2] = (HEAP32[$597 >> 2] | 0) + (HEAPU8[$4 + ($587 | 1) >> 0] | 0);
       $605 = $110 + ($596 + 1 << 2) | 0;
       HEAP32[$605 >> 2] = (HEAP32[$605 >> 2] | 0) + (HEAPU8[$4 + ($587 | 2) >> 0] | 0);
       $613 = $110 + ($596 + 2 << 2) | 0;
       HEAP32[$613 >> 2] = (HEAP32[$613 >> 2] | 0) + (HEAPU8[$4 + ($587 | 3) >> 0] | 0);
      }
      $$51479 = $$51479 + 1 | 0;
     }
     $$41499 = $$41499 + 1 | 0;
    }
    break;
   }
  case 5:
  case 12:
  case 13:
  case 14:
   {
    $618 = $105 + 100.0;
    $619 = +($$31471 | 0);
    $620 = +($spec$select1520 | 0);
    $621 = $14 + 48 | 0;
    $622 = $14 + 56 | 0;
    $623 = $14 + 64 | 0;
    $624 = $14 + 8 | 0;
    $625 = $14 + 16 | 0;
    $626 = $14 + 24 | 0;
    $627 = $14 + 32 | 0;
    $628 = $14 + 40 | 0;
    $629 = ($0 | 0) == 1;
    $$51500 = 0;
    while (1) {
     if (($$51500 | 0) >= ($$31471 | 0)) break L24;
     $635 = $618 + $106 * (+($$51500 | 0) + .5) / $619;
     $$61480 = 0;
     while (1) {
      if (($$61480 | 0) >= ($spec$select1520 | 0)) break;
      $641 = $618 + $106 * (+($$61480 | 0) + .5) / $620;
      $648 = +HEAPF64[$623 >> 3] + ($641 * +HEAPF64[$621 >> 3] + $635 * +HEAPF64[$622 >> 3]);
      if ($648 == 0.0) {
       $2263 = $110;
       label = 306;
       break L19;
      }
      $658 = (+HEAPF64[$625 >> 3] + ($641 * +HEAPF64[$14 >> 3] + $635 * +HEAPF64[$624 >> 3])) / $648;
      HEAPF32[$15 >> 2] = $658;
      $667 = (+HEAPF64[$628 >> 3] + ($641 * +HEAPF64[$626 >> 3] + $635 * +HEAPF64[$627 >> 3])) / $648;
      HEAPF32[$16 >> 2] = $667;
      _arParamIdeal2ObservLTf($8, $658, $667, $15, $16) | 0;
      $668 = +HEAPF32[$15 >> 2];
      if ($629) {
       $$5 = ((~~($668 + 1.0) | 0) / 2 | 0) << 1;
       $$51448 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$5 = ~~($668 + .5);
       $$51448 = ~~(+HEAPF32[$16 >> 2] + .5);
      }
      if (($$5 | 0) > -1) if (($$51448 | 0) < ($6 | 0) & (($$51448 | 0) > -1 & ($$5 | 0) < ($5 | 0))) {
       $689 = $4 + ((Math_imul($$51448, $5) | 0) + $$5) | 0;
       $691 = HEAPU8[$689 >> 0] | 0;
       $696 = ((Math_imul(($$51500 | 0) / ($102 | 0) | 0, $2) | 0) + (($$61480 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $697 = $110 + ($696 << 2) | 0;
       HEAP32[$697 >> 2] = (HEAP32[$697 >> 2] | 0) + $691;
       $701 = $110 + ($696 + 1 << 2) | 0;
       HEAP32[$701 >> 2] = (HEAP32[$701 >> 2] | 0) + $691;
       $705 = $110 + ($696 + 2 << 2) | 0;
       HEAP32[$705 >> 2] = (HEAP32[$705 >> 2] | 0) + $691;
      }
      $$61480 = $$61480 + 1 | 0;
     }
     $$51500 = $$51500 + 1 | 0;
    }
    break;
   }
  case 6:
   {
    $710 = $105 + 100.0;
    $711 = +($$31471 | 0);
    $712 = +($spec$select1520 | 0);
    $713 = $14 + 48 | 0;
    $714 = $14 + 56 | 0;
    $715 = $14 + 64 | 0;
    $716 = $14 + 8 | 0;
    $717 = $14 + 16 | 0;
    $718 = $14 + 24 | 0;
    $719 = $14 + 32 | 0;
    $720 = $14 + 40 | 0;
    $721 = ($0 | 0) == 1;
    $$61501 = 0;
    while (1) {
     if (($$61501 | 0) >= ($$31471 | 0)) break L24;
     $727 = $710 + $106 * (+($$61501 | 0) + .5) / $711;
     $$71481 = 0;
     while (1) {
      if (($$71481 | 0) >= ($spec$select1520 | 0)) break;
      $733 = $710 + $106 * (+($$71481 | 0) + .5) / $712;
      $740 = +HEAPF64[$715 >> 3] + ($733 * +HEAPF64[$713 >> 3] + $727 * +HEAPF64[$714 >> 3]);
      if ($740 == 0.0) {
       $2263 = $110;
       label = 306;
       break L19;
      }
      $750 = (+HEAPF64[$717 >> 3] + ($733 * +HEAPF64[$14 >> 3] + $727 * +HEAPF64[$716 >> 3])) / $740;
      HEAPF32[$15 >> 2] = $750;
      $759 = (+HEAPF64[$720 >> 3] + ($733 * +HEAPF64[$718 >> 3] + $727 * +HEAPF64[$719 >> 3])) / $740;
      HEAPF32[$16 >> 2] = $759;
      _arParamIdeal2ObservLTf($8, $750, $759, $15, $16) | 0;
      $760 = +HEAPF32[$15 >> 2];
      if ($721) {
       $$6 = ((~~($760 + 1.0) | 0) / 2 | 0) << 1;
       $$61449 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$6 = ~~($760 + .5);
       $$61449 = ~~(+HEAPF32[$16 >> 2] + .5);
      }
      if (($$6 | 0) > -1) if (($$61449 | 0) < ($6 | 0) & (($$61449 | 0) > -1 & ($$6 | 0) < ($5 | 0))) {
       $781 = (Math_imul($$61449, $5) | 0) + $$6 << 2;
       $790 = ((Math_imul(($$61501 | 0) / ($102 | 0) | 0, $2) | 0) + (($$71481 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $791 = $110 + ($790 << 2) | 0;
       HEAP32[$791 >> 2] = (HEAP32[$791 >> 2] | 0) + (HEAPU8[$4 + ($781 | 3) >> 0] | 0);
       $799 = $110 + ($790 + 1 << 2) | 0;
       HEAP32[$799 >> 2] = (HEAP32[$799 >> 2] | 0) + (HEAPU8[$4 + ($781 | 2) >> 0] | 0);
       $807 = $110 + ($790 + 2 << 2) | 0;
       HEAP32[$807 >> 2] = (HEAP32[$807 >> 2] | 0) + (HEAPU8[$4 + ($781 | 1) >> 0] | 0);
      }
      $$71481 = $$71481 + 1 | 0;
     }
     $$61501 = $$61501 + 1 | 0;
    }
    break;
   }
  case 7:
   {
    $812 = $105 + 100.0;
    $813 = +($$31471 | 0);
    $814 = +($spec$select1520 | 0);
    $815 = $14 + 48 | 0;
    $816 = $14 + 56 | 0;
    $817 = $14 + 64 | 0;
    $818 = $14 + 8 | 0;
    $819 = $14 + 16 | 0;
    $820 = $14 + 24 | 0;
    $821 = $14 + 32 | 0;
    $822 = $14 + 40 | 0;
    $823 = ($0 | 0) == 1;
    $$71502 = 0;
    while (1) {
     if (($$71502 | 0) >= ($$31471 | 0)) break L24;
     $829 = $812 + $106 * (+($$71502 | 0) + .5) / $813;
     $$81482 = 0;
     while (1) {
      if (($$81482 | 0) >= ($spec$select1520 | 0)) break;
      $835 = $812 + $106 * (+($$81482 | 0) + .5) / $814;
      $842 = +HEAPF64[$817 >> 3] + ($835 * +HEAPF64[$815 >> 3] + $829 * +HEAPF64[$816 >> 3]);
      if ($842 == 0.0) {
       $2263 = $110;
       label = 306;
       break L19;
      }
      $852 = (+HEAPF64[$819 >> 3] + ($835 * +HEAPF64[$14 >> 3] + $829 * +HEAPF64[$818 >> 3])) / $842;
      HEAPF32[$15 >> 2] = $852;
      $861 = (+HEAPF64[$822 >> 3] + ($835 * +HEAPF64[$820 >> 3] + $829 * +HEAPF64[$821 >> 3])) / $842;
      HEAPF32[$16 >> 2] = $861;
      _arParamIdeal2ObservLTf($8, $852, $861, $15, $16) | 0;
      $862 = +HEAPF32[$15 >> 2];
      if ($823) {
       $$7 = ((~~($862 + 1.0) | 0) / 2 | 0) << 1;
       $$71450 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$7 = ~~($862 + .5);
       $$71450 = ~~(+HEAPF32[$16 >> 2] + .5);
      }
      if (($$7 | 0) > -1) if (($$71450 | 0) < ($6 | 0) & (($$71450 | 0) > -1 & ($$7 | 0) < ($5 | 0))) {
       $881 = Math_imul($$71450, $5) | 0;
       $884 = ($$7 & 65534) + $881 << 1;
       $889 = +((HEAPU8[$4 + $884 >> 0] | 0) + -128 | 0);
       $903 = +((HEAPU8[$4 + ($884 + 2) >> 0] | 0) + -128 | 0);
       $904 = +((HEAPU8[$4 + ($881 + $$7 << 1 | 1) >> 0] | 0) + -16 | 0) * 298.0820007324219;
       $908 = ~~($889 * 516.4110107421875 + $904) >> 8;
       $914 = ~~($904 - $889 * 100.29100036621094 - $903 * 208.1199951171875) >> 8;
       $918 = ~~($904 + $903 * 408.5830078125) >> 8;
       $920 = ($908 | 0) > 0 ? $908 : 0;
       $926 = ((Math_imul(($$71502 | 0) / ($102 | 0) | 0, $2) | 0) + (($$81482 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $927 = $110 + ($926 << 2) | 0;
       HEAP32[$927 >> 2] = (($920 | 0) < 255 ? $920 : 255) + (HEAP32[$927 >> 2] | 0);
       $931 = ($914 | 0) > 0 ? $914 : 0;
       $935 = $110 + ($926 + 1 << 2) | 0;
       HEAP32[$935 >> 2] = (($931 | 0) < 255 ? $931 : 255) + (HEAP32[$935 >> 2] | 0);
       $939 = ($918 | 0) > 0 ? $918 : 0;
       $942 = $110 + ($926 + 2 << 2) | 0;
       HEAP32[$942 >> 2] = (($939 | 0) < 255 ? $939 : 255) + (HEAP32[$942 >> 2] | 0);
      }
      $$81482 = $$81482 + 1 | 0;
     }
     $$71502 = $$71502 + 1 | 0;
    }
    break;
   }
  case 8:
   {
    $947 = $105 + 100.0;
    $948 = +($$31471 | 0);
    $949 = +($spec$select1520 | 0);
    $950 = $14 + 48 | 0;
    $951 = $14 + 56 | 0;
    $952 = $14 + 64 | 0;
    $953 = $14 + 8 | 0;
    $954 = $14 + 16 | 0;
    $955 = $14 + 24 | 0;
    $956 = $14 + 32 | 0;
    $957 = $14 + 40 | 0;
    $958 = ($0 | 0) == 1;
    $$81503 = 0;
    while (1) {
     if (($$81503 | 0) >= ($$31471 | 0)) break L24;
     $964 = $947 + $106 * (+($$81503 | 0) + .5) / $948;
     $$91483 = 0;
     while (1) {
      if (($$91483 | 0) >= ($spec$select1520 | 0)) break;
      $970 = $947 + $106 * (+($$91483 | 0) + .5) / $949;
      $977 = +HEAPF64[$952 >> 3] + ($970 * +HEAPF64[$950 >> 3] + $964 * +HEAPF64[$951 >> 3]);
      if ($977 == 0.0) {
       $2263 = $110;
       label = 306;
       break L19;
      }
      $987 = (+HEAPF64[$954 >> 3] + ($970 * +HEAPF64[$14 >> 3] + $964 * +HEAPF64[$953 >> 3])) / $977;
      HEAPF32[$15 >> 2] = $987;
      $996 = (+HEAPF64[$957 >> 3] + ($970 * +HEAPF64[$955 >> 3] + $964 * +HEAPF64[$956 >> 3])) / $977;
      HEAPF32[$16 >> 2] = $996;
      _arParamIdeal2ObservLTf($8, $987, $996, $15, $16) | 0;
      $997 = +HEAPF32[$15 >> 2];
      if ($958) {
       $$8 = ((~~($997 + 1.0) | 0) / 2 | 0) << 1;
       $$81451 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$8 = ~~($997 + .5);
       $$81451 = ~~(+HEAPF32[$16 >> 2] + .5);
      }
      if (($$8 | 0) > -1) if (($$81451 | 0) < ($6 | 0) & (($$81451 | 0) > -1 & ($$8 | 0) < ($5 | 0))) {
       $1016 = Math_imul($$81451, $5) | 0;
       $1026 = ($$8 & 65534) + $1016 << 1;
       $1032 = +((HEAPU8[$4 + ($1026 | 1) >> 0] | 0) + -128 | 0);
       $1038 = +((HEAPU8[$4 + ($1026 + 3) >> 0] | 0) + -128 | 0);
       $1039 = +((HEAPU8[$4 + ($1016 + $$8 << 1) >> 0] | 0) + -16 | 0) * 298.0820007324219;
       $1043 = ~~($1039 + $1032 * 516.4110107421875) >> 8;
       $1049 = ~~($1039 - $1032 * 100.29100036621094 - $1038 * 208.1199951171875) >> 8;
       $1053 = ~~($1039 + $1038 * 408.5830078125) >> 8;
       $1055 = ($1043 | 0) > 0 ? $1043 : 0;
       $1061 = ((Math_imul(($$81503 | 0) / ($102 | 0) | 0, $2) | 0) + (($$91483 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $1062 = $110 + ($1061 << 2) | 0;
       HEAP32[$1062 >> 2] = (($1055 | 0) < 255 ? $1055 : 255) + (HEAP32[$1062 >> 2] | 0);
       $1066 = ($1049 | 0) > 0 ? $1049 : 0;
       $1070 = $110 + ($1061 + 1 << 2) | 0;
       HEAP32[$1070 >> 2] = (($1066 | 0) < 255 ? $1066 : 255) + (HEAP32[$1070 >> 2] | 0);
       $1074 = ($1053 | 0) > 0 ? $1053 : 0;
       $1077 = $110 + ($1061 + 2 << 2) | 0;
       HEAP32[$1077 >> 2] = (($1074 | 0) < 255 ? $1074 : 255) + (HEAP32[$1077 >> 2] | 0);
      }
      $$91483 = $$91483 + 1 | 0;
     }
     $$81503 = $$81503 + 1 | 0;
    }
    break;
   }
  case 9:
   {
    $1082 = $105 + 100.0;
    $1083 = +($$31471 | 0);
    $1084 = +($spec$select1520 | 0);
    $1085 = $14 + 48 | 0;
    $1086 = $14 + 56 | 0;
    $1087 = $14 + 64 | 0;
    $1088 = $14 + 8 | 0;
    $1089 = $14 + 16 | 0;
    $1090 = $14 + 24 | 0;
    $1091 = $14 + 32 | 0;
    $1092 = $14 + 40 | 0;
    $1093 = ($0 | 0) == 1;
    $$91504 = 0;
    while (1) {
     if (($$91504 | 0) >= ($$31471 | 0)) break L24;
     $1099 = $1082 + $106 * (+($$91504 | 0) + .5) / $1083;
     $$101484 = 0;
     while (1) {
      if (($$101484 | 0) >= ($spec$select1520 | 0)) break;
      $1105 = $1082 + $106 * (+($$101484 | 0) + .5) / $1084;
      $1112 = +HEAPF64[$1087 >> 3] + ($1105 * +HEAPF64[$1085 >> 3] + $1099 * +HEAPF64[$1086 >> 3]);
      if ($1112 == 0.0) {
       $2263 = $110;
       label = 306;
       break L19;
      }
      $1122 = (+HEAPF64[$1089 >> 3] + ($1105 * +HEAPF64[$14 >> 3] + $1099 * +HEAPF64[$1088 >> 3])) / $1112;
      HEAPF32[$15 >> 2] = $1122;
      $1131 = (+HEAPF64[$1092 >> 3] + ($1105 * +HEAPF64[$1090 >> 3] + $1099 * +HEAPF64[$1091 >> 3])) / $1112;
      HEAPF32[$16 >> 2] = $1131;
      _arParamIdeal2ObservLTf($8, $1122, $1131, $15, $16) | 0;
      $1132 = +HEAPF32[$15 >> 2];
      if ($1093) {
       $$9 = ((~~($1132 + 1.0) | 0) / 2 | 0) << 1;
       $$91452 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$9 = ~~($1132 + .5);
       $$91452 = ~~(+HEAPF32[$16 >> 2] + .5);
      }
      if (($$9 | 0) > -1) if (($$91452 | 0) < ($6 | 0) & (($$91452 | 0) > -1 & ($$9 | 0) < ($5 | 0))) {
       $1153 = (Math_imul($$91452, $5) | 0) + $$9 << 1;
       $1156 = HEAP8[$4 + ($1153 | 1) >> 0] | 0;
       $1164 = ((Math_imul(($$91504 | 0) / ($102 | 0) | 0, $2) | 0) + (($$101484 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $1165 = $110 + ($1164 << 2) | 0;
       HEAP32[$1165 >> 2] = (HEAP32[$1165 >> 2] | 0) + (($1156 << 3 & 255 | 4) & 255);
       $1169 = HEAP8[$4 + $1153 >> 0] | 0;
       $1178 = $110 + ($1164 + 1 << 2) | 0;
       HEAP32[$1178 >> 2] = (($1156 & -32 & 255) >>> 3 | $1169 << 5 & 255 | 2) + (HEAP32[$1178 >> 2] | 0);
       $1185 = $110 + ($1164 + 2 << 2) | 0;
       HEAP32[$1185 >> 2] = (HEAP32[$1185 >> 2] | 0) + (($1169 & -8 | 4) & 255);
      }
      $$101484 = $$101484 + 1 | 0;
     }
     $$91504 = $$91504 + 1 | 0;
    }
    break;
   }
  case 10:
   {
    $1190 = $105 + 100.0;
    $1191 = +($$31471 | 0);
    $1192 = +($spec$select1520 | 0);
    $1193 = $14 + 48 | 0;
    $1194 = $14 + 56 | 0;
    $1195 = $14 + 64 | 0;
    $1196 = $14 + 8 | 0;
    $1197 = $14 + 16 | 0;
    $1198 = $14 + 24 | 0;
    $1199 = $14 + 32 | 0;
    $1200 = $14 + 40 | 0;
    $1201 = ($0 | 0) == 1;
    $$101505 = 0;
    while (1) {
     if (($$101505 | 0) >= ($$31471 | 0)) break L24;
     $1207 = $1190 + $106 * (+($$101505 | 0) + .5) / $1191;
     $$111485 = 0;
     while (1) {
      if (($$111485 | 0) >= ($spec$select1520 | 0)) break;
      $1213 = $1190 + $106 * (+($$111485 | 0) + .5) / $1192;
      $1220 = +HEAPF64[$1195 >> 3] + ($1213 * +HEAPF64[$1193 >> 3] + $1207 * +HEAPF64[$1194 >> 3]);
      if ($1220 == 0.0) {
       $2263 = $110;
       label = 306;
       break L19;
      }
      $1230 = (+HEAPF64[$1197 >> 3] + ($1213 * +HEAPF64[$14 >> 3] + $1207 * +HEAPF64[$1196 >> 3])) / $1220;
      HEAPF32[$15 >> 2] = $1230;
      $1239 = (+HEAPF64[$1200 >> 3] + ($1213 * +HEAPF64[$1198 >> 3] + $1207 * +HEAPF64[$1199 >> 3])) / $1220;
      HEAPF32[$16 >> 2] = $1239;
      _arParamIdeal2ObservLTf($8, $1230, $1239, $15, $16) | 0;
      $1240 = +HEAPF32[$15 >> 2];
      if ($1201) {
       $$10 = ((~~($1240 + 1.0) | 0) / 2 | 0) << 1;
       $$101453 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$10 = ~~($1240 + .5);
       $$101453 = ~~(+HEAPF32[$16 >> 2] + .5);
      }
      if (($$10 | 0) > -1) if (($$101453 | 0) < ($6 | 0) & (($$101453 | 0) > -1 & ($$10 | 0) < ($5 | 0))) {
       $1261 = (Math_imul($$101453, $5) | 0) + $$10 << 1;
       $1264 = HEAP8[$4 + ($1261 | 1) >> 0] | 0;
       $1272 = ((Math_imul(($$101505 | 0) / ($102 | 0) | 0, $2) | 0) + (($$111485 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $1273 = $110 + ($1272 << 2) | 0;
       HEAP32[$1273 >> 2] = (HEAP32[$1273 >> 2] | 0) + (($1264 << 2 & 255 | 4) & 255);
       $1277 = HEAP8[$4 + $1261 >> 0] | 0;
       $1286 = $110 + ($1272 + 1 << 2) | 0;
       HEAP32[$1286 >> 2] = (($1264 & -64 & 255) >>> 3 | $1277 << 5 & 255 | 4) + (HEAP32[$1286 >> 2] | 0);
       $1293 = $110 + ($1272 + 2 << 2) | 0;
       HEAP32[$1293 >> 2] = (HEAP32[$1293 >> 2] | 0) + (($1277 & -8 | 4) & 255);
      }
      $$111485 = $$111485 + 1 | 0;
     }
     $$101505 = $$101505 + 1 | 0;
    }
    break;
   }
  case 11:
   {
    $1298 = $105 + 100.0;
    $1299 = +($$31471 | 0);
    $1300 = +($spec$select1520 | 0);
    $1301 = $14 + 48 | 0;
    $1302 = $14 + 56 | 0;
    $1303 = $14 + 64 | 0;
    $1304 = $14 + 8 | 0;
    $1305 = $14 + 16 | 0;
    $1306 = $14 + 24 | 0;
    $1307 = $14 + 32 | 0;
    $1308 = $14 + 40 | 0;
    $1309 = ($0 | 0) == 1;
    $$111506 = 0;
    while (1) {
     if (($$111506 | 0) >= ($$31471 | 0)) break L24;
     $1315 = $1298 + $106 * (+($$111506 | 0) + .5) / $1299;
     $$121486 = 0;
     while (1) {
      if (($$121486 | 0) >= ($spec$select1520 | 0)) break;
      $1321 = $1298 + $106 * (+($$121486 | 0) + .5) / $1300;
      $1328 = +HEAPF64[$1303 >> 3] + ($1321 * +HEAPF64[$1301 >> 3] + $1315 * +HEAPF64[$1302 >> 3]);
      if ($1328 == 0.0) {
       $2263 = $110;
       label = 306;
       break L19;
      }
      $1338 = (+HEAPF64[$1305 >> 3] + ($1321 * +HEAPF64[$14 >> 3] + $1315 * +HEAPF64[$1304 >> 3])) / $1328;
      HEAPF32[$15 >> 2] = $1338;
      $1347 = (+HEAPF64[$1308 >> 3] + ($1321 * +HEAPF64[$1306 >> 3] + $1315 * +HEAPF64[$1307 >> 3])) / $1328;
      HEAPF32[$16 >> 2] = $1347;
      _arParamIdeal2ObservLTf($8, $1338, $1347, $15, $16) | 0;
      $1348 = +HEAPF32[$15 >> 2];
      if ($1309) {
       $$11 = ((~~($1348 + 1.0) | 0) / 2 | 0) << 1;
       $$111454 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$11 = ~~($1348 + .5);
       $$111454 = ~~(+HEAPF32[$16 >> 2] + .5);
      }
      if (($$11 | 0) > -1) if (($$111454 | 0) < ($6 | 0) & (($$111454 | 0) > -1 & ($$11 | 0) < ($5 | 0))) {
       $1369 = (Math_imul($$111454, $5) | 0) + $$11 << 1;
       $1380 = ((Math_imul(($$111506 | 0) / ($102 | 0) | 0, $2) | 0) + (($$121486 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $1381 = $110 + ($1380 << 2) | 0;
       HEAP32[$1381 >> 2] = (HEAP32[$1381 >> 2] | 0) + ((HEAP8[$4 + ($1369 | 1) >> 0] & -16 | 8) & 255);
       $1385 = HEAP8[$4 + $1369 >> 0] | 0;
       $1390 = $110 + ($1380 + 1 << 2) | 0;
       HEAP32[$1390 >> 2] = (HEAP32[$1390 >> 2] | 0) + (($1385 << 4 & 255 | 8) & 255);
       $1397 = $110 + ($1380 + 2 << 2) | 0;
       HEAP32[$1397 >> 2] = (HEAP32[$1397 >> 2] | 0) + (($1385 & -16 | 8) & 255);
      }
      $$121486 = $$121486 + 1 | 0;
     }
     $$111506 = $$111506 + 1 | 0;
    }
    break;
   }
  default:
   {
    _arLog(0, 3, 4174, $vararg_buffer1);
    $2263 = $110;
    label = 306;
    break L19;
   }
  } while (0);
  $1402 = Math_imul($102, $101) | 0;
  $$131487 = 0;
  while (1) {
   if (($$131487 | 0) == ($109 | 0)) break;
   HEAP8[$11 + $$131487 >> 0] = ((HEAP32[$110 + ($$131487 << 2) >> 2] | 0) >>> 0) / ($1402 >>> 0) | 0;
   $$131487 = $$131487 + 1 | 0;
  }
  _free($110);
  $$0 = 0;
 } else {
  $1409 = _calloc($108, 4) | 0;
  if (!$1409) {
   _arLog(0, 3, 5051, $vararg_buffer3);
   _exit(1);
  }
  L239 : do if ($7 >>> 0 < 2) {
   $1412 = $105 + 100.0;
   $1413 = +($$31471 | 0);
   $1414 = +($spec$select1520 | 0);
   $1415 = $14 + 48 | 0;
   $1416 = $14 + 56 | 0;
   $1417 = $14 + 64 | 0;
   $1418 = $14 + 8 | 0;
   $1419 = $14 + 16 | 0;
   $1420 = $14 + 24 | 0;
   $1421 = $14 + 32 | 0;
   $1422 = $14 + 40 | 0;
   $1423 = ($0 | 0) == 1;
   $$121507 = 0;
   while (1) {
    if (($$121507 | 0) >= ($$31471 | 0)) break L239;
    $1429 = $1412 + $106 * (+($$121507 | 0) + .5) / $1413;
    $$141488 = 0;
    while (1) {
     if (($$141488 | 0) >= ($spec$select1520 | 0)) break;
     $1435 = $1412 + $106 * (+($$141488 | 0) + .5) / $1414;
     $1442 = +HEAPF64[$1417 >> 3] + ($1435 * +HEAPF64[$1415 >> 3] + $1429 * +HEAPF64[$1416 >> 3]);
     if ($1442 == 0.0) {
      $2263 = $1409;
      label = 306;
      break L19;
     }
     $1452 = (+HEAPF64[$1419 >> 3] + ($1435 * +HEAPF64[$14 >> 3] + $1429 * +HEAPF64[$1418 >> 3])) / $1442;
     HEAPF32[$15 >> 2] = $1452;
     $1461 = (+HEAPF64[$1422 >> 3] + ($1435 * +HEAPF64[$1420 >> 3] + $1429 * +HEAPF64[$1421 >> 3])) / $1442;
     HEAPF32[$16 >> 2] = $1461;
     _arParamIdeal2ObservLTf($8, $1452, $1461, $15, $16) | 0;
     $1462 = +HEAPF32[$15 >> 2];
     if ($1423) {
      $$12 = ((~~($1462 + 1.0) | 0) / 2 | 0) << 1;
      $$121455 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
     } else {
      $$12 = ~~($1462 + .5);
      $$121455 = ~~(+HEAPF32[$16 >> 2] + .5);
     }
     if (($$12 | 0) > -1) if (($$121455 | 0) < ($6 | 0) & (($$121455 | 0) > -1 & ($$12 | 0) < ($5 | 0))) {
      $1483 = ((Math_imul($$121455, $5) | 0) + $$12 | 0) * 3 | 0;
      $1502 = $1409 + ((Math_imul(($$121507 | 0) / ($102 | 0) | 0, $2) | 0) + (($$141488 | 0) / ($101 | 0) | 0) << 2) | 0;
      HEAP32[$1502 >> 2] = (HEAP32[$1502 >> 2] | 0) + ((((HEAPU8[$4 + ($1483 + 1) >> 0] | 0) + (HEAPU8[$4 + $1483 >> 0] | 0) + (HEAPU8[$4 + ($1483 + 2) >> 0] | 0) | 0) >>> 0) / 3 | 0);
     }
     $$141488 = $$141488 + 1 | 0;
    }
    $$121507 = $$121507 + 1 | 0;
   }
  } else {
   if (($7 | 1 | 0) == 3) {
    $1509 = $105 + 100.0;
    $1510 = +($$31471 | 0);
    $1511 = +($spec$select1520 | 0);
    $1512 = $14 + 48 | 0;
    $1513 = $14 + 56 | 0;
    $1514 = $14 + 64 | 0;
    $1515 = $14 + 8 | 0;
    $1516 = $14 + 16 | 0;
    $1517 = $14 + 24 | 0;
    $1518 = $14 + 32 | 0;
    $1519 = $14 + 40 | 0;
    $1520 = ($0 | 0) == 1;
    $$131508 = 0;
    while (1) {
     if (($$131508 | 0) >= ($$31471 | 0)) break L239;
     $1526 = $1509 + $106 * (+($$131508 | 0) + .5) / $1510;
     $$151489 = 0;
     while (1) {
      if (($$151489 | 0) >= ($spec$select1520 | 0)) break;
      $1532 = $1509 + $106 * (+($$151489 | 0) + .5) / $1511;
      $1539 = +HEAPF64[$1514 >> 3] + ($1532 * +HEAPF64[$1512 >> 3] + $1526 * +HEAPF64[$1513 >> 3]);
      if ($1539 == 0.0) {
       $2263 = $1409;
       label = 306;
       break L19;
      }
      $1549 = (+HEAPF64[$1516 >> 3] + ($1532 * +HEAPF64[$14 >> 3] + $1526 * +HEAPF64[$1515 >> 3])) / $1539;
      HEAPF32[$15 >> 2] = $1549;
      $1558 = (+HEAPF64[$1519 >> 3] + ($1532 * +HEAPF64[$1517 >> 3] + $1526 * +HEAPF64[$1518 >> 3])) / $1539;
      HEAPF32[$16 >> 2] = $1558;
      _arParamIdeal2ObservLTf($8, $1549, $1558, $15, $16) | 0;
      $1559 = +HEAPF32[$15 >> 2];
      if ($1520) {
       $$13 = ((~~($1559 + 1.0) | 0) / 2 | 0) << 1;
       $$131456 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$13 = ~~($1559 + .5);
       $$131456 = ~~(+HEAPF32[$16 >> 2] + .5);
      }
      if (($$13 | 0) > -1) if (($$131456 | 0) < ($6 | 0) & (($$131456 | 0) > -1 & ($$13 | 0) < ($5 | 0))) {
       $1580 = (Math_imul($$131456, $5) | 0) + $$13 << 2;
       $1599 = $1409 + ((Math_imul(($$131508 | 0) / ($102 | 0) | 0, $2) | 0) + (($$151489 | 0) / ($101 | 0) | 0) << 2) | 0;
       HEAP32[$1599 >> 2] = (HEAP32[$1599 >> 2] | 0) + ((((HEAPU8[$4 + ($1580 | 1) >> 0] | 0) + (HEAPU8[$4 + $1580 >> 0] | 0) + (HEAPU8[$4 + ($1580 | 2) >> 0] | 0) | 0) >>> 0) / 3 | 0);
      }
      $$151489 = $$151489 + 1 | 0;
     }
     $$131508 = $$131508 + 1 | 0;
    }
   }
   if (($7 | 2 | 0) == 6) {
    $1606 = $105 + 100.0;
    $1607 = +($$31471 | 0);
    $1608 = +($spec$select1520 | 0);
    $1609 = $14 + 48 | 0;
    $1610 = $14 + 56 | 0;
    $1611 = $14 + 64 | 0;
    $1612 = $14 + 8 | 0;
    $1613 = $14 + 16 | 0;
    $1614 = $14 + 24 | 0;
    $1615 = $14 + 32 | 0;
    $1616 = $14 + 40 | 0;
    $1617 = ($0 | 0) == 1;
    $$141509 = 0;
    while (1) {
     if (($$141509 | 0) >= ($$31471 | 0)) break L239;
     $1623 = $1606 + $106 * (+($$141509 | 0) + .5) / $1607;
     $$161490 = 0;
     while (1) {
      if (($$161490 | 0) >= ($spec$select1520 | 0)) break;
      $1629 = $1606 + $106 * (+($$161490 | 0) + .5) / $1608;
      $1636 = +HEAPF64[$1611 >> 3] + ($1629 * +HEAPF64[$1609 >> 3] + $1623 * +HEAPF64[$1610 >> 3]);
      if ($1636 == 0.0) {
       $2263 = $1409;
       label = 306;
       break L19;
      }
      $1646 = (+HEAPF64[$1613 >> 3] + ($1629 * +HEAPF64[$14 >> 3] + $1623 * +HEAPF64[$1612 >> 3])) / $1636;
      HEAPF32[$15 >> 2] = $1646;
      $1655 = (+HEAPF64[$1616 >> 3] + ($1629 * +HEAPF64[$1614 >> 3] + $1623 * +HEAPF64[$1615 >> 3])) / $1636;
      HEAPF32[$16 >> 2] = $1655;
      _arParamIdeal2ObservLTf($8, $1646, $1655, $15, $16) | 0;
      $1656 = +HEAPF32[$15 >> 2];
      if ($1617) {
       $$14 = ((~~($1656 + 1.0) | 0) / 2 | 0) << 1;
       $$141457 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$14 = ~~($1656 + .5);
       $$141457 = ~~(+HEAPF32[$16 >> 2] + .5);
      }
      if (($$14 | 0) > -1) if (($$141457 | 0) < ($6 | 0) & (($$141457 | 0) > -1 & ($$14 | 0) < ($5 | 0))) {
       $1677 = (Math_imul($$141457, $5) | 0) + $$14 << 2;
       $1697 = $1409 + ((Math_imul(($$141509 | 0) / ($102 | 0) | 0, $2) | 0) + (($$161490 | 0) / ($101 | 0) | 0) << 2) | 0;
       HEAP32[$1697 >> 2] = (HEAP32[$1697 >> 2] | 0) + ((((HEAPU8[$4 + ($1677 | 2) >> 0] | 0) + (HEAPU8[$4 + ($1677 | 1) >> 0] | 0) + (HEAPU8[$4 + ($1677 | 3) >> 0] | 0) | 0) >>> 0) / 3 | 0);
      }
      $$161490 = $$161490 + 1 | 0;
     }
     $$141509 = $$141509 + 1 | 0;
    }
   }
   switch ($7 | 0) {
   case 5:
   case 12:
   case 13:
   case 14:
    {
     $1702 = $105 + 100.0;
     $1703 = +($$31471 | 0);
     $1704 = +($spec$select1520 | 0);
     $1705 = $14 + 48 | 0;
     $1706 = $14 + 56 | 0;
     $1707 = $14 + 64 | 0;
     $1708 = $14 + 8 | 0;
     $1709 = $14 + 16 | 0;
     $1710 = $14 + 24 | 0;
     $1711 = $14 + 32 | 0;
     $1712 = $14 + 40 | 0;
     $1713 = ($0 | 0) == 1;
     $$151510 = 0;
     while (1) {
      if (($$151510 | 0) >= ($$31471 | 0)) break L239;
      $1719 = $1702 + $106 * (+($$151510 | 0) + .5) / $1703;
      $$171491 = 0;
      while (1) {
       if (($$171491 | 0) >= ($spec$select1520 | 0)) break;
       $1725 = $1702 + $106 * (+($$171491 | 0) + .5) / $1704;
       $1732 = +HEAPF64[$1707 >> 3] + ($1725 * +HEAPF64[$1705 >> 3] + $1719 * +HEAPF64[$1706 >> 3]);
       if ($1732 == 0.0) {
        $2263 = $1409;
        label = 306;
        break L19;
       }
       $1742 = (+HEAPF64[$1709 >> 3] + ($1725 * +HEAPF64[$14 >> 3] + $1719 * +HEAPF64[$1708 >> 3])) / $1732;
       HEAPF32[$15 >> 2] = $1742;
       $1751 = (+HEAPF64[$1712 >> 3] + ($1725 * +HEAPF64[$1710 >> 3] + $1719 * +HEAPF64[$1711 >> 3])) / $1732;
       HEAPF32[$16 >> 2] = $1751;
       _arParamIdeal2ObservLTf($8, $1742, $1751, $15, $16) | 0;
       $1752 = +HEAPF32[$15 >> 2];
       if ($1713) {
        $$15 = ((~~($1752 + 1.0) | 0) / 2 | 0) << 1;
        $$151458 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $$15 = ~~($1752 + .5);
        $$151458 = ~~(+HEAPF32[$16 >> 2] + .5);
       }
       if (($$15 | 0) > -1) if (($$151458 | 0) < ($6 | 0) & (($$151458 | 0) > -1 & ($$15 | 0) < ($5 | 0))) {
        $1773 = $4 + ((Math_imul($$151458, $5) | 0) + $$15) | 0;
        $1780 = $1409 + ((Math_imul(($$151510 | 0) / ($102 | 0) | 0, $2) | 0) + (($$171491 | 0) / ($101 | 0) | 0) << 2) | 0;
        HEAP32[$1780 >> 2] = (HEAP32[$1780 >> 2] | 0) + (HEAPU8[$1773 >> 0] | 0);
       }
       $$171491 = $$171491 + 1 | 0;
      }
      $$151510 = $$151510 + 1 | 0;
     }
     break;
    }
   case 7:
    {
     $1785 = $105 + 100.0;
     $1786 = +($$31471 | 0);
     $1787 = +($spec$select1520 | 0);
     $1788 = $14 + 48 | 0;
     $1789 = $14 + 56 | 0;
     $1790 = $14 + 64 | 0;
     $1791 = $14 + 8 | 0;
     $1792 = $14 + 16 | 0;
     $1793 = $14 + 24 | 0;
     $1794 = $14 + 32 | 0;
     $1795 = $14 + 40 | 0;
     $1796 = ($0 | 0) == 1;
     $$161511 = 0;
     while (1) {
      if (($$161511 | 0) >= ($$31471 | 0)) break L239;
      $1802 = $1785 + $106 * (+($$161511 | 0) + .5) / $1786;
      $$181492 = 0;
      while (1) {
       if (($$181492 | 0) >= ($spec$select1520 | 0)) break;
       $1808 = $1785 + $106 * (+($$181492 | 0) + .5) / $1787;
       $1815 = +HEAPF64[$1790 >> 3] + ($1808 * +HEAPF64[$1788 >> 3] + $1802 * +HEAPF64[$1789 >> 3]);
       if ($1815 == 0.0) {
        $2263 = $1409;
        label = 306;
        break L19;
       }
       $1825 = (+HEAPF64[$1792 >> 3] + ($1808 * +HEAPF64[$14 >> 3] + $1802 * +HEAPF64[$1791 >> 3])) / $1815;
       HEAPF32[$15 >> 2] = $1825;
       $1834 = (+HEAPF64[$1795 >> 3] + ($1808 * +HEAPF64[$1793 >> 3] + $1802 * +HEAPF64[$1794 >> 3])) / $1815;
       HEAPF32[$16 >> 2] = $1834;
       _arParamIdeal2ObservLTf($8, $1825, $1834, $15, $16) | 0;
       $1835 = +HEAPF32[$15 >> 2];
       if ($1796) {
        $$16 = ((~~($1835 + 1.0) | 0) / 2 | 0) << 1;
        $$161459 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $$16 = ~~($1835 + .5);
        $$161459 = ~~(+HEAPF32[$16 >> 2] + .5);
       }
       if (($$16 | 0) > -1) if (($$161459 | 0) < ($6 | 0) & (($$161459 | 0) > -1 & ($$16 | 0) < ($5 | 0))) {
        $1858 = $4 + ((Math_imul($$161459, $5) | 0) + $$16 << 1 | 1) | 0;
        $1865 = $1409 + ((Math_imul(($$161511 | 0) / ($102 | 0) | 0, $2) | 0) + (($$181492 | 0) / ($101 | 0) | 0) << 2) | 0;
        HEAP32[$1865 >> 2] = (HEAP32[$1865 >> 2] | 0) + (HEAPU8[$1858 >> 0] | 0);
       }
       $$181492 = $$181492 + 1 | 0;
      }
      $$161511 = $$161511 + 1 | 0;
     }
     break;
    }
   case 8:
    {
     $1870 = $105 + 100.0;
     $1871 = +($$31471 | 0);
     $1872 = +($spec$select1520 | 0);
     $1873 = $14 + 48 | 0;
     $1874 = $14 + 56 | 0;
     $1875 = $14 + 64 | 0;
     $1876 = $14 + 8 | 0;
     $1877 = $14 + 16 | 0;
     $1878 = $14 + 24 | 0;
     $1879 = $14 + 32 | 0;
     $1880 = $14 + 40 | 0;
     $1881 = ($0 | 0) == 1;
     $$171512 = 0;
     while (1) {
      if (($$171512 | 0) >= ($$31471 | 0)) break L239;
      $1887 = $1870 + $106 * (+($$171512 | 0) + .5) / $1871;
      $$191493 = 0;
      while (1) {
       if (($$191493 | 0) >= ($spec$select1520 | 0)) break;
       $1893 = $1870 + $106 * (+($$191493 | 0) + .5) / $1872;
       $1900 = +HEAPF64[$1875 >> 3] + ($1893 * +HEAPF64[$1873 >> 3] + $1887 * +HEAPF64[$1874 >> 3]);
       if ($1900 == 0.0) {
        $2263 = $1409;
        label = 306;
        break L19;
       }
       $1910 = (+HEAPF64[$1877 >> 3] + ($1893 * +HEAPF64[$14 >> 3] + $1887 * +HEAPF64[$1876 >> 3])) / $1900;
       HEAPF32[$15 >> 2] = $1910;
       $1919 = (+HEAPF64[$1880 >> 3] + ($1893 * +HEAPF64[$1878 >> 3] + $1887 * +HEAPF64[$1879 >> 3])) / $1900;
       HEAPF32[$16 >> 2] = $1919;
       _arParamIdeal2ObservLTf($8, $1910, $1919, $15, $16) | 0;
       $1920 = +HEAPF32[$15 >> 2];
       if ($1881) {
        $$17 = ((~~($1920 + 1.0) | 0) / 2 | 0) << 1;
        $$171460 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $$17 = ~~($1920 + .5);
        $$171460 = ~~(+HEAPF32[$16 >> 2] + .5);
       }
       if (($$17 | 0) > -1) if (($$171460 | 0) < ($6 | 0) & (($$171460 | 0) > -1 & ($$17 | 0) < ($5 | 0))) {
        $1942 = $4 + ((Math_imul($$171460, $5) | 0) + $$17 << 1) | 0;
        $1949 = $1409 + ((Math_imul(($$171512 | 0) / ($102 | 0) | 0, $2) | 0) + (($$191493 | 0) / ($101 | 0) | 0) << 2) | 0;
        HEAP32[$1949 >> 2] = (HEAP32[$1949 >> 2] | 0) + (HEAPU8[$1942 >> 0] | 0);
       }
       $$191493 = $$191493 + 1 | 0;
      }
      $$171512 = $$171512 + 1 | 0;
     }
     break;
    }
   case 9:
    {
     $1954 = $105 + 100.0;
     $1955 = +($$31471 | 0);
     $1956 = +($spec$select1520 | 0);
     $1957 = $14 + 48 | 0;
     $1958 = $14 + 56 | 0;
     $1959 = $14 + 64 | 0;
     $1960 = $14 + 8 | 0;
     $1961 = $14 + 16 | 0;
     $1962 = $14 + 24 | 0;
     $1963 = $14 + 32 | 0;
     $1964 = $14 + 40 | 0;
     $1965 = ($0 | 0) == 1;
     $$181513 = 0;
     while (1) {
      if (($$181513 | 0) >= ($$31471 | 0)) break L239;
      $1971 = $1954 + $106 * (+($$181513 | 0) + .5) / $1955;
      $$201494 = 0;
      while (1) {
       if (($$201494 | 0) >= ($spec$select1520 | 0)) break;
       $1977 = $1954 + $106 * (+($$201494 | 0) + .5) / $1956;
       $1984 = +HEAPF64[$1959 >> 3] + ($1977 * +HEAPF64[$1957 >> 3] + $1971 * +HEAPF64[$1958 >> 3]);
       if ($1984 == 0.0) {
        $2263 = $1409;
        label = 306;
        break L19;
       }
       $1994 = (+HEAPF64[$1961 >> 3] + ($1977 * +HEAPF64[$14 >> 3] + $1971 * +HEAPF64[$1960 >> 3])) / $1984;
       HEAPF32[$15 >> 2] = $1994;
       $2003 = (+HEAPF64[$1964 >> 3] + ($1977 * +HEAPF64[$1962 >> 3] + $1971 * +HEAPF64[$1963 >> 3])) / $1984;
       HEAPF32[$16 >> 2] = $2003;
       _arParamIdeal2ObservLTf($8, $1994, $2003, $15, $16) | 0;
       $2004 = +HEAPF32[$15 >> 2];
       if ($1965) {
        $$18 = ((~~($2004 + 1.0) | 0) / 2 | 0) << 1;
        $$181461 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $$18 = ~~($2004 + .5);
        $$181461 = ~~(+HEAPF32[$16 >> 2] + .5);
       }
       if (($$18 | 0) > -1) if (($$181461 | 0) < ($6 | 0) & (($$181461 | 0) > -1 & ($$18 | 0) < ($5 | 0))) {
        $2025 = (Math_imul($$181461, $5) | 0) + $$18 << 1;
        $2028 = HEAPU8[$4 + $2025 >> 0] | 0;
        $2036 = HEAPU8[$4 + ($2025 | 1) >> 0] | 0;
        $2051 = $1409 + ((Math_imul(($$181513 | 0) / ($102 | 0) | 0, $2) | 0) + (($$201494 | 0) / ($101 | 0) | 0) << 2) | 0;
        HEAP32[$2051 >> 2] = (((($2028 << 5 & 224 | $2036 >>> 3 & 28 | 2) + ($2028 & 248 | 4) + ($2036 << 3 & 248 | 4) | 0) >>> 0) / 3 | 0) + (HEAP32[$2051 >> 2] | 0);
       }
       $$201494 = $$201494 + 1 | 0;
      }
      $$181513 = $$181513 + 1 | 0;
     }
     break;
    }
   case 10:
    {
     $2056 = $105 + 100.0;
     $2057 = +($$31471 | 0);
     $2058 = +($spec$select1520 | 0);
     $2059 = $14 + 48 | 0;
     $2060 = $14 + 56 | 0;
     $2061 = $14 + 64 | 0;
     $2062 = $14 + 8 | 0;
     $2063 = $14 + 16 | 0;
     $2064 = $14 + 24 | 0;
     $2065 = $14 + 32 | 0;
     $2066 = $14 + 40 | 0;
     $2067 = ($0 | 0) == 1;
     $$191514 = 0;
     while (1) {
      if (($$191514 | 0) >= ($$31471 | 0)) break L239;
      $2073 = $2056 + $106 * (+($$191514 | 0) + .5) / $2057;
      $$21 = 0;
      while (1) {
       if (($$21 | 0) >= ($spec$select1520 | 0)) break;
       $2079 = $2056 + $106 * (+($$21 | 0) + .5) / $2058;
       $2086 = +HEAPF64[$2061 >> 3] + ($2079 * +HEAPF64[$2059 >> 3] + $2073 * +HEAPF64[$2060 >> 3]);
       if ($2086 == 0.0) {
        $2263 = $1409;
        label = 306;
        break L19;
       }
       $2096 = (+HEAPF64[$2063 >> 3] + ($2079 * +HEAPF64[$14 >> 3] + $2073 * +HEAPF64[$2062 >> 3])) / $2086;
       HEAPF32[$15 >> 2] = $2096;
       $2105 = (+HEAPF64[$2066 >> 3] + ($2079 * +HEAPF64[$2064 >> 3] + $2073 * +HEAPF64[$2065 >> 3])) / $2086;
       HEAPF32[$16 >> 2] = $2105;
       _arParamIdeal2ObservLTf($8, $2096, $2105, $15, $16) | 0;
       $2106 = +HEAPF32[$15 >> 2];
       if ($2067) {
        $$19 = ((~~($2106 + 1.0) | 0) / 2 | 0) << 1;
        $$191462 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $$19 = ~~($2106 + .5);
        $$191462 = ~~(+HEAPF32[$16 >> 2] + .5);
       }
       if (($$19 | 0) > -1) if (($$191462 | 0) < ($6 | 0) & (($$191462 | 0) > -1 & ($$19 | 0) < ($5 | 0))) {
        $2127 = (Math_imul($$191462, $5) | 0) + $$19 << 1;
        $2130 = HEAPU8[$4 + $2127 >> 0] | 0;
        $2138 = HEAPU8[$4 + ($2127 | 1) >> 0] | 0;
        $2153 = $1409 + ((Math_imul(($$191514 | 0) / ($102 | 0) | 0, $2) | 0) + (($$21 | 0) / ($101 | 0) | 0) << 2) | 0;
        HEAP32[$2153 >> 2] = (((($2130 << 5 & 224 | $2138 >>> 3 & 24 | 4) + ($2130 & 248 | 4) + ($2138 << 2 & 248 | 4) | 0) >>> 0) / 3 | 0) + (HEAP32[$2153 >> 2] | 0);
       }
       $$21 = $$21 + 1 | 0;
      }
      $$191514 = $$191514 + 1 | 0;
     }
     break;
    }
   case 11:
    {
     $2158 = $105 + 100.0;
     $2159 = +($$31471 | 0);
     $2160 = +($spec$select1520 | 0);
     $2161 = $14 + 48 | 0;
     $2162 = $14 + 56 | 0;
     $2163 = $14 + 64 | 0;
     $2164 = $14 + 8 | 0;
     $2165 = $14 + 16 | 0;
     $2166 = $14 + 24 | 0;
     $2167 = $14 + 32 | 0;
     $2168 = $14 + 40 | 0;
     $2169 = ($0 | 0) == 1;
     $$201515 = 0;
     while (1) {
      if (($$201515 | 0) >= ($$31471 | 0)) break L239;
      $2175 = $2158 + $106 * (+($$201515 | 0) + .5) / $2159;
      $$22 = 0;
      while (1) {
       if (($$22 | 0) >= ($spec$select1520 | 0)) break;
       $2181 = $2158 + $106 * (+($$22 | 0) + .5) / $2160;
       $2188 = +HEAPF64[$2163 >> 3] + ($2181 * +HEAPF64[$2161 >> 3] + $2175 * +HEAPF64[$2162 >> 3]);
       if ($2188 == 0.0) {
        $2263 = $1409;
        label = 306;
        break L19;
       }
       $2198 = (+HEAPF64[$2165 >> 3] + ($2181 * +HEAPF64[$14 >> 3] + $2175 * +HEAPF64[$2164 >> 3])) / $2188;
       HEAPF32[$15 >> 2] = $2198;
       $2207 = (+HEAPF64[$2168 >> 3] + ($2181 * +HEAPF64[$2166 >> 3] + $2175 * +HEAPF64[$2167 >> 3])) / $2188;
       HEAPF32[$16 >> 2] = $2207;
       _arParamIdeal2ObservLTf($8, $2198, $2207, $15, $16) | 0;
       $2208 = +HEAPF32[$15 >> 2];
       if ($2169) {
        $$20 = ((~~($2208 + 1.0) | 0) / 2 | 0) << 1;
        $$201463 = ((~~(+HEAPF32[$16 >> 2] + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $$20 = ~~($2208 + .5);
        $$201463 = ~~(+HEAPF32[$16 >> 2] + .5);
       }
       if (($$20 | 0) > -1) if (($$201463 | 0) < ($6 | 0) & (($$201463 | 0) > -1 & ($$20 | 0) < ($5 | 0))) {
        $2229 = (Math_imul($$201463, $5) | 0) + $$20 << 1;
        $2232 = HEAPU8[$4 + $2229 >> 0] | 0;
        $2251 = $1409 + ((Math_imul(($$201515 | 0) / ($102 | 0) | 0, $2) | 0) + (($$22 | 0) / ($101 | 0) | 0) << 2) | 0;
        HEAP32[$2251 >> 2] = (((($2232 << 4 & 240 | 8) + ($2232 & 240 | 8) + ((HEAP8[$4 + ($2229 | 1) >> 0] & -16 | 8) & 255) | 0) >>> 0) / 3 | 0) + (HEAP32[$2251 >> 2] | 0);
       }
       $$22 = $$22 + 1 | 0;
      }
      $$201515 = $$201515 + 1 | 0;
     }
     break;
    }
   default:
    {
     _arLog(0, 3, 4174, $vararg_buffer5);
     $2263 = $1409;
     label = 306;
     break L19;
    }
   }
  } while (0);
  $2256 = Math_imul($102, $101) | 0;
  $$23 = 0;
  while (1) {
   if (($$23 | 0) == ($108 | 0)) break;
   HEAP8[$11 + $$23 >> 0] = ((HEAP32[$1409 + ($$23 << 2) >> 2] | 0) >>> 0) / ($2256 >>> 0) | 0;
   $$23 = $$23 + 1 | 0;
  }
  _free($1409);
  $$0 = 0;
 } while (0);
 if ((label | 0) == 306) {
  _free($2263);
  $$0 = -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$add$i630 = 0, $$0$i$i$add$i649 = 0, $$0$i$i$add$i653 = 0, $$0$i$i$add$i677 = 0, $$0$i$i$add$i681 = 0, $$0$i$i$add$i685 = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i615 = 0, $$0$i$i$i599 = 0, $$0$i$i$i605 = 0, $$0$i$i$i609 = 0, $$0$i$i$i618 = 0, $$0$i$i$i622 = 0, $$0$i$i$i625 = 0, $$0$i$i$i633 = 0, $$0$i$i$i636 = 0, $$0$i$i$i640 = 0, $$0$i$i$i644 = 0, $$0$i$i$i656 = 0, $$0$i$i$i660 = 0, $$0$i$i$i664 = 0, $$0$i$i$i668 = 0, $$0$i$i$i672 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i629 = 0, $$0$i$i$idx$i648 = 0, $$0$i$i$idx$i652 = 0, $$0$i$i$idx$i676 = 0, $$0$i$i$idx$i680 = 0, $$0$i$i$idx$i684 = 0, $$0$i$i602 = 0, $$0503 = 0, $$0504$off0 = 0, $$14 = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $106 = 0, $11 = 0, $111 = 0, $113 = 0, $115 = 0, $116 = 0, $119 = 0, $12 = 0, $13 = 0, $131 = 0, $132 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $147 = 0, $15 = 0, $154 = 0, $156 = 0, $158 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $169 = 0, $171 = 0, $173 = 0, $175 = 0, $18 = 0, $180 = 0, $182 = 0, $184 = 0, $186 = 0, $191 = 0, $192 = 0, $194 = 0, $196 = 0, $197 = 0, $204 = 0, $212 = 0, $213 = 0, $228 = 0, $234 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $244 = 0, $246 = 0, $248 = 0, $25 = 0, $253 = 0, $255 = 0, $257 = 0, $259 = 0, $261 = 0, $263 = 0, $265 = 0, $267 = 0, $269 = 0, $273 = 0, $275 = 0, $277 = 0, $280 = 0, $281 = 0, $296 = 0, $298 = 0, $3 = 0, $300 = 0, $302 = 0, $304 = 0, $306 = 0, $308 = 0, $309 = 0, $315 = 0, $317 = 0, $319 = 0, $321 = 0, $323 = 0, $325 = 0, $330 = 0, $332 = 0, $334 = 0, $336 = 0, $338 = 0, $340 = 0, $342 = 0, $346 = 0, $348 = 0, $35 = 0, $350 = 0, $353 = 0, $354 = 0, $365 = 0, $367 = 0, $37 = 0, $373 = 0, $374 = 0, $376 = 0, $378 = 0, $380 = 0, $381 = 0, $388 = 0, $39 = 0, $392 = 0, $4 = 0, $400 = 0, $401 = 0, $41 = 0, $415 = 0, $416 = 0, $43 = 0, $431 = 0, $433 = 0, $436 = 0, $437 = 0, $444 = 0, $446 = 0, $448 = 0, $45 = 0, $450 = 0, $452 = 0, $454 = 0, $456 = 0, $458 = 0, $47 = 0, $480 = 0, $481 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $6 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $7 = 0, $74 = 0, $75 = 0, $78 = 0, $8 = 0, $9 = 0, $90 = 0, $91 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $3 = sp + 176 | 0;
 $4 = sp + 112 | 0;
 $5 = sp + 88 | 0;
 $6 = sp + 64 | 0;
 $7 = sp + 48 | 0;
 $8 = sp + 160 | 0;
 $9 = sp + 36 | 0;
 $10 = sp + 148 | 0;
 $11 = sp + 136 | 0;
 $12 = sp + 124 | 0;
 $13 = sp + 24 | 0;
 $14 = sp + 12 | 0;
 $15 = sp;
 $16 = $1;
 $18 = $16 - $0 | 0;
 L1 : do if (($18 | 0) > 1) {
  if (($18 | 0) > 3) if ((HEAP8[$0 >> 0] | 0) == 103) {
   $25 = (HEAP8[$0 + 1 >> 0] | 0) == 115;
   $$0503 = $25 ? $0 + 2 | 0 : $0;
   $$0504$off0 = $25;
  } else {
   $$0503 = $0;
   $$0504$off0 = 0;
  } else {
   $$0503 = $0;
   $$0504$off0 = 0;
  }
  do switch (HEAP8[$$0503 >> 0] | 0) {
  case 76:
   {
    $$14 = __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    break L1;
    break;
   }
  case 84:
   {
    $$14 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    break L1;
    break;
   }
  case 102:
   {
    $$14 = __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    break L1;
    break;
   }
  case 97:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 97:
     {
      $35 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15121, __ZNSt3__211char_traitsIcE6lengthEPKc(15121) | 0);
      $37 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($35, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($37 | 0) == ($35 | 0) ? $0 : $37;
      break L1;
      break;
     }
    case 100:
     {
      $39 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15139, __ZNSt3__211char_traitsIcE6lengthEPKc(15139) | 0);
      $41 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($39, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($41 | 0) == ($39 | 0) ? $0 : $41;
      break L1;
      break;
     }
    case 110:
     {
      $43 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15139, __ZNSt3__211char_traitsIcE6lengthEPKc(15139) | 0);
      $45 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($43, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($45 | 0) == ($43 | 0) ? $0 : $45;
      break L1;
      break;
     }
    case 78:
     {
      $47 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15182, __ZNSt3__211char_traitsIcE6lengthEPKc(15182) | 0);
      $49 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($47, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($49 | 0) == ($47 | 0) ? $0 : $49;
      break L1;
      break;
     }
    case 83:
     {
      $51 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15185, __ZNSt3__211char_traitsIcE6lengthEPKc(15185) | 0);
      $53 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($51, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($53 | 0) == ($51 | 0) ? $0 : $53;
      break L1;
      break;
     }
    case 116:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 122:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 99:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 99:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_const_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 108:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_115parse_call_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 109:
     {
      $62 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15187, __ZNSt3__211char_traitsIcE6lengthEPKc(15187) | 0);
      $64 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($62, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($64 | 0) == ($62 | 0) ? $0 : $64;
      break L1;
      break;
     }
    case 111:
     {
      $66 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15189, __ZNSt3__211char_traitsIcE6lengthEPKc(15189) | 0);
      $68 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($66, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($68 | 0) == ($66 | 0) ? $0 : $68;
      break L1;
      break;
     }
    case 118:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_conversion_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 100:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 97:
     {
      $74 = $$0503 + 2 | 0;
      $75 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($74, $1, $2) | 0;
      if (($75 | 0) == ($74 | 0)) {
       $$14 = $0;
       break L1;
      }
      $78 = $2 + 4 | 0;
      if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$78 >> 2] | 0)) {
       $$14 = $0;
       break L1;
      };
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      HEAP32[$6 + 8 >> 2] = 0;
      L32 : do if ($$0504$off0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($6, 15191, __ZNSt3__211char_traitsIcE6lengthEPKc(15191) | 0); else {
       $$0$i$i = 0;
       while (1) {
        if (($$0$i$i | 0) == 3) break L32;
        HEAP32[$6 + ($$0$i$i << 2) >> 2] = 0;
        $$0$i$i = $$0$i$i + 1 | 0;
       }
      } while (0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15194) | 0;
      HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $$0$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i = $$0$i$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7, (HEAP32[$78 >> 2] | 0) + -24 | 0);
      $90 = HEAP8[$7 + 11 >> 0] | 0;
      $91 = $90 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($5, $91 ? HEAP32[$7 >> 2] | 0 : $7, $91 ? HEAP32[$7 + 4 >> 2] | 0 : $90 & 255) | 0;
      HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i599 = 0;
      while (1) {
       if (($$0$i$i$i599 | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i599 << 2) >> 2] = 0;
       $$0$i$i$i599 = $$0$i$i$i599 + 1 | 0;
      }
      $101 = HEAP32[$78 >> 2] | 0;
      $102 = $101 + -24 | 0;
      $103 = $102 + 11 | 0;
      if ((HEAP8[$103 >> 0] | 0) < 0) {
       $106 = HEAP32[$102 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($106, $3);
       HEAP32[$101 + -20 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($102, $3);
       HEAP8[$103 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($102);
      HEAP32[$102 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$102 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$102 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i$i | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$14 = $75;
      break L1;
      break;
     }
    case 99:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_123parse_dynamic_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 101:
     {
      $111 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15137, __ZNSt3__211char_traitsIcE6lengthEPKc(15137) | 0);
      $113 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($111, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($113 | 0) == ($111 | 0) ? $0 : $113;
      break L1;
      break;
     }
    case 108:
     {
      $115 = $$0503 + 2 | 0;
      $116 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($115, $1, $2) | 0;
      if (($116 | 0) == ($115 | 0)) {
       $$14 = $0;
       break L1;
      }
      $119 = $2 + 4 | 0;
      if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$119 >> 2] | 0)) {
       $$14 = $0;
       break L1;
      };
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      HEAP32[$6 + 8 >> 2] = 0;
      L60 : do if ($$0504$off0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($6, 15191, __ZNSt3__211char_traitsIcE6lengthEPKc(15191) | 0); else {
       $$0$i$i602 = 0;
       while (1) {
        if (($$0$i$i602 | 0) == 3) break L60;
        HEAP32[$6 + ($$0$i$i602 << 2) >> 2] = 0;
        $$0$i$i602 = $$0$i$i602 + 1 | 0;
       }
      } while (0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15204) | 0;
      HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $$0$i$i$i605 = 0;
      while (1) {
       if (($$0$i$i$i605 | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i$i605 << 2) >> 2] = 0;
       $$0$i$i$i605 = $$0$i$i$i605 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7, (HEAP32[$119 >> 2] | 0) + -24 | 0);
      $131 = HEAP8[$7 + 11 >> 0] | 0;
      $132 = $131 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($5, $132 ? HEAP32[$7 >> 2] | 0 : $7, $132 ? HEAP32[$7 + 4 >> 2] | 0 : $131 & 255) | 0;
      HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i609 = 0;
      while (1) {
       if (($$0$i$i$i609 | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i609 << 2) >> 2] = 0;
       $$0$i$i$i609 = $$0$i$i$i609 + 1 | 0;
      }
      $142 = HEAP32[$119 >> 2] | 0;
      $143 = $142 + -24 | 0;
      $144 = $143 + 11 | 0;
      if ((HEAP8[$144 >> 0] | 0) < 0) {
       $147 = HEAP32[$143 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($147, $3);
       HEAP32[$142 + -20 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($143, $3);
       HEAP8[$144 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($143);
      HEAP32[$143 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$143 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$143 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i$i615 = 0;
      while (1) {
       if (($$0$i$i$i$i615 | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i$i615 << 2) >> 2] = 0;
       $$0$i$i$i$i615 = $$0$i$i$i$i615 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$14 = $116;
      break L1;
      break;
     }
    case 110:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 115:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_119parse_dot_star_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 116:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_114parse_dot_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 118:
     {
      $154 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15212, __ZNSt3__211char_traitsIcE6lengthEPKc(15212) | 0);
      $156 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($154, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($156 | 0) == ($154 | 0) ? $0 : $156;
      break L1;
      break;
     }
    case 86:
     {
      $158 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15214, __ZNSt3__211char_traitsIcE6lengthEPKc(15214) | 0);
      $160 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($158, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($160 | 0) == ($158 | 0) ? $0 : $160;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 101:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 111:
     {
      $165 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15217, __ZNSt3__211char_traitsIcE6lengthEPKc(15217) | 0);
      $167 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($165, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($167 | 0) == ($165 | 0) ? $0 : $167;
      break L1;
      break;
     }
    case 79:
     {
      $169 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15219, __ZNSt3__211char_traitsIcE6lengthEPKc(15219) | 0);
      $171 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($169, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($171 | 0) == ($169 | 0) ? $0 : $171;
      break L1;
      break;
     }
    case 113:
     {
      $173 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15222, __ZNSt3__211char_traitsIcE6lengthEPKc(15222) | 0);
      $175 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($173, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($175 | 0) == ($173 | 0) ? $0 : $175;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 103:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 101:
     {
      $180 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15225, __ZNSt3__211char_traitsIcE6lengthEPKc(15225) | 0);
      $182 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($180, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($182 | 0) == ($180 | 0) ? $0 : $182;
      break L1;
      break;
     }
    case 116:
     {
      $184 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15155, __ZNSt3__211char_traitsIcE6lengthEPKc(15155) | 0);
      $186 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($184, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($186 | 0) == ($184 | 0) ? $0 : $186;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 105:
   {
    if ((HEAP8[$$0503 + 1 >> 0] | 0) != 120) {
     $$14 = $0;
     break L1;
    }
    $191 = $0 + 2 | 0;
    $192 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($191, $1, $2) | 0;
    if (($192 | 0) == ($191 | 0)) {
     $$14 = $0;
     break L1;
    }
    $194 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($192, $1, $2) | 0;
    $196 = $2 + 4 | 0;
    if (($194 | 0) == ($192 | 0)) {
     $228 = HEAP32[$196 >> 2] | 0;
     $$0$i$i$idx$i629 = 0;
     while (1) {
      if (($$0$i$i$idx$i629 | 0) == -1) break;
      $$0$i$i$add$i630 = $$0$i$i$idx$i629 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($228 + ($$0$i$i$add$i630 * 24 | 0) | 0);
      $$0$i$i$idx$i629 = $$0$i$i$add$i630;
     }
     HEAP32[$196 >> 2] = $228 + -24;
     $$14 = $0;
     break L1;
    }
    $197 = HEAP32[$196 >> 2] | 0;
    if ((($197 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$14 = $0;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $197 + -24 | 0);
    $204 = HEAP32[$196 >> 2] | 0;
    $$0$i$i$idx$i = 0;
    while (1) {
     if (($$0$i$i$idx$i | 0) == -1) break;
     $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($204 + ($$0$i$i$add$i * 24 | 0) | 0);
     $$0$i$i$idx$i = $$0$i$i$add$i;
    }
    HEAP32[$196 >> 2] = $204 + -24;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, $204 + -48 | 0);
    __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($9, 15119, $4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($9, 15228) | 0;
    HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
    HEAP32[$7 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
    $$0$i$i$i618 = 0;
    while (1) {
     if (($$0$i$i$i618 | 0) == 3) break;
     HEAP32[$9 + ($$0$i$i$i618 << 2) >> 2] = 0;
     $$0$i$i$i618 = $$0$i$i$i618 + 1 | 0;
    }
    $212 = HEAP8[$3 + 11 >> 0] | 0;
    $213 = $212 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, $213 ? HEAP32[$3 >> 2] | 0 : $3, $213 ? HEAP32[$3 + 4 >> 2] | 0 : $212 & 255) | 0;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
    $$0$i$i$i622 = 0;
    while (1) {
     if (($$0$i$i$i622 | 0) == 3) break;
     HEAP32[$7 + ($$0$i$i$i622 << 2) >> 2] = 0;
     $$0$i$i$i622 = $$0$i$i$i622 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15166) | 0;
    HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$8 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$8 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i625 = 0;
    while (1) {
     if (($$0$i$i$i625 | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i625 << 2) >> 2] = 0;
     $$0$i$i$i625 = $$0$i$i$i625 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5, $8);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$196 >> 2] | 0) + -24 | 0, $5);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$14 = $194;
    break L1;
    break;
   }
  case 108:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 101:
     {
      $234 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15231, __ZNSt3__211char_traitsIcE6lengthEPKc(15231) | 0);
      $236 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($234, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($236 | 0) == ($234 | 0) ? $0 : $236;
      break L1;
      break;
     }
    case 115:
     {
      $238 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15234, __ZNSt3__211char_traitsIcE6lengthEPKc(15234) | 0);
      $240 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($238, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($240 | 0) == ($238 | 0) ? $0 : $240;
      break L1;
      break;
     }
    case 83:
     {
      $242 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15237, __ZNSt3__211char_traitsIcE6lengthEPKc(15237) | 0);
      $244 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($242, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($244 | 0) == ($242 | 0) ? $0 : $244;
      break L1;
      break;
     }
    case 116:
     {
      $246 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15153, __ZNSt3__211char_traitsIcE6lengthEPKc(15153) | 0);
      $248 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($246, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($248 | 0) == ($246 | 0) ? $0 : $248;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 109:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 105:
     {
      $253 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15241, __ZNSt3__211char_traitsIcE6lengthEPKc(15241) | 0);
      $255 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($253, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($255 | 0) == ($253 | 0) ? $0 : $255;
      break L1;
      break;
     }
    case 73:
     {
      $257 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15243, __ZNSt3__211char_traitsIcE6lengthEPKc(15243) | 0);
      $259 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($257, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($259 | 0) == ($257 | 0) ? $0 : $259;
      break L1;
      break;
     }
    case 108:
     {
      $261 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15137, __ZNSt3__211char_traitsIcE6lengthEPKc(15137) | 0);
      $263 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($261, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($263 | 0) == ($261 | 0) ? $0 : $263;
      break L1;
      break;
     }
    case 76:
     {
      $265 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15246, __ZNSt3__211char_traitsIcE6lengthEPKc(15246) | 0);
      $267 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($265, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($267 | 0) == ($265 | 0) ? $0 : $267;
      break L1;
      break;
     }
    case 109:
     {
      $269 = $0 + 2 | 0;
      if (($269 | 0) != ($1 | 0)) if ((HEAP8[$269 >> 0] | 0) == 95) {
       $273 = $0 + 3 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       HEAP32[$3 + 8 >> 2] = 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15249, __ZNSt3__211char_traitsIcE6lengthEPKc(15249) | 0);
       $275 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($273, $1, $3, $2) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$14 = ($275 | 0) == ($273 | 0) ? $0 : $275;
       break L1;
      }
      $277 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($269, $1, $2) | 0;
      if (($277 | 0) == ($269 | 0)) {
       $$14 = $0;
       break L1;
      }
      $280 = $2 + 4 | 0;
      $281 = HEAP32[$280 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($281 | 0)) {
       $$14 = $0;
       break L1;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $281 + -24 | 0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5, 0, 15119) | 0;
      HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i633 = 0;
      while (1) {
       if (($$0$i$i$i633 | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i633 << 2) >> 2] = 0;
       $$0$i$i$i633 = $$0$i$i$i633 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15252) | 0;
      HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$10 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$10 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i636 = 0;
      while (1) {
       if (($$0$i$i$i636 | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i636 << 2) >> 2] = 0;
       $$0$i$i$i636 = $$0$i$i$i636 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $10);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$280 >> 2] | 0) + -24 | 0, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$14 = $277;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 110:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 119:
    case 97:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_114parse_new_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 101:
     {
      $296 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15256, __ZNSt3__211char_traitsIcE6lengthEPKc(15256) | 0);
      $298 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($296, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($298 | 0) == ($296 | 0) ? $0 : $298;
      break L1;
      break;
     }
    case 103:
     {
      $300 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15241, __ZNSt3__211char_traitsIcE6lengthEPKc(15241) | 0);
      $302 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($300, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($302 | 0) == ($300 | 0) ? $0 : $302;
      break L1;
      break;
     }
    case 116:
     {
      $304 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15259, __ZNSt3__211char_traitsIcE6lengthEPKc(15259) | 0);
      $306 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($304, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($306 | 0) == ($304 | 0) ? $0 : $306;
      break L1;
      break;
     }
    case 120:
     {
      $308 = $0 + 2 | 0;
      $309 = __ZN10__cxxabiv112_GLOBAL__N_125parse_noexcept_expressionINS0_2DbEEEPKcS4_S4_RT_($308, $1, $2) | 0;
      $$14 = ($309 | 0) == ($308 | 0) ? $0 : $309;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 111:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 110:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 111:
     {
      $315 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15261, __ZNSt3__211char_traitsIcE6lengthEPKc(15261) | 0);
      $317 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($315, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($317 | 0) == ($315 | 0) ? $0 : $317;
      break L1;
      break;
     }
    case 114:
     {
      $319 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15264, __ZNSt3__211char_traitsIcE6lengthEPKc(15264) | 0);
      $321 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($319, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($321 | 0) == ($319 | 0) ? $0 : $321;
      break L1;
      break;
     }
    case 82:
     {
      $323 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15266, __ZNSt3__211char_traitsIcE6lengthEPKc(15266) | 0);
      $325 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($323, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($325 | 0) == ($323 | 0) ? $0 : $325;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 112:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 109:
     {
      $330 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15269, __ZNSt3__211char_traitsIcE6lengthEPKc(15269) | 0);
      $332 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($330, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($332 | 0) == ($330 | 0) ? $0 : $332;
      break L1;
      break;
     }
    case 108:
     {
      $334 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15273, __ZNSt3__211char_traitsIcE6lengthEPKc(15273) | 0);
      $336 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($334, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($336 | 0) == ($334 | 0) ? $0 : $336;
      break L1;
      break;
     }
    case 76:
     {
      $338 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15275, __ZNSt3__211char_traitsIcE6lengthEPKc(15275) | 0);
      $340 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($338, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($340 | 0) == ($338 | 0) ? $0 : $340;
      break L1;
      break;
     }
    case 112:
     {
      $342 = $0 + 2 | 0;
      if (($342 | 0) != ($1 | 0)) if ((HEAP8[$342 >> 0] | 0) == 95) {
       $346 = $0 + 3 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       HEAP32[$3 + 8 >> 2] = 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15278, __ZNSt3__211char_traitsIcE6lengthEPKc(15278) | 0);
       $348 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($346, $1, $3, $2) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$14 = ($348 | 0) == ($346 | 0) ? $0 : $348;
       break L1;
      }
      $350 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($342, $1, $2) | 0;
      if (($350 | 0) == ($342 | 0)) {
       $$14 = $0;
       break L1;
      }
      $353 = $2 + 4 | 0;
      $354 = HEAP32[$353 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($354 | 0)) {
       $$14 = $0;
       break L1;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $354 + -24 | 0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5, 0, 15119) | 0;
      HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i640 = 0;
      while (1) {
       if (($$0$i$i$i640 | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i640 << 2) >> 2] = 0;
       $$0$i$i$i640 = $$0$i$i$i640 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15281) | 0;
      HEAP32[$11 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$11 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$11 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i644 = 0;
      while (1) {
       if (($$0$i$i$i644 | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i644 << 2) >> 2] = 0;
       $$0$i$i$i644 = $$0$i$i$i644 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $11);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$353 >> 2] | 0) + -24 | 0, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$14 = $350;
      break L1;
      break;
     }
    case 115:
     {
      $365 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15273, __ZNSt3__211char_traitsIcE6lengthEPKc(15273) | 0);
      $367 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($365, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($367 | 0) == ($365 | 0) ? $0 : $367;
      break L1;
      break;
     }
    case 116:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_116parse_arrow_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 113:
   {
    if ((HEAP8[$$0503 + 1 >> 0] | 0) != 117) {
     $$14 = $0;
     break L1;
    }
    $373 = $0 + 2 | 0;
    $374 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($373, $1, $2) | 0;
    if (($374 | 0) == ($373 | 0)) {
     $$14 = $0;
     break L1;
    }
    $376 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($374, $1, $2) | 0;
    if (($376 | 0) == ($374 | 0)) {
     $436 = $2 + 4 | 0;
     $437 = HEAP32[$436 >> 2] | 0;
     $$0$i$i$idx$i684 = 0;
     while (1) {
      if (($$0$i$i$idx$i684 | 0) == -1) break;
      $$0$i$i$add$i685 = $$0$i$i$idx$i684 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($437 + ($$0$i$i$add$i685 * 24 | 0) | 0);
      $$0$i$i$idx$i684 = $$0$i$i$add$i685;
     }
     HEAP32[$436 >> 2] = $437 + -24;
     $$14 = $0;
     break L1;
    }
    $378 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($376, $1, $2) | 0;
    $380 = $2 + 4 | 0;
    if (($378 | 0) == ($376 | 0)) {
     $431 = HEAP32[$380 >> 2] | 0;
     $$0$i$i$idx$i676 = 0;
     while (1) {
      if (($$0$i$i$idx$i676 | 0) == -1) break;
      $$0$i$i$add$i677 = $$0$i$i$idx$i676 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($431 + ($$0$i$i$add$i677 * 24 | 0) | 0);
      $$0$i$i$idx$i676 = $$0$i$i$add$i677;
     }
     $433 = $431 + -24 | 0;
     HEAP32[$380 >> 2] = $433;
     $$0$i$i$idx$i680 = 0;
     while (1) {
      if (($$0$i$i$idx$i680 | 0) == -1) break;
      $$0$i$i$add$i681 = $$0$i$i$idx$i680 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($433 + ($$0$i$i$add$i681 * 24 | 0) | 0);
      $$0$i$i$idx$i680 = $$0$i$i$add$i681;
     }
     HEAP32[$380 >> 2] = $431 + -48;
     $$14 = $0;
     break L1;
    }
    $381 = HEAP32[$380 >> 2] | 0;
    if ((($381 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 3) {
     $$14 = $0;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $381 + -24 | 0);
    $388 = HEAP32[$380 >> 2] | 0;
    $$0$i$i$idx$i648 = 0;
    while (1) {
     if (($$0$i$i$idx$i648 | 0) == -1) break;
     $$0$i$i$add$i649 = $$0$i$i$idx$i648 + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($388 + ($$0$i$i$add$i649 * 24 | 0) | 0);
     $$0$i$i$idx$i648 = $$0$i$i$add$i649;
    }
    HEAP32[$380 >> 2] = $388 + -24;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, $388 + -48 | 0);
    $392 = HEAP32[$380 >> 2] | 0;
    $$0$i$i$idx$i652 = 0;
    while (1) {
     if (($$0$i$i$idx$i652 | 0) == -1) break;
     $$0$i$i$add$i653 = $$0$i$i$idx$i652 + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($392 + ($$0$i$i$add$i653 * 24 | 0) | 0);
     $$0$i$i$idx$i652 = $$0$i$i$add$i653;
    }
    HEAP32[$380 >> 2] = $392 + -24;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $392 + -48 | 0);
    __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($15, 15119, $5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($15, 15285) | 0;
    HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
    HEAP32[$14 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
    HEAP32[$14 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
    $$0$i$i$i656 = 0;
    while (1) {
     if (($$0$i$i$i656 | 0) == 3) break;
     HEAP32[$15 + ($$0$i$i$i656 << 2) >> 2] = 0;
     $$0$i$i$i656 = $$0$i$i$i656 + 1 | 0;
    }
    $400 = HEAP8[$4 + 11 >> 0] | 0;
    $401 = $400 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($14, $401 ? HEAP32[$4 >> 2] | 0 : $4, $401 ? HEAP32[$4 + 4 >> 2] | 0 : $400 & 255) | 0;
    HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$13 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
    HEAP32[$13 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
    $$0$i$i$i660 = 0;
    while (1) {
     if (($$0$i$i$i660 | 0) == 3) break;
     HEAP32[$14 + ($$0$i$i$i660 << 2) >> 2] = 0;
     $$0$i$i$i660 = $$0$i$i$i660 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($13, 15291) | 0;
    HEAP32[$9 >> 2] = HEAP32[$13 >> 2];
    HEAP32[$9 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
    HEAP32[$9 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
    $$0$i$i$i664 = 0;
    while (1) {
     if (($$0$i$i$i664 | 0) == 3) break;
     HEAP32[$13 + ($$0$i$i$i664 << 2) >> 2] = 0;
     $$0$i$i$i664 = $$0$i$i$i664 + 1 | 0;
    }
    $415 = HEAP8[$3 + 11 >> 0] | 0;
    $416 = $415 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($9, $416 ? HEAP32[$3 >> 2] | 0 : $3, $416 ? HEAP32[$3 + 4 >> 2] | 0 : $415 & 255) | 0;
    HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
    HEAP32[$7 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
    $$0$i$i$i668 = 0;
    while (1) {
     if (($$0$i$i$i668 | 0) == 3) break;
     HEAP32[$9 + ($$0$i$i$i668 << 2) >> 2] = 0;
     $$0$i$i$i668 = $$0$i$i$i668 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 15117) | 0;
    HEAP32[$12 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$12 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
    HEAP32[$12 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
    $$0$i$i$i672 = 0;
    while (1) {
     if (($$0$i$i$i672 | 0) == 3) break;
     HEAP32[$7 + ($$0$i$i$i672 << 2) >> 2] = 0;
     $$0$i$i$i672 = $$0$i$i$i672 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($6, $12);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$380 >> 2] | 0) + -24 | 0, $6);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$14 = $378;
    break L1;
    break;
   }
  case 114:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 99:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_127parse_reinterpret_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 109:
     {
      $444 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15297, __ZNSt3__211char_traitsIcE6lengthEPKc(15297) | 0);
      $446 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($444, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($446 | 0) == ($444 | 0) ? $0 : $446;
      break L1;
      break;
     }
    case 77:
     {
      $448 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15299, __ZNSt3__211char_traitsIcE6lengthEPKc(15299) | 0);
      $450 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($448, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($450 | 0) == ($448 | 0) ? $0 : $450;
      break L1;
      break;
     }
    case 115:
     {
      $452 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15302, __ZNSt3__211char_traitsIcE6lengthEPKc(15302) | 0);
      $454 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($452, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($454 | 0) == ($452 | 0) ? $0 : $454;
      break L1;
      break;
     }
    case 83:
     {
      $456 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15305, __ZNSt3__211char_traitsIcE6lengthEPKc(15305) | 0);
      $458 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($456, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($458 | 0) == ($456 | 0) ? $0 : $458;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 115:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 99:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_122parse_static_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 112:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_120parse_pack_expansionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 114:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 116:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_type_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 122:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_expr_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 90:
     {
      if (($16 - $$0503 | 0) <= 2) {
       $$14 = $0;
       break L1;
      }
      switch (HEAP8[$$0503 + 2 >> 0] | 0) {
      case 84:
       {
        $$14 = __ZN10__cxxabiv112_GLOBAL__N_128parse_sizeof_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
        break L1;
        break;
       }
      case 102:
       {
        $$14 = __ZN10__cxxabiv112_GLOBAL__N_137parse_sizeof_function_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
        break L1;
        break;
       }
      default:
       {
        $$14 = $0;
        break L1;
       }
      }
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 116:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 105:
    case 101:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_117parse_typeid_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 114:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($3, 15309);
      $480 = $2 + 4 | 0;
      $481 = HEAP32[$480 >> 2] | 0;
      if ($481 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($481, $3);
       HEAP32[$480 >> 2] = (HEAP32[$480 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$14 = $0 + 2 | 0;
      break L1;
      break;
     }
    case 119:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_116parse_throw_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 57:
  case 56:
  case 55:
  case 54:
  case 53:
  case 52:
  case 51:
  case 50:
  case 49:
   {
    $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    break L1;
    break;
   }
  default:
   {
    $$14 = $0;
    break L1;
   }
  } while (0);
 } else $$14 = $0; while (0);
 STACKTOP = sp;
 return $$14 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$add$i = 0, $$0$i$i$add$i497 = 0, $$0$i$i$add$i549 = 0, $$0$i$i$add$i561 = 0, $$0$i$i$add$i569 = 0, $$0$i$i$i = 0, $$0$i$i$i575 = 0, $$0$i$i$i579 = 0, $$0$i$i$i582 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i496 = 0, $$0$i$i$idx$i548 = 0, $$0$i$i$idx$i560 = 0, $$0$i$i$idx$i568 = 0, $$0$i533 = 0, $$0$i540 = 0, $$0434 = 0, $$0435 = 0, $$0438 = 0, $$0444 = 0, $$0478 = 0, $$0479 = 0, $$1429 = 0, $$1436 = 0, $$2437 = 0, $$5 = 0, $$in = 0, $$ph = 0, $$sroa$0$0$$sroa_idx$i544 = 0, $$sroa$0$0$copyload$i490598 = 0, $$sroa$0$0$copyload$i499594 = 0, $$sroa$0$0$copyload$i527606 = 0, $$sroa$0$0$copyload$i531605 = 0, $$sroa$0$0$copyload$i538604 = 0, $$sroa$0$0$copyload$i545602 = 0, $10 = 0, $102 = 0, $106 = 0, $11 = 0, $110 = 0, $113 = 0, $114 = 0, $119 = 0, $120 = 0, $124 = 0, $126 = 0, $131 = 0, $132 = 0, $135 = 0, $136 = 0, $140 = 0, $141 = 0, $142 = 0, $147 = 0, $148 = 0, $15 = 0, $152 = 0, $154 = 0, $159 = 0, $163 = 0, $166 = 0, $167 = 0, $172 = 0, $173 = 0, $177 = 0, $179 = 0, $18 = 0, $184 = 0, $185 = 0, $188 = 0, $189 = 0, $19 = 0, $193 = 0, $194 = 0, $195 = 0, $200 = 0, $201 = 0, $205 = 0, $207 = 0, $212 = 0, $216 = 0, $219 = 0, $220 = 0, $225 = 0, $226 = 0, $23 = 0, $230 = 0, $232 = 0, $237 = 0, $24 = 0, $241 = 0, $242 = 0, $243 = 0, $247 = 0, $249 = 0, $250 = 0, $260 = 0, $261 = 0, $265 = 0, $266 = 0, $274 = 0, $275 = 0, $278 = 0, $28 = 0, $284 = 0, $290 = 0, $292 = 0, $293 = 0, $294 = 0, $3 = 0, $30 = 0, $302 = 0, $306 = 0, $307 = 0, $308 = 0, $31 = 0, $312 = 0, $314 = 0, $315 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $332 = 0, $333 = 0, $34 = 0, $341 = 0, $342 = 0, $345 = 0, $351 = 0, $361 = 0, $362 = 0, $371 = 0, $372 = 0, $373 = 0, $375 = 0, $376 = 0, $377 = 0, $38 = 0, $385 = 0, $389 = 0, $390 = 0, $391 = 0, $395 = 0, $397 = 0, $398 = 0, $4 = 0, $408 = 0, $409 = 0, $413 = 0, $414 = 0, $422 = 0, $423 = 0, $426 = 0, $432 = 0, $438 = 0, $440 = 0, $441 = 0, $442 = 0, $45 = 0, $450 = 0, $454 = 0, $455 = 0, $459 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $47 = 0, $478 = 0, $480 = 0, $481 = 0, $482 = 0, $49 = 0, $490 = 0, $494 = 0, $499 = 0, $5 = 0, $500 = 0, $508 = 0, $509 = 0, $51 = 0, $513 = 0, $514 = 0, $518 = 0, $520 = 0, $524 = 0, $526 = 0, $528 = 0, $53 = 0, $530 = 0, $531 = 0, $538 = 0, $54 = 0, $542 = 0, $544 = 0, $552 = 0, $556 = 0, $557 = 0, $56 = 0, $57 = 0, $571 = 0, $574 = 0, $575 = 0, $576 = 0, $578 = 0, $581 = 0, $585 = 0, $595 = 0, $596 = 0, $6 = 0, $611 = 0, $612 = 0, $62 = 0, $621 = 0, $628 = 0, $629 = 0, $630 = 0, $635 = 0, $636 = 0, $64 = 0, $640 = 0, $642 = 0, $647 = 0, $651 = 0, $655 = 0, $658 = 0, $659 = 0, $664 = 0, $665 = 0, $669 = 0, $671 = 0, $676 = 0, $678 = 0, $680 = 0, $681 = 0, $688 = 0, $693 = 0, $694 = 0, $7 = 0, $702 = 0, $703 = 0, $704 = 0, $709 = 0, $710 = 0, $714 = 0, $716 = 0, $721 = 0, $725 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $735 = 0, $737 = 0, $738 = 0, $74 = 0, $749 = 0, $751 = 0, $752 = 0, $753 = 0, $761 = 0, $765 = 0, $768 = 0, $769 = 0, $774 = 0, $775 = 0, $779 = 0, $781 = 0, $786 = 0, $790 = 0, $793 = 0, $794 = 0, $799 = 0, $8 = 0, $800 = 0, $804 = 0, $806 = 0, $811 = 0, $813 = 0, $817 = 0, $820 = 0, $821 = 0, $826 = 0, $827 = 0, $831 = 0, $833 = 0, $9 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $3 = sp + 128 | 0;
 $4 = sp + 104 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 88 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 76 | 0;
 $9 = sp + 12 | 0;
 $10 = sp;
 $11 = sp + 64 | 0;
 L1 : do if (($0 | 0) == ($1 | 0)) $$5 = $0; else {
  switch (HEAP8[$0 >> 0] | 0) {
  case 75:
  case 86:
  case 114:
   {
    HEAP32[$3 >> 2] = 0;
    $15 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($0, $1, $3) | 0;
    L5 : do if (($15 | 0) == ($0 | 0)) $$1429 = $0; else {
     $18 = (HEAP8[$15 >> 0] | 0) == 70;
     $19 = $2 + 4 | 0;
     $23 = ((HEAP32[$19 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     $24 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
     $28 = ((HEAP32[$19 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     if (($24 | 0) == ($15 | 0)) $$1429 = $0; else {
      $30 = $2 + 20 | 0;
      $31 = HEAP32[$30 >> 2] | 0;
      if ($18) {
       $$0$i$i$idx$i496 = 0;
       while (1) {
        if (($$0$i$i$idx$i496 | 0) == -1) break;
        $$0$i$i$add$i497 = $$0$i$i$idx$i496 + -1 | 0;
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($31 + ($$0$i$i$add$i497 << 4) | 0);
        $$0$i$i$idx$i496 = $$0$i$i$add$i497;
       }
       $34 = $31 + -16 | 0;
       HEAP32[$30 >> 2] = $34;
       $38 = $34;
      } else $38 = $31;
      $$sroa$0$0$copyload$i499594 = HEAP32[$2 + 12 >> 2] | 0;
      HEAP32[$4 >> 2] = $$sroa$0$0$copyload$i499594;
      if ($38 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
       HEAP32[$38 >> 2] = 0;
       HEAP32[$38 + 4 >> 2] = 0;
       HEAP32[$38 + 8 >> 2] = 0;
       HEAP32[$38 + 12 >> 2] = $$sroa$0$0$copyload$i499594;
       HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 16;
      } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($2 + 16 | 0, $4);
      $45 = HEAP32[$3 >> 2] | 0;
      $47 = ($45 & 1 | 0) == 0;
      $49 = ($45 & 2 | 0) == 0;
      $51 = ($45 & 4 | 0) == 0;
      $$0434 = $23;
      while (1) {
       if ($$0434 >>> 0 >= $28 >>> 0) {
        $$1429 = $24;
        break L5;
       }
       if ($18) {
        $53 = HEAP32[$2 >> 2] | 0;
        $54 = $53 + ($$0434 * 24 | 0) + 12 | 0;
        $56 = HEAP8[$54 + 11 >> 0] | 0;
        $57 = $56 << 24 >> 24 < 0;
        if ($57) {
         $$in = HEAP32[$53 + ($$0434 * 24 | 0) + 16 >> 2] | 0;
         $64 = HEAP32[$54 >> 2] | 0;
        } else {
         $$in = $56 & 255;
         $64 = $54;
        }
        $62 = $$in + -2 | 0;
        if ((HEAP8[$64 + $62 >> 0] | 0) == 38) $$0435 = $$in + -3 | 0; else {
         if ($57) {
          $73 = HEAP32[$54 >> 2] | 0;
          $74 = HEAP32[$53 + ($$0434 * 24 | 0) + 16 >> 2] | 0;
         } else {
          $73 = $54;
          $74 = $56 & 255;
         }
         $$0435 = (HEAP8[$73 + $74 + -1 >> 0] | 0) == 38 ? $62 : $$in;
        }
        if ($47) $$1436 = $$0435; else {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($54, $$0435, 15064) | 0;
         $$1436 = $$0435 + 6 | 0;
        }
        if ($49) $$2437 = $$1436; else {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$2 >> 2] | 0) + ($$0434 * 24 | 0) + 12 | 0, $$1436, 15071) | 0;
         $$2437 = $$1436 + 9 | 0;
        }
        if (!$51) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$2 >> 2] | 0) + ($$0434 * 24 | 0) + 12 | 0, $$2437, 15081) | 0;
       } else {
        if (!$47) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$2 >> 2] | 0) + ($$0434 * 24 | 0) | 0, 15064) | 0;
        if (!$49) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$2 >> 2] | 0) + ($$0434 * 24 | 0) | 0, 15071) | 0;
        if (!$51) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$2 >> 2] | 0) + ($$0434 * 24 | 0) | 0, 15081) | 0;
       }
       $90 = HEAP32[$30 >> 2] | 0;
       $92 = (HEAP32[$2 >> 2] | 0) + ($$0434 * 24 | 0) | 0;
       $93 = $90 + -12 | 0;
       $94 = HEAP32[$93 >> 2] | 0;
       if (($94 | 0) == (HEAP32[$90 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($90 + -16 | 0, $92); else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($94, $92);
        HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + 24;
       }
       $$0434 = $$0434 + 1 | 0;
      }
     }
    } while (0);
    $$5 = $$1429;
    break L1;
    break;
   }
  default:
   {}
  }
  $102 = __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
  if (($102 | 0) == ($0 | 0)) {
   L59 : do switch (HEAP8[$0 >> 0] | 0) {
   case 65:
    {
     $106 = __ZN10__cxxabiv112_GLOBAL__N_116parse_array_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
     if (($106 | 0) == ($0 | 0)) {
      $$5 = $0;
      break L1;
     }
     $110 = HEAP32[$2 + 4 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($110 | 0)) {
      $$5 = $0;
      break L1;
     }
     HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $110 + -24 | 0, $4);
     $113 = $2 + 20 | 0;
     $114 = HEAP32[$113 >> 2] | 0;
     if ($114 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$114 >> 2] = 0;
      $119 = $114 + 4 | 0;
      HEAP32[$119 >> 2] = 0;
      $120 = $114 + 8 | 0;
      HEAP32[$120 >> 2] = 0;
      HEAP32[$114 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
      HEAP32[$114 >> 2] = HEAP32[$3 >> 2];
      $124 = $3 + 4 | 0;
      HEAP32[$119 >> 2] = HEAP32[$124 >> 2];
      $126 = $3 + 8 | 0;
      HEAP32[$120 >> 2] = HEAP32[$126 >> 2];
      HEAP32[$126 >> 2] = 0;
      HEAP32[$124 >> 2] = 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$113 >> 2] = (HEAP32[$113 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
     $$5 = $106;
     break L1;
     break;
    }
   case 67:
    {
     $131 = $0 + 1 | 0;
     $132 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($131, $1, $2) | 0;
     if (($132 | 0) == ($131 | 0)) {
      $$5 = $0;
      break L1;
     }
     $135 = $2 + 4 | 0;
     $136 = HEAP32[$135 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($136 | 0)) {
      $$5 = $0;
      break L1;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($136 + -24 | 0, 15091) | 0;
     $140 = (HEAP32[$135 >> 2] | 0) + -24 | 0;
     HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $140, $4);
     $141 = $2 + 20 | 0;
     $142 = HEAP32[$141 >> 2] | 0;
     if ($142 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$142 >> 2] = 0;
      $147 = $142 + 4 | 0;
      HEAP32[$147 >> 2] = 0;
      $148 = $142 + 8 | 0;
      HEAP32[$148 >> 2] = 0;
      HEAP32[$142 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
      HEAP32[$142 >> 2] = HEAP32[$3 >> 2];
      $152 = $3 + 4 | 0;
      HEAP32[$147 >> 2] = HEAP32[$152 >> 2];
      $154 = $3 + 8 | 0;
      HEAP32[$148 >> 2] = HEAP32[$154 >> 2];
      HEAP32[$154 >> 2] = 0;
      HEAP32[$152 >> 2] = 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
     $$5 = $132;
     break L1;
     break;
    }
   case 70:
    {
     $159 = __ZN10__cxxabiv112_GLOBAL__N_119parse_function_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
     if (($159 | 0) == ($0 | 0)) {
      $$5 = $0;
      break L1;
     }
     $163 = HEAP32[$2 + 4 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($163 | 0)) {
      $$5 = $0;
      break L1;
     }
     HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $163 + -24 | 0, $4);
     $166 = $2 + 20 | 0;
     $167 = HEAP32[$166 >> 2] | 0;
     if ($167 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$167 >> 2] = 0;
      $172 = $167 + 4 | 0;
      HEAP32[$172 >> 2] = 0;
      $173 = $167 + 8 | 0;
      HEAP32[$173 >> 2] = 0;
      HEAP32[$167 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
      HEAP32[$167 >> 2] = HEAP32[$3 >> 2];
      $177 = $3 + 4 | 0;
      HEAP32[$172 >> 2] = HEAP32[$177 >> 2];
      $179 = $3 + 8 | 0;
      HEAP32[$173 >> 2] = HEAP32[$179 >> 2];
      HEAP32[$179 >> 2] = 0;
      HEAP32[$177 >> 2] = 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
     $$5 = $159;
     break L1;
     break;
    }
   case 71:
    {
     $184 = $0 + 1 | 0;
     $185 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($184, $1, $2) | 0;
     if (($185 | 0) == ($184 | 0)) {
      $$5 = $0;
      break L1;
     }
     $188 = $2 + 4 | 0;
     $189 = HEAP32[$188 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($189 | 0)) {
      $$5 = $0;
      break L1;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($189 + -24 | 0, 15100) | 0;
     $193 = (HEAP32[$188 >> 2] | 0) + -24 | 0;
     HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $193, $4);
     $194 = $2 + 20 | 0;
     $195 = HEAP32[$194 >> 2] | 0;
     if ($195 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$195 >> 2] = 0;
      $200 = $195 + 4 | 0;
      HEAP32[$200 >> 2] = 0;
      $201 = $195 + 8 | 0;
      HEAP32[$201 >> 2] = 0;
      HEAP32[$195 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
      HEAP32[$195 >> 2] = HEAP32[$3 >> 2];
      $205 = $3 + 4 | 0;
      HEAP32[$200 >> 2] = HEAP32[$205 >> 2];
      $207 = $3 + 8 | 0;
      HEAP32[$201 >> 2] = HEAP32[$207 >> 2];
      HEAP32[$207 >> 2] = 0;
      HEAP32[$205 >> 2] = 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
     $$5 = $185;
     break L1;
     break;
    }
   case 77:
    {
     $212 = __ZN10__cxxabiv112_GLOBAL__N_128parse_pointer_to_member_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
     if (($212 | 0) == ($0 | 0)) {
      $$5 = $0;
      break L1;
     }
     $216 = HEAP32[$2 + 4 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($216 | 0)) {
      $$5 = $0;
      break L1;
     }
     HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $216 + -24 | 0, $4);
     $219 = $2 + 20 | 0;
     $220 = HEAP32[$219 >> 2] | 0;
     if ($220 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$220 >> 2] = 0;
      $225 = $220 + 4 | 0;
      HEAP32[$225 >> 2] = 0;
      $226 = $220 + 8 | 0;
      HEAP32[$226 >> 2] = 0;
      HEAP32[$220 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
      HEAP32[$220 >> 2] = HEAP32[$3 >> 2];
      $230 = $3 + 4 | 0;
      HEAP32[$225 >> 2] = HEAP32[$230 >> 2];
      $232 = $3 + 8 | 0;
      HEAP32[$226 >> 2] = HEAP32[$232 >> 2];
      HEAP32[$232 >> 2] = 0;
      HEAP32[$230 >> 2] = 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$219 >> 2] = (HEAP32[$219 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
     $$5 = $212;
     break L1;
     break;
    }
   case 79:
    {
     $237 = $2 + 4 | 0;
     $241 = ((HEAP32[$237 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     $242 = $0 + 1 | 0;
     $243 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($242, $1, $2) | 0;
     $247 = ((HEAP32[$237 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     if (($243 | 0) == ($242 | 0)) {
      $$5 = $0;
      break L1;
     }
     $$sroa$0$0$copyload$i527606 = HEAP32[$2 + 12 >> 2] | 0;
     HEAP32[$3 >> 2] = $$sroa$0$0$copyload$i527606;
     $249 = $2 + 20 | 0;
     $250 = HEAP32[$249 >> 2] | 0;
     if ($250 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$250 >> 2] = 0;
      HEAP32[$250 + 4 >> 2] = 0;
      HEAP32[$250 + 8 >> 2] = 0;
      HEAP32[$250 + 12 >> 2] = $$sroa$0$0$copyload$i527606;
      HEAP32[$249 >> 2] = (HEAP32[$249 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($2 + 16 | 0, $3);
     $260 = $3 + 11 | 0;
     $261 = $3 + 4 | 0;
     $$0479 = $241;
     while (1) {
      if ($$0479 >>> 0 >= $247 >>> 0) {
       $$5 = $243;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3, (HEAP32[$2 >> 2] | 0) + ($$0479 * 24 | 0) + 12 | 0, 2);
      $265 = __ZNSt3__211char_traitsIcE6lengthEPKc(15111) | 0;
      $266 = HEAP8[$260 >> 0] | 0;
      if (($265 | 0) == (($266 << 24 >> 24 < 0 ? HEAP32[$261 >> 2] | 0 : $266 & 255) | 0)) $$0$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3, 15111, $265) | 0) == 0; else $$0$i = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $274 = HEAP32[$2 >> 2] | 0;
      $275 = $274 + ($$0479 * 24 | 0) | 0;
      if ($$0$i) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($275, 15114) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$2 >> 2] | 0) + ($$0479 * 24 | 0) + 12 | 0, 0, 15117) | 0;
      } else {
       $278 = $274 + ($$0479 * 24 | 0) + 12 | 0;
       if ((HEAP8[$278 + 11 >> 0] | 0) < 0) $284 = HEAP32[$278 >> 2] | 0; else $284 = $278;
       if ((HEAP8[$284 >> 0] | 0) == 40) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($275, 15119) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$2 >> 2] | 0) + ($$0479 * 24 | 0) + 12 | 0, 0, 15117) | 0;
       }
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$2 >> 2] | 0) + ($$0479 * 24 | 0) | 0, 15121) | 0;
      $290 = HEAP32[$249 >> 2] | 0;
      $292 = (HEAP32[$2 >> 2] | 0) + ($$0479 * 24 | 0) | 0;
      $293 = $290 + -12 | 0;
      $294 = HEAP32[$293 >> 2] | 0;
      if (($294 | 0) == (HEAP32[$290 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($290 + -16 | 0, $292); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($294, $292);
       HEAP32[$293 >> 2] = (HEAP32[$293 >> 2] | 0) + 24;
      }
      $$0479 = $$0479 + 1 | 0;
     }
     break;
    }
   case 80:
    {
     $302 = $2 + 4 | 0;
     $306 = ((HEAP32[$302 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     $307 = $0 + 1 | 0;
     $308 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($307, $1, $2) | 0;
     $312 = ((HEAP32[$302 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     if (($308 | 0) == ($307 | 0)) {
      $$5 = $0;
      break L1;
     }
     $$sroa$0$0$copyload$i531605 = HEAP32[$2 + 12 >> 2] | 0;
     HEAP32[$3 >> 2] = $$sroa$0$0$copyload$i531605;
     $314 = $2 + 20 | 0;
     $315 = HEAP32[$314 >> 2] | 0;
     if ($315 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$315 >> 2] = 0;
      HEAP32[$315 + 4 >> 2] = 0;
      HEAP32[$315 + 8 >> 2] = 0;
      HEAP32[$315 + 12 >> 2] = $$sroa$0$0$copyload$i531605;
      HEAP32[$314 >> 2] = (HEAP32[$314 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($2 + 16 | 0, $3);
     $325 = $3 + 11 | 0;
     $326 = $3 + 4 | 0;
     $327 = $3 + 11 | 0;
     $328 = $3 + 4 | 0;
     $$0478 = $306;
     while (1) {
      if ($$0478 >>> 0 >= $312 >>> 0) {
       $$5 = $308;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3, (HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) + 12 | 0, 2);
      $332 = __ZNSt3__211char_traitsIcE6lengthEPKc(15111) | 0;
      $333 = HEAP8[$325 >> 0] | 0;
      if (($332 | 0) == (($333 << 24 >> 24 < 0 ? HEAP32[$326 >> 2] | 0 : $333 & 255) | 0)) $$0$i533 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3, 15111, $332) | 0) == 0; else $$0$i533 = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $341 = HEAP32[$2 >> 2] | 0;
      $342 = $341 + ($$0478 * 24 | 0) | 0;
      if ($$0$i533) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($342, 15114) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) + 12 | 0, 0, 15117) | 0;
      } else {
       $345 = $341 + ($$0478 * 24 | 0) + 12 | 0;
       if ((HEAP8[$345 + 11 >> 0] | 0) < 0) $351 = HEAP32[$345 >> 2] | 0; else $351 = $345;
       if ((HEAP8[$351 >> 0] | 0) == 40) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($342, 15119) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) + 12 | 0, 0, 15117) | 0;
       }
      }
      if ((HEAP8[$307 >> 0] | 0) == 85) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3, (HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) | 0, 12);
       $361 = __ZNSt3__211char_traitsIcE6lengthEPKc(15124) | 0;
       $362 = HEAP8[$327 >> 0] | 0;
       if (($361 | 0) == (($362 << 24 >> 24 < 0 ? HEAP32[$328 >> 2] | 0 : $362 & 255) | 0)) $$ph = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3, 15124, $361) | 0) != 0; else $$ph = 1;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $371 = (HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) | 0;
       if ($$ph) {
        $372 = $371;
        label = 113;
       } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKc($371);
      } else {
       $372 = (HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) | 0;
       label = 113;
      }
      if ((label | 0) == 113) {
       label = 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($372, 15137) | 0;
      }
      $373 = HEAP32[$314 >> 2] | 0;
      $375 = (HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) | 0;
      $376 = $373 + -12 | 0;
      $377 = HEAP32[$376 >> 2] | 0;
      if (($377 | 0) == (HEAP32[$373 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($373 + -16 | 0, $375); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($377, $375);
       HEAP32[$376 >> 2] = (HEAP32[$376 >> 2] | 0) + 24;
      }
      $$0478 = $$0478 + 1 | 0;
     }
     break;
    }
   case 82:
    {
     $385 = $2 + 4 | 0;
     $389 = ((HEAP32[$385 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     $390 = $0 + 1 | 0;
     $391 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($390, $1, $2) | 0;
     $395 = ((HEAP32[$385 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     if (($391 | 0) == ($390 | 0)) {
      $$5 = $0;
      break L1;
     }
     $$sroa$0$0$copyload$i538604 = HEAP32[$2 + 12 >> 2] | 0;
     HEAP32[$3 >> 2] = $$sroa$0$0$copyload$i538604;
     $397 = $2 + 20 | 0;
     $398 = HEAP32[$397 >> 2] | 0;
     if ($398 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$398 >> 2] = 0;
      HEAP32[$398 + 4 >> 2] = 0;
      HEAP32[$398 + 8 >> 2] = 0;
      HEAP32[$398 + 12 >> 2] = $$sroa$0$0$copyload$i538604;
      HEAP32[$397 >> 2] = (HEAP32[$397 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($2 + 16 | 0, $3);
     $408 = $3 + 11 | 0;
     $409 = $3 + 4 | 0;
     $$0444 = $389;
     while (1) {
      if ($$0444 >>> 0 >= $395 >>> 0) {
       $$5 = $391;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3, (HEAP32[$2 >> 2] | 0) + ($$0444 * 24 | 0) + 12 | 0, 2);
      $413 = __ZNSt3__211char_traitsIcE6lengthEPKc(15111) | 0;
      $414 = HEAP8[$408 >> 0] | 0;
      if (($413 | 0) == (($414 << 24 >> 24 < 0 ? HEAP32[$409 >> 2] | 0 : $414 & 255) | 0)) $$0$i540 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3, 15111, $413) | 0) == 0; else $$0$i540 = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $422 = HEAP32[$2 >> 2] | 0;
      $423 = $422 + ($$0444 * 24 | 0) | 0;
      if ($$0$i540) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($423, 15114) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$2 >> 2] | 0) + ($$0444 * 24 | 0) + 12 | 0, 0, 15117) | 0;
      } else {
       $426 = $422 + ($$0444 * 24 | 0) + 12 | 0;
       if ((HEAP8[$426 + 11 >> 0] | 0) < 0) $432 = HEAP32[$426 >> 2] | 0; else $432 = $426;
       if ((HEAP8[$432 >> 0] | 0) == 40) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($423, 15119) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$2 >> 2] | 0) + ($$0444 * 24 | 0) + 12 | 0, 0, 15117) | 0;
       }
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$2 >> 2] | 0) + ($$0444 * 24 | 0) | 0, 15139) | 0;
      $438 = HEAP32[$397 >> 2] | 0;
      $440 = (HEAP32[$2 >> 2] | 0) + ($$0444 * 24 | 0) | 0;
      $441 = $438 + -12 | 0;
      $442 = HEAP32[$441 >> 2] | 0;
      if (($442 | 0) == (HEAP32[$438 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($438 + -16 | 0, $440); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($442, $440);
       HEAP32[$441 >> 2] = (HEAP32[$441 >> 2] | 0) + 24;
      }
      $$0444 = $$0444 + 1 | 0;
     }
     break;
    }
   case 84:
    {
     $450 = $2 + 4 | 0;
     $454 = ((HEAP32[$450 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     $455 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
     $459 = ((HEAP32[$450 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     if (($455 | 0) == ($0 | 0)) {
      $$5 = $0;
      break L1;
     }
     $461 = $2 + 16 | 0;
     $$sroa$0$0$$sroa_idx$i544 = $2 + 12 | 0;
     $$sroa$0$0$copyload$i545602 = HEAP32[$$sroa$0$0$$sroa_idx$i544 >> 2] | 0;
     HEAP32[$3 >> 2] = $$sroa$0$0$copyload$i545602;
     $462 = $2 + 20 | 0;
     $463 = HEAP32[$462 >> 2] | 0;
     $464 = $2 + 24 | 0;
     if ($463 >>> 0 < (HEAP32[$464 >> 2] | 0) >>> 0) {
      HEAP32[$463 >> 2] = 0;
      HEAP32[$463 + 4 >> 2] = 0;
      HEAP32[$463 + 8 >> 2] = 0;
      HEAP32[$463 + 12 >> 2] = $$sroa$0$0$copyload$i545602;
      HEAP32[$462 >> 2] = (HEAP32[$462 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($461, $3);
     $$0438 = $454;
     while (1) {
      if ($$0438 >>> 0 >= $459 >>> 0) break;
      $478 = HEAP32[$462 >> 2] | 0;
      $480 = (HEAP32[$2 >> 2] | 0) + ($$0438 * 24 | 0) | 0;
      $481 = $478 + -12 | 0;
      $482 = HEAP32[$481 >> 2] | 0;
      if (($482 | 0) == (HEAP32[$478 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($478 + -16 | 0, $480); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($482, $480);
       HEAP32[$481 >> 2] = (HEAP32[$481 >> 2] | 0) + 24;
      }
      $$0438 = $$0438 + 1 | 0;
     }
     if (!(($459 | 0) == ($454 + 1 | 0) & (HEAP8[$2 + 63 >> 0] | 0) != 0)) {
      $$5 = $455;
      break L1;
     }
     $490 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($455, $1, $2) | 0;
     if (($490 | 0) == ($455 | 0)) {
      $$5 = $455;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, (HEAP32[$450 >> 2] | 0) + -24 | 0);
     $494 = HEAP32[$450 >> 2] | 0;
     $$0$i$i$idx$i548 = 0;
     while (1) {
      if (($$0$i$i$idx$i548 | 0) == -1) break;
      $$0$i$i$add$i549 = $$0$i$i$idx$i548 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($494 + ($$0$i$i$add$i549 * 24 | 0) | 0);
      $$0$i$i$idx$i548 = $$0$i$i$add$i549;
     }
     HEAP32[$450 >> 2] = $494 + -24;
     $499 = HEAP8[$3 + 11 >> 0] | 0;
     $500 = $499 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($494 + -48 | 0, $500 ? HEAP32[$3 >> 2] | 0 : $3, $500 ? HEAP32[$3 + 4 >> 2] | 0 : $499 & 255) | 0;
     $508 = (HEAP32[$450 >> 2] | 0) + -24 | 0;
     HEAP32[$5 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i544 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($4, $508, $5);
     $509 = HEAP32[$462 >> 2] | 0;
     if ($509 >>> 0 < (HEAP32[$464 >> 2] | 0) >>> 0) {
      HEAP32[$509 >> 2] = 0;
      $513 = $509 + 4 | 0;
      HEAP32[$513 >> 2] = 0;
      $514 = $509 + 8 | 0;
      HEAP32[$514 >> 2] = 0;
      HEAP32[$509 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
      HEAP32[$509 >> 2] = HEAP32[$4 >> 2];
      $518 = $4 + 4 | 0;
      HEAP32[$513 >> 2] = HEAP32[$518 >> 2];
      $520 = $4 + 8 | 0;
      HEAP32[$514 >> 2] = HEAP32[$520 >> 2];
      HEAP32[$520 >> 2] = 0;
      HEAP32[$518 >> 2] = 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$462 >> 2] = (HEAP32[$462 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($461, $4);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$5 = $490;
     break L1;
     break;
    }
   case 85:
    {
     $524 = $0 + 1 | 0;
     if (($524 | 0) == ($1 | 0)) {
      $$5 = $0;
      break L1;
     }
     $526 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($524, $1, $2) | 0;
     if (($526 | 0) == ($524 | 0)) {
      $$5 = $0;
      break L1;
     }
     $528 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($526, $1, $2) | 0;
     if (($528 | 0) == ($526 | 0)) {
      $$5 = $0;
      break L1;
     }
     $530 = $2 + 4 | 0;
     $531 = HEAP32[$530 >> 2] | 0;
     if ((($531 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$5 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $531 + -24 | 0);
     $538 = HEAP32[$530 >> 2] | 0;
     $$0$i$i$idx$i560 = 0;
     while (1) {
      if (($$0$i$i$idx$i560 | 0) == -1) break;
      $$0$i$i$add$i561 = $$0$i$i$idx$i560 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($538 + ($$0$i$i$add$i561 * 24 | 0) | 0);
      $$0$i$i$idx$i560 = $$0$i$i$add$i561;
     }
     HEAP32[$530 >> 2] = $538 + -24;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($4, $538 + -48 | 0, 9);
     $542 = __ZNSt3__211char_traitsIcE6lengthEPKc(15141) | 0;
     $544 = HEAP8[$4 + 11 >> 0] | 0;
     if (($542 | 0) == (($544 << 24 >> 24 < 0 ? HEAP32[$4 + 4 >> 2] | 0 : $544 & 255) | 0)) {
      $552 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($4, 15141, $542) | 0) == 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      if ($552) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$530 >> 2] | 0) + -24 | 0);
       $571 = HEAP32[$530 >> 2] | 0;
       $$0$i$i$idx$i568 = 0;
       while (1) {
        if (($$0$i$i$idx$i568 | 0) == -1) break;
        $$0$i$i$add$i569 = $$0$i$i$idx$i568 + -1 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($571 + ($$0$i$i$add$i569 * 24 | 0) | 0);
        $$0$i$i$idx$i568 = $$0$i$i$add$i569;
       }
       HEAP32[$530 >> 2] = $571 + -24;
       $574 = $4 + 11 | 0;
       $575 = HEAP8[$574 >> 0] | 0;
       $576 = $575 << 24 >> 24 < 0;
       $578 = $4 + 4 | 0;
       $581 = $576 ? HEAP32[$4 >> 2] | 0 : $4;
       $585 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($581 + 9 | 0, $581 + ($576 ? HEAP32[$578 >> 2] | 0 : $575 & 255) | 0, $2) | 0;
       if (($585 | 0) == (((HEAP8[$574 >> 0] | 0) < 0 ? HEAP32[$4 >> 2] | 0 : $4) + 9 | 0)) {
        __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($7, $3, 15151);
        $611 = HEAP8[$574 >> 0] | 0;
        $612 = $611 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, $612 ? HEAP32[$4 >> 2] | 0 : $4, $612 ? HEAP32[$578 >> 2] | 0 : $611 & 255) | 0;
        HEAP32[$11 >> 2] = HEAP32[$7 >> 2];
        HEAP32[$11 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
        HEAP32[$11 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
        $$0$i$i$i582 = 0;
        while (1) {
         if (($$0$i$i$i582 | 0) == 3) break;
         HEAP32[$7 + ($$0$i$i$i582 << 2) >> 2] = 0;
         $$0$i$i$i582 = $$0$i$i$i582 + 1 | 0;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5, $11);
        $621 = HEAP32[$530 >> 2] | 0;
        if ($621 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($621, $5);
         HEAP32[$530 >> 2] = (HEAP32[$530 >> 2] | 0) + 24;
        } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $5);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       } else {
        __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($9, $3, 15153);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($10, (HEAP32[$530 >> 2] | 0) + -24 | 0);
        $595 = HEAP8[$10 + 11 >> 0] | 0;
        $596 = $595 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($9, $596 ? HEAP32[$10 >> 2] | 0 : $10, $596 ? HEAP32[$10 + 4 >> 2] | 0 : $595 & 255) | 0;
        HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
        HEAP32[$7 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
        HEAP32[$7 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
        $$0$i$i$i575 = 0;
        while (1) {
         if (($$0$i$i$i575 | 0) == 3) break;
         HEAP32[$9 + ($$0$i$i$i575 << 2) >> 2] = 0;
         $$0$i$i$i575 = $$0$i$i$i575 + 1 | 0;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 15155) | 0;
        HEAP32[$8 >> 2] = HEAP32[$7 >> 2];
        HEAP32[$8 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
        HEAP32[$8 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
        $$0$i$i$i579 = 0;
        while (1) {
         if (($$0$i$i$i579 | 0) == 3) break;
         HEAP32[$7 + ($$0$i$i$i579 << 2) >> 2] = 0;
         $$0$i$i$i579 = $$0$i$i$i579 + 1 | 0;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5, $8);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$530 >> 2] | 0) + -24 | 0, $5);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      } else label = 167;
     } else {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      label = 167;
     }
     if ((label | 0) == 167) {
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($5, $3, 15151);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7, (HEAP32[$530 >> 2] | 0) + -24 | 0);
      $556 = HEAP8[$7 + 11 >> 0] | 0;
      $557 = $556 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($5, $557 ? HEAP32[$7 >> 2] | 0 : $7, $557 ? HEAP32[$7 + 4 >> 2] | 0 : $556 & 255) | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$6 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i = $$0$i$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $6);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$530 >> 2] | 0) + -24 | 0, $4);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     }
     $628 = (HEAP32[$530 >> 2] | 0) + -24 | 0;
     HEAP32[$5 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($4, $628, $5);
     $629 = $2 + 20 | 0;
     $630 = HEAP32[$629 >> 2] | 0;
     if ($630 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$630 >> 2] = 0;
      $635 = $630 + 4 | 0;
      HEAP32[$635 >> 2] = 0;
      $636 = $630 + 8 | 0;
      HEAP32[$636 >> 2] = 0;
      HEAP32[$630 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
      HEAP32[$630 >> 2] = HEAP32[$4 >> 2];
      $640 = $4 + 4 | 0;
      HEAP32[$635 >> 2] = HEAP32[$640 >> 2];
      $642 = $4 + 8 | 0;
      HEAP32[$636 >> 2] = HEAP32[$642 >> 2];
      HEAP32[$642 >> 2] = 0;
      HEAP32[$640 >> 2] = 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$629 >> 2] = (HEAP32[$629 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $4);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$5 = $528;
     break L1;
     break;
    }
   case 83:
    {
     $647 = $0 + 1 | 0;
     if (($647 | 0) != ($1 | 0)) if ((HEAP8[$647 >> 0] | 0) == 116) {
      $651 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      if (($651 | 0) == ($0 | 0)) {
       $$5 = $0;
       break L1;
      }
      $655 = HEAP32[$2 + 4 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($655 | 0)) {
       $$5 = $0;
       break L1;
      }
      HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $655 + -24 | 0, $4);
      $658 = $2 + 20 | 0;
      $659 = HEAP32[$658 >> 2] | 0;
      if ($659 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
       HEAP32[$659 >> 2] = 0;
       $664 = $659 + 4 | 0;
       HEAP32[$664 >> 2] = 0;
       $665 = $659 + 8 | 0;
       HEAP32[$665 >> 2] = 0;
       HEAP32[$659 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
       HEAP32[$659 >> 2] = HEAP32[$3 >> 2];
       $669 = $3 + 4 | 0;
       HEAP32[$664 >> 2] = HEAP32[$669 >> 2];
       $671 = $3 + 8 | 0;
       HEAP32[$665 >> 2] = HEAP32[$671 >> 2];
       HEAP32[$671 >> 2] = 0;
       HEAP32[$669 >> 2] = 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$658 >> 2] = (HEAP32[$658 >> 2] | 0) + 16;
      } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
      $$5 = $651;
      break L1;
     }
     $676 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
     if (($676 | 0) == ($0 | 0)) {
      $$5 = $0;
      break L1;
     }
     $678 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($676, $1, $2) | 0;
     if (($678 | 0) == ($676 | 0)) {
      $$5 = $676;
      break L1;
     }
     $680 = $2 + 4 | 0;
     $681 = HEAP32[$680 >> 2] | 0;
     if ((($681 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$5 = $676;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $681 + -24 | 0);
     $688 = HEAP32[$680 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($688 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$680 >> 2] = $688 + -24;
     $693 = HEAP8[$3 + 11 >> 0] | 0;
     $694 = $693 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($688 + -48 | 0, $694 ? HEAP32[$3 >> 2] | 0 : $3, $694 ? HEAP32[$3 + 4 >> 2] | 0 : $693 & 255) | 0;
     $702 = (HEAP32[$680 >> 2] | 0) + -24 | 0;
     HEAP32[$5 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($4, $702, $5);
     $703 = $2 + 20 | 0;
     $704 = HEAP32[$703 >> 2] | 0;
     if ($704 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$704 >> 2] = 0;
      $709 = $704 + 4 | 0;
      HEAP32[$709 >> 2] = 0;
      $710 = $704 + 8 | 0;
      HEAP32[$710 >> 2] = 0;
      HEAP32[$704 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
      HEAP32[$704 >> 2] = HEAP32[$4 >> 2];
      $714 = $4 + 4 | 0;
      HEAP32[$709 >> 2] = HEAP32[$714 >> 2];
      $716 = $4 + 8 | 0;
      HEAP32[$710 >> 2] = HEAP32[$716 >> 2];
      HEAP32[$716 >> 2] = 0;
      HEAP32[$714 >> 2] = 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$703 >> 2] = (HEAP32[$703 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $4);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$5 = $678;
     break L1;
     break;
    }
   case 68:
    {
     $721 = $0 + 1 | 0;
     if (($721 | 0) != ($1 | 0)) switch (HEAP8[$721 >> 0] | 0) {
     case 112:
      {
       $725 = $2 + 4 | 0;
       $729 = ((HEAP32[$725 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
       $730 = $0 + 2 | 0;
       $731 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($730, $1, $2) | 0;
       $735 = ((HEAP32[$725 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
       if (($731 | 0) == ($730 | 0)) break L59;
       $$sroa$0$0$copyload$i490598 = HEAP32[$2 + 12 >> 2] | 0;
       HEAP32[$3 >> 2] = $$sroa$0$0$copyload$i490598;
       $737 = $2 + 20 | 0;
       $738 = HEAP32[$737 >> 2] | 0;
       if ($738 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
        HEAP32[$738 >> 2] = 0;
        HEAP32[$738 + 4 >> 2] = 0;
        HEAP32[$738 + 8 >> 2] = 0;
        HEAP32[$738 + 12 >> 2] = $$sroa$0$0$copyload$i490598;
        HEAP32[$737 >> 2] = (HEAP32[$737 >> 2] | 0) + 16;
       } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($2 + 16 | 0, $3);
       $$0 = $729;
       while (1) {
        if ($$0 >>> 0 >= $735 >>> 0) {
         $$5 = $731;
         break L1;
        }
        $749 = HEAP32[$737 >> 2] | 0;
        $751 = (HEAP32[$2 >> 2] | 0) + ($$0 * 24 | 0) | 0;
        $752 = $749 + -12 | 0;
        $753 = HEAP32[$752 >> 2] | 0;
        if (($753 | 0) == (HEAP32[$749 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($749 + -16 | 0, $751); else {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($753, $751);
         HEAP32[$752 >> 2] = (HEAP32[$752 >> 2] | 0) + 24;
        }
        $$0 = $$0 + 1 | 0;
       }
       break;
      }
     case 84:
     case 116:
      {
       $761 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
       if (($761 | 0) == ($0 | 0)) break L59;
       $765 = HEAP32[$2 + 4 >> 2] | 0;
       if ((HEAP32[$2 >> 2] | 0) == ($765 | 0)) {
        $$5 = $0;
        break L1;
       }
       HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $765 + -24 | 0, $4);
       $768 = $2 + 20 | 0;
       $769 = HEAP32[$768 >> 2] | 0;
       if ($769 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
        HEAP32[$769 >> 2] = 0;
        $774 = $769 + 4 | 0;
        HEAP32[$774 >> 2] = 0;
        $775 = $769 + 8 | 0;
        HEAP32[$775 >> 2] = 0;
        HEAP32[$769 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
        HEAP32[$769 >> 2] = HEAP32[$3 >> 2];
        $779 = $3 + 4 | 0;
        HEAP32[$774 >> 2] = HEAP32[$779 >> 2];
        $781 = $3 + 8 | 0;
        HEAP32[$775 >> 2] = HEAP32[$781 >> 2];
        HEAP32[$781 >> 2] = 0;
        HEAP32[$779 >> 2] = 0;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$768 >> 2] = (HEAP32[$768 >> 2] | 0) + 16;
       } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
       __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
       $$5 = $761;
       break L1;
       break;
      }
     case 118:
      {
       $786 = __ZN10__cxxabiv112_GLOBAL__N_117parse_vector_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
       if (($786 | 0) == ($0 | 0)) break L59;
       $790 = HEAP32[$2 + 4 >> 2] | 0;
       if ((HEAP32[$2 >> 2] | 0) == ($790 | 0)) {
        $$5 = $0;
        break L1;
       }
       HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $790 + -24 | 0, $4);
       $793 = $2 + 20 | 0;
       $794 = HEAP32[$793 >> 2] | 0;
       if ($794 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
        HEAP32[$794 >> 2] = 0;
        $799 = $794 + 4 | 0;
        HEAP32[$799 >> 2] = 0;
        $800 = $794 + 8 | 0;
        HEAP32[$800 >> 2] = 0;
        HEAP32[$794 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
        HEAP32[$794 >> 2] = HEAP32[$3 >> 2];
        $804 = $3 + 4 | 0;
        HEAP32[$799 >> 2] = HEAP32[$804 >> 2];
        $806 = $3 + 8 | 0;
        HEAP32[$800 >> 2] = HEAP32[$806 >> 2];
        HEAP32[$806 >> 2] = 0;
        HEAP32[$804 >> 2] = 0;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$793 >> 2] = (HEAP32[$793 >> 2] | 0) + 16;
       } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
       __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
       $$5 = $786;
       break L1;
       break;
      }
     default:
      break L59;
     }
     break;
    }
   default:
    {}
   } while (0);
   $811 = __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   if (($811 | 0) == ($0 | 0)) {
    $813 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    if (($813 | 0) == ($0 | 0)) $$5 = $0; else {
     $817 = HEAP32[$2 + 4 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($817 | 0)) $$5 = $0; else {
      HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $817 + -24 | 0, $4);
      $820 = $2 + 20 | 0;
      $821 = HEAP32[$820 >> 2] | 0;
      if ($821 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
       HEAP32[$821 >> 2] = 0;
       $826 = $821 + 4 | 0;
       HEAP32[$826 >> 2] = 0;
       $827 = $821 + 8 | 0;
       HEAP32[$827 >> 2] = 0;
       HEAP32[$821 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
       HEAP32[$821 >> 2] = HEAP32[$3 >> 2];
       $831 = $3 + 4 | 0;
       HEAP32[$826 >> 2] = HEAP32[$831 >> 2];
       $833 = $3 + 8 | 0;
       HEAP32[$827 >> 2] = HEAP32[$833 >> 2];
       HEAP32[$833 >> 2] = 0;
       HEAP32[$831 >> 2] = 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$820 >> 2] = (HEAP32[$820 >> 2] | 0) + 16;
      } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
      $$5 = $813;
     }
    }
   } else $$5 = $811;
  } else $$5 = $102;
 } while (0);
 STACKTOP = sp;
 return $$5 | 0;
}

function _malloc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i16$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$02065$i$i = 0, $$0207$lcssa$i$i = 0, $$02074$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024372$i = 0, $$0286$i$i = 0, $$028711$i$i = 0, $$0288$lcssa$i$i = 0, $$028810$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$034217$i = 0, $$0343$lcssa$i = 0, $$034316$i = 0, $$0345$i = 0, $$0351$i = 0, $$0357$i = 0, $$0358$i = 0, $$0360$i = 0, $$0361$i = 0, $$0367$i = 0, $$1194$i = 0, $$1194$i$be = 0, $$1194$i$ph = 0, $$1196$i = 0, $$1196$i$be = 0, $$1196$i$ph = 0, $$124471$i = 0, $$1290$i$i = 0, $$1290$i$i$be = 0, $$1290$i$i$ph = 0, $$1292$i$i = 0, $$1292$i$i$be = 0, $$1292$i$i$ph = 0, $$1341$i = 0, $$1346$i = 0, $$1362$i = 0, $$1369$i = 0, $$1369$i$be = 0, $$1369$i$ph = 0, $$1373$i = 0, $$1373$i$be = 0, $$1373$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3$i203218 = 0, $$3348$i = 0, $$3371$i = 0, $$4$lcssa$i = 0, $$420$i = 0, $$420$i$ph = 0, $$4236$i = 0, $$4349$lcssa$i = 0, $$434919$i = 0, $$434919$i$ph = 0, $$4355$i = 0, $$535618$i = 0, $$535618$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i209Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi17$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1000 = 0, $1003 = 0, $1008 = 0, $101 = 0, $1014 = 0, $1017 = 0, $1018 = 0, $102 = 0, $1025 = 0, $1037 = 0, $1042 = 0, $1049 = 0, $1050 = 0, $1051 = 0, $1060 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1070 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $14 = 0, $140 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $151 = 0, $153 = 0, $156 = 0, $158 = 0, $16 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $184 = 0, $185 = 0, $19 = 0, $193 = 0, $198 = 0, $20 = 0, $202 = 0, $208 = 0, $215 = 0, $219 = 0, $228 = 0, $229 = 0, $231 = 0, $232 = 0, $236 = 0, $237 = 0, $245 = 0, $246 = 0, $247 = 0, $249 = 0, $250 = 0, $255 = 0, $256 = 0, $259 = 0, $261 = 0, $264 = 0, $269 = 0, $27 = 0, $276 = 0, $286 = 0, $290 = 0, $299 = 0, $30 = 0, $302 = 0, $306 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $315 = 0, $317 = 0, $319 = 0, $321 = 0, $323 = 0, $333 = 0, $334 = 0, $336 = 0, $34 = 0, $341 = 0, $346 = 0, $348 = 0, $351 = 0, $353 = 0, $356 = 0, $358 = 0, $361 = 0, $364 = 0, $365 = 0, $367 = 0, $368 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $379 = 0, $380 = 0, $385 = 0, $388 = 0, $393 = 0, $397 = 0, $403 = 0, $41 = 0, $410 = 0, $414 = 0, $422 = 0, $425 = 0, $426 = 0, $427 = 0, $431 = 0, $432 = 0, $438 = 0, $44 = 0, $443 = 0, $444 = 0, $447 = 0, $449 = 0, $452 = 0, $457 = 0, $463 = 0, $465 = 0, $467 = 0, $469 = 0, $47 = 0, $475 = 0, $487 = 0, $49 = 0, $492 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $510 = 0, $512 = 0, $513 = 0, $515 = 0, $52 = 0, $524 = 0, $528 = 0, $530 = 0, $531 = 0, $532 = 0, $54 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $550 = 0, $552 = 0, $553 = 0, $559 = 0, $56 = 0, $561 = 0, $568 = 0, $570 = 0, $572 = 0, $573 = 0, $574 = 0, $58 = 0, $582 = 0, $583 = 0, $586 = 0, $590 = 0, $593 = 0, $596 = 0, $6 = 0, $60 = 0, $602 = 0, $606 = 0, $610 = 0, $619 = 0, $62 = 0, $620 = 0, $626 = 0, $628 = 0, $632 = 0, $635 = 0, $637 = 0, $64 = 0, $641 = 0, $643 = 0, $648 = 0, $649 = 0, $650 = 0, $656 = 0, $658 = 0, $662 = 0, $664 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $807 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $889 = 0, $9 = 0, $901 = 0, $906 = 0, $913 = 0, $914 = 0, $915 = 0, $92 = 0, $923 = 0, $927 = 0, $93 = 0, $931 = 0, $933 = 0, $939 = 0, $940 = 0, $942 = 0, $943 = 0, $945 = 0, $947 = 0, $95 = 0, $952 = 0, $953 = 0, $954 = 0, $96 = 0, $960 = 0, $962 = 0, $968 = 0, $973 = 0, $976 = 0, $977 = 0, $978 = 0, $98 = 0, $982 = 0, $983 = 0, $989 = 0, $994 = 0, $995 = 0, $998 = 0, $spec$select$i205 = 0, $spec$select3$i = 0, $spec$select49$i = 0, label = 0, sp = 0, $962$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 do if ($0 >>> 0 < 245) {
  $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
  $7 = $6 >>> 3;
  $8 = HEAP32[4351] | 0;
  $9 = $8 >>> $7;
  if ($9 & 3 | 0) {
   $14 = ($9 & 1 ^ 1) + $7 | 0;
   $16 = 17444 + ($14 << 1 << 2) | 0;
   $17 = $16 + 8 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   $19 = $18 + 8 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   do if (($20 | 0) == ($16 | 0)) HEAP32[4351] = $8 & ~(1 << $14); else {
    if ((HEAP32[4355] | 0) >>> 0 > $20 >>> 0) _abort();
    $27 = $20 + 12 | 0;
    if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
     HEAP32[$27 >> 2] = $16;
     HEAP32[$17 >> 2] = $20;
     break;
    } else _abort();
   } while (0);
   $30 = $14 << 3;
   HEAP32[$18 + 4 >> 2] = $30 | 3;
   $34 = $18 + $30 + 4 | 0;
   HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1;
   $$0 = $19;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $37 = HEAP32[4353] | 0;
  if ($6 >>> 0 > $37 >>> 0) {
   if ($9 | 0) {
    $41 = 2 << $7;
    $44 = $9 << $7 & ($41 | 0 - $41);
    $47 = ($44 & 0 - $44) + -1 | 0;
    $49 = $47 >>> 12 & 16;
    $50 = $47 >>> $49;
    $52 = $50 >>> 5 & 8;
    $54 = $50 >>> $52;
    $56 = $54 >>> 2 & 4;
    $58 = $54 >>> $56;
    $60 = $58 >>> 1 & 2;
    $62 = $58 >>> $60;
    $64 = $62 >>> 1 & 1;
    $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0;
    $69 = 17444 + ($67 << 1 << 2) | 0;
    $70 = $69 + 8 | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    $72 = $71 + 8 | 0;
    $73 = HEAP32[$72 >> 2] | 0;
    do if (($73 | 0) == ($69 | 0)) {
     $77 = $8 & ~(1 << $67);
     HEAP32[4351] = $77;
     $98 = $77;
    } else {
     if ((HEAP32[4355] | 0) >>> 0 > $73 >>> 0) _abort();
     $80 = $73 + 12 | 0;
     if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
      HEAP32[$80 >> 2] = $69;
      HEAP32[$70 >> 2] = $73;
      $98 = $8;
      break;
     } else _abort();
    } while (0);
    $83 = $67 << 3;
    $84 = $83 - $6 | 0;
    HEAP32[$71 + 4 >> 2] = $6 | 3;
    $87 = $71 + $6 | 0;
    HEAP32[$87 + 4 >> 2] = $84 | 1;
    HEAP32[$71 + $83 >> 2] = $84;
    if ($37 | 0) {
     $92 = HEAP32[4356] | 0;
     $93 = $37 >>> 3;
     $95 = 17444 + ($93 << 1 << 2) | 0;
     $96 = 1 << $93;
     if (!($98 & $96)) {
      HEAP32[4351] = $98 | $96;
      $$0199 = $95;
      $$pre$phiZ2D = $95 + 8 | 0;
     } else {
      $101 = $95 + 8 | 0;
      $102 = HEAP32[$101 >> 2] | 0;
      if ((HEAP32[4355] | 0) >>> 0 > $102 >>> 0) _abort(); else {
       $$0199 = $102;
       $$pre$phiZ2D = $101;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $92;
     HEAP32[$$0199 + 12 >> 2] = $92;
     HEAP32[$92 + 8 >> 2] = $$0199;
     HEAP32[$92 + 12 >> 2] = $95;
    }
    HEAP32[4353] = $84;
    HEAP32[4356] = $87;
    $$0 = $72;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $108 = HEAP32[4352] | 0;
   if (!$108) $$0197 = $6; else {
    $112 = ($108 & 0 - $108) + -1 | 0;
    $114 = $112 >>> 12 & 16;
    $115 = $112 >>> $114;
    $117 = $115 >>> 5 & 8;
    $119 = $115 >>> $117;
    $121 = $119 >>> 2 & 4;
    $123 = $119 >>> $121;
    $125 = $123 >>> 1 & 2;
    $127 = $123 >>> $125;
    $129 = $127 >>> 1 & 1;
    $134 = HEAP32[17708 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0;
    $$0189$i = $134;
    $$0190$i = $134;
    $$0191$i = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0;
    while (1) {
     $140 = HEAP32[$$0189$i + 16 >> 2] | 0;
     if (!$140) {
      $143 = HEAP32[$$0189$i + 20 >> 2] | 0;
      if (!$143) break; else $146 = $143;
     } else $146 = $140;
     $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0;
     $150 = $149 >>> 0 < $$0191$i >>> 0;
     $$0189$i = $146;
     $$0190$i = $150 ? $146 : $$0190$i;
     $$0191$i = $150 ? $149 : $$0191$i;
    }
    $151 = HEAP32[4355] | 0;
    if ($151 >>> 0 > $$0190$i >>> 0) _abort();
    $153 = $$0190$i + $6 | 0;
    if ($153 >>> 0 <= $$0190$i >>> 0) _abort();
    $156 = HEAP32[$$0190$i + 24 >> 2] | 0;
    $158 = HEAP32[$$0190$i + 12 >> 2] | 0;
    do if (($158 | 0) == ($$0190$i | 0)) {
     $169 = $$0190$i + 20 | 0;
     $170 = HEAP32[$169 >> 2] | 0;
     if (!$170) {
      $172 = $$0190$i + 16 | 0;
      $173 = HEAP32[$172 >> 2] | 0;
      if (!$173) {
       $$3$i = 0;
       break;
      } else {
       $$1194$i$ph = $173;
       $$1196$i$ph = $172;
      }
     } else {
      $$1194$i$ph = $170;
      $$1196$i$ph = $169;
     }
     $$1194$i = $$1194$i$ph;
     $$1196$i = $$1196$i$ph;
     while (1) {
      $175 = $$1194$i + 20 | 0;
      $176 = HEAP32[$175 >> 2] | 0;
      if (!$176) {
       $178 = $$1194$i + 16 | 0;
       $179 = HEAP32[$178 >> 2] | 0;
       if (!$179) break; else {
        $$1194$i$be = $179;
        $$1196$i$be = $178;
       }
      } else {
       $$1194$i$be = $176;
       $$1196$i$be = $175;
      }
      $$1194$i = $$1194$i$be;
      $$1196$i = $$1196$i$be;
     }
     if ($151 >>> 0 > $$1196$i >>> 0) _abort(); else {
      HEAP32[$$1196$i >> 2] = 0;
      $$3$i = $$1194$i;
      break;
     }
    } else {
     $161 = HEAP32[$$0190$i + 8 >> 2] | 0;
     if ($151 >>> 0 > $161 >>> 0) _abort();
     $163 = $161 + 12 | 0;
     if ((HEAP32[$163 >> 2] | 0) != ($$0190$i | 0)) _abort();
     $166 = $158 + 8 | 0;
     if ((HEAP32[$166 >> 2] | 0) == ($$0190$i | 0)) {
      HEAP32[$163 >> 2] = $158;
      HEAP32[$166 >> 2] = $161;
      $$3$i = $158;
      break;
     } else _abort();
    } while (0);
    L78 : do if ($156 | 0) {
     $184 = HEAP32[$$0190$i + 28 >> 2] | 0;
     $185 = 17708 + ($184 << 2) | 0;
     do if (($$0190$i | 0) == (HEAP32[$185 >> 2] | 0)) {
      HEAP32[$185 >> 2] = $$3$i;
      if (!$$3$i) {
       HEAP32[4352] = $108 & ~(1 << $184);
       break L78;
      }
     } else if ((HEAP32[4355] | 0) >>> 0 > $156 >>> 0) _abort(); else {
      $193 = $156 + 16 | 0;
      HEAP32[((HEAP32[$193 >> 2] | 0) == ($$0190$i | 0) ? $193 : $156 + 20 | 0) >> 2] = $$3$i;
      if (!$$3$i) break L78; else break;
     } while (0);
     $198 = HEAP32[4355] | 0;
     if ($198 >>> 0 > $$3$i >>> 0) _abort();
     HEAP32[$$3$i + 24 >> 2] = $156;
     $202 = HEAP32[$$0190$i + 16 >> 2] | 0;
     do if ($202 | 0) if ($198 >>> 0 > $202 >>> 0) _abort(); else {
      HEAP32[$$3$i + 16 >> 2] = $202;
      HEAP32[$202 + 24 >> 2] = $$3$i;
      break;
     } while (0);
     $208 = HEAP32[$$0190$i + 20 >> 2] | 0;
     if ($208 | 0) if ((HEAP32[4355] | 0) >>> 0 > $208 >>> 0) _abort(); else {
      HEAP32[$$3$i + 20 >> 2] = $208;
      HEAP32[$208 + 24 >> 2] = $$3$i;
      break;
     }
    } while (0);
    if ($$0191$i >>> 0 < 16) {
     $215 = $$0191$i + $6 | 0;
     HEAP32[$$0190$i + 4 >> 2] = $215 | 3;
     $219 = $$0190$i + $215 + 4 | 0;
     HEAP32[$219 >> 2] = HEAP32[$219 >> 2] | 1;
    } else {
     HEAP32[$$0190$i + 4 >> 2] = $6 | 3;
     HEAP32[$153 + 4 >> 2] = $$0191$i | 1;
     HEAP32[$153 + $$0191$i >> 2] = $$0191$i;
     if ($37 | 0) {
      $228 = HEAP32[4356] | 0;
      $229 = $37 >>> 3;
      $231 = 17444 + ($229 << 1 << 2) | 0;
      $232 = 1 << $229;
      if (!($232 & $8)) {
       HEAP32[4351] = $232 | $8;
       $$0187$i = $231;
       $$pre$phi$iZ2D = $231 + 8 | 0;
      } else {
       $236 = $231 + 8 | 0;
       $237 = HEAP32[$236 >> 2] | 0;
       if ((HEAP32[4355] | 0) >>> 0 > $237 >>> 0) _abort(); else {
        $$0187$i = $237;
        $$pre$phi$iZ2D = $236;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $228;
      HEAP32[$$0187$i + 12 >> 2] = $228;
      HEAP32[$228 + 8 >> 2] = $$0187$i;
      HEAP32[$228 + 12 >> 2] = $231;
     }
     HEAP32[4353] = $$0191$i;
     HEAP32[4356] = $153;
    }
    $$0 = $$0190$i + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else $$0197 = $6;
 } else if ($0 >>> 0 > 4294967231) $$0197 = -1; else {
  $245 = $0 + 11 | 0;
  $246 = $245 & -8;
  $247 = HEAP32[4352] | 0;
  if (!$247) $$0197 = $246; else {
   $249 = 0 - $246 | 0;
   $250 = $245 >>> 8;
   if (!$250) $$0357$i = 0; else if ($246 >>> 0 > 16777215) $$0357$i = 31; else {
    $255 = ($250 + 1048320 | 0) >>> 16 & 8;
    $256 = $250 << $255;
    $259 = ($256 + 520192 | 0) >>> 16 & 4;
    $261 = $256 << $259;
    $264 = ($261 + 245760 | 0) >>> 16 & 2;
    $269 = 14 - ($259 | $255 | $264) + ($261 << $264 >>> 15) | 0;
    $$0357$i = $246 >>> ($269 + 7 | 0) & 1 | $269 << 1;
   }
   $276 = HEAP32[17708 + ($$0357$i << 2) >> 2] | 0;
   L122 : do if (!$276) {
    $$2353$i = 0;
    $$3$i203 = 0;
    $$3348$i = $249;
    label = 85;
   } else {
    $$0340$i = 0;
    $$0345$i = $249;
    $$0351$i = $276;
    $$0358$i = $246 << (($$0357$i | 0) == 31 ? 0 : 25 - ($$0357$i >>> 1) | 0);
    $$0361$i = 0;
    while (1) {
     $286 = (HEAP32[$$0351$i + 4 >> 2] & -8) - $246 | 0;
     if ($286 >>> 0 < $$0345$i >>> 0) if (!$286) {
      $$420$i$ph = $$0351$i;
      $$434919$i$ph = 0;
      $$535618$i$ph = $$0351$i;
      label = 89;
      break L122;
     } else {
      $$1341$i = $$0351$i;
      $$1346$i = $286;
     } else {
      $$1341$i = $$0340$i;
      $$1346$i = $$0345$i;
     }
     $290 = HEAP32[$$0351$i + 20 >> 2] | 0;
     $$0351$i = HEAP32[$$0351$i + 16 + ($$0358$i >>> 31 << 2) >> 2] | 0;
     $$1362$i = ($290 | 0) == 0 | ($290 | 0) == ($$0351$i | 0) ? $$0361$i : $290;
     if (!$$0351$i) {
      $$2353$i = $$1362$i;
      $$3$i203 = $$1341$i;
      $$3348$i = $$1346$i;
      label = 85;
      break;
     } else {
      $$0340$i = $$1341$i;
      $$0345$i = $$1346$i;
      $$0358$i = $$0358$i << 1;
      $$0361$i = $$1362$i;
     }
    }
   } while (0);
   if ((label | 0) == 85) {
    if (($$2353$i | 0) == 0 & ($$3$i203 | 0) == 0) {
     $299 = 2 << $$0357$i;
     $302 = ($299 | 0 - $299) & $247;
     if (!$302) {
      $$0197 = $246;
      break;
     }
     $306 = ($302 & 0 - $302) + -1 | 0;
     $308 = $306 >>> 12 & 16;
     $309 = $306 >>> $308;
     $311 = $309 >>> 5 & 8;
     $313 = $309 >>> $311;
     $315 = $313 >>> 2 & 4;
     $317 = $313 >>> $315;
     $319 = $317 >>> 1 & 2;
     $321 = $317 >>> $319;
     $323 = $321 >>> 1 & 1;
     $$3$i203218 = 0;
     $$4355$i = HEAP32[17708 + (($311 | $308 | $315 | $319 | $323) + ($321 >>> $323) << 2) >> 2] | 0;
    } else {
     $$3$i203218 = $$3$i203;
     $$4355$i = $$2353$i;
    }
    if (!$$4355$i) {
     $$4$lcssa$i = $$3$i203218;
     $$4349$lcssa$i = $$3348$i;
    } else {
     $$420$i$ph = $$3$i203218;
     $$434919$i$ph = $$3348$i;
     $$535618$i$ph = $$4355$i;
     label = 89;
    }
   }
   if ((label | 0) == 89) {
    $$420$i = $$420$i$ph;
    $$434919$i = $$434919$i$ph;
    $$535618$i = $$535618$i$ph;
    while (1) {
     $333 = (HEAP32[$$535618$i + 4 >> 2] & -8) - $246 | 0;
     $334 = $333 >>> 0 < $$434919$i >>> 0;
     $spec$select$i205 = $334 ? $333 : $$434919$i;
     $spec$select3$i = $334 ? $$535618$i : $$420$i;
     $336 = HEAP32[$$535618$i + 16 >> 2] | 0;
     if (!$336) $341 = HEAP32[$$535618$i + 20 >> 2] | 0; else $341 = $336;
     if (!$341) {
      $$4$lcssa$i = $spec$select3$i;
      $$4349$lcssa$i = $spec$select$i205;
      break;
     } else {
      $$420$i = $spec$select3$i;
      $$434919$i = $spec$select$i205;
      $$535618$i = $341;
     }
    }
   }
   if (!$$4$lcssa$i) $$0197 = $246; else if ($$4349$lcssa$i >>> 0 < ((HEAP32[4353] | 0) - $246 | 0) >>> 0) {
    $346 = HEAP32[4355] | 0;
    if ($346 >>> 0 > $$4$lcssa$i >>> 0) _abort();
    $348 = $$4$lcssa$i + $246 | 0;
    if ($348 >>> 0 <= $$4$lcssa$i >>> 0) _abort();
    $351 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0;
    $353 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0;
    do if (($353 | 0) == ($$4$lcssa$i | 0)) {
     $364 = $$4$lcssa$i + 20 | 0;
     $365 = HEAP32[$364 >> 2] | 0;
     if (!$365) {
      $367 = $$4$lcssa$i + 16 | 0;
      $368 = HEAP32[$367 >> 2] | 0;
      if (!$368) {
       $$3371$i = 0;
       break;
      } else {
       $$1369$i$ph = $368;
       $$1373$i$ph = $367;
      }
     } else {
      $$1369$i$ph = $365;
      $$1373$i$ph = $364;
     }
     $$1369$i = $$1369$i$ph;
     $$1373$i = $$1373$i$ph;
     while (1) {
      $370 = $$1369$i + 20 | 0;
      $371 = HEAP32[$370 >> 2] | 0;
      if (!$371) {
       $373 = $$1369$i + 16 | 0;
       $374 = HEAP32[$373 >> 2] | 0;
       if (!$374) break; else {
        $$1369$i$be = $374;
        $$1373$i$be = $373;
       }
      } else {
       $$1369$i$be = $371;
       $$1373$i$be = $370;
      }
      $$1369$i = $$1369$i$be;
      $$1373$i = $$1373$i$be;
     }
     if ($346 >>> 0 > $$1373$i >>> 0) _abort(); else {
      HEAP32[$$1373$i >> 2] = 0;
      $$3371$i = $$1369$i;
      break;
     }
    } else {
     $356 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0;
     if ($346 >>> 0 > $356 >>> 0) _abort();
     $358 = $356 + 12 | 0;
     if ((HEAP32[$358 >> 2] | 0) != ($$4$lcssa$i | 0)) _abort();
     $361 = $353 + 8 | 0;
     if ((HEAP32[$361 >> 2] | 0) == ($$4$lcssa$i | 0)) {
      HEAP32[$358 >> 2] = $353;
      HEAP32[$361 >> 2] = $356;
      $$3371$i = $353;
      break;
     } else _abort();
    } while (0);
    L176 : do if (!$351) $469 = $247; else {
     $379 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0;
     $380 = 17708 + ($379 << 2) | 0;
     do if (($$4$lcssa$i | 0) == (HEAP32[$380 >> 2] | 0)) {
      HEAP32[$380 >> 2] = $$3371$i;
      if (!$$3371$i) {
       $385 = $247 & ~(1 << $379);
       HEAP32[4352] = $385;
       $469 = $385;
       break L176;
      }
     } else if ((HEAP32[4355] | 0) >>> 0 > $351 >>> 0) _abort(); else {
      $388 = $351 + 16 | 0;
      HEAP32[((HEAP32[$388 >> 2] | 0) == ($$4$lcssa$i | 0) ? $388 : $351 + 20 | 0) >> 2] = $$3371$i;
      if (!$$3371$i) {
       $469 = $247;
       break L176;
      } else break;
     } while (0);
     $393 = HEAP32[4355] | 0;
     if ($393 >>> 0 > $$3371$i >>> 0) _abort();
     HEAP32[$$3371$i + 24 >> 2] = $351;
     $397 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0;
     do if ($397 | 0) if ($393 >>> 0 > $397 >>> 0) _abort(); else {
      HEAP32[$$3371$i + 16 >> 2] = $397;
      HEAP32[$397 + 24 >> 2] = $$3371$i;
      break;
     } while (0);
     $403 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0;
     if (!$403) $469 = $247; else if ((HEAP32[4355] | 0) >>> 0 > $403 >>> 0) _abort(); else {
      HEAP32[$$3371$i + 20 >> 2] = $403;
      HEAP32[$403 + 24 >> 2] = $$3371$i;
      $469 = $247;
      break;
     }
    } while (0);
    L200 : do if ($$4349$lcssa$i >>> 0 < 16) {
     $410 = $$4349$lcssa$i + $246 | 0;
     HEAP32[$$4$lcssa$i + 4 >> 2] = $410 | 3;
     $414 = $$4$lcssa$i + $410 + 4 | 0;
     HEAP32[$414 >> 2] = HEAP32[$414 >> 2] | 1;
    } else {
     HEAP32[$$4$lcssa$i + 4 >> 2] = $246 | 3;
     HEAP32[$348 + 4 >> 2] = $$4349$lcssa$i | 1;
     HEAP32[$348 + $$4349$lcssa$i >> 2] = $$4349$lcssa$i;
     $422 = $$4349$lcssa$i >>> 3;
     if ($$4349$lcssa$i >>> 0 < 256) {
      $425 = 17444 + ($422 << 1 << 2) | 0;
      $426 = HEAP32[4351] | 0;
      $427 = 1 << $422;
      if (!($426 & $427)) {
       HEAP32[4351] = $426 | $427;
       $$0367$i = $425;
       $$pre$phi$i209Z2D = $425 + 8 | 0;
      } else {
       $431 = $425 + 8 | 0;
       $432 = HEAP32[$431 >> 2] | 0;
       if ((HEAP32[4355] | 0) >>> 0 > $432 >>> 0) _abort(); else {
        $$0367$i = $432;
        $$pre$phi$i209Z2D = $431;
       }
      }
      HEAP32[$$pre$phi$i209Z2D >> 2] = $348;
      HEAP32[$$0367$i + 12 >> 2] = $348;
      HEAP32[$348 + 8 >> 2] = $$0367$i;
      HEAP32[$348 + 12 >> 2] = $425;
      break;
     }
     $438 = $$4349$lcssa$i >>> 8;
     if (!$438) $$0360$i = 0; else if ($$4349$lcssa$i >>> 0 > 16777215) $$0360$i = 31; else {
      $443 = ($438 + 1048320 | 0) >>> 16 & 8;
      $444 = $438 << $443;
      $447 = ($444 + 520192 | 0) >>> 16 & 4;
      $449 = $444 << $447;
      $452 = ($449 + 245760 | 0) >>> 16 & 2;
      $457 = 14 - ($447 | $443 | $452) + ($449 << $452 >>> 15) | 0;
      $$0360$i = $$4349$lcssa$i >>> ($457 + 7 | 0) & 1 | $457 << 1;
     }
     $463 = 17708 + ($$0360$i << 2) | 0;
     HEAP32[$348 + 28 >> 2] = $$0360$i;
     $465 = $348 + 16 | 0;
     HEAP32[$465 + 4 >> 2] = 0;
     HEAP32[$465 >> 2] = 0;
     $467 = 1 << $$0360$i;
     if (!($469 & $467)) {
      HEAP32[4352] = $469 | $467;
      HEAP32[$463 >> 2] = $348;
      HEAP32[$348 + 24 >> 2] = $463;
      HEAP32[$348 + 12 >> 2] = $348;
      HEAP32[$348 + 8 >> 2] = $348;
      break;
     }
     $475 = HEAP32[$463 >> 2] | 0;
     L218 : do if ((HEAP32[$475 + 4 >> 2] & -8 | 0) == ($$4349$lcssa$i | 0)) $$0343$lcssa$i = $475; else {
      $$034217$i = $$4349$lcssa$i << (($$0360$i | 0) == 31 ? 0 : 25 - ($$0360$i >>> 1) | 0);
      $$034316$i = $475;
      while (1) {
       $492 = $$034316$i + 16 + ($$034217$i >>> 31 << 2) | 0;
       $487 = HEAP32[$492 >> 2] | 0;
       if (!$487) break;
       if ((HEAP32[$487 + 4 >> 2] & -8 | 0) == ($$4349$lcssa$i | 0)) {
        $$0343$lcssa$i = $487;
        break L218;
       } else {
        $$034217$i = $$034217$i << 1;
        $$034316$i = $487;
       }
      }
      if ((HEAP32[4355] | 0) >>> 0 > $492 >>> 0) _abort(); else {
       HEAP32[$492 >> 2] = $348;
       HEAP32[$348 + 24 >> 2] = $$034316$i;
       HEAP32[$348 + 12 >> 2] = $348;
       HEAP32[$348 + 8 >> 2] = $348;
       break L200;
      }
     } while (0);
     $499 = $$0343$lcssa$i + 8 | 0;
     $500 = HEAP32[$499 >> 2] | 0;
     $501 = HEAP32[4355] | 0;
     if ($501 >>> 0 <= $500 >>> 0 & $501 >>> 0 <= $$0343$lcssa$i >>> 0) {
      HEAP32[$500 + 12 >> 2] = $348;
      HEAP32[$499 >> 2] = $348;
      HEAP32[$348 + 8 >> 2] = $500;
      HEAP32[$348 + 12 >> 2] = $$0343$lcssa$i;
      HEAP32[$348 + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $$0 = $$4$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else $$0197 = $246;
  }
 } while (0);
 $510 = HEAP32[4353] | 0;
 if ($510 >>> 0 >= $$0197 >>> 0) {
  $512 = $510 - $$0197 | 0;
  $513 = HEAP32[4356] | 0;
  if ($512 >>> 0 > 15) {
   $515 = $513 + $$0197 | 0;
   HEAP32[4356] = $515;
   HEAP32[4353] = $512;
   HEAP32[$515 + 4 >> 2] = $512 | 1;
   HEAP32[$513 + $510 >> 2] = $512;
   HEAP32[$513 + 4 >> 2] = $$0197 | 3;
  } else {
   HEAP32[4353] = 0;
   HEAP32[4356] = 0;
   HEAP32[$513 + 4 >> 2] = $510 | 3;
   $524 = $513 + $510 + 4 | 0;
   HEAP32[$524 >> 2] = HEAP32[$524 >> 2] | 1;
  }
  $$0 = $513 + 8 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $528 = HEAP32[4354] | 0;
 if ($528 >>> 0 > $$0197 >>> 0) {
  $530 = $528 - $$0197 | 0;
  HEAP32[4354] = $530;
  $531 = HEAP32[4357] | 0;
  $532 = $531 + $$0197 | 0;
  HEAP32[4357] = $532;
  HEAP32[$532 + 4 >> 2] = $530 | 1;
  HEAP32[$531 + 4 >> 2] = $$0197 | 3;
  $$0 = $531 + 8 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(HEAP32[4469] | 0)) {
  HEAP32[4471] = 4096;
  HEAP32[4470] = 4096;
  HEAP32[4472] = -1;
  HEAP32[4473] = -1;
  HEAP32[4474] = 0;
  HEAP32[4462] = 0;
  HEAP32[4469] = $1 & -16 ^ 1431655768;
  $546 = 4096;
 } else $546 = HEAP32[4471] | 0;
 $543 = $$0197 + 48 | 0;
 $544 = $$0197 + 47 | 0;
 $545 = $546 + $544 | 0;
 $547 = 0 - $546 | 0;
 $548 = $545 & $547;
 if ($548 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $550 = HEAP32[4461] | 0;
 if ($550 | 0) {
  $552 = HEAP32[4459] | 0;
  $553 = $552 + $548 | 0;
  if ($553 >>> 0 <= $552 >>> 0 | $553 >>> 0 > $550 >>> 0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 L257 : do if (!(HEAP32[4462] & 4)) {
  $559 = HEAP32[4357] | 0;
  L259 : do if (!$559) label = 173; else {
   $$0$i$i = 17852;
   while (1) {
    $561 = HEAP32[$$0$i$i >> 2] | 0;
    if ($561 >>> 0 <= $559 >>> 0) if (($561 + (HEAP32[$$0$i$i + 4 >> 2] | 0) | 0) >>> 0 > $559 >>> 0) break;
    $568 = HEAP32[$$0$i$i + 8 >> 2] | 0;
    if (!$568) {
     label = 173;
     break L259;
    } else $$0$i$i = $568;
   }
   $593 = $545 - $528 & $547;
   if ($593 >>> 0 < 2147483647) {
    $596 = _sbrk($593 | 0) | 0;
    if (($596 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$$0$i$i + 4 >> 2] | 0) | 0)) if (($596 | 0) == (-1 | 0)) $$2234243136$i = $593; else {
     $$723947$i = $593;
     $$748$i = $596;
     label = 190;
     break L257;
    } else {
     $$2247$ph$i = $596;
     $$2253$ph$i = $593;
     label = 181;
    }
   } else $$2234243136$i = 0;
  } while (0);
  do if ((label | 0) == 173) {
   $570 = _sbrk(0) | 0;
   if (($570 | 0) == (-1 | 0)) $$2234243136$i = 0; else {
    $572 = $570;
    $573 = HEAP32[4470] | 0;
    $574 = $573 + -1 | 0;
    $spec$select49$i = (($574 & $572 | 0) == 0 ? 0 : ($574 + $572 & 0 - $573) - $572 | 0) + $548 | 0;
    $582 = HEAP32[4459] | 0;
    $583 = $spec$select49$i + $582 | 0;
    if ($spec$select49$i >>> 0 > $$0197 >>> 0 & $spec$select49$i >>> 0 < 2147483647) {
     $586 = HEAP32[4461] | 0;
     if ($586 | 0) if ($583 >>> 0 <= $582 >>> 0 | $583 >>> 0 > $586 >>> 0) {
      $$2234243136$i = 0;
      break;
     }
     $590 = _sbrk($spec$select49$i | 0) | 0;
     if (($590 | 0) == ($570 | 0)) {
      $$723947$i = $spec$select49$i;
      $$748$i = $570;
      label = 190;
      break L257;
     } else {
      $$2247$ph$i = $590;
      $$2253$ph$i = $spec$select49$i;
      label = 181;
     }
    } else $$2234243136$i = 0;
   }
  } while (0);
  do if ((label | 0) == 181) {
   $602 = 0 - $$2253$ph$i | 0;
   if (!($543 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) if (($$2247$ph$i | 0) == (-1 | 0)) {
    $$2234243136$i = 0;
    break;
   } else {
    $$723947$i = $$2253$ph$i;
    $$748$i = $$2247$ph$i;
    label = 190;
    break L257;
   }
   $606 = HEAP32[4471] | 0;
   $610 = $544 - $$2253$ph$i + $606 & 0 - $606;
   if ($610 >>> 0 >= 2147483647) {
    $$723947$i = $$2253$ph$i;
    $$748$i = $$2247$ph$i;
    label = 190;
    break L257;
   }
   if ((_sbrk($610 | 0) | 0) == (-1 | 0)) {
    _sbrk($602 | 0) | 0;
    $$2234243136$i = 0;
    break;
   } else {
    $$723947$i = $610 + $$2253$ph$i | 0;
    $$748$i = $$2247$ph$i;
    label = 190;
    break L257;
   }
  } while (0);
  HEAP32[4462] = HEAP32[4462] | 4;
  $$4236$i = $$2234243136$i;
  label = 188;
 } else {
  $$4236$i = 0;
  label = 188;
 } while (0);
 if ((label | 0) == 188) if ($548 >>> 0 < 2147483647) {
  $619 = _sbrk($548 | 0) | 0;
  $620 = _sbrk(0) | 0;
  $626 = $620 - $619 | 0;
  $628 = $626 >>> 0 > ($$0197 + 40 | 0) >>> 0;
  if (!(($619 | 0) == (-1 | 0) | $628 ^ 1 | $619 >>> 0 < $620 >>> 0 & (($619 | 0) != (-1 | 0) & ($620 | 0) != (-1 | 0)) ^ 1)) {
   $$723947$i = $628 ? $626 : $$4236$i;
   $$748$i = $619;
   label = 190;
  }
 }
 if ((label | 0) == 190) {
  $632 = (HEAP32[4459] | 0) + $$723947$i | 0;
  HEAP32[4459] = $632;
  if ($632 >>> 0 > (HEAP32[4460] | 0) >>> 0) HEAP32[4460] = $632;
  $635 = HEAP32[4357] | 0;
  L294 : do if (!$635) {
   $637 = HEAP32[4355] | 0;
   if (($637 | 0) == 0 | $$748$i >>> 0 < $637 >>> 0) HEAP32[4355] = $$748$i;
   HEAP32[4463] = $$748$i;
   HEAP32[4464] = $$723947$i;
   HEAP32[4466] = 0;
   HEAP32[4360] = HEAP32[4469];
   HEAP32[4359] = -1;
   HEAP32[4364] = 17444;
   HEAP32[4363] = 17444;
   HEAP32[4366] = 17452;
   HEAP32[4365] = 17452;
   HEAP32[4368] = 17460;
   HEAP32[4367] = 17460;
   HEAP32[4370] = 17468;
   HEAP32[4369] = 17468;
   HEAP32[4372] = 17476;
   HEAP32[4371] = 17476;
   HEAP32[4374] = 17484;
   HEAP32[4373] = 17484;
   HEAP32[4376] = 17492;
   HEAP32[4375] = 17492;
   HEAP32[4378] = 17500;
   HEAP32[4377] = 17500;
   HEAP32[4380] = 17508;
   HEAP32[4379] = 17508;
   HEAP32[4382] = 17516;
   HEAP32[4381] = 17516;
   HEAP32[4384] = 17524;
   HEAP32[4383] = 17524;
   HEAP32[4386] = 17532;
   HEAP32[4385] = 17532;
   HEAP32[4388] = 17540;
   HEAP32[4387] = 17540;
   HEAP32[4390] = 17548;
   HEAP32[4389] = 17548;
   HEAP32[4392] = 17556;
   HEAP32[4391] = 17556;
   HEAP32[4394] = 17564;
   HEAP32[4393] = 17564;
   HEAP32[4396] = 17572;
   HEAP32[4395] = 17572;
   HEAP32[4398] = 17580;
   HEAP32[4397] = 17580;
   HEAP32[4400] = 17588;
   HEAP32[4399] = 17588;
   HEAP32[4402] = 17596;
   HEAP32[4401] = 17596;
   HEAP32[4404] = 17604;
   HEAP32[4403] = 17604;
   HEAP32[4406] = 17612;
   HEAP32[4405] = 17612;
   HEAP32[4408] = 17620;
   HEAP32[4407] = 17620;
   HEAP32[4410] = 17628;
   HEAP32[4409] = 17628;
   HEAP32[4412] = 17636;
   HEAP32[4411] = 17636;
   HEAP32[4414] = 17644;
   HEAP32[4413] = 17644;
   HEAP32[4416] = 17652;
   HEAP32[4415] = 17652;
   HEAP32[4418] = 17660;
   HEAP32[4417] = 17660;
   HEAP32[4420] = 17668;
   HEAP32[4419] = 17668;
   HEAP32[4422] = 17676;
   HEAP32[4421] = 17676;
   HEAP32[4424] = 17684;
   HEAP32[4423] = 17684;
   HEAP32[4426] = 17692;
   HEAP32[4425] = 17692;
   $641 = $$723947$i + -40 | 0;
   $643 = $$748$i + 8 | 0;
   $648 = ($643 & 7 | 0) == 0 ? 0 : 0 - $643 & 7;
   $649 = $$748$i + $648 | 0;
   $650 = $641 - $648 | 0;
   HEAP32[4357] = $649;
   HEAP32[4354] = $650;
   HEAP32[$649 + 4 >> 2] = $650 | 1;
   HEAP32[$$748$i + $641 + 4 >> 2] = 40;
   HEAP32[4358] = HEAP32[4473];
  } else {
   $$024372$i = 17852;
   while (1) {
    $656 = HEAP32[$$024372$i >> 2] | 0;
    $658 = HEAP32[$$024372$i + 4 >> 2] | 0;
    if (($$748$i | 0) == ($656 + $658 | 0)) {
     label = 199;
     break;
    }
    $662 = HEAP32[$$024372$i + 8 >> 2] | 0;
    if (!$662) break; else $$024372$i = $662;
   }
   if ((label | 0) == 199) {
    $664 = $$024372$i + 4 | 0;
    if (!(HEAP32[$$024372$i + 12 >> 2] & 8)) if ($$748$i >>> 0 > $635 >>> 0 & $656 >>> 0 <= $635 >>> 0) {
     HEAP32[$664 >> 2] = $658 + $$723947$i;
     $673 = (HEAP32[4354] | 0) + $$723947$i | 0;
     $675 = $635 + 8 | 0;
     $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7;
     $681 = $635 + $680 | 0;
     $682 = $673 - $680 | 0;
     HEAP32[4357] = $681;
     HEAP32[4354] = $682;
     HEAP32[$681 + 4 >> 2] = $682 | 1;
     HEAP32[$635 + $673 + 4 >> 2] = 40;
     HEAP32[4358] = HEAP32[4473];
     break;
    }
   }
   $688 = HEAP32[4355] | 0;
   if ($$748$i >>> 0 < $688 >>> 0) {
    HEAP32[4355] = $$748$i;
    $753 = $$748$i;
   } else $753 = $688;
   $690 = $$748$i + $$723947$i | 0;
   $$124471$i = 17852;
   while (1) {
    if ((HEAP32[$$124471$i >> 2] | 0) == ($690 | 0)) {
     label = 207;
     break;
    }
    $694 = HEAP32[$$124471$i + 8 >> 2] | 0;
    if (!$694) break; else $$124471$i = $694;
   }
   if ((label | 0) == 207) if (!(HEAP32[$$124471$i + 12 >> 2] & 8)) {
    HEAP32[$$124471$i >> 2] = $$748$i;
    $700 = $$124471$i + 4 | 0;
    HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i;
    $704 = $$748$i + 8 | 0;
    $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0;
    $712 = $690 + 8 | 0;
    $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0;
    $722 = $710 + $$0197 | 0;
    $723 = $718 - $710 - $$0197 | 0;
    HEAP32[$710 + 4 >> 2] = $$0197 | 3;
    L317 : do if (($635 | 0) == ($718 | 0)) {
     $728 = (HEAP32[4354] | 0) + $723 | 0;
     HEAP32[4354] = $728;
     HEAP32[4357] = $722;
     HEAP32[$722 + 4 >> 2] = $728 | 1;
    } else {
     if ((HEAP32[4356] | 0) == ($718 | 0)) {
      $734 = (HEAP32[4353] | 0) + $723 | 0;
      HEAP32[4353] = $734;
      HEAP32[4356] = $722;
      HEAP32[$722 + 4 >> 2] = $734 | 1;
      HEAP32[$722 + $734 >> 2] = $734;
      break;
     }
     $739 = HEAP32[$718 + 4 >> 2] | 0;
     if (($739 & 3 | 0) == 1) {
      $742 = $739 & -8;
      $743 = $739 >>> 3;
      L325 : do if ($739 >>> 0 < 256) {
       $746 = HEAP32[$718 + 8 >> 2] | 0;
       $748 = HEAP32[$718 + 12 >> 2] | 0;
       $750 = 17444 + ($743 << 1 << 2) | 0;
       do if (($746 | 0) != ($750 | 0)) {
        if ($753 >>> 0 > $746 >>> 0) _abort();
        if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) break;
        _abort();
       } while (0);
       if (($748 | 0) == ($746 | 0)) {
        HEAP32[4351] = HEAP32[4351] & ~(1 << $743);
        break;
       }
       do if (($748 | 0) == ($750 | 0)) $$pre$phi17$i$iZ2D = $748 + 8 | 0; else {
        if ($753 >>> 0 > $748 >>> 0) _abort();
        $764 = $748 + 8 | 0;
        if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
         $$pre$phi17$i$iZ2D = $764;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$746 + 12 >> 2] = $748;
       HEAP32[$$pre$phi17$i$iZ2D >> 2] = $746;
      } else {
       $769 = HEAP32[$718 + 24 >> 2] | 0;
       $771 = HEAP32[$718 + 12 >> 2] | 0;
       do if (($771 | 0) == ($718 | 0)) {
        $782 = $718 + 16 | 0;
        $783 = $782 + 4 | 0;
        $784 = HEAP32[$783 >> 2] | 0;
        if (!$784) {
         $786 = HEAP32[$782 >> 2] | 0;
         if (!$786) {
          $$3$i$i = 0;
          break;
         } else {
          $$1290$i$i$ph = $786;
          $$1292$i$i$ph = $782;
         }
        } else {
         $$1290$i$i$ph = $784;
         $$1292$i$i$ph = $783;
        }
        $$1290$i$i = $$1290$i$i$ph;
        $$1292$i$i = $$1292$i$i$ph;
        while (1) {
         $788 = $$1290$i$i + 20 | 0;
         $789 = HEAP32[$788 >> 2] | 0;
         if (!$789) {
          $791 = $$1290$i$i + 16 | 0;
          $792 = HEAP32[$791 >> 2] | 0;
          if (!$792) break; else {
           $$1290$i$i$be = $792;
           $$1292$i$i$be = $791;
          }
         } else {
          $$1290$i$i$be = $789;
          $$1292$i$i$be = $788;
         }
         $$1290$i$i = $$1290$i$i$be;
         $$1292$i$i = $$1292$i$i$be;
        }
        if ($753 >>> 0 > $$1292$i$i >>> 0) _abort(); else {
         HEAP32[$$1292$i$i >> 2] = 0;
         $$3$i$i = $$1290$i$i;
         break;
        }
       } else {
        $774 = HEAP32[$718 + 8 >> 2] | 0;
        if ($753 >>> 0 > $774 >>> 0) _abort();
        $776 = $774 + 12 | 0;
        if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) _abort();
        $779 = $771 + 8 | 0;
        if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
         HEAP32[$776 >> 2] = $771;
         HEAP32[$779 >> 2] = $774;
         $$3$i$i = $771;
         break;
        } else _abort();
       } while (0);
       if (!$769) break;
       $797 = HEAP32[$718 + 28 >> 2] | 0;
       $798 = 17708 + ($797 << 2) | 0;
       do if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
        HEAP32[$798 >> 2] = $$3$i$i;
        if ($$3$i$i | 0) break;
        HEAP32[4352] = HEAP32[4352] & ~(1 << $797);
        break L325;
       } else if ((HEAP32[4355] | 0) >>> 0 > $769 >>> 0) _abort(); else {
        $807 = $769 + 16 | 0;
        HEAP32[((HEAP32[$807 >> 2] | 0) == ($718 | 0) ? $807 : $769 + 20 | 0) >> 2] = $$3$i$i;
        if (!$$3$i$i) break L325; else break;
       } while (0);
       $812 = HEAP32[4355] | 0;
       if ($812 >>> 0 > $$3$i$i >>> 0) _abort();
       HEAP32[$$3$i$i + 24 >> 2] = $769;
       $815 = $718 + 16 | 0;
       $816 = HEAP32[$815 >> 2] | 0;
       do if ($816 | 0) if ($812 >>> 0 > $816 >>> 0) _abort(); else {
        HEAP32[$$3$i$i + 16 >> 2] = $816;
        HEAP32[$816 + 24 >> 2] = $$3$i$i;
        break;
       } while (0);
       $822 = HEAP32[$815 + 4 >> 2] | 0;
       if (!$822) break;
       if ((HEAP32[4355] | 0) >>> 0 > $822 >>> 0) _abort(); else {
        HEAP32[$$3$i$i + 20 >> 2] = $822;
        HEAP32[$822 + 24 >> 2] = $$3$i$i;
        break;
       }
      } while (0);
      $$0$i16$i = $718 + $742 | 0;
      $$0286$i$i = $742 + $723 | 0;
     } else {
      $$0$i16$i = $718;
      $$0286$i$i = $723;
     }
     $830 = $$0$i16$i + 4 | 0;
     HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2;
     HEAP32[$722 + 4 >> 2] = $$0286$i$i | 1;
     HEAP32[$722 + $$0286$i$i >> 2] = $$0286$i$i;
     $836 = $$0286$i$i >>> 3;
     if ($$0286$i$i >>> 0 < 256) {
      $839 = 17444 + ($836 << 1 << 2) | 0;
      $840 = HEAP32[4351] | 0;
      $841 = 1 << $836;
      do if (!($840 & $841)) {
       HEAP32[4351] = $840 | $841;
       $$0294$i$i = $839;
       $$pre$phi$i18$iZ2D = $839 + 8 | 0;
      } else {
       $845 = $839 + 8 | 0;
       $846 = HEAP32[$845 >> 2] | 0;
       if ((HEAP32[4355] | 0) >>> 0 <= $846 >>> 0) {
        $$0294$i$i = $846;
        $$pre$phi$i18$iZ2D = $845;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i18$iZ2D >> 2] = $722;
      HEAP32[$$0294$i$i + 12 >> 2] = $722;
      HEAP32[$722 + 8 >> 2] = $$0294$i$i;
      HEAP32[$722 + 12 >> 2] = $839;
      break;
     }
     $852 = $$0286$i$i >>> 8;
     do if (!$852) $$0295$i$i = 0; else {
      if ($$0286$i$i >>> 0 > 16777215) {
       $$0295$i$i = 31;
       break;
      }
      $857 = ($852 + 1048320 | 0) >>> 16 & 8;
      $858 = $852 << $857;
      $861 = ($858 + 520192 | 0) >>> 16 & 4;
      $863 = $858 << $861;
      $866 = ($863 + 245760 | 0) >>> 16 & 2;
      $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0;
      $$0295$i$i = $$0286$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1;
     } while (0);
     $877 = 17708 + ($$0295$i$i << 2) | 0;
     HEAP32[$722 + 28 >> 2] = $$0295$i$i;
     $879 = $722 + 16 | 0;
     HEAP32[$879 + 4 >> 2] = 0;
     HEAP32[$879 >> 2] = 0;
     $881 = HEAP32[4352] | 0;
     $882 = 1 << $$0295$i$i;
     if (!($881 & $882)) {
      HEAP32[4352] = $881 | $882;
      HEAP32[$877 >> 2] = $722;
      HEAP32[$722 + 24 >> 2] = $877;
      HEAP32[$722 + 12 >> 2] = $722;
      HEAP32[$722 + 8 >> 2] = $722;
      break;
     }
     $889 = HEAP32[$877 >> 2] | 0;
     L410 : do if ((HEAP32[$889 + 4 >> 2] & -8 | 0) == ($$0286$i$i | 0)) $$0288$lcssa$i$i = $889; else {
      $$028711$i$i = $$0286$i$i << (($$0295$i$i | 0) == 31 ? 0 : 25 - ($$0295$i$i >>> 1) | 0);
      $$028810$i$i = $889;
      while (1) {
       $906 = $$028810$i$i + 16 + ($$028711$i$i >>> 31 << 2) | 0;
       $901 = HEAP32[$906 >> 2] | 0;
       if (!$901) break;
       if ((HEAP32[$901 + 4 >> 2] & -8 | 0) == ($$0286$i$i | 0)) {
        $$0288$lcssa$i$i = $901;
        break L410;
       } else {
        $$028711$i$i = $$028711$i$i << 1;
        $$028810$i$i = $901;
       }
      }
      if ((HEAP32[4355] | 0) >>> 0 > $906 >>> 0) _abort(); else {
       HEAP32[$906 >> 2] = $722;
       HEAP32[$722 + 24 >> 2] = $$028810$i$i;
       HEAP32[$722 + 12 >> 2] = $722;
       HEAP32[$722 + 8 >> 2] = $722;
       break L317;
      }
     } while (0);
     $913 = $$0288$lcssa$i$i + 8 | 0;
     $914 = HEAP32[$913 >> 2] | 0;
     $915 = HEAP32[4355] | 0;
     if ($915 >>> 0 <= $914 >>> 0 & $915 >>> 0 <= $$0288$lcssa$i$i >>> 0) {
      HEAP32[$914 + 12 >> 2] = $722;
      HEAP32[$913 >> 2] = $722;
      HEAP32[$722 + 8 >> 2] = $914;
      HEAP32[$722 + 12 >> 2] = $$0288$lcssa$i$i;
      HEAP32[$722 + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $$0 = $710 + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $$0$i$i$i = 17852;
   while (1) {
    $923 = HEAP32[$$0$i$i$i >> 2] | 0;
    if ($923 >>> 0 <= $635 >>> 0) {
     $927 = $923 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0;
     if ($927 >>> 0 > $635 >>> 0) break;
    }
    $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0;
   }
   $931 = $927 + -47 | 0;
   $933 = $931 + 8 | 0;
   $939 = $931 + (($933 & 7 | 0) == 0 ? 0 : 0 - $933 & 7) | 0;
   $940 = $635 + 16 | 0;
   $942 = $939 >>> 0 < $940 >>> 0 ? $635 : $939;
   $943 = $942 + 8 | 0;
   $945 = $$723947$i + -40 | 0;
   $947 = $$748$i + 8 | 0;
   $952 = ($947 & 7 | 0) == 0 ? 0 : 0 - $947 & 7;
   $953 = $$748$i + $952 | 0;
   $954 = $945 - $952 | 0;
   HEAP32[4357] = $953;
   HEAP32[4354] = $954;
   HEAP32[$953 + 4 >> 2] = $954 | 1;
   HEAP32[$$748$i + $945 + 4 >> 2] = 40;
   HEAP32[4358] = HEAP32[4473];
   $960 = $942 + 4 | 0;
   HEAP32[$960 >> 2] = 27;
   HEAP32[$943 >> 2] = HEAP32[4463];
   HEAP32[$943 + 4 >> 2] = HEAP32[4464];
   HEAP32[$943 + 8 >> 2] = HEAP32[4465];
   HEAP32[$943 + 12 >> 2] = HEAP32[4466];
   HEAP32[4463] = $$748$i;
   HEAP32[4464] = $$723947$i;
   HEAP32[4466] = 0;
   HEAP32[4465] = $943;
   $962 = $942 + 24 | 0;
   do {
    $962$looptemp = $962;
    $962 = $962 + 4 | 0;
    HEAP32[$962 >> 2] = 7;
   } while (($962$looptemp + 8 | 0) >>> 0 < $927 >>> 0);
   if (($942 | 0) != ($635 | 0)) {
    $968 = $942 - $635 | 0;
    HEAP32[$960 >> 2] = HEAP32[$960 >> 2] & -2;
    HEAP32[$635 + 4 >> 2] = $968 | 1;
    HEAP32[$942 >> 2] = $968;
    $973 = $968 >>> 3;
    if ($968 >>> 0 < 256) {
     $976 = 17444 + ($973 << 1 << 2) | 0;
     $977 = HEAP32[4351] | 0;
     $978 = 1 << $973;
     if (!($977 & $978)) {
      HEAP32[4351] = $977 | $978;
      $$0211$i$i = $976;
      $$pre$phi$i$iZ2D = $976 + 8 | 0;
     } else {
      $982 = $976 + 8 | 0;
      $983 = HEAP32[$982 >> 2] | 0;
      if ((HEAP32[4355] | 0) >>> 0 > $983 >>> 0) _abort(); else {
       $$0211$i$i = $983;
       $$pre$phi$i$iZ2D = $982;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $635;
     HEAP32[$$0211$i$i + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $$0211$i$i;
     HEAP32[$635 + 12 >> 2] = $976;
     break;
    }
    $989 = $968 >>> 8;
    if (!$989) $$0212$i$i = 0; else if ($968 >>> 0 > 16777215) $$0212$i$i = 31; else {
     $994 = ($989 + 1048320 | 0) >>> 16 & 8;
     $995 = $989 << $994;
     $998 = ($995 + 520192 | 0) >>> 16 & 4;
     $1000 = $995 << $998;
     $1003 = ($1000 + 245760 | 0) >>> 16 & 2;
     $1008 = 14 - ($998 | $994 | $1003) + ($1000 << $1003 >>> 15) | 0;
     $$0212$i$i = $968 >>> ($1008 + 7 | 0) & 1 | $1008 << 1;
    }
    $1014 = 17708 + ($$0212$i$i << 2) | 0;
    HEAP32[$635 + 28 >> 2] = $$0212$i$i;
    HEAP32[$635 + 20 >> 2] = 0;
    HEAP32[$940 >> 2] = 0;
    $1017 = HEAP32[4352] | 0;
    $1018 = 1 << $$0212$i$i;
    if (!($1017 & $1018)) {
     HEAP32[4352] = $1017 | $1018;
     HEAP32[$1014 >> 2] = $635;
     HEAP32[$635 + 24 >> 2] = $1014;
     HEAP32[$635 + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $635;
     break;
    }
    $1025 = HEAP32[$1014 >> 2] | 0;
    L451 : do if ((HEAP32[$1025 + 4 >> 2] & -8 | 0) == ($968 | 0)) $$0207$lcssa$i$i = $1025; else {
     $$02065$i$i = $968 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0);
     $$02074$i$i = $1025;
     while (1) {
      $1042 = $$02074$i$i + 16 + ($$02065$i$i >>> 31 << 2) | 0;
      $1037 = HEAP32[$1042 >> 2] | 0;
      if (!$1037) break;
      if ((HEAP32[$1037 + 4 >> 2] & -8 | 0) == ($968 | 0)) {
       $$0207$lcssa$i$i = $1037;
       break L451;
      } else {
       $$02065$i$i = $$02065$i$i << 1;
       $$02074$i$i = $1037;
      }
     }
     if ((HEAP32[4355] | 0) >>> 0 > $1042 >>> 0) _abort(); else {
      HEAP32[$1042 >> 2] = $635;
      HEAP32[$635 + 24 >> 2] = $$02074$i$i;
      HEAP32[$635 + 12 >> 2] = $635;
      HEAP32[$635 + 8 >> 2] = $635;
      break L294;
     }
    } while (0);
    $1049 = $$0207$lcssa$i$i + 8 | 0;
    $1050 = HEAP32[$1049 >> 2] | 0;
    $1051 = HEAP32[4355] | 0;
    if ($1051 >>> 0 <= $1050 >>> 0 & $1051 >>> 0 <= $$0207$lcssa$i$i >>> 0) {
     HEAP32[$1050 + 12 >> 2] = $635;
     HEAP32[$1049 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $1050;
     HEAP32[$635 + 12 >> 2] = $$0207$lcssa$i$i;
     HEAP32[$635 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } while (0);
  $1060 = HEAP32[4354] | 0;
  if ($1060 >>> 0 > $$0197 >>> 0) {
   $1062 = $1060 - $$0197 | 0;
   HEAP32[4354] = $1062;
   $1063 = HEAP32[4357] | 0;
   $1064 = $1063 + $$0197 | 0;
   HEAP32[4357] = $1064;
   HEAP32[$1064 + 4 >> 2] = $1062 | 1;
   HEAP32[$1063 + 4 >> 2] = $$0197 | 3;
   $$0 = $1063 + 8 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $1070 = ___errno_location() | 0;
 HEAP32[$1070 >> 2] = 12;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$3 = 0, $102 = 0, $103 = 0, $110 = 0, $111 = 0, $118 = 0, $119 = 0, $129 = 0, $13 = 0, $130 = 0, $137 = 0, $138 = 0, $14 = 0, $145 = 0, $146 = 0, $156 = 0, $157 = 0, $164 = 0, $165 = 0, $175 = 0, $176 = 0, $186 = 0, $187 = 0, $194 = 0, $195 = 0, $199 = 0, $202 = 0, $203 = 0, $21 = 0, $210 = 0, $211 = 0, $218 = 0, $219 = 0, $22 = 0, $229 = 0, $230 = 0, $237 = 0, $238 = 0, $245 = 0, $246 = 0, $253 = 0, $254 = 0, $261 = 0, $262 = 0, $272 = 0, $273 = 0, $280 = 0, $281 = 0, $288 = 0, $289 = 0, $29 = 0, $296 = 0, $297 = 0, $3 = 0, $30 = 0, $304 = 0, $305 = 0, $315 = 0, $316 = 0, $323 = 0, $324 = 0, $331 = 0, $332 = 0, $342 = 0, $343 = 0, $350 = 0, $351 = 0, $358 = 0, $359 = 0, $366 = 0, $367 = 0, $37 = 0, $374 = 0, $375 = 0, $38 = 0, $382 = 0, $383 = 0, $393 = 0, $394 = 0, $404 = 0, $405 = 0, $412 = 0, $413 = 0, $420 = 0, $421 = 0, $428 = 0, $429 = 0, $439 = 0, $440 = 0, $444 = 0, $48 = 0, $49 = 0, $56 = 0, $57 = 0, $64 = 0, $65 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $79 = 0, $86 = 0, $87 = 0, $94 = 0, $95 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp;
 L1 : do if (($1 - $0 | 0) > 1) do switch (HEAP8[$0 >> 0] | 0) {
 case 97:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 97:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15419);
     $13 = $2 + 4 | 0;
     $14 = HEAP32[$13 >> 2] | 0;
     if ($14 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($14, $3);
      HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 110:
   case 100:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15430);
     $21 = $2 + 4 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     if ($22 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($22, $3);
      HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 78:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15440);
     $29 = $2 + 4 | 0;
     $30 = HEAP32[$29 >> 2] | 0;
     if ($30 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($30, $3);
      HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 83:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15451);
     $37 = $2 + 4 | 0;
     $38 = HEAP32[$37 >> 2] | 0;
     if ($38 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($38, $3);
      HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 99:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 108:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15461);
     $48 = $2 + 4 | 0;
     $49 = HEAP32[$48 >> 2] | 0;
     if ($49 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($49, $3);
      HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 109:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15472);
     $56 = $2 + 4 | 0;
     $57 = HEAP32[$56 >> 2] | 0;
     if ($57 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($57, $3);
      HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 111:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15482);
     $64 = $2 + 4 | 0;
     $65 = HEAP32[$64 >> 2] | 0;
     if ($65 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($65, $3);
      HEAP32[$64 >> 2] = (HEAP32[$64 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 118:
    {
     $72 = $2 + 63 | 0;
     $73 = HEAP8[$72 >> 0] | 0;
     HEAP8[$72 >> 0] = 0;
     $74 = $0 + 2 | 0;
     $75 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($74, $1, $2) | 0;
     HEAP8[$72 >> 0] = $73;
     if (($75 | 0) == ($74 | 0)) {
      $$3 = $0;
      break L1;
     }
     $79 = HEAP32[$2 + 4 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($79 | 0)) {
      $$3 = $0;
      break L1;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($79 + -24 | 0, 0, 15492) | 0;
     HEAP8[$2 + 60 >> 0] = 1;
     $$3 = $75;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 100:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 97:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($3, 15502);
     $86 = $2 + 4 | 0;
     $87 = HEAP32[$86 >> 2] | 0;
     if ($87 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($87, $3);
      HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 101:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15520);
     $94 = $2 + 4 | 0;
     $95 = HEAP32[$94 >> 2] | 0;
     if ($95 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($95, $3);
      HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 108:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj16EEERAT__Kc($3);
     $102 = $2 + 4 | 0;
     $103 = HEAP32[$102 >> 2] | 0;
     if ($103 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($103, $3);
      HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 118:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15530);
     $110 = $2 + 4 | 0;
     $111 = HEAP32[$110 >> 2] | 0;
     if ($111 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($111, $3);
      HEAP32[$110 >> 2] = (HEAP32[$110 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 86:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15540);
     $118 = $2 + 4 | 0;
     $119 = HEAP32[$118 >> 2] | 0;
     if ($119 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($119, $3);
      HEAP32[$118 >> 2] = (HEAP32[$118 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 101:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 111:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15551);
     $129 = $2 + 4 | 0;
     $130 = HEAP32[$129 >> 2] | 0;
     if ($130 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($130, $3);
      HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 79:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15561);
     $137 = $2 + 4 | 0;
     $138 = HEAP32[$137 >> 2] | 0;
     if ($138 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($138, $3);
      HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 113:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15572);
     $145 = $2 + 4 | 0;
     $146 = HEAP32[$145 >> 2] | 0;
     if ($146 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($146, $3);
      HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 103:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 101:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15583);
     $156 = $2 + 4 | 0;
     $157 = HEAP32[$156 >> 2] | 0;
     if ($157 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($157, $3);
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 116:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15594);
     $164 = $2 + 4 | 0;
     $165 = HEAP32[$164 >> 2] | 0;
     if ($165 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($165, $3);
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 105:
  {
   if ((HEAP8[$0 + 1 >> 0] | 0) != 120) {
    $$3 = $0;
    break L1;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15604);
   $175 = $2 + 4 | 0;
   $176 = HEAP32[$175 >> 2] | 0;
   if ($176 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($176, $3);
    HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$3 = $0 + 2 | 0;
   break L1;
   break;
  }
 case 108:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 101:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15615);
     $186 = $2 + 4 | 0;
     $187 = HEAP32[$186 >> 2] | 0;
     if ($187 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($187, $3);
      HEAP32[$186 >> 2] = (HEAP32[$186 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 105:
    {
     $194 = $0 + 2 | 0;
     $195 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($194, $1, $2) | 0;
     if (($195 | 0) == ($194 | 0)) {
      $$3 = $0;
      break L1;
     }
     $199 = HEAP32[$2 + 4 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($199 | 0)) {
      $$3 = $0;
      break L1;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($199 + -24 | 0, 0, 15626) | 0;
     $$3 = $195;
     break L1;
     break;
    }
   case 115:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15638);
     $202 = $2 + 4 | 0;
     $203 = HEAP32[$202 >> 2] | 0;
     if ($203 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($203, $3);
      HEAP32[$202 >> 2] = (HEAP32[$202 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 83:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($3, 15649);
     $210 = $2 + 4 | 0;
     $211 = HEAP32[$210 >> 2] | 0;
     if ($211 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($211, $3);
      HEAP32[$210 >> 2] = (HEAP32[$210 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 116:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15661);
     $218 = $2 + 4 | 0;
     $219 = HEAP32[$218 >> 2] | 0;
     if ($219 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($219, $3);
      HEAP32[$218 >> 2] = (HEAP32[$218 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 109:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 105:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15671);
     $229 = $2 + 4 | 0;
     $230 = HEAP32[$229 >> 2] | 0;
     if ($230 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($230, $3);
      HEAP32[$229 >> 2] = (HEAP32[$229 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 73:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15681);
     $237 = $2 + 4 | 0;
     $238 = HEAP32[$237 >> 2] | 0;
     if ($238 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($238, $3);
      HEAP32[$237 >> 2] = (HEAP32[$237 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 108:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15520);
     $245 = $2 + 4 | 0;
     $246 = HEAP32[$245 >> 2] | 0;
     if ($246 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($246, $3);
      HEAP32[$245 >> 2] = (HEAP32[$245 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 76:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15692);
     $253 = $2 + 4 | 0;
     $254 = HEAP32[$253 >> 2] | 0;
     if ($254 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($254, $3);
      HEAP32[$253 >> 2] = (HEAP32[$253 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 109:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15703);
     $261 = $2 + 4 | 0;
     $262 = HEAP32[$261 >> 2] | 0;
     if ($262 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($262, $3);
      HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 110:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 97:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($3, 15714);
     $272 = $2 + 4 | 0;
     $273 = HEAP32[$272 >> 2] | 0;
     if ($273 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($273, $3);
      HEAP32[$272 >> 2] = (HEAP32[$272 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 101:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15729);
     $280 = $2 + 4 | 0;
     $281 = HEAP32[$280 >> 2] | 0;
     if ($281 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($281, $3);
      HEAP32[$280 >> 2] = (HEAP32[$280 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 103:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15671);
     $288 = $2 + 4 | 0;
     $289 = HEAP32[$288 >> 2] | 0;
     if ($289 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($289, $3);
      HEAP32[$288 >> 2] = (HEAP32[$288 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 116:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15740);
     $296 = $2 + 4 | 0;
     $297 = HEAP32[$296 >> 2] | 0;
     if ($297 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($297, $3);
      HEAP32[$296 >> 2] = (HEAP32[$296 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 119:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($3, 15750);
     $304 = $2 + 4 | 0;
     $305 = HEAP32[$304 >> 2] | 0;
     if ($305 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($305, $3);
      HEAP32[$304 >> 2] = (HEAP32[$304 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 111:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 111:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15763);
     $315 = $2 + 4 | 0;
     $316 = HEAP32[$315 >> 2] | 0;
     if ($316 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($316, $3);
      HEAP32[$315 >> 2] = (HEAP32[$315 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 114:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15774);
     $323 = $2 + 4 | 0;
     $324 = HEAP32[$323 >> 2] | 0;
     if ($324 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($324, $3);
      HEAP32[$323 >> 2] = (HEAP32[$323 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 82:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15784);
     $331 = $2 + 4 | 0;
     $332 = HEAP32[$331 >> 2] | 0;
     if ($332 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($332, $3);
      HEAP32[$331 >> 2] = (HEAP32[$331 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 112:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 109:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($3, 15795);
     $342 = $2 + 4 | 0;
     $343 = HEAP32[$342 >> 2] | 0;
     if ($343 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($343, $3);
      HEAP32[$342 >> 2] = (HEAP32[$342 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 108:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15807);
     $350 = $2 + 4 | 0;
     $351 = HEAP32[$350 >> 2] | 0;
     if ($351 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($351, $3);
      HEAP32[$350 >> 2] = (HEAP32[$350 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 76:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15817);
     $358 = $2 + 4 | 0;
     $359 = HEAP32[$358 >> 2] | 0;
     if ($359 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($359, $3);
      HEAP32[$358 >> 2] = (HEAP32[$358 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 112:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15828);
     $366 = $2 + 4 | 0;
     $367 = HEAP32[$366 >> 2] | 0;
     if ($367 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($367, $3);
      HEAP32[$366 >> 2] = (HEAP32[$366 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 115:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15807);
     $374 = $2 + 4 | 0;
     $375 = HEAP32[$374 >> 2] | 0;
     if ($375 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($375, $3);
      HEAP32[$374 >> 2] = (HEAP32[$374 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 116:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15839);
     $382 = $2 + 4 | 0;
     $383 = HEAP32[$382 >> 2] | 0;
     if ($383 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($383, $3);
      HEAP32[$382 >> 2] = (HEAP32[$382 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 113:
  {
   if ((HEAP8[$0 + 1 >> 0] | 0) != 117) {
    $$3 = $0;
    break L1;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15850);
   $393 = $2 + 4 | 0;
   $394 = HEAP32[$393 >> 2] | 0;
   if ($394 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($394, $3);
    HEAP32[$393 >> 2] = (HEAP32[$393 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$3 = $0 + 2 | 0;
   break L1;
   break;
  }
 case 114:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 109:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15860);
     $404 = $2 + 4 | 0;
     $405 = HEAP32[$404 >> 2] | 0;
     if ($405 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($405, $3);
      HEAP32[$404 >> 2] = (HEAP32[$404 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 77:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15870);
     $412 = $2 + 4 | 0;
     $413 = HEAP32[$412 >> 2] | 0;
     if ($413 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($413, $3);
      HEAP32[$412 >> 2] = (HEAP32[$412 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 115:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15881);
     $420 = $2 + 4 | 0;
     $421 = HEAP32[$420 >> 2] | 0;
     if ($421 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($421, $3);
      HEAP32[$420 >> 2] = (HEAP32[$420 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 83:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($3, 15892);
     $428 = $2 + 4 | 0;
     $429 = HEAP32[$428 >> 2] | 0;
     if ($429 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($429, $3);
      HEAP32[$428 >> 2] = (HEAP32[$428 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 118:
  {
   if (((HEAP8[$0 + 1 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
    $$3 = $0;
    break L1;
   }
   $439 = $0 + 2 | 0;
   $440 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($439, $1, $2) | 0;
   if (($440 | 0) == ($439 | 0)) {
    $$3 = $0;
    break L1;
   }
   $444 = HEAP32[$2 + 4 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($444 | 0)) {
    $$3 = $0;
    break L1;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($444 + -24 | 0, 0, 15492) | 0;
   $$3 = $440;
   break L1;
   break;
  }
 default:
  {
   $$3 = $0;
   break L1;
  }
 } while (0); else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZNSt3__212__next_primeEj($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0328 = 0, $$0334 = 0, $$0337 = 0, $$1 = 0, $$2332 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$8 = 0, $$sink369 = 0, $1 = 0, $100 = 0, $104 = 0, $105 = 0, $109 = 0, $110 = 0, $114 = 0, $115 = 0, $119 = 0, $120 = 0, $124 = 0, $125 = 0, $129 = 0, $130 = 0, $134 = 0, $135 = 0, $139 = 0, $140 = 0, $144 = 0, $145 = 0, $149 = 0, $150 = 0, $154 = 0, $155 = 0, $159 = 0, $16 = 0, $160 = 0, $164 = 0, $165 = 0, $169 = 0, $170 = 0, $174 = 0, $175 = 0, $179 = 0, $180 = 0, $184 = 0, $185 = 0, $189 = 0, $19 = 0, $190 = 0, $194 = 0, $195 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $204 = 0, $205 = 0, $209 = 0, $210 = 0, $214 = 0, $215 = 0, $219 = 0, $220 = 0, $224 = 0, $225 = 0, $229 = 0, $230 = 0, $234 = 0, $235 = 0, $239 = 0, $240 = 0, $244 = 0, $245 = 0, $249 = 0, $25 = 0, $250 = 0, $254 = 0, $255 = 0, $259 = 0, $260 = 0, $261 = 0, $263 = 0, $266 = 0, $267 = 0, $29 = 0, $3 = 0, $30 = 0, $34 = 0, $35 = 0, $39 = 0, $40 = 0, $44 = 0, $45 = 0, $49 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $69 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $79 = 0, $8 = 0, $80 = 0, $84 = 0, $85 = 0, $89 = 0, $90 = 0, $94 = 0, $95 = 0, $99 = 0, $spec$select = 0, $spec$select339$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 do if ($0 >>> 0 < 212) {
  $5 = __ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_(2948, 3140, $2, $1) | 0;
  $$8 = HEAP32[$5 >> 2] | 0;
 } else {
  $7 = ($0 >>> 0) / 210 | 0;
  $8 = $7 * 210 | 0;
  HEAP32[$3 >> 2] = $0 - $8;
  $$0328 = 0;
  $$0337 = $7;
  $$sink369 = $8;
  $spec$select339$sink = (__ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_(3140, 3332, $3, $1) | 0) - 3140 >> 2;
  L4 : while (1) {
   $16 = (HEAP32[3140 + ($spec$select339$sink << 2) >> 2] | 0) + $$sink369 | 0;
   $$0334 = 5;
   while (1) {
    if ($$0334 >>> 0 >= 47) {
     label = 6;
     break;
    }
    $19 = HEAP32[2948 + ($$0334 << 2) >> 2] | 0;
    $20 = ($16 >>> 0) / ($19 >>> 0) | 0;
    if ($20 >>> 0 < $19 >>> 0) {
     label = 107;
     break L4;
    }
    if (($16 | 0) == (Math_imul($20, $19) | 0)) {
     $$6 = $$0328;
     break;
    } else $$0334 = $$0334 + 1 | 0;
   }
   L10 : do if ((label | 0) == 6) {
    label = 0;
    $$0 = 211;
    $$4 = $$0328;
    L12 : while (1) {
     $25 = ($16 >>> 0) / ($$0 >>> 0) | 0;
     do if ($25 >>> 0 < $$0 >>> 0) {
      $$1 = $$0;
      $$2332 = 1;
      $$5 = $16;
     } else if (($16 | 0) == (Math_imul($25, $$0) | 0)) {
      $$1 = $$0;
      $$2332 = 9;
      $$5 = $$4;
     } else {
      $29 = $$0 + 10 | 0;
      $30 = ($16 >>> 0) / ($29 >>> 0) | 0;
      if ($30 >>> 0 < $29 >>> 0) {
       $$1 = $29;
       $$2332 = 1;
       $$5 = $16;
      } else if (($16 | 0) == (Math_imul($30, $29) | 0)) {
       $$1 = $29;
       $$2332 = 9;
       $$5 = $$4;
      } else {
       $34 = $$0 + 12 | 0;
       $35 = ($16 >>> 0) / ($34 >>> 0) | 0;
       if ($35 >>> 0 < $34 >>> 0) {
        $$1 = $34;
        $$2332 = 1;
        $$5 = $16;
       } else if (($16 | 0) == (Math_imul($35, $34) | 0)) {
        $$1 = $34;
        $$2332 = 9;
        $$5 = $$4;
       } else {
        $39 = $$0 + 16 | 0;
        $40 = ($16 >>> 0) / ($39 >>> 0) | 0;
        if ($40 >>> 0 < $39 >>> 0) {
         $$1 = $39;
         $$2332 = 1;
         $$5 = $16;
        } else if (($16 | 0) == (Math_imul($40, $39) | 0)) {
         $$1 = $39;
         $$2332 = 9;
         $$5 = $$4;
        } else {
         $44 = $$0 + 18 | 0;
         $45 = ($16 >>> 0) / ($44 >>> 0) | 0;
         if ($45 >>> 0 < $44 >>> 0) {
          $$1 = $44;
          $$2332 = 1;
          $$5 = $16;
         } else if (($16 | 0) == (Math_imul($45, $44) | 0)) {
          $$1 = $44;
          $$2332 = 9;
          $$5 = $$4;
         } else {
          $49 = $$0 + 22 | 0;
          $50 = ($16 >>> 0) / ($49 >>> 0) | 0;
          if ($50 >>> 0 < $49 >>> 0) {
           $$1 = $49;
           $$2332 = 1;
           $$5 = $16;
          } else if (($16 | 0) == (Math_imul($50, $49) | 0)) {
           $$1 = $49;
           $$2332 = 9;
           $$5 = $$4;
          } else {
           $54 = $$0 + 28 | 0;
           $55 = ($16 >>> 0) / ($54 >>> 0) | 0;
           if ($55 >>> 0 < $54 >>> 0) {
            $$1 = $54;
            $$2332 = 1;
            $$5 = $16;
           } else if (($16 | 0) == (Math_imul($55, $54) | 0)) {
            $$1 = $54;
            $$2332 = 9;
            $$5 = $$4;
           } else {
            $59 = $$0 + 30 | 0;
            $60 = ($16 >>> 0) / ($59 >>> 0) | 0;
            if ($60 >>> 0 < $59 >>> 0) {
             $$1 = $59;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($60, $59) | 0)) {
             $$1 = $59;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $64 = $$0 + 36 | 0;
            $65 = ($16 >>> 0) / ($64 >>> 0) | 0;
            if ($65 >>> 0 < $64 >>> 0) {
             $$1 = $64;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($65, $64) | 0)) {
             $$1 = $64;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $69 = $$0 + 40 | 0;
            $70 = ($16 >>> 0) / ($69 >>> 0) | 0;
            if ($70 >>> 0 < $69 >>> 0) {
             $$1 = $69;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($70, $69) | 0)) {
             $$1 = $69;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $74 = $$0 + 42 | 0;
            $75 = ($16 >>> 0) / ($74 >>> 0) | 0;
            if ($75 >>> 0 < $74 >>> 0) {
             $$1 = $74;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($75, $74) | 0)) {
             $$1 = $74;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $79 = $$0 + 46 | 0;
            $80 = ($16 >>> 0) / ($79 >>> 0) | 0;
            if ($80 >>> 0 < $79 >>> 0) {
             $$1 = $79;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($80, $79) | 0)) {
             $$1 = $79;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $84 = $$0 + 52 | 0;
            $85 = ($16 >>> 0) / ($84 >>> 0) | 0;
            if ($85 >>> 0 < $84 >>> 0) {
             $$1 = $84;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($85, $84) | 0)) {
             $$1 = $84;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $89 = $$0 + 58 | 0;
            $90 = ($16 >>> 0) / ($89 >>> 0) | 0;
            if ($90 >>> 0 < $89 >>> 0) {
             $$1 = $89;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($90, $89) | 0)) {
             $$1 = $89;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $94 = $$0 + 60 | 0;
            $95 = ($16 >>> 0) / ($94 >>> 0) | 0;
            if ($95 >>> 0 < $94 >>> 0) {
             $$1 = $94;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($95, $94) | 0)) {
             $$1 = $94;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $99 = $$0 + 66 | 0;
            $100 = ($16 >>> 0) / ($99 >>> 0) | 0;
            if ($100 >>> 0 < $99 >>> 0) {
             $$1 = $99;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($100, $99) | 0)) {
             $$1 = $99;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $104 = $$0 + 70 | 0;
            $105 = ($16 >>> 0) / ($104 >>> 0) | 0;
            if ($105 >>> 0 < $104 >>> 0) {
             $$1 = $104;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($105, $104) | 0)) {
             $$1 = $104;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $109 = $$0 + 72 | 0;
            $110 = ($16 >>> 0) / ($109 >>> 0) | 0;
            if ($110 >>> 0 < $109 >>> 0) {
             $$1 = $109;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($110, $109) | 0)) {
             $$1 = $109;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $114 = $$0 + 78 | 0;
            $115 = ($16 >>> 0) / ($114 >>> 0) | 0;
            if ($115 >>> 0 < $114 >>> 0) {
             $$1 = $114;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($115, $114) | 0)) {
             $$1 = $114;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $119 = $$0 + 82 | 0;
            $120 = ($16 >>> 0) / ($119 >>> 0) | 0;
            if ($120 >>> 0 < $119 >>> 0) {
             $$1 = $119;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($120, $119) | 0)) {
             $$1 = $119;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $124 = $$0 + 88 | 0;
            $125 = ($16 >>> 0) / ($124 >>> 0) | 0;
            if ($125 >>> 0 < $124 >>> 0) {
             $$1 = $124;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($125, $124) | 0)) {
             $$1 = $124;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $129 = $$0 + 96 | 0;
            $130 = ($16 >>> 0) / ($129 >>> 0) | 0;
            if ($130 >>> 0 < $129 >>> 0) {
             $$1 = $129;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($130, $129) | 0)) {
             $$1 = $129;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $134 = $$0 + 100 | 0;
            $135 = ($16 >>> 0) / ($134 >>> 0) | 0;
            if ($135 >>> 0 < $134 >>> 0) {
             $$1 = $134;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($135, $134) | 0)) {
             $$1 = $134;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $139 = $$0 + 102 | 0;
            $140 = ($16 >>> 0) / ($139 >>> 0) | 0;
            if ($140 >>> 0 < $139 >>> 0) {
             $$1 = $139;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($140, $139) | 0)) {
             $$1 = $139;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $144 = $$0 + 106 | 0;
            $145 = ($16 >>> 0) / ($144 >>> 0) | 0;
            if ($145 >>> 0 < $144 >>> 0) {
             $$1 = $144;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($145, $144) | 0)) {
             $$1 = $144;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $149 = $$0 + 108 | 0;
            $150 = ($16 >>> 0) / ($149 >>> 0) | 0;
            if ($150 >>> 0 < $149 >>> 0) {
             $$1 = $149;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($150, $149) | 0)) {
             $$1 = $149;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $154 = $$0 + 112 | 0;
            $155 = ($16 >>> 0) / ($154 >>> 0) | 0;
            if ($155 >>> 0 < $154 >>> 0) {
             $$1 = $154;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($155, $154) | 0)) {
             $$1 = $154;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $159 = $$0 + 120 | 0;
            $160 = ($16 >>> 0) / ($159 >>> 0) | 0;
            if ($160 >>> 0 < $159 >>> 0) {
             $$1 = $159;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($160, $159) | 0)) {
             $$1 = $159;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $164 = $$0 + 126 | 0;
            $165 = ($16 >>> 0) / ($164 >>> 0) | 0;
            if ($165 >>> 0 < $164 >>> 0) {
             $$1 = $164;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($165, $164) | 0)) {
             $$1 = $164;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $169 = $$0 + 130 | 0;
            $170 = ($16 >>> 0) / ($169 >>> 0) | 0;
            if ($170 >>> 0 < $169 >>> 0) {
             $$1 = $169;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($170, $169) | 0)) {
             $$1 = $169;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $174 = $$0 + 136 | 0;
            $175 = ($16 >>> 0) / ($174 >>> 0) | 0;
            if ($175 >>> 0 < $174 >>> 0) {
             $$1 = $174;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($175, $174) | 0)) {
             $$1 = $174;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $179 = $$0 + 138 | 0;
            $180 = ($16 >>> 0) / ($179 >>> 0) | 0;
            if ($180 >>> 0 < $179 >>> 0) {
             $$1 = $179;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($180, $179) | 0)) {
             $$1 = $179;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $184 = $$0 + 142 | 0;
            $185 = ($16 >>> 0) / ($184 >>> 0) | 0;
            if ($185 >>> 0 < $184 >>> 0) {
             $$1 = $184;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($185, $184) | 0)) {
             $$1 = $184;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $189 = $$0 + 148 | 0;
            $190 = ($16 >>> 0) / ($189 >>> 0) | 0;
            if ($190 >>> 0 < $189 >>> 0) {
             $$1 = $189;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($190, $189) | 0)) {
             $$1 = $189;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $194 = $$0 + 150 | 0;
            $195 = ($16 >>> 0) / ($194 >>> 0) | 0;
            if ($195 >>> 0 < $194 >>> 0) {
             $$1 = $194;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($195, $194) | 0)) {
             $$1 = $194;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $199 = $$0 + 156 | 0;
            $200 = ($16 >>> 0) / ($199 >>> 0) | 0;
            if ($200 >>> 0 < $199 >>> 0) {
             $$1 = $199;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($200, $199) | 0)) {
             $$1 = $199;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $204 = $$0 + 162 | 0;
            $205 = ($16 >>> 0) / ($204 >>> 0) | 0;
            if ($205 >>> 0 < $204 >>> 0) {
             $$1 = $204;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($205, $204) | 0)) {
             $$1 = $204;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $209 = $$0 + 166 | 0;
            $210 = ($16 >>> 0) / ($209 >>> 0) | 0;
            if ($210 >>> 0 < $209 >>> 0) {
             $$1 = $209;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($210, $209) | 0)) {
             $$1 = $209;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $214 = $$0 + 168 | 0;
            $215 = ($16 >>> 0) / ($214 >>> 0) | 0;
            if ($215 >>> 0 < $214 >>> 0) {
             $$1 = $214;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($215, $214) | 0)) {
             $$1 = $214;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $219 = $$0 + 172 | 0;
            $220 = ($16 >>> 0) / ($219 >>> 0) | 0;
            if ($220 >>> 0 < $219 >>> 0) {
             $$1 = $219;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($220, $219) | 0)) {
             $$1 = $219;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $224 = $$0 + 178 | 0;
            $225 = ($16 >>> 0) / ($224 >>> 0) | 0;
            if ($225 >>> 0 < $224 >>> 0) {
             $$1 = $224;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($225, $224) | 0)) {
             $$1 = $224;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $229 = $$0 + 180 | 0;
            $230 = ($16 >>> 0) / ($229 >>> 0) | 0;
            if ($230 >>> 0 < $229 >>> 0) {
             $$1 = $229;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($230, $229) | 0)) {
             $$1 = $229;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $234 = $$0 + 186 | 0;
            $235 = ($16 >>> 0) / ($234 >>> 0) | 0;
            if ($235 >>> 0 < $234 >>> 0) {
             $$1 = $234;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($235, $234) | 0)) {
             $$1 = $234;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $239 = $$0 + 190 | 0;
            $240 = ($16 >>> 0) / ($239 >>> 0) | 0;
            if ($240 >>> 0 < $239 >>> 0) {
             $$1 = $239;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($240, $239) | 0)) {
             $$1 = $239;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $244 = $$0 + 192 | 0;
            $245 = ($16 >>> 0) / ($244 >>> 0) | 0;
            if ($245 >>> 0 < $244 >>> 0) {
             $$1 = $244;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($245, $244) | 0)) {
             $$1 = $244;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $249 = $$0 + 196 | 0;
            $250 = ($16 >>> 0) / ($249 >>> 0) | 0;
            if ($250 >>> 0 < $249 >>> 0) {
             $$1 = $249;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($250, $249) | 0)) {
             $$1 = $249;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $254 = $$0 + 198 | 0;
            $255 = ($16 >>> 0) / ($254 >>> 0) | 0;
            if ($255 >>> 0 < $254 >>> 0) {
             $$1 = $254;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($255, $254) | 0)) {
             $$1 = $254;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $259 = $$0 + 208 | 0;
            $260 = ($16 >>> 0) / ($259 >>> 0) | 0;
            $261 = $260 >>> 0 < $259 >>> 0;
            $263 = ($16 | 0) == (Math_imul($260, $259) | 0);
            $$1 = $261 | $263 ? $259 : $$0 + 210 | 0;
            $$2332 = $261 ? 1 : $263 ? 9 : 0;
            $$5 = $261 ? $16 : $$4;
           }
          }
         }
        }
       }
      }
     } while (0);
     switch ($$2332 & 15) {
     case 9:
      {
       $$6 = $$5;
       break L10;
       break;
      }
     case 0:
      {
       $$0 = $$1;
       $$4 = $$5;
       break;
      }
     default:
      break L12;
     }
    }
    if (!$$2332) $$6 = $$5; else {
     label = 108;
     break L4;
    }
   } while (0);
   $266 = $spec$select339$sink + 1 | 0;
   $267 = ($266 | 0) == 48;
   $spec$select = $$0337 + ($267 & 1) | 0;
   $$0328 = $$6;
   $$0337 = $spec$select;
   $$sink369 = $spec$select * 210 | 0;
   $spec$select339$sink = $267 ? 0 : $266;
  }
  if ((label | 0) == 107) {
   HEAP32[$2 >> 2] = $16;
   $$8 = $16;
   break;
  } else if ((label | 0) == 108) {
   HEAP32[$2 >> 2] = $16;
   $$8 = $$5;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$8 | 0;
}

function _vfscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0266$lcssa = 0, $$0266409 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273420 = 0, $$0276$ph$ph = 0, $$0280$ph = 0, $$0280$ph$ph = 0, $$0285419 = 0, $$0288411 = 0, $$0290416 = 0, $$0294 = 0, $$0295 = 0, $$0308414 = 0, $$10 = 0, $$10318 = 0, $$11 = 0, $$12 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1281 = 0, $$1286 = 0, $$1291 = 0, $$1309 = 0, $$2 = 0, $$2275 = 0, $$2278$ph = 0, $$2282 = 0, $$2282$ph = 0, $$2287 = 0, $$2292 = 0, $$2310$ph = 0, $$3$lcssa = 0, $$3283 = 0, $$3293 = 0, $$3408 = 0, $$4 = 0, $$4284 = 0, $$5 = 0, $$5313 = 0, $$6 = 0, $$6302 = 0, $$6314 = 0, $$7 = 0, $$7315 = 0, $$8 = 0, $$8316 = 0, $$9 = 0, $$9317 = 0, $$ph$ph = 0, $$pre$phi493Z2D = 0, $$pre$phiZ2D = 0, $$sroa$2$0$$sroa_idx13 = 0, $102 = 0, $103 = 0, $108 = 0, $11 = 0, $110 = 0, $113 = 0, $115 = 0, $118 = 0, $121 = 0, $123 = 0, $128 = 0, $13 = 0, $135 = 0, $14 = 0, $141 = 0, $147 = 0, $149 = 0, $15 = 0, $150 = 0, $156 = 0, $159 = 0, $16 = 0, $163 = 0, $165 = 0, $17 = 0, $170 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $178 = 0, $18 = 0, $183 = 0, $187 = 0, $19 = 0, $192 = 0, $193 = 0, $194 = 0, $196 = 0, $198 = 0, $199 = 0, $20 = 0, $207 = 0, $219 = 0, $22 = 0, $223 = 0, $225 = 0, $233 = 0, $242 = 0, $245 = 0, $25 = 0, $253 = 0, $260 = 0, $268 = 0, $275 = 0, $280 = 0, $281 = 0, $288 = 0, $298 = 0.0, $3 = 0, $30 = 0, $318 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $37 = 0, $4 = 0, $43 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $6 = 0, $67 = 0, $92 = 0, $93 = 0, $spec$select = 0, $spec$select319 = 0, $trunc = 0, label = 0, sp = 0, $$2282$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 $3 = sp + 8 | 0;
 $4 = sp + 17 | 0;
 $5 = sp;
 $6 = sp + 16 | 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $320 = ___lockfile($0) | 0; else $320 = 0;
 $11 = HEAP8[$1 >> 0] | 0;
 L4 : do if (!($11 << 24 >> 24)) $$3293 = 0; else {
  $13 = $0 + 4 | 0;
  $14 = $0 + 100 | 0;
  $15 = $0 + 108 | 0;
  $16 = $0 + 8 | 0;
  $17 = $4 + 10 | 0;
  $18 = $4 + 33 | 0;
  $19 = $4 + 46 | 0;
  $20 = $4 + 94 | 0;
  $$sroa$2$0$$sroa_idx13 = $3 + 4 | 0;
  $$0273420 = $1;
  $$0285419 = 0;
  $$0290416 = 0;
  $$0308414 = 0;
  $22 = $11;
  $321 = 0;
  L6 : while (1) {
   L8 : do if (!(_isspace($22 & 255) | 0)) {
    $52 = (HEAP8[$$0273420 >> 0] | 0) == 37;
    L10 : do if ($52) {
     $53 = $$0273420 + 1 | 0;
     $54 = HEAP8[$53 >> 0] | 0;
     L12 : do switch ($54 << 24 >> 24) {
     case 37:
      {
       break L10;
       break;
      }
     case 42:
      {
       $$0295 = 0;
       $$2275 = $$0273420 + 2 | 0;
       break;
      }
     default:
      {
       if (_isdigit($54 & 255) | 0) if ((HEAP8[$$0273420 + 2 >> 0] | 0) == 36) {
        $$0295 = _arg_n_724($2, (HEAPU8[$53 >> 0] | 0) + -48 | 0) | 0;
        $$2275 = $$0273420 + 3 | 0;
        break L12;
       }
       $92 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
       $93 = HEAP32[$92 >> 2] | 0;
       HEAP32[$2 >> 2] = $92 + 4;
       $$0295 = $93;
       $$2275 = $53;
      }
     } while (0);
     if (!(_isdigit(HEAPU8[$$2275 >> 0] | 0) | 0)) {
      $$0266$lcssa = 0;
      $$3$lcssa = $$2275;
     } else {
      $$0266409 = 0;
      $$3408 = $$2275;
      while (1) {
       $102 = ($$0266409 * 10 | 0) + -48 + (HEAPU8[$$3408 >> 0] | 0) | 0;
       $103 = $$3408 + 1 | 0;
       if (!(_isdigit(HEAPU8[$103 >> 0] | 0) | 0)) {
        $$0266$lcssa = $102;
        $$3$lcssa = $103;
        break;
       } else {
        $$0266409 = $102;
        $$3408 = $103;
       }
      }
     }
     $108 = HEAP8[$$3$lcssa >> 0] | 0;
     $110 = $$3$lcssa + 1 | 0;
     if ($108 << 24 >> 24 == 109) {
      $$0270 = ($$0295 | 0) != 0 & 1;
      $$1309 = 0;
      $$4 = $110;
      $$pre$phiZ2D = $$3$lcssa + 2 | 0;
      $113 = HEAP8[$110 >> 0] | 0;
      $324 = 0;
     } else {
      $$0270 = 0;
      $$1309 = $$0308414;
      $$4 = $$3$lcssa;
      $$pre$phiZ2D = $110;
      $113 = $108;
      $324 = $321;
     }
     switch ($113 << 24 >> 24) {
     case 104:
      {
       $115 = (HEAP8[$$pre$phiZ2D >> 0] | 0) == 104;
       $$0268 = $115 ? -2 : -1;
       $$5 = $115 ? $$4 + 2 | 0 : $$pre$phiZ2D;
       break;
      }
     case 108:
      {
       $118 = (HEAP8[$$pre$phiZ2D >> 0] | 0) == 108;
       $$0268 = $118 ? 3 : 1;
       $$5 = $118 ? $$4 + 2 | 0 : $$pre$phiZ2D;
       break;
      }
     case 106:
      {
       $$0268 = 3;
       $$5 = $$pre$phiZ2D;
       break;
      }
     case 116:
     case 122:
      {
       $$0268 = 1;
       $$5 = $$pre$phiZ2D;
       break;
      }
     case 76:
      {
       $$0268 = 2;
       $$5 = $$pre$phiZ2D;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       $$0268 = 0;
       $$5 = $$4;
       break;
      }
     default:
      {
       $$8316 = $$1309;
       $325 = $324;
       label = 143;
       break L6;
      }
     }
     $121 = HEAPU8[$$5 >> 0] | 0;
     $123 = ($121 & 47 | 0) == 3;
     $spec$select = $123 ? $121 | 32 : $121;
     $spec$select319 = $123 ? 1 : $$0268;
     $trunc = $spec$select & 255;
     switch ($trunc << 24 >> 24) {
     case 99:
      {
       $$1267 = ($$0266$lcssa | 0) > 1 ? $$0266$lcssa : 1;
       $$1286 = $$0285419;
       break;
      }
     case 91:
      {
       $$1267 = $$0266$lcssa;
       $$1286 = $$0285419;
       break;
      }
     case 110:
      {
       _store_int_725($$0295, $spec$select319, $$0285419, (($$0285419 | 0) < 0) << 31 >> 31);
       $$12 = $$5;
       $$1291 = $$0290416;
       $$2287 = $$0285419;
       $$7315 = $$1309;
       $322 = $324;
       break L8;
       break;
      }
     default:
      {
       ___shlim($0, 0);
       do {
        $128 = HEAP32[$13 >> 2] | 0;
        if ($128 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
         HEAP32[$13 >> 2] = $128 + 1;
         $135 = HEAPU8[$128 >> 0] | 0;
        } else $135 = ___shgetc($0) | 0;
       } while ((_isspace($135) | 0) != 0);
       if (!(HEAP32[$14 >> 2] | 0)) $147 = HEAP32[$13 >> 2] | 0; else {
        $141 = (HEAP32[$13 >> 2] | 0) + -1 | 0;
        HEAP32[$13 >> 2] = $141;
        $147 = $141;
       }
       $$1267 = $$0266$lcssa;
       $$1286 = (HEAP32[$15 >> 2] | 0) + $$0285419 + $147 - (HEAP32[$16 >> 2] | 0) | 0;
      }
     }
     ___shlim($0, $$1267);
     $149 = HEAP32[$13 >> 2] | 0;
     $150 = HEAP32[$14 >> 2] | 0;
     if ($149 >>> 0 < $150 >>> 0) {
      HEAP32[$13 >> 2] = $149 + 1;
      $156 = $150;
     } else {
      if ((___shgetc($0) | 0) < 0) {
       $$8316 = $$1309;
       $325 = $324;
       label = 143;
       break L6;
      }
      $156 = HEAP32[$14 >> 2] | 0;
     }
     if ($156 | 0) HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1;
     L59 : do switch ($trunc << 24 >> 24) {
     case 91:
     case 99:
     case 115:
      {
       $159 = ($spec$select | 0) == 99;
       L61 : do if (($spec$select | 16 | 0) == 115) {
        _memset($4 | 0, -1, 257) | 0;
        HEAP8[$4 >> 0] = 0;
        if (($spec$select | 0) == 115) {
         HEAP8[$18 >> 0] = 0;
         HEAP8[$17 >> 0] = 0;
         HEAP8[$17 + 1 >> 0] = 0;
         HEAP8[$17 + 2 >> 0] = 0;
         HEAP8[$17 + 3 >> 0] = 0;
         HEAP8[$17 + 4 >> 0] = 0;
         $$10 = $$5;
        } else $$10 = $$5;
       } else {
        $163 = $$5 + 1 | 0;
        $165 = (HEAP8[$163 >> 0] | 0) == 94;
        $$0294 = $165 & 1;
        $$6 = $165 ? $$5 + 2 | 0 : $163;
        _memset($4 | 0, $$0294 | 0, 257) | 0;
        HEAP8[$4 >> 0] = 0;
        switch (HEAP8[$$6 >> 0] | 0) {
        case 45:
         {
          $170 = ($$0294 ^ 1) & 255;
          HEAP8[$19 >> 0] = $170;
          $$7 = $$6 + 1 | 0;
          $$pre$phi493Z2D = $170;
          break;
         }
        case 93:
         {
          $173 = ($$0294 ^ 1) & 255;
          HEAP8[$20 >> 0] = $173;
          $$7 = $$6 + 1 | 0;
          $$pre$phi493Z2D = $173;
          break;
         }
        default:
         {
          $$7 = $$6;
          $$pre$phi493Z2D = ($$0294 ^ 1) & 255;
         }
        }
        $$8 = $$7;
        while (1) {
         $174 = HEAP8[$$8 >> 0] | 0;
         L72 : do switch ($174 << 24 >> 24) {
         case 0:
          {
           $$8316 = $$1309;
           $325 = $324;
           label = 143;
           break L6;
           break;
          }
         case 93:
          {
           $$10 = $$8;
           break L61;
           break;
          }
         case 45:
          {
           $175 = $$8 + 1 | 0;
           $176 = HEAP8[$175 >> 0] | 0;
           switch ($176 << 24 >> 24) {
           case 93:
           case 0:
            {
             $$9 = $$8;
             $187 = 45;
             break L72;
             break;
            }
           default:
            {}
           }
           $178 = HEAP8[$$8 + -1 >> 0] | 0;
           if (($178 & 255) < ($176 & 255)) {
            $$0288411 = $178 & 255;
            do {
             $$0288411 = $$0288411 + 1 | 0;
             HEAP8[$4 + $$0288411 >> 0] = $$pre$phi493Z2D;
             $183 = HEAP8[$175 >> 0] | 0;
            } while ($$0288411 >>> 0 < ($183 & 255) >>> 0);
            $$9 = $175;
            $187 = $183;
           } else {
            $$9 = $175;
            $187 = $176;
           }
           break;
          }
         default:
          {
           $$9 = $$8;
           $187 = $174;
          }
         } while (0);
         HEAP8[$4 + (($187 & 255) + 1) >> 0] = $$pre$phi493Z2D;
         $$8 = $$9 + 1 | 0;
        }
       } while (0);
       $192 = $159 ? $$1267 + 1 | 0 : 31;
       $193 = ($spec$select319 | 0) == 1;
       $194 = ($$0270 | 0) != 0;
       L80 : do if ($193) {
        if ($194) {
         $196 = _malloc($192 << 2) | 0;
         if (!$196) {
          $$8316 = 0;
          $325 = 0;
          label = 143;
          break L6;
         } else $327 = $196;
        } else $327 = $$0295;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$$sroa$2$0$$sroa_idx13 >> 2] = 0;
        $$0276$ph$ph = $192;
        $$0280$ph$ph = 0;
        $$ph$ph = $327;
        L85 : while (1) {
         $198 = ($$ph$ph | 0) == 0;
         $$0280$ph = $$0280$ph$ph;
         while (1) {
          L89 : while (1) {
           $199 = HEAP32[$13 >> 2] | 0;
           if ($199 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $199 + 1;
            $207 = HEAPU8[$199 >> 0] | 0;
           } else $207 = ___shgetc($0) | 0;
           if (!(HEAP8[$4 + ($207 + 1) >> 0] | 0)) break L85;
           HEAP8[$6 >> 0] = $207;
           switch (_mbrtowc($5, $6, 1, $3) | 0) {
           case -1:
            {
             $$8316 = 0;
             $325 = $$ph$ph;
             label = 143;
             break L6;
             break;
            }
           case -2:
            break;
           default:
            break L89;
           }
          }
          if ($198) $$1281 = $$0280$ph; else {
           HEAP32[$$ph$ph + ($$0280$ph << 2) >> 2] = HEAP32[$5 >> 2];
           $$1281 = $$0280$ph + 1 | 0;
          }
          if ($194 & ($$1281 | 0) == ($$0276$ph$ph | 0)) break; else $$0280$ph = $$1281;
         }
         $$0276$ph$ph = $$0276$ph$ph << 1 | 1;
         $219 = _realloc($$ph$ph, $$0276$ph$ph << 2) | 0;
         if (!$219) {
          $$8316 = 0;
          $325 = $$ph$ph;
          label = 143;
          break L6;
         } else {
          $$0280$ph$ph = $$1281;
          $$ph$ph = $219;
         }
        }
        if (!(_mbsinit($3) | 0)) {
         $$8316 = 0;
         $325 = $$ph$ph;
         label = 143;
         break L6;
        } else {
         $$4284 = $$0280$ph;
         $$5313 = 0;
         $$6302 = $$ph$ph;
         $328 = $$ph$ph;
        }
       } else {
        if ($194) {
         $223 = _malloc($192) | 0;
         if (!$223) {
          $$8316 = 0;
          $325 = 0;
          label = 143;
          break L6;
         }
         $$2278$ph = $192;
         $$2282$ph = 0;
         $$2310$ph = $223;
         while (1) {
          $$2282 = $$2282$ph;
          do {
           $225 = HEAP32[$13 >> 2] | 0;
           if ($225 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $225 + 1;
            $233 = HEAPU8[$225 >> 0] | 0;
           } else $233 = ___shgetc($0) | 0;
           if (!(HEAP8[$4 + ($233 + 1) >> 0] | 0)) {
            $$4284 = $$2282;
            $$5313 = $$2310$ph;
            $$6302 = 0;
            $328 = 0;
            break L80;
           }
           $$2282$looptemp = $$2282;
           $$2282 = $$2282 + 1 | 0;
           HEAP8[$$2310$ph + $$2282$looptemp >> 0] = $233;
          } while (($$2282 | 0) != ($$2278$ph | 0));
          $$2278$ph = $$2278$ph << 1 | 1;
          $242 = _realloc($$2310$ph, $$2278$ph) | 0;
          if (!$242) {
           $$8316 = $$2310$ph;
           $325 = 0;
           label = 143;
           break L6;
          } else {
           $$2282$ph = $$2282;
           $$2310$ph = $242;
          }
         }
        }
        if (!$$0295) while (1) {
         $260 = HEAP32[$13 >> 2] | 0;
         if ($260 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
          HEAP32[$13 >> 2] = $260 + 1;
          $268 = HEAPU8[$260 >> 0] | 0;
         } else $268 = ___shgetc($0) | 0;
         if (!(HEAP8[$4 + ($268 + 1) >> 0] | 0)) {
          $$4284 = 0;
          $$5313 = 0;
          $$6302 = 0;
          $328 = 0;
          break L80;
         }
        }
        $$3283 = 0;
        while (1) {
         $245 = HEAP32[$13 >> 2] | 0;
         if ($245 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
          HEAP32[$13 >> 2] = $245 + 1;
          $253 = HEAPU8[$245 >> 0] | 0;
         } else $253 = ___shgetc($0) | 0;
         if (!(HEAP8[$4 + ($253 + 1) >> 0] | 0)) {
          $$4284 = $$3283;
          $$5313 = $$0295;
          $$6302 = 0;
          $328 = 0;
          break L80;
         }
         HEAP8[$$0295 + $$3283 >> 0] = $253;
         $$3283 = $$3283 + 1 | 0;
        }
       } while (0);
       if (!(HEAP32[$14 >> 2] | 0)) $280 = HEAP32[$13 >> 2] | 0; else {
        $275 = (HEAP32[$13 >> 2] | 0) + -1 | 0;
        HEAP32[$13 >> 2] = $275;
        $280 = $275;
       }
       $281 = $280 - (HEAP32[$16 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0;
       if (!$281) {
        $$10318 = $$5313;
        $$2 = $$0270;
        $$2292 = $$0290416;
        $318 = $328;
        break L6;
       }
       if (!(($281 | 0) == ($$1267 | 0) | $159 ^ 1)) {
        $$10318 = $$5313;
        $$2 = $$0270;
        $$2292 = $$0290416;
        $318 = $328;
        break L6;
       }
       do if ($194) if ($193) {
        HEAP32[$$0295 >> 2] = $$6302;
        break;
       } else {
        HEAP32[$$0295 >> 2] = $$5313;
        break;
       } while (0);
       if ($159) {
        $$11 = $$10;
        $$6314 = $$5313;
        $326 = $328;
       } else {
        if ($$6302 | 0) HEAP32[$$6302 + ($$4284 << 2) >> 2] = 0;
        if (!$$5313) {
         $$11 = $$10;
         $$6314 = 0;
         $326 = $328;
         break L59;
        }
        HEAP8[$$5313 + $$4284 >> 0] = 0;
        $$11 = $$10;
        $$6314 = $$5313;
        $326 = $328;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       $$0272 = 16;
       label = 131;
       break;
      }
     case 111:
      {
       $$0272 = 8;
       label = 131;
       break;
      }
     case 117:
     case 100:
      {
       $$0272 = 10;
       label = 131;
       break;
      }
     case 105:
      {
       $$0272 = 0;
       label = 131;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       $298 = +___floatscan($0, $spec$select319, 0);
       if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
        $$10318 = $$1309;
        $$2 = $$0270;
        $$2292 = $$0290416;
        $318 = $324;
        break L6;
       }
       if (!$$0295) {
        $$11 = $$5;
        $$6314 = $$1309;
        $326 = $324;
       } else switch ($spec$select319 | 0) {
       case 0:
        {
         HEAPF32[$$0295 >> 2] = $298;
         $$11 = $$5;
         $$6314 = $$1309;
         $326 = $324;
         break L59;
         break;
        }
       case 1:
        {
         HEAPF64[$$0295 >> 3] = $298;
         $$11 = $$5;
         $$6314 = $$1309;
         $326 = $324;
         break L59;
         break;
        }
       case 2:
        {
         HEAPF64[$$0295 >> 3] = $298;
         $$11 = $$5;
         $$6314 = $$1309;
         $326 = $324;
         break L59;
         break;
        }
       default:
        {
         $$11 = $$5;
         $$6314 = $$1309;
         $326 = $324;
         break L59;
        }
       }
       break;
      }
     default:
      {
       $$11 = $$5;
       $$6314 = $$1309;
       $326 = $324;
      }
     } while (0);
     do if ((label | 0) == 131) {
      label = 0;
      $288 = ___intscan($0, $$0272, 0, -1, -1) | 0;
      if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
       $$10318 = $$1309;
       $$2 = $$0270;
       $$2292 = $$0290416;
       $318 = $324;
       break L6;
      }
      if (($$0295 | 0) != 0 & ($spec$select | 0) == 112) {
       HEAP32[$$0295 >> 2] = $288;
       $$11 = $$5;
       $$6314 = $$1309;
       $326 = $324;
       break;
      } else {
       _store_int_725($$0295, $spec$select319, $288, tempRet0);
       $$11 = $$5;
       $$6314 = $$1309;
       $326 = $324;
       break;
      }
     } while (0);
     $$12 = $$11;
     $$1291 = $$0290416 + (($$0295 | 0) != 0 & 1) | 0;
     $$2287 = (HEAP32[$15 >> 2] | 0) + $$1286 + (HEAP32[$13 >> 2] | 0) - (HEAP32[$16 >> 2] | 0) | 0;
     $$7315 = $$6314;
     $322 = $326;
     break L8;
    } while (0);
    $56 = $$0273420 + ($52 & 1) | 0;
    ___shlim($0, 0);
    $57 = HEAP32[$13 >> 2] | 0;
    if ($57 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $57 + 1;
     $67 = HEAPU8[$57 >> 0] | 0;
    } else $67 = ___shgetc($0) | 0;
    if (($67 | 0) != (HEAPU8[$56 >> 0] | 0)) {
     label = 23;
     break L6;
    }
    $$12 = $56;
    $$1291 = $$0290416;
    $$2287 = $$0285419 + 1 | 0;
    $$7315 = $$0308414;
    $322 = $321;
   } else {
    $$1274 = $$0273420;
    while (1) {
     $25 = $$1274 + 1 | 0;
     if (!(_isspace(HEAPU8[$25 >> 0] | 0) | 0)) break; else $$1274 = $25;
    }
    ___shlim($0, 0);
    do {
     $30 = HEAP32[$13 >> 2] | 0;
     if ($30 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
      HEAP32[$13 >> 2] = $30 + 1;
      $37 = HEAPU8[$30 >> 0] | 0;
     } else $37 = ___shgetc($0) | 0;
    } while ((_isspace($37) | 0) != 0);
    if (!(HEAP32[$14 >> 2] | 0)) $49 = HEAP32[$13 >> 2] | 0; else {
     $43 = (HEAP32[$13 >> 2] | 0) + -1 | 0;
     HEAP32[$13 >> 2] = $43;
     $49 = $43;
    }
    $$12 = $$1274;
    $$1291 = $$0290416;
    $$2287 = (HEAP32[$15 >> 2] | 0) + $$0285419 + $49 - (HEAP32[$16 >> 2] | 0) | 0;
    $$7315 = $$0308414;
    $322 = $321;
   } while (0);
   $$0273420 = $$12 + 1 | 0;
   $22 = HEAP8[$$0273420 >> 0] | 0;
   if (!($22 << 24 >> 24)) {
    $$3293 = $$1291;
    break L4;
   } else {
    $$0285419 = $$2287;
    $$0290416 = $$1291;
    $$0308414 = $$7315;
    $321 = $322;
   }
  }
  if ((label | 0) == 23) {
   if (HEAP32[$14 >> 2] | 0) HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1;
   if (($$0290416 | 0) != 0 | ($67 | 0) > -1) {
    $$3293 = $$0290416;
    break;
   } else {
    $$1271 = 0;
    $$9317 = $$0308414;
    $323 = $321;
    label = 144;
   }
  } else if ((label | 0) == 143) if (!$$0290416) {
   $$1271 = $$0270;
   $$9317 = $$8316;
   $323 = $325;
   label = 144;
  } else {
   $$10318 = $$8316;
   $$2 = $$0270;
   $$2292 = $$0290416;
   $318 = $325;
  }
  if ((label | 0) == 144) {
   $$10318 = $$9317;
   $$2 = $$1271;
   $$2292 = -1;
   $318 = $323;
  }
  if (!$$2) $$3293 = $$2292; else {
   _free($$10318);
   _free($318);
   $$3293 = $$2292;
  }
 } while (0);
 if ($320 | 0) ___unlockfile($0);
 STACKTOP = sp;
 return $$3293 | 0;
}

function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1530621 = 0, $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0, $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0, $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre$phi713Z2D = 0, $$pre$phi714Z2D = 0, $$pre716 = 0, $$sink755 = 0, $10 = 0, $103 = 0, $104 = 0, $108 = 0, $109 = 0, $11 = 0, $113 = 0, $115 = 0, $116 = 0, $12 = 0, $123 = 0, $126 = 0, $13 = 0, $134 = 0, $135 = 0, $138 = 0, $140 = 0, $141 = 0, $144 = 0, $146 = 0, $15 = 0.0, $150 = 0, $153 = 0, $157 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $167 = 0, $173 = 0, $174 = 0, $175 = 0, $187 = 0, $198 = 0, $202 = 0, $203 = 0, $206 = 0, $211 = 0, $212 = 0, $214 = 0, $222 = 0, $223 = 0, $225 = 0, $227 = 0, $229 = 0, $231 = 0, $232 = 0, $234 = 0, $237 = 0, $240 = 0, $245 = 0, $248 = 0, $25 = 0, $251 = 0, $253 = 0, $255 = 0, $257 = 0, $262 = 0, $263 = 0, $266 = 0, $268 = 0, $270 = 0, $273 = 0, $286 = 0, $291 = 0, $30 = 0, $300 = 0, $301 = 0, $305 = 0, $308 = 0, $310 = 0, $312 = 0, $316 = 0, $319 = 0, $320 = 0, $324 = 0, $334 = 0, $339 = 0, $34 = 0, $342 = 0, $343 = 0, $344 = 0, $346 = 0, $351 = 0, $364 = 0, $368 = 0, $373 = 0, $38 = 0.0, $382 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $389 = 0, $39 = 0, $393 = 0, $395 = 0, $398 = 0, $401 = 0, $412 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $6 = 0, $63 = 0, $66 = 0, $69 = 0, $7 = 0, $71 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $89 = 0, $9 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540721 = 0, $spec$select541 = 0, $spec$select544 = 0.0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select567 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560);
 $6 = sp + 8 | 0;
 $7 = sp;
 $8 = sp + 524 | 0;
 $9 = $8;
 $10 = sp + 512 | 0;
 HEAP32[$7 >> 2] = 0;
 $11 = $10 + 12 | 0;
 $12 = ___DOUBLE_BITS_677($1) | 0;
 $13 = tempRet0;
 if (($13 | 0) < 0) {
  $15 = -$1;
  $16 = ___DOUBLE_BITS_677($15) | 0;
  $$0471 = $15;
  $$0522 = 1;
  $$0523 = 12519;
  $25 = tempRet0;
  $412 = $16;
 } else {
  $$0471 = $1;
  $$0522 = ($4 & 2049 | 0) != 0 & 1;
  $$0523 = ($4 & 2048 | 0) == 0 ? (($4 & 1 | 0) == 0 ? 12520 : 12525) : 12522;
  $25 = $13;
  $412 = $12;
 }
 do if (0 == 0 & ($25 & 2146435072 | 0) == 2146435072) {
  $30 = ($5 & 32 | 0) != 0;
  $34 = $$0522 + 3 | 0;
  _pad_676($0, 32, $2, $34, $4 & -65537);
  _out_670($0, $$0523, $$0522);
  _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? ($30 ? 12546 : 12550) : $30 ? 12538 : 12542, 3);
  _pad_676($0, 32, $2, $34, $4 ^ 8192);
  $$sink755 = $34;
 } else {
  $38 = +_frexpl($$0471, $7) * 2.0;
  $39 = $38 != 0.0;
  if ($39) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
  $42 = $5 | 32;
  if (($42 | 0) == 97) {
   $44 = $5 & 32;
   $spec$select = ($44 | 0) == 0 ? $$0523 : $$0523 + 9 | 0;
   $47 = $$0522 | 2;
   $49 = 12 - $3 | 0;
   do if ($3 >>> 0 > 11 | ($49 | 0) == 0) $$1472 = $38; else {
    $$0511586 = 8.0;
    $$1510587 = $49;
    do {
     $$1510587 = $$1510587 + -1 | 0;
     $$0511586 = $$0511586 * 16.0;
    } while (($$1510587 | 0) != 0);
    if ((HEAP8[$spec$select >> 0] | 0) == 45) {
     $$1472 = -($$0511586 + (-$38 - $$0511586));
     break;
    } else {
     $$1472 = $38 + $$0511586 - $$0511586;
     break;
    }
   } while (0);
   $63 = HEAP32[$7 >> 2] | 0;
   $66 = ($63 | 0) < 0 ? 0 - $63 | 0 : $63;
   $69 = _fmt_u($66, (($66 | 0) < 0) << 31 >> 31, $11) | 0;
   if (($69 | 0) == ($11 | 0)) {
    $71 = $10 + 11 | 0;
    HEAP8[$71 >> 0] = 48;
    $$0513 = $71;
   } else $$0513 = $69;
   HEAP8[$$0513 + -1 >> 0] = ($63 >> 31 & 2) + 43;
   $79 = $$0513 + -2 | 0;
   HEAP8[$79 >> 0] = $5 + 15;
   $80 = ($3 | 0) < 1;
   $82 = ($4 & 8 | 0) == 0;
   $$0525 = $8;
   $$2473 = $$1472;
   while (1) {
    $83 = ~~$$2473;
    $89 = $$0525 + 1 | 0;
    HEAP8[$$0525 >> 0] = $44 | HEAPU8[12554 + $83 >> 0];
    $$2473 = ($$2473 - +($83 | 0)) * 16.0;
    if (($89 - $9 | 0) == 1) if ($82 & ($80 & $$2473 == 0.0)) $$1526 = $89; else {
     HEAP8[$89 >> 0] = 46;
     $$1526 = $$0525 + 2 | 0;
    } else $$1526 = $89;
    if (!($$2473 != 0.0)) break; else $$0525 = $$1526;
   }
   $$pre716 = $$1526;
   if (!$3) label = 25; else if ((-2 - $9 + $$pre716 | 0) < ($3 | 0)) {
    $103 = $11;
    $104 = $79;
    $$0527 = $3 + 2 + $103 - $104 | 0;
    $$pre$phi713Z2D = $103;
    $$pre$phi714Z2D = $104;
   } else label = 25;
   if ((label | 0) == 25) {
    $108 = $11;
    $109 = $79;
    $$0527 = $108 - $9 - $109 + $$pre716 | 0;
    $$pre$phi713Z2D = $108;
    $$pre$phi714Z2D = $109;
   }
   $113 = $$0527 + $47 | 0;
   _pad_676($0, 32, $2, $113, $4);
   _out_670($0, $spec$select, $47);
   _pad_676($0, 48, $2, $113, $4 ^ 65536);
   $115 = $$pre716 - $9 | 0;
   _out_670($0, $8, $115);
   $116 = $$pre$phi713Z2D - $$pre$phi714Z2D | 0;
   _pad_676($0, 48, $$0527 - ($115 + $116) | 0, 0, 0);
   _out_670($0, $79, $116);
   _pad_676($0, 32, $2, $113, $4 ^ 8192);
   $$sink755 = $113;
   break;
  }
  $spec$select539 = ($3 | 0) < 0 ? 6 : $3;
  if ($39) {
   $123 = (HEAP32[$7 >> 2] | 0) + -28 | 0;
   HEAP32[$7 >> 2] = $123;
   $$3 = $38 * 268435456.0;
   $$pr = $123;
  } else {
   $$3 = $38;
   $$pr = HEAP32[$7 >> 2] | 0;
  }
  $$0498 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0;
  $$1499 = $$0498;
  $$4 = $$3;
  do {
   $126 = ~~$$4 >>> 0;
   HEAP32[$$1499 >> 2] = $126;
   $$1499 = $$1499 + 4 | 0;
   $$4 = ($$4 - +($126 >>> 0)) * 1.0e9;
  } while ($$4 != 0.0);
  if (($$pr | 0) > 0) {
   $$1482683 = $$0498;
   $$2500682 = $$1499;
   $134 = $$pr;
   while (1) {
    $135 = ($134 | 0) < 29 ? $134 : 29;
    $$0488669 = $$2500682 + -4 | 0;
    if ($$0488669 >>> 0 < $$1482683 >>> 0) $$2483 = $$1482683; else {
     $$0488671 = $$0488669;
     $$0497670 = 0;
     do {
      $138 = _bitshift64Shl(HEAP32[$$0488671 >> 2] | 0, 0, $135 | 0) | 0;
      $140 = _i64Add($138 | 0, tempRet0 | 0, $$0497670 | 0, 0) | 0;
      $141 = tempRet0;
      $$0497670 = ___udivdi3($140 | 0, $141 | 0, 1e9, 0) | 0;
      $144 = ___muldi3($$0497670 | 0, tempRet0 | 0, 1e9, 0) | 0;
      $146 = _i64Subtract($140 | 0, $141 | 0, $144 | 0, tempRet0 | 0) | 0;
      HEAP32[$$0488671 >> 2] = $146;
      $$0488671 = $$0488671 + -4 | 0;
     } while ($$0488671 >>> 0 >= $$1482683 >>> 0);
     if (!$$0497670) $$2483 = $$1482683; else {
      $150 = $$1482683 + -4 | 0;
      HEAP32[$150 >> 2] = $$0497670;
      $$2483 = $150;
     }
    }
    L57 : do if ($$2500682 >>> 0 > $$2483 >>> 0) {
     $$3501676 = $$2500682;
     while (1) {
      $153 = $$3501676 + -4 | 0;
      if (HEAP32[$153 >> 2] | 0) {
       $$3501$lcssa = $$3501676;
       break L57;
      }
      if ($153 >>> 0 > $$2483 >>> 0) $$3501676 = $153; else {
       $$3501$lcssa = $153;
       break;
      }
     }
    } else $$3501$lcssa = $$2500682; while (0);
    $157 = (HEAP32[$7 >> 2] | 0) - $135 | 0;
    HEAP32[$7 >> 2] = $157;
    if (($157 | 0) > 0) {
     $$1482683 = $$2483;
     $$2500682 = $$3501$lcssa;
     $134 = $157;
    } else {
     $$1482$lcssa = $$2483;
     $$2500$lcssa = $$3501$lcssa;
     $$pr564 = $157;
     break;
    }
   }
  } else {
   $$1482$lcssa = $$0498;
   $$2500$lcssa = $$1499;
   $$pr564 = $$pr;
  }
  if (($$pr564 | 0) < 0) {
   $162 = (($spec$select539 + 25 | 0) / 9 | 0) + 1 | 0;
   $163 = ($42 | 0) == 102;
   $$3484663 = $$1482$lcssa;
   $$4502662 = $$2500$lcssa;
   $165 = $$pr564;
   while (1) {
    $164 = 0 - $165 | 0;
    $167 = ($164 | 0) < 9 ? $164 : 9;
    if ($$3484663 >>> 0 < $$4502662 >>> 0) {
     $173 = (1 << $167) + -1 | 0;
     $174 = 1e9 >>> $167;
     $$0487657 = 0;
     $$1489656 = $$3484663;
     do {
      $175 = HEAP32[$$1489656 >> 2] | 0;
      HEAP32[$$1489656 >> 2] = ($175 >>> $167) + $$0487657;
      $$0487657 = Math_imul($175 & $173, $174) | 0;
      $$1489656 = $$1489656 + 4 | 0;
     } while ($$1489656 >>> 0 < $$4502662 >>> 0);
     $spec$select540 = (HEAP32[$$3484663 >> 2] | 0) == 0 ? $$3484663 + 4 | 0 : $$3484663;
     if (!$$0487657) {
      $$5503 = $$4502662;
      $spec$select540721 = $spec$select540;
     } else {
      HEAP32[$$4502662 >> 2] = $$0487657;
      $$5503 = $$4502662 + 4 | 0;
      $spec$select540721 = $spec$select540;
     }
    } else {
     $$5503 = $$4502662;
     $spec$select540721 = (HEAP32[$$3484663 >> 2] | 0) == 0 ? $$3484663 + 4 | 0 : $$3484663;
    }
    $187 = $163 ? $$0498 : $spec$select540721;
    $spec$select541 = ($$5503 - $187 >> 2 | 0) > ($162 | 0) ? $187 + ($162 << 2) | 0 : $$5503;
    $165 = (HEAP32[$7 >> 2] | 0) + $167 | 0;
    HEAP32[$7 >> 2] = $165;
    if (($165 | 0) >= 0) {
     $$3484$lcssa = $spec$select540721;
     $$4502$lcssa = $spec$select541;
     break;
    } else {
     $$3484663 = $spec$select540721;
     $$4502662 = $spec$select541;
    }
   }
  } else {
   $$3484$lcssa = $$1482$lcssa;
   $$4502$lcssa = $$2500$lcssa;
  }
  $198 = $$0498;
  if ($$3484$lcssa >>> 0 < $$4502$lcssa >>> 0) {
   $202 = ($198 - $$3484$lcssa >> 2) * 9 | 0;
   $203 = HEAP32[$$3484$lcssa >> 2] | 0;
   if ($203 >>> 0 < 10) $$1517 = $202; else {
    $$0516652 = $202;
    $$0532651 = 10;
    while (1) {
     $$0532651 = $$0532651 * 10 | 0;
     $206 = $$0516652 + 1 | 0;
     if ($203 >>> 0 < $$0532651 >>> 0) {
      $$1517 = $206;
      break;
     } else $$0516652 = $206;
    }
   }
  } else $$1517 = 0;
  $211 = ($42 | 0) == 103;
  $212 = ($spec$select539 | 0) != 0;
  $214 = $spec$select539 - (($42 | 0) == 102 ? 0 : $$1517) + (($212 & $211) << 31 >> 31) | 0;
  if (($214 | 0) < ((($$4502$lcssa - $198 >> 2) * 9 | 0) + -9 | 0)) {
   $222 = $214 + 9216 | 0;
   $223 = ($222 | 0) / 9 | 0;
   $225 = $$0498 + 4 + ($223 + -1024 << 2) | 0;
   $227 = $222 - ($223 * 9 | 0) | 0;
   if (($227 | 0) < 8) {
    $$0529$in646 = $227;
    $$1533645 = 10;
    while (1) {
     $229 = $$1533645 * 10 | 0;
     if (($$0529$in646 | 0) < 7) {
      $$0529$in646 = $$0529$in646 + 1 | 0;
      $$1533645 = $229;
     } else {
      $$1533$lcssa = $229;
      break;
     }
    }
   } else $$1533$lcssa = 10;
   $231 = HEAP32[$225 >> 2] | 0;
   $232 = ($231 >>> 0) / ($$1533$lcssa >>> 0) | 0;
   $234 = $231 - (Math_imul($232, $$1533$lcssa) | 0) | 0;
   $237 = ($225 + 4 | 0) == ($$4502$lcssa | 0);
   if ($237 & ($234 | 0) == 0) {
    $$4492 = $225;
    $$4520 = $$1517;
    $$8 = $$3484$lcssa;
   } else {
    $spec$select544 = ($232 & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    $240 = $$1533$lcssa >>> 1;
    $spec$select567 = $234 >>> 0 < $240 >>> 0 ? .5 : $237 & ($234 | 0) == ($240 | 0) ? 1.0 : 1.5;
    if (!$$0522) {
     $$1467 = $spec$select567;
     $$1469 = $spec$select544;
    } else {
     $245 = (HEAP8[$$0523 >> 0] | 0) == 45;
     $$1467 = $245 ? -$spec$select567 : $spec$select567;
     $$1469 = $245 ? -$spec$select544 : $spec$select544;
    }
    $248 = $231 - $234 | 0;
    HEAP32[$225 >> 2] = $248;
    if ($$1469 + $$1467 != $$1469) {
     $251 = $248 + $$1533$lcssa | 0;
     HEAP32[$225 >> 2] = $251;
     if ($251 >>> 0 > 999999999) {
      $$2490638 = $225;
      $$5486639 = $$3484$lcssa;
      while (1) {
       $253 = $$2490638 + -4 | 0;
       HEAP32[$$2490638 >> 2] = 0;
       if ($253 >>> 0 < $$5486639 >>> 0) {
        $255 = $$5486639 + -4 | 0;
        HEAP32[$255 >> 2] = 0;
        $$6 = $255;
       } else $$6 = $$5486639;
       $257 = (HEAP32[$253 >> 2] | 0) + 1 | 0;
       HEAP32[$253 >> 2] = $257;
       if ($257 >>> 0 > 999999999) {
        $$2490638 = $253;
        $$5486639 = $$6;
       } else {
        $$2490$lcssa = $253;
        $$5486$lcssa = $$6;
        break;
       }
      }
     } else {
      $$2490$lcssa = $225;
      $$5486$lcssa = $$3484$lcssa;
     }
     $262 = ($198 - $$5486$lcssa >> 2) * 9 | 0;
     $263 = HEAP32[$$5486$lcssa >> 2] | 0;
     if ($263 >>> 0 < 10) {
      $$4492 = $$2490$lcssa;
      $$4520 = $262;
      $$8 = $$5486$lcssa;
     } else {
      $$2518634 = $262;
      $$2534633 = 10;
      while (1) {
       $$2534633 = $$2534633 * 10 | 0;
       $266 = $$2518634 + 1 | 0;
       if ($263 >>> 0 < $$2534633 >>> 0) {
        $$4492 = $$2490$lcssa;
        $$4520 = $266;
        $$8 = $$5486$lcssa;
        break;
       } else $$2518634 = $266;
      }
     }
    } else {
     $$4492 = $225;
     $$4520 = $$1517;
     $$8 = $$3484$lcssa;
    }
   }
   $268 = $$4492 + 4 | 0;
   $$5521 = $$4520;
   $$8506 = $$4502$lcssa >>> 0 > $268 >>> 0 ? $268 : $$4502$lcssa;
   $$9 = $$8;
  } else {
   $$5521 = $$1517;
   $$8506 = $$4502$lcssa;
   $$9 = $$3484$lcssa;
  }
  $270 = 0 - $$5521 | 0;
  L109 : do if ($$8506 >>> 0 > $$9 >>> 0) {
   $$9507625 = $$8506;
   while (1) {
    $273 = $$9507625 + -4 | 0;
    if (HEAP32[$273 >> 2] | 0) {
     $$9507$lcssa = $$9507625;
     $$lcssa583 = 1;
     break L109;
    }
    if ($273 >>> 0 > $$9 >>> 0) $$9507625 = $273; else {
     $$9507$lcssa = $273;
     $$lcssa583 = 0;
     break;
    }
   }
  } else {
   $$9507$lcssa = $$8506;
   $$lcssa583 = 0;
  } while (0);
  do if ($211) {
   $spec$select548 = $spec$select539 + (($212 ^ 1) & 1) | 0;
   if (($spec$select548 | 0) > ($$5521 | 0) & ($$5521 | 0) > -5) {
    $$0479 = $5 + -1 | 0;
    $$2476 = $spec$select548 + -1 - $$5521 | 0;
   } else {
    $$0479 = $5 + -2 | 0;
    $$2476 = $spec$select548 + -1 | 0;
   }
   if (!($4 & 8)) {
    if ($$lcssa583) {
     $286 = HEAP32[$$9507$lcssa + -4 >> 2] | 0;
     if (!$286) $$2531 = 9; else if (!(($286 >>> 0) % 10 | 0)) {
      $$1530621 = 0;
      $$3535620 = 10;
      while (1) {
       $$3535620 = $$3535620 * 10 | 0;
       $291 = $$1530621 + 1 | 0;
       if (($286 >>> 0) % ($$3535620 >>> 0) | 0 | 0) {
        $$2531 = $291;
        break;
       } else $$1530621 = $291;
      }
     } else $$2531 = 0;
    } else $$2531 = 9;
    $300 = (($$9507$lcssa - $198 >> 2) * 9 | 0) + -9 | 0;
    if (($$0479 | 32 | 0) == 102) {
     $301 = $300 - $$2531 | 0;
     $spec$select549 = ($301 | 0) > 0 ? $301 : 0;
     $$1480 = $$0479;
     $$3477 = ($$2476 | 0) < ($spec$select549 | 0) ? $$2476 : $spec$select549;
     break;
    } else {
     $305 = $300 + $$5521 - $$2531 | 0;
     $spec$select551 = ($305 | 0) > 0 ? $305 : 0;
     $$1480 = $$0479;
     $$3477 = ($$2476 | 0) < ($spec$select551 | 0) ? $$2476 : $spec$select551;
     break;
    }
   } else {
    $$1480 = $$0479;
    $$3477 = $$2476;
   }
  } else {
   $$1480 = $5;
   $$3477 = $spec$select539;
  } while (0);
  $308 = ($$3477 | 0) != 0;
  $310 = $308 ? 1 : $4 >>> 3 & 1;
  $312 = ($$1480 | 32 | 0) == 102;
  if ($312) {
   $$2515 = 0;
   $$pn = ($$5521 | 0) > 0 ? $$5521 : 0;
  } else {
   $316 = ($$5521 | 0) < 0 ? $270 : $$5521;
   $319 = _fmt_u($316, (($316 | 0) < 0) << 31 >> 31, $11) | 0;
   $320 = $11;
   if (($320 - $319 | 0) < 2) {
    $$1514614 = $319;
    while (1) {
     $324 = $$1514614 + -1 | 0;
     HEAP8[$324 >> 0] = 48;
     if (($320 - $324 | 0) < 2) $$1514614 = $324; else {
      $$1514$lcssa = $324;
      break;
     }
    }
   } else $$1514$lcssa = $319;
   HEAP8[$$1514$lcssa + -1 >> 0] = ($$5521 >> 31 & 2) + 43;
   $334 = $$1514$lcssa + -2 | 0;
   HEAP8[$334 >> 0] = $$1480;
   $$2515 = $334;
   $$pn = $320 - $334 | 0;
  }
  $339 = $$0522 + 1 + $$3477 + $310 + $$pn | 0;
  _pad_676($0, 32, $2, $339, $4);
  _out_670($0, $$0523, $$0522);
  _pad_676($0, 48, $2, $339, $4 ^ 65536);
  if ($312) {
   $spec$select554 = $$9 >>> 0 > $$0498 >>> 0 ? $$0498 : $$9;
   $342 = $8 + 9 | 0;
   $343 = $342;
   $344 = $8 + 8 | 0;
   $$5493603 = $spec$select554;
   do {
    $346 = _fmt_u(HEAP32[$$5493603 >> 2] | 0, 0, $342) | 0;
    if (($$5493603 | 0) == ($spec$select554 | 0)) if (($346 | 0) == ($342 | 0)) {
     HEAP8[$344 >> 0] = 48;
     $$1465 = $344;
    } else $$1465 = $346; else if ($346 >>> 0 > $8 >>> 0) {
     _memset($8 | 0, 48, $346 - $9 | 0) | 0;
     $$0464599 = $346;
     while (1) {
      $351 = $$0464599 + -1 | 0;
      if ($351 >>> 0 > $8 >>> 0) $$0464599 = $351; else {
       $$1465 = $351;
       break;
      }
     }
    } else $$1465 = $346;
    _out_670($0, $$1465, $343 - $$1465 | 0);
    $$5493603 = $$5493603 + 4 | 0;
   } while ($$5493603 >>> 0 <= $$0498 >>> 0);
   if (!(($4 & 8 | 0) == 0 & ($308 ^ 1))) _out_670($0, 15408, 1);
   if ($$5493603 >>> 0 < $$9507$lcssa >>> 0 & ($$3477 | 0) > 0) {
    $$4478594 = $$3477;
    $$6494593 = $$5493603;
    while (1) {
     $364 = _fmt_u(HEAP32[$$6494593 >> 2] | 0, 0, $342) | 0;
     if ($364 >>> 0 > $8 >>> 0) {
      _memset($8 | 0, 48, $364 - $9 | 0) | 0;
      $$0463588 = $364;
      while (1) {
       $368 = $$0463588 + -1 | 0;
       if ($368 >>> 0 > $8 >>> 0) $$0463588 = $368; else {
        $$0463$lcssa = $368;
        break;
       }
      }
     } else $$0463$lcssa = $364;
     _out_670($0, $$0463$lcssa, ($$4478594 | 0) < 9 ? $$4478594 : 9);
     $$6494593 = $$6494593 + 4 | 0;
     $373 = $$4478594 + -9 | 0;
     if (!($$6494593 >>> 0 < $$9507$lcssa >>> 0 & ($$4478594 | 0) > 9)) {
      $$4478$lcssa = $373;
      break;
     } else $$4478594 = $373;
    }
   } else $$4478$lcssa = $$3477;
   _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0);
  } else {
   $spec$select557 = $$lcssa583 ? $$9507$lcssa : $$9 + 4 | 0;
   if ($$9 >>> 0 < $spec$select557 >>> 0 & ($$3477 | 0) > -1) {
    $382 = $8 + 9 | 0;
    $384 = ($4 & 8 | 0) == 0;
    $385 = $382;
    $386 = 0 - $9 | 0;
    $387 = $8 + 8 | 0;
    $$5609 = $$3477;
    $$7495608 = $$9;
    while (1) {
     $389 = _fmt_u(HEAP32[$$7495608 >> 2] | 0, 0, $382) | 0;
     if (($389 | 0) == ($382 | 0)) {
      HEAP8[$387 >> 0] = 48;
      $$0 = $387;
     } else $$0 = $389;
     do if (($$7495608 | 0) == ($$9 | 0)) {
      $395 = $$0 + 1 | 0;
      _out_670($0, $$0, 1);
      if ($384 & ($$5609 | 0) < 1) {
       $$2 = $395;
       break;
      }
      _out_670($0, 15408, 1);
      $$2 = $395;
     } else {
      if ($$0 >>> 0 <= $8 >>> 0) {
       $$2 = $$0;
       break;
      }
      _memset($8 | 0, 48, $$0 + $386 | 0) | 0;
      $$1604 = $$0;
      while (1) {
       $393 = $$1604 + -1 | 0;
       if ($393 >>> 0 > $8 >>> 0) $$1604 = $393; else {
        $$2 = $393;
        break;
       }
      }
     } while (0);
     $398 = $385 - $$2 | 0;
     _out_670($0, $$2, ($$5609 | 0) > ($398 | 0) ? $398 : $$5609);
     $401 = $$5609 - $398 | 0;
     $$7495608 = $$7495608 + 4 | 0;
     if (!($$7495608 >>> 0 < $spec$select557 >>> 0 & ($401 | 0) > -1)) {
      $$5$lcssa = $401;
      break;
     } else $$5609 = $401;
    }
   } else $$5$lcssa = $$3477;
   _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0);
   _out_670($0, $$2515, $11 - $$2515 | 0);
  }
  _pad_676($0, 32, $2, $339, $4 ^ 8192);
  $$sink755 = $339;
 } while (0);
 STACKTOP = sp;
 return (($$sink755 | 0) < ($2 | 0) ? $2 : $$sink755) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_nested_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i184 = 0, $$0$i$i$add$i188 = 0, $$0$i$i$add$i199 = 0, $$0$i$i$add$i210 = 0, $$0$i$i$add$i220 = 0, $$0$i$i$add$i231 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i183 = 0, $$0$i$i$idx$i187 = 0, $$0$i$i$idx$i198 = 0, $$0$i$i$idx$i209 = 0, $$0$i$i$idx$i219 = 0, $$0$i$i$idx$i230 = 0, $$0151$off0$ph = 0, $$0157 = 0, $$1158 = 0, $$2159 = 0, $$2159$be = 0, $$2159$ph = 0, $$2159$ph$be = 0, $$4166 = 0, $$sink = 0, $$sroa$0$0$$sroa_idx$i215 = 0, $101 = 0, $102 = 0, $105 = 0, $106 = 0, $11 = 0, $114 = 0, $119 = 0, $122 = 0, $124 = 0, $13 = 0, $130 = 0, $133 = 0, $134 = 0, $141 = 0, $142 = 0, $145 = 0, $146 = 0, $154 = 0, $157 = 0, $16 = 0, $162 = 0, $165 = 0, $167 = 0, $17 = 0, $173 = 0, $176 = 0, $177 = 0, $184 = 0, $185 = 0, $188 = 0, $189 = 0, $197 = 0, $202 = 0, $206 = 0, $207 = 0, $214 = 0, $215 = 0, $218 = 0, $219 = 0, $227 = 0, $229 = 0, $234 = 0, $237 = 0, $239 = 0, $245 = 0, $248 = 0, $249 = 0, $256 = 0, $257 = 0, $260 = 0, $261 = 0, $269 = 0, $274 = 0, $3 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $70 = 0, $74 = 0, $79 = 0, $82 = 0, $84 = 0, $90 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $3 = sp + 36 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 8 | 0;
 $6 = sp;
 L1 : do if (($0 | 0) == ($1 | 0)) $$4166 = $0; else if ((HEAP8[$0 >> 0] | 0) == 78) {
  $11 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($0 + 1 | 0, $1, $3) | 0;
  L4 : do if (($11 | 0) != ($1 | 0)) {
   $13 = $2 + 52 | 0;
   HEAP32[$13 >> 2] = 0;
   switch (HEAP8[$11 >> 0] | 0) {
   case 82:
    {
     $$sink = 1;
     label = 6;
     break;
    }
   case 79:
    {
     $$sink = 2;
     label = 6;
     break;
    }
   default:
    $$0157 = $11;
   }
   if ((label | 0) == 6) {
    HEAP32[$13 >> 2] = $$sink;
    $$0157 = $11 + 1 | 0;
   }
   $16 = $2 + 4 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   if ($17 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    HEAP32[$17 >> 2] = 0;
    HEAP32[$17 + 4 >> 2] = 0;
    HEAP32[$17 + 8 >> 2] = 0;
    HEAP32[$17 + 12 >> 2] = 0;
    HEAP32[$17 + 16 >> 2] = 0;
    HEAP32[$17 + 20 >> 2] = 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($17);
    HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($2);
   if (($1 - $$0157 | 0) > 1) if ((HEAP8[$$0157 >> 0] | 0) == 83) if ((HEAP8[$$0157 + 1 >> 0] | 0) == 116) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc((HEAP32[$16 >> 2] | 0) + -24 | 0, 16495);
    $$1158 = $$0157 + 2 | 0;
   } else $$1158 = $$0157; else $$1158 = $$0157; else $$1158 = $$0157;
   if (($$1158 | 0) == ($1 | 0)) {
    $36 = HEAP32[$16 >> 2] | 0;
    $$0$i$i$idx$i = 0;
    while (1) {
     if (($$0$i$i$idx$i | 0) == -1) break;
     $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36 + ($$0$i$i$add$i * 24 | 0) | 0);
     $$0$i$i$idx$i = $$0$i$i$add$i;
    }
    HEAP32[$16 >> 2] = $36 + -24;
    break;
   }
   $39 = $4 + 11 | 0;
   $40 = $4 + 4 | 0;
   $$sroa$0$0$$sroa_idx$i215 = $2 + 12 | 0;
   $41 = $2 + 20 | 0;
   $42 = $2 + 24 | 0;
   $43 = $5 + 11 | 0;
   $44 = $5 + 4 | 0;
   $45 = $5 + 11 | 0;
   $46 = $5 + 4 | 0;
   $47 = $5 + 12 | 0;
   $48 = $5 + 4 | 0;
   $49 = $5 + 8 | 0;
   $50 = $2 + 16 | 0;
   $51 = $5 + 12 | 0;
   $52 = $5 + 4 | 0;
   $53 = $5 + 8 | 0;
   $54 = $5 + 11 | 0;
   $55 = $5 + 4 | 0;
   $56 = $5 + 12 | 0;
   $57 = $5 + 4 | 0;
   $58 = $5 + 8 | 0;
   $59 = $5 + 11 | 0;
   $60 = $5 + 4 | 0;
   $61 = $5 + 12 | 0;
   $62 = $5 + 4 | 0;
   $63 = $5 + 8 | 0;
   $64 = $5 + 12 | 0;
   $65 = $5 + 4 | 0;
   $66 = $5 + 8 | 0;
   $$0151$off0$ph = 0;
   $$2159$ph = $$1158;
   L27 : while (1) {
    $$2159 = $$2159$ph;
    L29 : while (1) {
     $67 = HEAP8[$$2159 >> 0] | 0;
     if ($67 << 24 >> 24 == 69) break L27;
     switch ($67 << 24 >> 24 | 0) {
     case 83:
      {
       label = 23;
       break L29;
       break;
      }
     case 84:
      {
       label = 39;
       break L29;
       break;
      }
     case 68:
      {
       label = 53;
       break L29;
       break;
      }
     case 73:
      {
       $197 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($$2159, $1, $2) | 0;
       if (($197 | 0) == ($$2159 | 0) | ($197 | 0) == ($1 | 0)) break L4;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$16 >> 2] | 0) + -24 | 0);
       $202 = HEAP32[$16 >> 2] | 0;
       $$0$i$i$idx$i209 = 0;
       while (1) {
        if (($$0$i$i$idx$i209 | 0) == -1) break;
        $$0$i$i$add$i210 = $$0$i$i$idx$i209 + -1 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($202 + ($$0$i$i$add$i210 * 24 | 0) | 0);
        $$0$i$i$idx$i209 = $$0$i$i$add$i210;
       }
       HEAP32[$16 >> 2] = $202 + -24;
       $206 = HEAP8[$39 >> 0] | 0;
       $207 = $206 << 24 >> 24 < 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($202 + -48 | 0, $207 ? HEAP32[$4 >> 2] | 0 : $4, $207 ? HEAP32[$40 >> 2] | 0 : $206 & 255) | 0;
       $214 = (HEAP32[$16 >> 2] | 0) + -24 | 0;
       HEAP32[$6 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i215 >> 2];
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($5, $214, $6);
       $215 = HEAP32[$41 >> 2] | 0;
       if ($215 >>> 0 < (HEAP32[$42 >> 2] | 0) >>> 0) {
        HEAP32[$215 >> 2] = 0;
        $218 = $215 + 4 | 0;
        HEAP32[$218 >> 2] = 0;
        $219 = $215 + 8 | 0;
        HEAP32[$219 >> 2] = 0;
        HEAP32[$215 + 12 >> 2] = HEAP32[$47 >> 2];
        HEAP32[$215 >> 2] = HEAP32[$5 >> 2];
        HEAP32[$218 >> 2] = HEAP32[$48 >> 2];
        HEAP32[$219 >> 2] = HEAP32[$49 >> 2];
        HEAP32[$49 >> 2] = 0;
        HEAP32[$48 >> 2] = 0;
        HEAP32[$5 >> 2] = 0;
        HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 16;
       } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($50, $5);
       __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       $$2159$be = $197;
       break;
      }
     case 76:
      {
       $227 = $$2159 + 1 | 0;
       if (($227 | 0) == ($1 | 0)) break L4; else $$2159$be = $227;
       break;
      }
     default:
      {
       label = 79;
       break L29;
      }
     }
     $$2159 = $$2159$be;
    }
    L45 : do if ((label | 0) == 23) {
     label = 0;
     $70 = $$2159 + 1 | 0;
     if (($70 | 0) != ($1 | 0)) if ((HEAP8[$70 >> 0] | 0) == 116) {
      label = 79;
      break;
     }
     $74 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($$2159, $1, $2) | 0;
     if (($74 | 0) == ($$2159 | 0) | ($74 | 0) == ($1 | 0)) break L4;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$16 >> 2] | 0) + -24 | 0);
     $79 = HEAP32[$16 >> 2] | 0;
     $$0$i$i$idx$i183 = 0;
     while (1) {
      if (($$0$i$i$idx$i183 | 0) == -1) break;
      $$0$i$i$add$i184 = $$0$i$i$idx$i183 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($79 + ($$0$i$i$add$i184 * 24 | 0) | 0);
      $$0$i$i$idx$i183 = $$0$i$i$add$i184;
     }
     HEAP32[$16 >> 2] = $79 + -24;
     $82 = $79 + -48 | 0;
     $84 = HEAP8[$82 + 11 >> 0] | 0;
     if ($84 << 24 >> 24 < 0) $90 = HEAP32[$79 + -44 >> 2] | 0; else $90 = $84 & 255;
     if (!$90) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($82, $4); else {
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5, 15191, $4);
      $93 = HEAP8[$54 >> 0] | 0;
      $94 = $93 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$16 >> 2] | 0) + -24 | 0, $94 ? HEAP32[$5 >> 2] | 0 : $5, $94 ? HEAP32[$55 >> 2] | 0 : $93 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $101 = (HEAP32[$16 >> 2] | 0) + -24 | 0;
      HEAP32[$6 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i215 >> 2];
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($5, $101, $6);
      $102 = HEAP32[$41 >> 2] | 0;
      if ($102 >>> 0 < (HEAP32[$42 >> 2] | 0) >>> 0) {
       HEAP32[$102 >> 2] = 0;
       $105 = $102 + 4 | 0;
       HEAP32[$105 >> 2] = 0;
       $106 = $102 + 8 | 0;
       HEAP32[$106 >> 2] = 0;
       HEAP32[$102 + 12 >> 2] = HEAP32[$64 >> 2];
       HEAP32[$102 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$105 >> 2] = HEAP32[$65 >> 2];
       HEAP32[$106 >> 2] = HEAP32[$66 >> 2];
       HEAP32[$66 >> 2] = 0;
       HEAP32[$65 >> 2] = 0;
       HEAP32[$5 >> 2] = 0;
       HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 16;
      } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($50, $5);
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $$2159$ph$be = $74;
    } else if ((label | 0) == 39) {
     label = 0;
     $114 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($$2159, $1, $2) | 0;
     if (($114 | 0) == ($$2159 | 0) | ($114 | 0) == ($1 | 0)) break L4;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$16 >> 2] | 0) + -24 | 0);
     $119 = HEAP32[$16 >> 2] | 0;
     $$0$i$i$idx$i187 = 0;
     while (1) {
      if (($$0$i$i$idx$i187 | 0) == -1) break;
      $$0$i$i$add$i188 = $$0$i$i$idx$i187 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($119 + ($$0$i$i$add$i188 * 24 | 0) | 0);
      $$0$i$i$idx$i187 = $$0$i$i$add$i188;
     }
     HEAP32[$16 >> 2] = $119 + -24;
     $122 = $119 + -48 | 0;
     $124 = HEAP8[$122 + 11 >> 0] | 0;
     if ($124 << 24 >> 24 < 0) $130 = HEAP32[$119 + -44 >> 2] | 0; else $130 = $124 & 255;
     if (!$130) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($122, $4); else {
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5, 15191, $4);
      $133 = HEAP8[$45 >> 0] | 0;
      $134 = $133 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$16 >> 2] | 0) + -24 | 0, $134 ? HEAP32[$5 >> 2] | 0 : $5, $134 ? HEAP32[$46 >> 2] | 0 : $133 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     }
     $141 = (HEAP32[$16 >> 2] | 0) + -24 | 0;
     HEAP32[$6 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i215 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($5, $141, $6);
     $142 = HEAP32[$41 >> 2] | 0;
     if ($142 >>> 0 < (HEAP32[$42 >> 2] | 0) >>> 0) {
      HEAP32[$142 >> 2] = 0;
      $145 = $142 + 4 | 0;
      HEAP32[$145 >> 2] = 0;
      $146 = $142 + 8 | 0;
      HEAP32[$146 >> 2] = 0;
      HEAP32[$142 + 12 >> 2] = HEAP32[$56 >> 2];
      HEAP32[$142 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$145 >> 2] = HEAP32[$57 >> 2];
      HEAP32[$146 >> 2] = HEAP32[$58 >> 2];
      HEAP32[$58 >> 2] = 0;
      HEAP32[$57 >> 2] = 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($50, $5);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $$2159$ph$be = $114;
    } else if ((label | 0) == 53) {
     label = 0;
     $154 = $$2159 + 1 | 0;
     if (($154 | 0) != ($1 | 0)) switch (HEAP8[$154 >> 0] | 0) {
     case 84:
     case 116:
      break;
     default:
      {
       label = 79;
       break L45;
      }
     }
     $157 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($$2159, $1, $2) | 0;
     if (($157 | 0) == ($$2159 | 0) | ($157 | 0) == ($1 | 0)) break L4;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$16 >> 2] | 0) + -24 | 0);
     $162 = HEAP32[$16 >> 2] | 0;
     $$0$i$i$idx$i198 = 0;
     while (1) {
      if (($$0$i$i$idx$i198 | 0) == -1) break;
      $$0$i$i$add$i199 = $$0$i$i$idx$i198 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($162 + ($$0$i$i$add$i199 * 24 | 0) | 0);
      $$0$i$i$idx$i198 = $$0$i$i$add$i199;
     }
     HEAP32[$16 >> 2] = $162 + -24;
     $165 = $162 + -48 | 0;
     $167 = HEAP8[$165 + 11 >> 0] | 0;
     if ($167 << 24 >> 24 < 0) $173 = HEAP32[$162 + -44 >> 2] | 0; else $173 = $167 & 255;
     if (!$173) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($165, $4); else {
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5, 15191, $4);
      $176 = HEAP8[$59 >> 0] | 0;
      $177 = $176 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$16 >> 2] | 0) + -24 | 0, $177 ? HEAP32[$5 >> 2] | 0 : $5, $177 ? HEAP32[$60 >> 2] | 0 : $176 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     }
     $184 = (HEAP32[$16 >> 2] | 0) + -24 | 0;
     HEAP32[$6 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i215 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($5, $184, $6);
     $185 = HEAP32[$41 >> 2] | 0;
     if ($185 >>> 0 < (HEAP32[$42 >> 2] | 0) >>> 0) {
      HEAP32[$185 >> 2] = 0;
      $188 = $185 + 4 | 0;
      HEAP32[$188 >> 2] = 0;
      $189 = $185 + 8 | 0;
      HEAP32[$189 >> 2] = 0;
      HEAP32[$185 + 12 >> 2] = HEAP32[$61 >> 2];
      HEAP32[$185 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$188 >> 2] = HEAP32[$62 >> 2];
      HEAP32[$189 >> 2] = HEAP32[$63 >> 2];
      HEAP32[$63 >> 2] = 0;
      HEAP32[$62 >> 2] = 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($50, $5);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $$2159$ph$be = $157;
    } while (0);
    if ((label | 0) == 79) {
     label = 0;
     $229 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($$2159, $1, $2) | 0;
     if (($229 | 0) == ($$2159 | 0) | ($229 | 0) == ($1 | 0)) break L4;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$16 >> 2] | 0) + -24 | 0);
     $234 = HEAP32[$16 >> 2] | 0;
     $$0$i$i$idx$i219 = 0;
     while (1) {
      if (($$0$i$i$idx$i219 | 0) == -1) break;
      $$0$i$i$add$i220 = $$0$i$i$idx$i219 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($234 + ($$0$i$i$add$i220 * 24 | 0) | 0);
      $$0$i$i$idx$i219 = $$0$i$i$add$i220;
     }
     HEAP32[$16 >> 2] = $234 + -24;
     $237 = $234 + -48 | 0;
     $239 = HEAP8[$237 + 11 >> 0] | 0;
     if ($239 << 24 >> 24 < 0) $245 = HEAP32[$234 + -44 >> 2] | 0; else $245 = $239 & 255;
     if (!$245) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($237, $4); else {
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5, 15191, $4);
      $248 = HEAP8[$43 >> 0] | 0;
      $249 = $248 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$16 >> 2] | 0) + -24 | 0, $249 ? HEAP32[$5 >> 2] | 0 : $5, $249 ? HEAP32[$44 >> 2] | 0 : $248 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     }
     $256 = (HEAP32[$16 >> 2] | 0) + -24 | 0;
     HEAP32[$6 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i215 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($5, $256, $6);
     $257 = HEAP32[$41 >> 2] | 0;
     if ($257 >>> 0 < (HEAP32[$42 >> 2] | 0) >>> 0) {
      HEAP32[$257 >> 2] = 0;
      $260 = $257 + 4 | 0;
      HEAP32[$260 >> 2] = 0;
      $261 = $257 + 8 | 0;
      HEAP32[$261 >> 2] = 0;
      HEAP32[$257 + 12 >> 2] = HEAP32[$51 >> 2];
      HEAP32[$257 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$260 >> 2] = HEAP32[$52 >> 2];
      HEAP32[$261 >> 2] = HEAP32[$53 >> 2];
      HEAP32[$53 >> 2] = 0;
      HEAP32[$52 >> 2] = 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($50, $5);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $$2159$ph$be = $229;
    }
    $$0151$off0$ph = 1;
    $$2159$ph = $$2159$ph$be;
   }
   $269 = $$2159 + 1 | 0;
   HEAP32[$2 + 48 >> 2] = HEAP32[$3 >> 2];
   if ($$0151$off0$ph) {
    $274 = HEAP32[$41 >> 2] | 0;
    if ((HEAP32[$2 + 16 >> 2] | 0) != ($274 | 0)) {
     $$0$i$i$idx$i230 = 0;
     while (1) {
      if (($$0$i$i$idx$i230 | 0) == -1) break;
      $$0$i$i$add$i231 = $$0$i$i$idx$i230 + -1 | 0;
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($274 + ($$0$i$i$add$i231 << 4) | 0);
      $$0$i$i$idx$i230 = $$0$i$i$add$i231;
     }
     HEAP32[$41 >> 2] = $274 + -16;
    }
   }
   $$4166 = $269;
   break L1;
  } while (0);
  $$4166 = $0;
 } else $$4166 = $0; while (0);
 STACKTOP = sp;
 return $$4166 | 0;
}

function _decfloat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0324 = 0, $$0324$be = 0, $$0327480 = 0, $$0328 = 0, $$0329 = 0, $$0331476 = 0, $$0335486 = 0, $$0336$lcssa = 0, $$0336453 = 0, $$0336454 = 0, $$0336455 = 0, $$0336503 = 0, $$0340$lcssa = 0, $$0340457 = 0, $$0340458 = 0, $$0340459 = 0, $$0340502 = 0, $$0345$lcssa540 = 0, $$0345484 = 0, $$0355 = 0.0, $$0356 = 0.0, $$0360474 = 0.0, $$0367 = 0, $$0376 = 0, $$0376$ph = 0, $$0381$lcssa539 = 0, $$0381483 = 0, $$0390 = 0, $$0393 = 0, $$0398$lcssa = 0, $$0398463 = 0, $$0398464 = 0, $$0398465 = 0, $$0398499 = 0, $$1 = 0.0, $$10473 = 0, $$11 = 0, $$1330 = 0, $$1357 = 0.0, $$1361 = 0.0, $$1377 = 0, $$1377$ph = 0, $$1377$ph$ph = 0, $$1391$lcssa = 0, $$1391501 = 0, $$2 = 0, $$2338 = 0, $$2342 = 0, $$2362 = 0.0, $$2369 = 0, $$2369$ph = 0, $$2369$ph579 = 0, $$2392 = 0, $$2395 = 0, $$2400 = 0, $$3$lcssa = 0, $$3339493 = 0, $$3343 = 0, $$3348$ph = 0, $$3348$ph580 = 0, $$3359 = 0.0, $$3363 = 0.0, $$3370 = 0, $$3379 = 0, $$3384$ph = 0, $$3384$ph578 = 0, $$3396$lcssa = 0, $$3396500 = 0, $$3504 = 0, $$4344485 = 0, $$4380 = 0, $$4397 = 0, $$4475 = 0, $$5 = 0, $$5$in = 0, $$5350 = 0, $$5350$ph = 0, $$5350$ph$ph = 0, $$5372 = 0, $$5386$ph = 0, $$5386$ph576 = 0, $$5386$ph576$ph = 0, $$6351478 = 0, $$6387477 = 0, $$6479 = 0, $$7374$ph$ph = 0, $$pre = 0, $$sink$off0 = 0, $10 = 0, $104 = 0, $105 = 0, $11 = 0, $110 = 0, $111 = 0, $113 = 0, $114 = 0, $127 = 0, $129 = 0, $135 = 0, $139 = 0, $141 = 0, $147 = 0, $153 = 0, $155 = 0, $177 = 0, $18 = 0, $189 = 0, $193 = 0, $196 = 0, $198 = 0, $199 = 0, $200 = 0, $201 = 0, $203 = 0, $204 = 0, $218 = 0, $219 = 0, $220 = 0, $224 = 0, $226 = 0, $228 = 0, $229 = 0, $235 = 0, $237 = 0, $239 = 0, $244 = 0, $247 = 0, $251 = 0, $254 = 0, $257 = 0, $26 = 0, $264 = 0, $267 = 0, $269 = 0, $27 = 0, $274 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $283 = 0, $29 = 0, $294 = 0, $297 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $31 = 0, $318 = 0.0, $319 = 0.0, $320 = 0, $321 = 0, $322 = 0, $327 = 0.0, $330 = 0.0, $334 = 0, $337 = 0, $361 = 0.0, $366 = 0, $373 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $40 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $58 = 0, $59 = 0, $6 = 0, $63 = 0, $7 = 0, $71 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $85 = 0, $86 = 0, $9 = 0, $95 = 0, $96 = 0, $97 = 0, $or$cond417 = 0, $or$cond421 = 0, $spec$select420 = 0, $spec$select441 = 0, $storemerge446 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 $6 = sp;
 $7 = $3 + $2 | 0;
 $8 = 0 - $7 | 0;
 $9 = $0 + 4 | 0;
 $10 = $0 + 100 | 0;
 $$0324 = $1;
 $$0393 = 0;
 L1 : while (1) {
  switch ($$0324 | 0) {
  case 46:
   {
    label = 7;
    break L1;
    break;
   }
  case 48:
   break;
  default:
   {
    $$0390 = 0;
    $$2 = $$0324;
    $$2395 = $$0393;
    $375 = 0;
    $376 = 0;
    break L1;
   }
  }
  $11 = HEAP32[$9 >> 2] | 0;
  if ($11 >>> 0 < (HEAP32[$10 >> 2] | 0) >>> 0) {
   HEAP32[$9 >> 2] = $11 + 1;
   $$0324$be = HEAPU8[$11 >> 0] | 0;
  } else $$0324$be = ___shgetc($0) | 0;
  $$0324 = $$0324$be;
  $$0393 = 1;
 }
 if ((label | 0) == 7) {
  $18 = HEAP32[$9 >> 2] | 0;
  if ($18 >>> 0 < (HEAP32[$10 >> 2] | 0) >>> 0) {
   HEAP32[$9 >> 2] = $18 + 1;
   $26 = HEAPU8[$18 >> 0] | 0;
  } else $26 = ___shgetc($0) | 0;
  if (($26 | 0) == 48) {
   $27 = 0;
   $28 = 0;
   while (1) {
    $29 = _i64Add($27 | 0, $28 | 0, -1, -1) | 0;
    $30 = tempRet0;
    $31 = HEAP32[$9 >> 2] | 0;
    if ($31 >>> 0 < (HEAP32[$10 >> 2] | 0) >>> 0) {
     HEAP32[$9 >> 2] = $31 + 1;
     $39 = HEAPU8[$31 >> 0] | 0;
    } else $39 = ___shgetc($0) | 0;
    if (($39 | 0) == 48) {
     $27 = $29;
     $28 = $30;
    } else {
     $$0390 = 1;
     $$2 = $39;
     $$2395 = 1;
     $375 = $29;
     $376 = $30;
     break;
    }
   }
  } else {
   $$0390 = 1;
   $$2 = $26;
   $$2395 = $$0393;
   $375 = 0;
   $376 = 0;
  }
 }
 HEAP32[$6 >> 2] = 0;
 $40 = $$2 + -48 | 0;
 $42 = ($$2 | 0) == 46;
 L22 : do if ($42 | $40 >>> 0 < 10) {
  $44 = $6 + 496 | 0;
  $$0336503 = 0;
  $$0340502 = 0;
  $$0398499 = 0;
  $$1391501 = $$0390;
  $$3396500 = $$2395;
  $$3504 = $$2;
  $377 = $42;
  $378 = $40;
  $379 = $375;
  $380 = $376;
  $47 = 0;
  $48 = 0;
  L24 : while (1) {
   do if ($377) if (!$$1391501) {
    $$2338 = $$0336503;
    $$2342 = $$0340502;
    $$2392 = 1;
    $$2400 = $$0398499;
    $$4397 = $$3396500;
    $381 = $47;
    $382 = $48;
    $383 = $47;
    $384 = $48;
   } else break L24; else {
    $49 = _i64Add($47 | 0, $48 | 0, 1, 0) | 0;
    $50 = tempRet0;
    $51 = ($$3504 | 0) != 48;
    if (($$0340502 | 0) >= 125) {
     if (!$51) {
      $$2338 = $$0336503;
      $$2342 = $$0340502;
      $$2392 = $$1391501;
      $$2400 = $$0398499;
      $$4397 = $$3396500;
      $381 = $379;
      $382 = $380;
      $383 = $49;
      $384 = $50;
      break;
     }
     HEAP32[$44 >> 2] = HEAP32[$44 >> 2] | 1;
     $$2338 = $$0336503;
     $$2342 = $$0340502;
     $$2392 = $$1391501;
     $$2400 = $$0398499;
     $$4397 = $$3396500;
     $381 = $379;
     $382 = $380;
     $383 = $49;
     $384 = $50;
     break;
    }
    $53 = $6 + ($$0340502 << 2) | 0;
    if (!$$0336503) $storemerge446 = $378; else $storemerge446 = $$3504 + -48 + ((HEAP32[$53 >> 2] | 0) * 10 | 0) | 0;
    HEAP32[$53 >> 2] = $storemerge446;
    $58 = $$0336503 + 1 | 0;
    $59 = ($58 | 0) == 9;
    $$2338 = $59 ? 0 : $58;
    $$2342 = $$0340502 + ($59 & 1) | 0;
    $$2392 = $$1391501;
    $$2400 = $51 ? $49 : $$0398499;
    $$4397 = 1;
    $381 = $379;
    $382 = $380;
    $383 = $49;
    $384 = $50;
   } while (0);
   $63 = HEAP32[$9 >> 2] | 0;
   if ($63 >>> 0 < (HEAP32[$10 >> 2] | 0) >>> 0) {
    HEAP32[$9 >> 2] = $63 + 1;
    $71 = HEAPU8[$63 >> 0] | 0;
   } else $71 = ___shgetc($0) | 0;
   $378 = $71 + -48 | 0;
   $377 = ($71 | 0) == 46;
   if (!($377 | $378 >>> 0 < 10)) {
    $$0336$lcssa = $$2338;
    $$0340$lcssa = $$2342;
    $$0398$lcssa = $$2400;
    $$1391$lcssa = $$2392;
    $$3$lcssa = $71;
    $$3396$lcssa = $$4397;
    $77 = $383;
    $78 = $381;
    $80 = $384;
    $81 = $382;
    label = 31;
    break L22;
   } else {
    $$0336503 = $$2338;
    $$0340502 = $$2342;
    $$0398499 = $$2400;
    $$1391501 = $$2392;
    $$3396500 = $$4397;
    $$3504 = $71;
    $379 = $381;
    $380 = $382;
    $47 = $383;
    $48 = $384;
   }
  }
  $$0336455 = $$0336503;
  $$0340459 = $$0340502;
  $$0398465 = $$0398499;
  $385 = $47;
  $386 = $48;
  $387 = $379;
  $388 = $380;
  $389 = ($$3396500 | 0) != 0;
  label = 39;
 } else {
  $$0336$lcssa = 0;
  $$0340$lcssa = 0;
  $$0398$lcssa = 0;
  $$1391$lcssa = $$0390;
  $$3$lcssa = $$2;
  $$3396$lcssa = $$2395;
  $77 = 0;
  $78 = $375;
  $80 = 0;
  $81 = $376;
  label = 31;
 } while (0);
 do if ((label | 0) == 31) {
  $75 = ($$1391$lcssa | 0) == 0;
  $76 = $75 ? $77 : $78;
  $79 = $75 ? $80 : $81;
  $82 = ($$3396$lcssa | 0) != 0;
  if (!($82 & ($$3$lcssa | 32 | 0) == 101)) if (($$3$lcssa | 0) > -1) {
   $$0336455 = $$0336$lcssa;
   $$0340459 = $$0340$lcssa;
   $$0398465 = $$0398$lcssa;
   $385 = $77;
   $386 = $80;
   $387 = $76;
   $388 = $79;
   $389 = $82;
   label = 39;
   break;
  } else {
   $$0336454 = $$0336$lcssa;
   $$0340458 = $$0340$lcssa;
   $$0398464 = $$0398$lcssa;
   $390 = $77;
   $391 = $80;
   $392 = $82;
   $393 = $76;
   $394 = $79;
   label = 41;
   break;
  }
  $85 = _scanexp($0, $5) | 0;
  $86 = tempRet0;
  if (($85 | 0) == 0 & ($86 | 0) == -2147483648) {
   if (!$5) {
    ___shlim($0, 0);
    $$1 = 0.0;
    break;
   }
   if (!(HEAP32[$10 >> 2] | 0)) {
    $95 = 0;
    $96 = 0;
   } else {
    HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1;
    $95 = 0;
    $96 = 0;
   }
  } else {
   $95 = $85;
   $96 = $86;
  }
  $97 = _i64Add($95 | 0, $96 | 0, $76 | 0, $79 | 0) | 0;
  $$0336453 = $$0336$lcssa;
  $$0340457 = $$0340$lcssa;
  $$0398463 = $$0398$lcssa;
  $110 = $97;
  $111 = $77;
  $113 = tempRet0;
  $114 = $80;
  label = 43;
 } while (0);
 if ((label | 0) == 39) if (!(HEAP32[$10 >> 2] | 0)) {
  $$0336454 = $$0336455;
  $$0340458 = $$0340459;
  $$0398464 = $$0398465;
  $390 = $385;
  $391 = $386;
  $392 = $389;
  $393 = $387;
  $394 = $388;
  label = 41;
 } else {
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1;
  if ($389) {
   $$0336453 = $$0336455;
   $$0340457 = $$0340459;
   $$0398463 = $$0398465;
   $110 = $387;
   $111 = $385;
   $113 = $388;
   $114 = $386;
   label = 43;
  } else label = 42;
 }
 if ((label | 0) == 41) if ($392) {
  $$0336453 = $$0336454;
  $$0340457 = $$0340458;
  $$0398463 = $$0398464;
  $110 = $393;
  $111 = $390;
  $113 = $394;
  $114 = $391;
  label = 43;
 } else label = 42;
 do if ((label | 0) == 42) {
  $104 = ___errno_location() | 0;
  HEAP32[$104 >> 2] = 22;
  ___shlim($0, 0);
  $$1 = 0.0;
 } else if ((label | 0) == 43) {
  $105 = HEAP32[$6 >> 2] | 0;
  if (!$105) {
   $$1 = +($4 | 0) * 0.0;
   break;
  }
  if ((($114 | 0) < 0 | ($114 | 0) == 0 & $111 >>> 0 < 10) & (($110 | 0) == ($111 | 0) & ($113 | 0) == ($114 | 0))) if (($2 | 0) > 30 | ($105 >>> $2 | 0) == 0) {
   $$1 = +($4 | 0) * +($105 >>> 0);
   break;
  }
  $127 = ($3 | 0) / -2 | 0;
  $129 = (($127 | 0) < 0) << 31 >> 31;
  if (($113 | 0) > ($129 | 0) | ($113 | 0) == ($129 | 0) & $110 >>> 0 > $127 >>> 0) {
   $135 = ___errno_location() | 0;
   HEAP32[$135 >> 2] = 34;
   $$1 = +($4 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  $139 = $3 + -106 | 0;
  $141 = (($139 | 0) < 0) << 31 >> 31;
  if (($113 | 0) < ($141 | 0) | ($113 | 0) == ($141 | 0) & $110 >>> 0 < $139 >>> 0) {
   $147 = ___errno_location() | 0;
   HEAP32[$147 >> 2] = 34;
   $$1 = +($4 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (!$$0336453) $$3343 = $$0340457; else {
   if (($$0336453 | 0) < 9) {
    $153 = $6 + ($$0340457 << 2) | 0;
    $$3339493 = $$0336453;
    $155 = HEAP32[$153 >> 2] | 0;
    while (1) {
     $155 = $155 * 10 | 0;
     if (($$3339493 | 0) >= 8) break; else $$3339493 = $$3339493 + 1 | 0;
    }
    HEAP32[$153 >> 2] = $155;
   }
   $$3343 = $$0340457 + 1 | 0;
  }
  if (($$0398463 | 0) < 9) if (($$0398463 | 0) <= ($110 | 0) & ($110 | 0) < 18) {
   if (($110 | 0) == 9) {
    $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0);
    break;
   }
   if (($110 | 0) < 9) {
    $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0) / +(HEAP32[2784 + (8 - $110 << 2) >> 2] | 0);
    break;
   }
   $177 = $2 + 27 + (Math_imul($110, -3) | 0) | 0;
   $$pre = HEAP32[$6 >> 2] | 0;
   if (($177 | 0) > 30 | ($$pre >>> $177 | 0) == 0) {
    $$1 = +($4 | 0) * +($$pre >>> 0) * +(HEAP32[2784 + ($110 + -10 << 2) >> 2] | 0);
    break;
   }
  }
  $189 = ($110 | 0) % 9 | 0;
  if (!$189) {
   $$2369$ph = $$3343;
   $$3348$ph = 0;
   $$3384$ph = $110;
  } else {
   $193 = ($110 | 0) > -1 ? $189 : $189 + 9 | 0;
   $196 = HEAP32[2784 + (8 - $193 << 2) >> 2] | 0;
   if (!$$3343) {
    $$0345$lcssa540 = 0;
    $$0367 = 0;
    $$0381$lcssa539 = $110;
   } else {
    $198 = 1e9 / ($196 | 0) | 0;
    $$0335486 = 0;
    $$0345484 = 0;
    $$0381483 = $110;
    $$4344485 = 0;
    do {
     $199 = $6 + ($$4344485 << 2) | 0;
     $200 = HEAP32[$199 >> 2] | 0;
     $201 = ($200 >>> 0) / ($196 >>> 0) | 0;
     $203 = $200 - (Math_imul($201, $196) | 0) | 0;
     $204 = $201 + $$0335486 | 0;
     HEAP32[$199 >> 2] = $204;
     $$0335486 = Math_imul($198, $203) | 0;
     $or$cond417 = ($$4344485 | 0) == ($$0345484 | 0) & ($204 | 0) == 0;
     $$0381483 = $or$cond417 ? $$0381483 + -9 | 0 : $$0381483;
     $$0345484 = $or$cond417 ? $$0345484 + 1 & 127 : $$0345484;
     $$4344485 = $$4344485 + 1 | 0;
    } while (($$4344485 | 0) != ($$3343 | 0));
    if (!$$0335486) {
     $$0345$lcssa540 = $$0345484;
     $$0367 = $$3343;
     $$0381$lcssa539 = $$0381483;
    } else {
     HEAP32[$6 + ($$3343 << 2) >> 2] = $$0335486;
     $$0345$lcssa540 = $$0345484;
     $$0367 = $$3343 + 1 | 0;
     $$0381$lcssa539 = $$0381483;
    }
   }
   $$2369$ph = $$0367;
   $$3348$ph = $$0345$lcssa540;
   $$3384$ph = 9 - $193 + $$0381$lcssa539 | 0;
  }
  $$0376$ph = 0;
  $$2369$ph579 = $$2369$ph;
  $$3348$ph580 = $$3348$ph;
  $$3384$ph578 = $$3384$ph;
  L104 : while (1) {
   $218 = ($$3384$ph578 | 0) < 18;
   $219 = ($$3384$ph578 | 0) == 18;
   $220 = $6 + ($$3348$ph580 << 2) | 0;
   $$0376 = $$0376$ph;
   $$2369 = $$2369$ph579;
   while (1) {
    if (!$218) {
     if (!$219) {
      $$5386$ph = $$3384$ph578;
      break L104;
     }
     if ((HEAP32[$220 >> 2] | 0) >>> 0 >= 9007199) {
      $$5386$ph = 18;
      break L104;
     }
    }
    $$0329 = 0;
    $$3370 = $$2369;
    $$5$in = $$2369 + 127 | 0;
    while (1) {
     $$5 = $$5$in & 127;
     $224 = $6 + ($$5 << 2) | 0;
     $226 = _bitshift64Shl(HEAP32[$224 >> 2] | 0, 0, 29) | 0;
     $228 = _i64Add($226 | 0, tempRet0 | 0, $$0329 | 0, 0) | 0;
     $229 = tempRet0;
     if ($229 >>> 0 > 0 | ($229 | 0) == 0 & $228 >>> 0 > 1e9) {
      $235 = ___udivdi3($228 | 0, $229 | 0, 1e9, 0) | 0;
      $237 = ___muldi3($235 | 0, tempRet0 | 0, 1e9, 0) | 0;
      $239 = _i64Subtract($228 | 0, $229 | 0, $237 | 0, tempRet0 | 0) | 0;
      $$1330 = $235;
      $$sink$off0 = $239;
     } else {
      $$1330 = 0;
      $$sink$off0 = $228;
     }
     HEAP32[$224 >> 2] = $$sink$off0;
     $244 = ($$5 | 0) == ($$3348$ph580 | 0);
     $spec$select441 = ($$5 | 0) != ($$3370 + 127 & 127 | 0) | $244 ? $$3370 : ($$sink$off0 | 0) == 0 ? $$5 : $$3370;
     if ($244) break; else {
      $$0329 = $$1330;
      $$3370 = $spec$select441;
      $$5$in = $$5 + -1 | 0;
     }
    }
    $247 = $$0376 + -29 | 0;
    if (!$$1330) {
     $$0376 = $247;
     $$2369 = $$3370;
    } else break;
   }
   $251 = $$3348$ph580 + 127 & 127;
   $254 = $spec$select441 + 127 & 127;
   $257 = $6 + (($spec$select441 + 126 & 127) << 2) | 0;
   if (($251 | 0) == ($spec$select441 | 0)) {
    HEAP32[$257 >> 2] = HEAP32[$257 >> 2] | HEAP32[$6 + ($254 << 2) >> 2];
    $$5372 = $254;
   } else $$5372 = $$3370;
   HEAP32[$6 + ($251 << 2) >> 2] = $$1330;
   $$0376$ph = $247;
   $$2369$ph579 = $$5372;
   $$3348$ph580 = $251;
   $$3384$ph578 = $$3384$ph578 + 9 | 0;
  }
  $$1377$ph$ph = $$0376;
  $$5350$ph$ph = $$3348$ph580;
  $$5386$ph576$ph = $$5386$ph;
  $$7374$ph$ph = $$2369;
  L123 : while (1) {
   $297 = $$7374$ph$ph + 1 & 127;
   $302 = $6 + (($$7374$ph$ph + 127 & 127) << 2) | 0;
   $$1377$ph = $$1377$ph$ph;
   $$5350$ph = $$5350$ph$ph;
   $$5386$ph576 = $$5386$ph576$ph;
   while (1) {
    $294 = ($$5386$ph576 | 0) == 18;
    $spec$select420 = ($$5386$ph576 | 0) > 27 ? 9 : 1;
    $$1377 = $$1377$ph;
    $$5350 = $$5350$ph;
    while (1) {
     $$0331476 = 0;
     while (1) {
      $264 = $$0331476 + $$5350 & 127;
      if (($264 | 0) == ($$7374$ph$ph | 0)) {
       label = 92;
       break;
      }
      $267 = HEAP32[$6 + ($264 << 2) >> 2] | 0;
      $269 = HEAP32[2816 + ($$0331476 << 2) >> 2] | 0;
      if ($267 >>> 0 < $269 >>> 0) {
       label = 92;
       break;
      }
      if ($267 >>> 0 > $269 >>> 0) break;
      if (($$0331476 + 1 | 0) >>> 0 < 2) $$0331476 = 1; else {
       label = 92;
       break;
      }
     }
     if ((label | 0) == 92) {
      label = 0;
      if ($294) break L123;
     }
     $274 = $spec$select420 + $$1377 | 0;
     if (($$5350 | 0) == ($$7374$ph$ph | 0)) {
      $$1377 = $274;
      $$5350 = $$7374$ph$ph;
     } else break;
    }
    $277 = (1 << $spec$select420) + -1 | 0;
    $278 = 1e9 >>> $spec$select420;
    $$0327480 = 0;
    $$6351478 = $$5350;
    $$6387477 = $$5386$ph576;
    $$6479 = $$5350;
    do {
     $279 = $6 + ($$6479 << 2) | 0;
     $280 = HEAP32[$279 >> 2] | 0;
     $283 = ($280 >>> $spec$select420) + $$0327480 | 0;
     HEAP32[$279 >> 2] = $283;
     $$0327480 = Math_imul($280 & $277, $278) | 0;
     $or$cond421 = ($$6479 | 0) == ($$6351478 | 0) & ($283 | 0) == 0;
     $$6387477 = $or$cond421 ? $$6387477 + -9 | 0 : $$6387477;
     $$6351478 = $or$cond421 ? $$6351478 + 1 & 127 : $$6351478;
     $$6479 = $$6479 + 1 & 127;
    } while (($$6479 | 0) != ($$7374$ph$ph | 0));
    if ($$0327480 | 0) {
     if (($297 | 0) != ($$6351478 | 0)) break;
     HEAP32[$302 >> 2] = HEAP32[$302 >> 2] | 1;
    }
    $$1377$ph = $274;
    $$5350$ph = $$6351478;
    $$5386$ph576 = $$6387477;
   }
   HEAP32[$6 + ($$7374$ph$ph << 2) >> 2] = $$0327480;
   $$1377$ph$ph = $274;
   $$5350$ph$ph = $$6351478;
   $$5386$ph576$ph = $$6387477;
   $$7374$ph$ph = $297;
  }
  $$0360474 = 0.0;
  $$10473 = $$7374$ph$ph;
  $$4475 = 0;
  while (1) {
   $306 = $$4475 + $$5350 & 127;
   $309 = $$10473 + 1 & 127;
   if (($306 | 0) == ($$10473 | 0)) {
    HEAP32[$6 + ($309 + -1 << 2) >> 2] = 0;
    $$11 = $309;
   } else $$11 = $$10473;
   $$0360474 = $$0360474 * 1.0e9 + +((HEAP32[$6 + ($306 << 2) >> 2] | 0) >>> 0);
   $$4475 = $$4475 + 1 | 0;
   if (($$4475 | 0) == 2) break; else $$10473 = $$11;
  }
  $318 = +($4 | 0);
  $319 = $$0360474 * $318;
  $320 = $$1377 + 53 | 0;
  $321 = $320 - $3 | 0;
  $322 = ($321 | 0) < ($2 | 0);
  $$0328 = $322 ? (($321 | 0) > 0 ? $321 : 0) : $2;
  if (($$0328 | 0) < 53) {
   $327 = +_copysignl(+_scalbn(1.0, 105 - $$0328 | 0), $319);
   $330 = +_fmodl($319, +_scalbn(1.0, 53 - $$0328 | 0));
   $$0355 = $327;
   $$0356 = $330;
   $$1361 = $327 + ($319 - $330);
  } else {
   $$0355 = 0.0;
   $$0356 = 0.0;
   $$1361 = $319;
  }
  $334 = $$5350 + 2 & 127;
  if (($334 | 0) == ($$11 | 0)) $$3359 = $$0356; else {
   $337 = HEAP32[$6 + ($334 << 2) >> 2] | 0;
   do if ($337 >>> 0 < 5e8) {
    if (!$337) if (($$5350 + 3 & 127 | 0) == ($$11 | 0)) {
     $$1357 = $$0356;
     break;
    }
    $$1357 = $318 * .25 + $$0356;
   } else {
    if (($337 | 0) != 5e8) {
     $$1357 = $318 * .75 + $$0356;
     break;
    }
    if (($$5350 + 3 & 127 | 0) == ($$11 | 0)) {
     $$1357 = $318 * .5 + $$0356;
     break;
    } else {
     $$1357 = $318 * .75 + $$0356;
     break;
    }
   } while (0);
   if ((53 - $$0328 | 0) > 1) if (+_fmodl($$1357, 1.0) != 0.0) $$3359 = $$1357; else $$3359 = $$1357 + 1.0; else $$3359 = $$1357;
  }
  $361 = $$1361 + $$3359 - $$0355;
  do if (($320 & 2147483647 | 0) > (-2 - $7 | 0)) {
   $366 = !(+Math_abs(+$361) >= 9007199254740992.0);
   $$3379 = $$1377 + (($366 ^ 1) & 1) | 0;
   $$2362 = $366 ? $361 : $361 * .5;
   if (($$3379 + 50 | 0) <= ($8 | 0)) if (!($$3359 != 0.0 & ($322 & (($$0328 | 0) != ($321 | 0) | $366)))) {
    $$3363 = $$2362;
    $$4380 = $$3379;
    break;
   }
   $373 = ___errno_location() | 0;
   HEAP32[$373 >> 2] = 34;
   $$3363 = $$2362;
   $$4380 = $$3379;
  } else {
   $$3363 = $361;
   $$4380 = $$1377;
  } while (0);
  $$1 = +_scalbnl($$3363, $$4380);
 } while (0);
 STACKTOP = sp;
 return +$$1;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $103 = 0, $104 = 0, $111 = 0, $112 = 0, $119 = 0, $120 = 0, $127 = 0, $128 = 0, $135 = 0, $136 = 0, $143 = 0, $144 = 0, $15 = 0, $151 = 0, $152 = 0, $159 = 0, $16 = 0, $160 = 0, $167 = 0, $168 = 0, $175 = 0, $176 = 0, $178 = 0, $182 = 0, $183 = 0, $190 = 0, $191 = 0, $198 = 0, $199 = 0, $206 = 0, $207 = 0, $214 = 0, $215 = 0, $222 = 0, $223 = 0, $23 = 0, $230 = 0, $231 = 0, $238 = 0, $239 = 0, $24 = 0, $3 = 0, $31 = 0, $32 = 0, $39 = 0, $40 = 0, $47 = 0, $48 = 0, $55 = 0, $56 = 0, $63 = 0, $64 = 0, $7 = 0, $71 = 0, $72 = 0, $79 = 0, $8 = 0, $80 = 0, $87 = 0, $88 = 0, $95 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp;
 L1 : do if (($0 | 0) == ($1 | 0)) $$1 = $0; else do switch (HEAP8[$0 >> 0] | 0) {
 case 118:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3, 16556);
   $7 = $2 + 4 | 0;
   $8 = HEAP32[$7 >> 2] | 0;
   if ($8 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($8, $3);
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 119:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj8EEERAT__Kc($3);
   $15 = $2 + 4 | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   if ($16 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($16, $3);
    HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 98:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3, 16561);
   $23 = $2 + 4 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   if ($24 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($24, $3);
    HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 99:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3, 16330);
   $31 = $2 + 4 | 0;
   $32 = HEAP32[$31 >> 2] | 0;
   if ($32 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($32, $3);
    HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 97:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($3, 16335);
   $39 = $2 + 4 | 0;
   $40 = HEAP32[$39 >> 2] | 0;
   if ($40 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($40, $3);
    HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 104:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($3, 16347);
   $47 = $2 + 4 | 0;
   $48 = HEAP32[$47 >> 2] | 0;
   if ($48 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($48, $3);
    HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 115:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($3, 16361);
   $55 = $2 + 4 | 0;
   $56 = HEAP32[$55 >> 2] | 0;
   if ($56 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($56, $3);
    HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 116:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($3, 16367);
   $63 = $2 + 4 | 0;
   $64 = HEAP32[$63 >> 2] | 0;
   if ($64 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($64, $3);
    HEAP32[$63 >> 2] = (HEAP32[$63 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 105:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($3, 16566);
   $71 = $2 + 4 | 0;
   $72 = HEAP32[$71 >> 2] | 0;
   if ($72 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($72, $3);
    HEAP32[$71 >> 2] = (HEAP32[$71 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 106:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($3, 16570);
   $79 = $2 + 4 | 0;
   $80 = HEAP32[$79 >> 2] | 0;
   if ($80 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($80, $3);
    HEAP32[$79 >> 2] = (HEAP32[$79 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 108:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3, 16583);
   $87 = $2 + 4 | 0;
   $88 = HEAP32[$87 >> 2] | 0;
   if ($88 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($88, $3);
    HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 109:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($3, 16588);
   $95 = $2 + 4 | 0;
   $96 = HEAP32[$95 >> 2] | 0;
   if ($96 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($96, $3);
    HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 120:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 16602);
   $103 = $2 + 4 | 0;
   $104 = HEAP32[$103 >> 2] | 0;
   if ($104 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($104, $3);
    HEAP32[$103 >> 2] = (HEAP32[$103 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 121:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj19EEERAT__Kc($3);
   $111 = $2 + 4 | 0;
   $112 = HEAP32[$111 >> 2] | 0;
   if ($112 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($112, $3);
    HEAP32[$111 >> 2] = (HEAP32[$111 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 110:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($3, 16396);
   $119 = $2 + 4 | 0;
   $120 = HEAP32[$119 >> 2] | 0;
   if ($120 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($120, $3);
    HEAP32[$119 >> 2] = (HEAP32[$119 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 111:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($3, 16405);
   $127 = $2 + 4 | 0;
   $128 = HEAP32[$127 >> 2] | 0;
   if ($128 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($128, $3);
    HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 102:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($3, 16612);
   $135 = $2 + 4 | 0;
   $136 = HEAP32[$135 >> 2] | 0;
   if ($136 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($136, $3);
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 100:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj7EEERAT__Kc($3);
   $143 = $2 + 4 | 0;
   $144 = HEAP32[$143 >> 2] | 0;
   if ($144 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($144, $3);
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 101:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($3, 16618);
   $151 = $2 + 4 | 0;
   $152 = HEAP32[$151 >> 2] | 0;
   if ($152 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($152, $3);
    HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 103:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 16630);
   $159 = $2 + 4 | 0;
   $160 = HEAP32[$159 >> 2] | 0;
   if ($160 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($160, $3);
    HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 122:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($3, 16641);
   $167 = $2 + 4 | 0;
   $168 = HEAP32[$167 >> 2] | 0;
   if ($168 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($168, $3);
    HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 117:
  {
   $175 = $0 + 1 | 0;
   $176 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($175, $1, $2) | 0;
   $$1 = ($176 | 0) == ($175 | 0) ? $0 : $176;
   break L1;
   break;
  }
 case 68:
  {
   $178 = $0 + 1 | 0;
   if (($178 | 0) == ($1 | 0)) {
    $$1 = $0;
    break L1;
   }
   switch (HEAP8[$178 >> 0] | 0) {
   case 100:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 16645);
     $182 = $2 + 4 | 0;
     $183 = HEAP32[$182 >> 2] | 0;
     if ($183 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($183, $3);
      HEAP32[$182 >> 2] = (HEAP32[$182 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$1 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 101:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 16655);
     $190 = $2 + 4 | 0;
     $191 = HEAP32[$190 >> 2] | 0;
     if ($191 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($191, $3);
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$1 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 102:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 16666);
     $198 = $2 + 4 | 0;
     $199 = HEAP32[$198 >> 2] | 0;
     if ($199 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($199, $3);
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$1 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 104:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 16676);
     $206 = $2 + 4 | 0;
     $207 = HEAP32[$206 >> 2] | 0;
     if ($207 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($207, $3);
      HEAP32[$206 >> 2] = (HEAP32[$206 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$1 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 105:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($3, 16686);
     $214 = $2 + 4 | 0;
     $215 = HEAP32[$214 >> 2] | 0;
     if ($215 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($215, $3);
      HEAP32[$214 >> 2] = (HEAP32[$214 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$1 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 115:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($3, 16695);
     $222 = $2 + 4 | 0;
     $223 = HEAP32[$222 >> 2] | 0;
     if ($223 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($223, $3);
      HEAP32[$222 >> 2] = (HEAP32[$222 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$1 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 97:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3, 16704);
     $230 = $2 + 4 | 0;
     $231 = HEAP32[$230 >> 2] | 0;
     if ($231 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($231, $3);
      HEAP32[$230 >> 2] = (HEAP32[$230 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$1 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 110:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($3, 16709);
     $238 = $2 + 4 | 0;
     $239 = HEAP32[$238 >> 2] | 0;
     if ($239 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($239, $3);
      HEAP32[$238 >> 2] = (HEAP32[$238 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$1 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$1 = $0;
     break L1;
    }
   }
   break;
  }
 default:
  {
   $$1 = $0;
   break L1;
  }
 } while (0); while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i199 = 0, $$0$i$i$add$i203 = 0, $$0$i$i$add$i209 = 0, $$0$i$i$add$i213 = 0, $$0$i$i$add$i223 = 0, $$0$i$i$add$i229 = 0, $$0$i$i$add$i233 = 0, $$0$i$i$add$i243 = 0, $$0$i$i$add$i253 = 0, $$0$i$i$add$i257 = 0, $$0$i$i$i = 0, $$0$i$i$i216 = 0, $$0$i$i$i236 = 0, $$0$i$i$i246 = 0, $$0$i$i$i260 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i198 = 0, $$0$i$i$idx$i202 = 0, $$0$i$i$idx$i208 = 0, $$0$i$i$idx$i212 = 0, $$0$i$i$idx$i222 = 0, $$0$i$i$idx$i228 = 0, $$0$i$i$idx$i232 = 0, $$0$i$i$idx$i242 = 0, $$0$i$i$idx$i252 = 0, $$0$i$i$idx$i256 = 0, $$0182$off0 = 0, $$0183 = 0, $$1184 = 0, $$2185 = 0, $$3186 = 0, $$4187 = 0, $$6181 = 0, $$pre = 0, $$pre$phi298Z2D = 0, $$pre$phi300Z2D = 0, $100 = 0, $107 = 0, $116 = 0, $117 = 0, $124 = 0, $126 = 0, $128 = 0, $129 = 0, $13 = 0, $136 = 0, $141 = 0, $142 = 0, $149 = 0, $15 = 0, $152 = 0, $153 = 0, $157 = 0, $158 = 0, $165 = 0, $174 = 0, $175 = 0, $182 = 0, $186 = 0, $187 = 0, $19 = 0, $190 = 0, $191 = 0, $194 = 0, $197 = 0, $204 = 0, $212 = 0, $213 = 0, $219 = 0, $220 = 0, $223 = 0, $227 = 0, $234 = 0, $243 = 0, $244 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $46 = 0, $5 = 0, $51 = 0, $52 = 0, $60 = 0, $63 = 0, $64 = 0, $67 = 0, $70 = 0, $77 = 0, $85 = 0, $86 = 0, $92 = 0, $93 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp + 12 | 0;
 $4 = sp;
 $5 = $1;
 L1 : do if (($5 - $0 | 0) > 2) {
  if ((HEAP8[$0 >> 0] | 0) == 103) {
   $13 = (HEAP8[$0 + 1 >> 0] | 0) == 115;
   $$0182$off0 = $13;
   $$0183 = $13 ? $0 + 2 | 0 : $0;
  } else {
   $$0182$off0 = 0;
   $$0183 = $0;
  }
  $15 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($$0183, $1, $2) | 0;
  if (($15 | 0) != ($$0183 | 0)) {
   if (!$$0182$off0) {
    $$6181 = $15;
    break;
   }
   $19 = HEAP32[$2 + 4 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($19 | 0)) {
    $$6181 = $0;
    break;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($19 + -24 | 0, 0, 15191) | 0;
   $$6181 = $15;
   break;
  }
  if (($5 - $$0183 | 0) > 2) if ((HEAP8[$$0183 >> 0] | 0) == 115) if ((HEAP8[$$0183 + 1 >> 0] | 0) == 114) {
   $30 = $$0183 + 2 | 0;
   if ((HEAP8[$30 >> 0] | 0) == 78) {
    $33 = $$0183 + 3 | 0;
    $34 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($33, $1, $2) | 0;
    if (($34 | 0) == ($33 | 0) | ($34 | 0) == ($1 | 0)) {
     $$6181 = $0;
     break;
    }
    $37 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($34, $1, $2) | 0;
    $$pre = $2 + 4 | 0;
    do if (($37 | 0) == ($34 | 0)) {
     $$1184 = $34;
     $$pre$phi298Z2D = $2;
    } else {
     $39 = HEAP32[$$pre >> 2] | 0;
     if ((($39 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$6181 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $39 + -24 | 0);
     $46 = HEAP32[$$pre >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($46 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$$pre >> 2] = $46 + -24;
     $51 = HEAP8[$3 + 11 >> 0] | 0;
     $52 = $51 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($46 + -48 | 0, $52 ? HEAP32[$3 >> 2] | 0 : $3, $52 ? HEAP32[$3 + 4 >> 2] | 0 : $51 & 255) | 0;
     if (($37 | 0) != ($1 | 0)) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$1184 = $37;
      $$pre$phi298Z2D = $2;
      break;
     }
     $60 = HEAP32[$$pre >> 2] | 0;
     $$0$i$i$idx$i198 = 0;
     while (1) {
      if (($$0$i$i$idx$i198 | 0) == -1) break;
      $$0$i$i$add$i199 = $$0$i$i$idx$i198 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($60 + ($$0$i$i$add$i199 * 24 | 0) | 0);
      $$0$i$i$idx$i198 = $$0$i$i$add$i199;
     }
     HEAP32[$$pre >> 2] = $60 + -24;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$6181 = $0;
     break L1;
    } while (0);
    $63 = $4 + 11 | 0;
    $64 = $4 + 4 | 0;
    $$2185 = $$1184;
    while (1) {
     if ((HEAP8[$$2185 >> 0] | 0) == 69) break;
     $67 = __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($$2185, $1, $2) | 0;
     if (($67 | 0) == ($$2185 | 0) | ($67 | 0) == ($1 | 0)) {
      $$6181 = $0;
      break L1;
     }
     $70 = HEAP32[$$pre >> 2] | 0;
     if ((($70 - (HEAP32[$$pre$phi298Z2D >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$6181 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $70 + -24 | 0);
     $77 = HEAP32[$$pre >> 2] | 0;
     $$0$i$i$idx$i202 = 0;
     while (1) {
      if (($$0$i$i$idx$i202 | 0) == -1) break;
      $$0$i$i$add$i203 = $$0$i$i$idx$i202 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($77 + ($$0$i$i$add$i203 * 24 | 0) | 0);
      $$0$i$i$idx$i202 = $$0$i$i$add$i203;
     }
     HEAP32[$$pre >> 2] = $77 + -24;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3, 0, 15191) | 0;
     HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$3 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     $85 = HEAP8[$63 >> 0] | 0;
     $86 = $85 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$$pre >> 2] | 0) + -24 | 0, $86 ? HEAP32[$4 >> 2] | 0 : $4, $86 ? HEAP32[$64 >> 2] | 0 : $85 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$2185 = $67;
    }
    $92 = $$2185 + 1 | 0;
    $93 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($92, $1, $2) | 0;
    if (($93 | 0) == ($92 | 0)) {
     $96 = HEAP32[$$pre >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($96 | 0)) {
      $$6181 = $0;
      break;
     }
     $$0$i$i$idx$i208 = 0;
     while (1) {
      if (($$0$i$i$idx$i208 | 0) == -1) break;
      $$0$i$i$add$i209 = $$0$i$i$idx$i208 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($96 + ($$0$i$i$add$i209 * 24 | 0) | 0);
      $$0$i$i$idx$i208 = $$0$i$i$add$i209;
     }
     HEAP32[$$pre >> 2] = $96 + -24;
     $$6181 = $0;
     break;
    }
    $100 = HEAP32[$$pre >> 2] | 0;
    if ((($100 - (HEAP32[$$pre$phi298Z2D >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$6181 = $0;
     break;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $100 + -24 | 0);
    $107 = HEAP32[$$pre >> 2] | 0;
    $$0$i$i$idx$i212 = 0;
    while (1) {
     if (($$0$i$i$idx$i212 | 0) == -1) break;
     $$0$i$i$add$i213 = $$0$i$i$idx$i212 + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($107 + ($$0$i$i$add$i213 * 24 | 0) | 0);
     $$0$i$i$idx$i212 = $$0$i$i$add$i213;
    }
    HEAP32[$$pre >> 2] = $107 + -24;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3, 0, 15191) | 0;
    HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
    $$0$i$i$i216 = 0;
    while (1) {
     if (($$0$i$i$i216 | 0) == 3) break;
     HEAP32[$3 + ($$0$i$i$i216 << 2) >> 2] = 0;
     $$0$i$i$i216 = $$0$i$i$i216 + 1 | 0;
    }
    $116 = HEAP8[$4 + 11 >> 0] | 0;
    $117 = $116 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$$pre >> 2] | 0) + -24 | 0, $117 ? HEAP32[$4 >> 2] | 0 : $4, $117 ? HEAP32[$4 + 4 >> 2] | 0 : $116 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$6181 = $93;
    break;
   }
   $124 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($30, $1, $2) | 0;
   if (($124 | 0) != ($30 | 0)) {
    $126 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($124, $1, $2) | 0;
    if (($126 | 0) == ($124 | 0)) $$3186 = $124; else {
     $128 = $2 + 4 | 0;
     $129 = HEAP32[$128 >> 2] | 0;
     if ((($129 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$6181 = $0;
      break;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $129 + -24 | 0);
     $136 = HEAP32[$128 >> 2] | 0;
     $$0$i$i$idx$i222 = 0;
     while (1) {
      if (($$0$i$i$idx$i222 | 0) == -1) break;
      $$0$i$i$add$i223 = $$0$i$i$idx$i222 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($136 + ($$0$i$i$add$i223 * 24 | 0) | 0);
      $$0$i$i$idx$i222 = $$0$i$i$add$i223;
     }
     HEAP32[$128 >> 2] = $136 + -24;
     $141 = HEAP8[$3 + 11 >> 0] | 0;
     $142 = $141 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($136 + -48 | 0, $142 ? HEAP32[$3 >> 2] | 0 : $3, $142 ? HEAP32[$3 + 4 >> 2] | 0 : $141 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3186 = $126;
    }
    $149 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($$3186, $1, $2) | 0;
    if (($149 | 0) == ($$3186 | 0)) {
     $152 = $2 + 4 | 0;
     $153 = HEAP32[$152 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($153 | 0)) {
      $$6181 = $0;
      break;
     }
     $$0$i$i$idx$i228 = 0;
     while (1) {
      if (($$0$i$i$idx$i228 | 0) == -1) break;
      $$0$i$i$add$i229 = $$0$i$i$idx$i228 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($153 + ($$0$i$i$add$i229 * 24 | 0) | 0);
      $$0$i$i$idx$i228 = $$0$i$i$add$i229;
     }
     HEAP32[$152 >> 2] = $153 + -24;
     $$6181 = $0;
     break;
    }
    $157 = $2 + 4 | 0;
    $158 = HEAP32[$157 >> 2] | 0;
    if ((($158 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$6181 = $0;
     break;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $158 + -24 | 0);
    $165 = HEAP32[$157 >> 2] | 0;
    $$0$i$i$idx$i232 = 0;
    while (1) {
     if (($$0$i$i$idx$i232 | 0) == -1) break;
     $$0$i$i$add$i233 = $$0$i$i$idx$i232 + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($165 + ($$0$i$i$add$i233 * 24 | 0) | 0);
     $$0$i$i$idx$i232 = $$0$i$i$add$i233;
    }
    HEAP32[$157 >> 2] = $165 + -24;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3, 0, 15191) | 0;
    HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
    $$0$i$i$i236 = 0;
    while (1) {
     if (($$0$i$i$i236 | 0) == 3) break;
     HEAP32[$3 + ($$0$i$i$i236 << 2) >> 2] = 0;
     $$0$i$i$i236 = $$0$i$i$i236 + 1 | 0;
    }
    $174 = HEAP8[$4 + 11 >> 0] | 0;
    $175 = $174 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$157 >> 2] | 0) + -24 | 0, $175 ? HEAP32[$4 >> 2] | 0 : $4, $175 ? HEAP32[$4 + 4 >> 2] | 0 : $174 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$6181 = $149;
    break;
   }
   $182 = __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($30, $1, $2) | 0;
   if (($182 | 0) == ($30 | 0) | ($182 | 0) == ($1 | 0)) $$6181 = $0; else {
    if ($$0182$off0) {
     $186 = $2 + 4 | 0;
     $187 = HEAP32[$186 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($187 | 0)) {
      $$6181 = $0;
      break;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($187 + -24 | 0, 0, 15191) | 0;
     $$pre$phi300Z2D = $186;
    } else $$pre$phi300Z2D = $2 + 4 | 0;
    $190 = $4 + 11 | 0;
    $191 = $4 + 4 | 0;
    $$4187 = $182;
    while (1) {
     if ((HEAP8[$$4187 >> 0] | 0) == 69) break;
     $194 = __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($$4187, $1, $2) | 0;
     if (($194 | 0) == ($$4187 | 0) | ($194 | 0) == ($1 | 0)) {
      $$6181 = $0;
      break L1;
     }
     $197 = HEAP32[$$pre$phi300Z2D >> 2] | 0;
     if ((($197 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$6181 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $197 + -24 | 0);
     $204 = HEAP32[$$pre$phi300Z2D >> 2] | 0;
     $$0$i$i$idx$i242 = 0;
     while (1) {
      if (($$0$i$i$idx$i242 | 0) == -1) break;
      $$0$i$i$add$i243 = $$0$i$i$idx$i242 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($204 + ($$0$i$i$add$i243 * 24 | 0) | 0);
      $$0$i$i$idx$i242 = $$0$i$i$add$i243;
     }
     HEAP32[$$pre$phi300Z2D >> 2] = $204 + -24;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3, 0, 15191) | 0;
     HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
     $$0$i$i$i246 = 0;
     while (1) {
      if (($$0$i$i$i246 | 0) == 3) break;
      HEAP32[$3 + ($$0$i$i$i246 << 2) >> 2] = 0;
      $$0$i$i$i246 = $$0$i$i$i246 + 1 | 0;
     }
     $212 = HEAP8[$190 >> 0] | 0;
     $213 = $212 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$$pre$phi300Z2D >> 2] | 0) + -24 | 0, $213 ? HEAP32[$4 >> 2] | 0 : $4, $213 ? HEAP32[$191 >> 2] | 0 : $212 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$4187 = $194;
    }
    $219 = $$4187 + 1 | 0;
    $220 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($219, $1, $2) | 0;
    if (($220 | 0) == ($219 | 0)) {
     $223 = HEAP32[$$pre$phi300Z2D >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($223 | 0)) {
      $$6181 = $0;
      break;
     }
     $$0$i$i$idx$i252 = 0;
     while (1) {
      if (($$0$i$i$idx$i252 | 0) == -1) break;
      $$0$i$i$add$i253 = $$0$i$i$idx$i252 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($223 + ($$0$i$i$add$i253 * 24 | 0) | 0);
      $$0$i$i$idx$i252 = $$0$i$i$add$i253;
     }
     HEAP32[$$pre$phi300Z2D >> 2] = $223 + -24;
     $$6181 = $0;
     break;
    }
    $227 = HEAP32[$$pre$phi300Z2D >> 2] | 0;
    if ((($227 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$6181 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $227 + -24 | 0);
     $234 = HEAP32[$$pre$phi300Z2D >> 2] | 0;
     $$0$i$i$idx$i256 = 0;
     while (1) {
      if (($$0$i$i$idx$i256 | 0) == -1) break;
      $$0$i$i$add$i257 = $$0$i$i$idx$i256 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($234 + ($$0$i$i$add$i257 * 24 | 0) | 0);
      $$0$i$i$idx$i256 = $$0$i$i$add$i257;
     }
     HEAP32[$$pre$phi300Z2D >> 2] = $234 + -24;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3, 0, 15191) | 0;
     HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
     $$0$i$i$i260 = 0;
     while (1) {
      if (($$0$i$i$i260 | 0) == 3) break;
      HEAP32[$3 + ($$0$i$i$i260 << 2) >> 2] = 0;
      $$0$i$i$i260 = $$0$i$i$i260 + 1 | 0;
     }
     $243 = HEAP8[$4 + 11 >> 0] | 0;
     $244 = $243 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$$pre$phi300Z2D >> 2] | 0) + -24 | 0, $244 ? HEAP32[$4 >> 2] | 0 : $4, $244 ? HEAP32[$4 + 4 >> 2] | 0 : $243 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$6181 = $220;
    }
   }
  } else $$6181 = $0; else $$6181 = $0; else $$6181 = $0;
 } else $$6181 = $0; while (0);
 STACKTOP = sp;
 return $$6181 | 0;
}

function _arDetectMarker($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0440 = 0, $$0442 = 0, $$0447 = 0, $$0452 = 0, $$0456 = 0, $$0458 = 0.0, $$0462 = 0.0, $$0464 = 0.0, $$1441 = 0, $$1443 = 0, $$1448 = 0, $$1453 = 0, $$1457 = 0, $$1459 = 0.0, $$1463 = 0.0, $$1465 = 0.0, $$2444 = 0, $$2449 = 0, $$2454 = 0, $$2460 = 0.0, $$3445 = 0, $$3450 = 0, $$3455 = 0, $$4 = 0, $$4446 = 0, $$4451 = 0, $$5 = 0, $$6 = 0, $$pre$phi495Z2D = 0, $$pre$phi501Z2D = 0, $$pre$phi503Z2D = 0, $$pre$phi505Z2D = 0, $$pre$phiZ2D = 0, $$pre486 = 0, $$pre487 = 0, $$pre488 = 0, $10 = 0, $100 = 0, $11 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $127 = 0, $129 = 0, $131 = 0, $132 = 0, $137 = 0, $139 = 0, $14 = 0, $145 = 0, $148 = 0, $15 = 0, $159 = 0, $16 = 0, $161 = 0, $168 = 0, $170 = 0, $176 = 0, $177 = 0, $18 = 0, $2 = 0, $20 = 0, $201 = 0, $204 = 0, $205 = 0, $206 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $217 = 0.0, $218 = 0.0, $22 = 0, $224 = 0.0, $229 = 0.0, $232 = 0.0, $236 = 0, $237 = 0, $240 = 0.0, $243 = 0, $245 = 0, $249 = 0, $252 = 0.0, $258 = 0.0, $26 = 0, $27 = 0, $276 = 0, $279 = 0.0, $28 = 0, $281 = 0, $284 = 0.0, $289 = 0.0, $29 = 0, $296 = 0, $299 = 0.0, $3 = 0, $30 = 0, $305 = 0.0, $31 = 0, $310 = 0, $314 = 0, $32 = 0, $326 = 0, $327 = 0, $33 = 0, $336 = 0, $338 = 0, $34 = 0, $341 = 0, $348 = 0, $35 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $36 = 0, $360 = 0, $365 = 0.0, $366 = 0.0, $37 = 0, $372 = 0.0, $377 = 0.0, $38 = 0, $386 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $40 = 0, $6 = 0, $7 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $85 = 0, $86 = 0, $88 = 0, $91 = 0, $94 = 0, $97 = 0, $99 = 0, $spec$select = 0, $storemerge = 0, $storemerge466 = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer = sp;
 $2 = sp + 52 | 0;
 $3 = sp + 40 | 0;
 L1 : do if (($0 | 0) != 0 & ($1 | 0) != 0) {
  $6 = $0 + 44 | 0;
  HEAP32[$6 >> 2] = 0;
  $7 = $0 + 7062388 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  L3 : do if (($8 | 0) == 4) {
   $10 = $0 + 7062396 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   do if (($11 | 0) > 0) HEAP32[$10 >> 2] = $11 + -1; else {
    $14 = $0 + 16 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $0 + 7062400 | 0;
    $18 = (HEAP32[$16 >> 2] | 0) + $15 | 0;
    $spec$select = ($18 | 0) < 255 ? $18 : 255;
    HEAP32[$2 >> 2] = $spec$select;
    $20 = $0 + 7062404 | 0;
    $22 = $15 - (HEAP32[$20 >> 2] | 0) | 0;
    $storemerge466 = ($22 | 0) > 0 ? $22 : 0;
    HEAP32[$2 + 4 >> 2] = $storemerge466;
    HEAP32[$2 + 8 >> 2] = $15;
    $26 = $1 + 12 | 0;
    $27 = $0 + 36 | 0;
    $28 = $0 + 40 | 0;
    $29 = $0 + 12 | 0;
    $30 = $0 + 20 | 0;
    $31 = $0 + 4834144 | 0;
    $32 = $0 + 15416 | 0;
    $33 = $0 + 15408 | 0;
    $34 = $0 + 4 | 0;
    $35 = $0 + 7062384 | 0;
    $36 = $0 + 24 | 0;
    $37 = $0 + 32 | 0;
    $38 = $0 + 7062416 | 0;
    $39 = $0 + 48 | 0;
    $40 = $0 + 7062424 | 0;
    $$0447 = 0;
    while (1) {
     if ($$0447 >>> 0 >= 3) break;
     if ((_arLabeling(HEAP32[$26 >> 2] | 0, HEAP32[$27 >> 2] | 0, HEAP32[$28 >> 2] | 0, HEAP32[$0 >> 2] | 0, HEAP32[$29 >> 2] | 0, HEAP32[$2 + ($$0447 << 2) >> 2] | 0, HEAP32[$30 >> 2] | 0, $31, 0) | 0) < 0) {
      label = 29;
      break;
     }
     if ((_arDetectMarker2(HEAP32[$27 >> 2] | 0, HEAP32[$28 >> 2] | 0, $31, HEAP32[$30 >> 2] | 0, 1e6, 70, 1.0, $32, $33) | 0) < 0) {
      label = 29;
      break;
     }
     if ((_arGetMarkerInfo(HEAP32[$1 >> 2] | 0, HEAP32[$27 >> 2] | 0, HEAP32[$28 >> 2] | 0, HEAP32[$34 >> 2] | 0, $32, HEAP32[$33 >> 2] | 0, HEAP32[$35 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$36 >> 2] | 0, (HEAP32[$37 >> 2] | 0) + 184 | 0, +HEAPF64[$38 >> 3], $39, $6, HEAP32[$40 >> 2] | 0) | 0) < 0) {
      label = 29;
      break;
     }
     HEAP32[$3 + ($$0447 << 2) >> 2] = HEAP32[$6 >> 2];
     $$0447 = $$0447 + 1 | 0;
    }
    if ((label | 0) == 29) {
     $$4 = -1;
     break L1;
    }
    if ((HEAP32[$0 >> 2] | 0) == 1) {
     $77 = HEAP32[$3 + 4 >> 2] | 0;
     $79 = HEAP32[$3 + 8 >> 2] | 0;
     $80 = HEAP32[$3 >> 2] | 0;
     HEAP32[$vararg_buffer >> 2] = $storemerge466;
     HEAP32[$vararg_buffer + 4 >> 2] = $77;
     HEAP32[$vararg_buffer + 8 >> 2] = $15;
     HEAP32[$vararg_buffer + 12 >> 2] = $79;
     HEAP32[$vararg_buffer + 16 >> 2] = $spec$select;
     HEAP32[$vararg_buffer + 20 >> 2] = $80;
     _arLog(0, 3, 3774, $vararg_buffer);
     $82 = $80;
     $83 = $79;
    } else {
     $82 = HEAP32[$3 >> 2] | 0;
     $83 = HEAP32[$3 + 8 >> 2] | 0;
    }
    $$pre486 = HEAP32[$3 + 4 >> 2] | 0;
    if (($82 | 0) > ($83 | 0) | ($$pre486 | 0) > ($83 | 0)) {
     $99 = ($82 | 0) < ($$pre486 | 0) ? $storemerge466 : $spec$select;
     HEAP32[$14 >> 2] = $99;
     $100 = $99 - $15 | 0;
     if (($100 | 0) > 0) {
      HEAP32[$16 >> 2] = $100;
      $storemerge = 1;
     } else {
      HEAP32[$16 >> 2] = 1;
      $storemerge = 0 - $100 | 0;
     }
     HEAP32[$20 >> 2] = $storemerge;
     if ((HEAP32[$0 >> 2] | 0) == 1) {
      HEAP32[$vararg_buffer6 >> 2] = $99;
      _arLog(0, 3, 3850, $vararg_buffer6);
      HEAP32[$10 >> 2] = HEAP32[$0 + 7062392 >> 2];
      break;
     } else {
      HEAP32[$10 >> 2] = HEAP32[$0 + 7062392 >> 2];
      break;
     }
    }
    $85 = HEAP32[$16 >> 2] | 0;
    $86 = HEAP32[$20 >> 2] | 0;
    do if (($85 | 0) < ($86 | 0)) {
     $88 = $85 + 1 | 0;
     HEAP32[$16 >> 2] = $88;
     $94 = $88;
    } else if (($85 | 0) > ($86 | 0)) {
     HEAP32[$20 >> 2] = $86 + 1;
     $94 = $85;
     break;
    } else {
     $91 = $85 + 1 | 0;
     HEAP32[$16 >> 2] = $91;
     HEAP32[$20 >> 2] = $86 + 1;
     $94 = $91;
     break;
    } while (0);
    if (($94 + $15 | 0) > 254) {
     HEAP32[$16 >> 2] = 1;
     $97 = 1;
    } else $97 = $94;
    if (($15 | 0) <= ($97 | 0)) HEAP32[$20 >> 2] = 1;
    HEAP32[$10 >> 2] = HEAP32[$0 + 7062392 >> 2];
    break L3;
   } while (0);
   $111 = HEAP32[$7 >> 2] | 0;
   label = 33;
  } else {
   $111 = $8;
   label = 33;
  } while (0);
  if ((label | 0) == 33) {
   L47 : do switch ($111 | 0) {
   case 3:
    {
     $112 = $0 + 7062408 | 0;
     $114 = $1 + 12 | 0;
     $116 = _arImageProcLumaHistAndBoxFilterWithBias(HEAP32[$112 >> 2] | 0, HEAP32[$114 >> 2] | 0, 9, -7) | 0;
     if (($116 | 0) < 0) {
      $$4 = $116;
      break L1;
     }
     $119 = HEAP32[$112 >> 2] | 0;
     $127 = $0 + 4834144 | 0;
     $129 = _arLabeling(HEAP32[$114 >> 2] | 0, HEAP32[$119 + 4 >> 2] | 0, HEAP32[$119 + 8 >> 2] | 0, HEAP32[$0 >> 2] | 0, HEAP32[$0 + 12 >> 2] | 0, 0, 0, $127, HEAP32[$119 >> 2] | 0) | 0;
     if (($129 | 0) < 0) {
      $$4 = $129;
      break L1;
     }
     $$pre$phi501Z2D = $0 + 36 | 0;
     $$pre$phi503Z2D = $0 + 40 | 0;
     $$pre$phi505Z2D = $0 + 20 | 0;
     $$pre$phiZ2D = $127;
     break;
    }
   case 2:
   case 1:
    {
     $131 = $0 + 7062396 | 0;
     $132 = HEAP32[$131 >> 2] | 0;
     if (($132 | 0) > 0) {
      HEAP32[$131 >> 2] = $132 + -1;
      label = 48;
      break L47;
     }
     $137 = HEAP32[$0 + 7062408 >> 2] | 0;
     $139 = HEAP32[$1 + 12 >> 2] | 0;
     if (($111 | 0) == 1) $$0 = _arImageProcLumaHistAndCDFAndMedian($137, $139, $2) | 0; else $$0 = _arImageProcLumaHistAndOtsu($137, $139, $2) | 0;
     if (($$0 | 0) < 0) {
      $$4 = $$0;
      break L1;
     }
     $145 = $0 + 16 | 0;
     if ((HEAP32[$0 >> 2] | 0) == 1) {
      $148 = HEAPU8[$2 >> 0] | 0;
      if ((HEAP32[$145 >> 2] | 0) != ($148 | 0)) {
       HEAP32[$vararg_buffer9 >> 2] = (HEAP32[$7 >> 2] | 0) == 1 ? 3902 : 3909;
       HEAP32[$vararg_buffer9 + 4 >> 2] = $148;
       _arLog(0, 3, 3914, $vararg_buffer9);
      }
     }
     HEAP32[$145 >> 2] = HEAPU8[$2 >> 0];
     HEAP32[$131 >> 2] = HEAP32[$0 + 7062392 >> 2];
     label = 48;
     break;
    }
   default:
    label = 48;
   } while (0);
   if ((label | 0) == 48) {
    $159 = $0 + 36 | 0;
    $161 = $0 + 40 | 0;
    $168 = $0 + 20 | 0;
    $170 = $0 + 4834144 | 0;
    if ((_arLabeling(HEAP32[$1 + 12 >> 2] | 0, HEAP32[$159 >> 2] | 0, HEAP32[$161 >> 2] | 0, HEAP32[$0 >> 2] | 0, HEAP32[$0 + 12 >> 2] | 0, HEAP32[$0 + 16 >> 2] | 0, HEAP32[$168 >> 2] | 0, $170, 0) | 0) < 0) {
     $$4 = -1;
     break;
    } else {
     $$pre$phi501Z2D = $159;
     $$pre$phi503Z2D = $161;
     $$pre$phi505Z2D = $168;
     $$pre$phiZ2D = $170;
    }
   }
   $176 = $0 + 15416 | 0;
   $177 = $0 + 15408 | 0;
   if ((_arDetectMarker2(HEAP32[$$pre$phi501Z2D >> 2] | 0, HEAP32[$$pre$phi503Z2D >> 2] | 0, $$pre$phiZ2D, HEAP32[$$pre$phi505Z2D >> 2] | 0, 1e6, 70, 1.0, $176, $177) | 0) < 0) {
    $$4 = -1;
    break;
   }
   if ((_arGetMarkerInfo(HEAP32[$1 >> 2] | 0, HEAP32[$$pre$phi501Z2D >> 2] | 0, HEAP32[$$pre$phi503Z2D >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, $176, HEAP32[$177 >> 2] | 0, HEAP32[$0 + 7062384 >> 2] | 0, HEAP32[$$pre$phi505Z2D >> 2] | 0, HEAP32[$0 + 24 >> 2] | 0, (HEAP32[$0 + 32 >> 2] | 0) + 184 | 0, +HEAPF64[$0 + 7062416 >> 3], $0 + 48 | 0, $6, HEAP32[$0 + 7062424 >> 2] | 0) | 0) < 0) {
    $$4 = -1;
    break;
   }
  }
  $201 = $0 + 28 | 0;
  if ((HEAP32[$201 >> 2] | 0) == 1) {
   _confidenceCutoff($0);
   $$4 = 0;
   break;
  }
  $204 = $0 + 4818296 | 0;
  $205 = HEAP32[$204 >> 2] | 0;
  $206 = $0 + 24 | 0;
  $$1448 = 0;
  while (1) {
   if (($$1448 | 0) >= ($205 | 0)) break;
   $208 = HEAP32[$6 >> 2] | 0;
   $209 = $0 + 4818304 + ($$1448 * 264 | 0) | 0;
   $210 = $0 + 4818304 + ($$1448 * 264 | 0) + 56 | 0;
   $211 = $0 + 4818304 + ($$1448 * 264 | 0) + 64 | 0;
   $$0442 = 0;
   $$0456 = -1;
   $$0464 = .5;
   while (1) {
    if (($$0442 | 0) >= ($208 | 0)) break;
    $217 = +(HEAP32[$0 + 48 + ($$0442 << 8) >> 2] | 0);
    $218 = +(HEAP32[$209 >> 2] | 0) / $217;
    if ($218 < .7 | $218 > 1.43) {
     $$1457 = $$0456;
     $$1465 = $$0464;
    } else {
     $224 = +HEAPF64[$0 + 48 + ($$0442 << 8) + 56 >> 3] - +HEAPF64[$210 >> 3];
     $229 = +HEAPF64[$0 + 48 + ($$0442 << 8) + 64 >> 3] - +HEAPF64[$211 >> 3];
     $232 = ($224 * $224 + $229 * $229) / $217;
     if ($232 < $$0464) {
      $$1457 = $$0442;
      $$1465 = $232;
     } else {
      $$1457 = $$0456;
      $$1465 = $$0464;
     }
    }
    $$0442 = $$0442 + 1 | 0;
    $$0456 = $$1457;
    $$0464 = $$1465;
   }
   L85 : do if (($$0456 | 0) > -1) {
    $236 = HEAP32[$206 >> 2] | 0;
    switch ($236 | 0) {
    case 2:
    case 1:
    case 0:
     break;
    case 4:
    case 3:
     {
      $276 = $0 + 48 + ($$0456 << 8) + 40 | 0;
      $279 = +HEAPF64[$0 + 4818304 + ($$1448 * 264 | 0) + 40 >> 3];
      if (+HEAPF64[$276 >> 3] < $279) {
       $$pre$phi495Z2D = $0 + 48 + ($$0456 << 8) + 48 | 0;
       $289 = +HEAPF64[$0 + 4818304 + ($$1448 * 264 | 0) + 48 >> 3];
      } else {
       $281 = $0 + 48 + ($$0456 << 8) + 48 | 0;
       $284 = +HEAPF64[$0 + 4818304 + ($$1448 * 264 | 0) + 48 >> 3];
       if (+HEAPF64[$281 >> 3] < $284) {
        $$pre$phi495Z2D = $281;
        $289 = $284;
       } else break L85;
      }
      HEAPF64[$276 >> 3] = $279;
      HEAP32[$0 + 48 + ($$0456 << 8) + 8 >> 2] = HEAP32[$0 + 4818304 + ($$1448 * 264 | 0) + 8 >> 2];
      HEAPF64[$$pre$phi495Z2D >> 3] = $289;
      HEAP32[$0 + 48 + ($$0456 << 8) + 12 >> 2] = HEAP32[$0 + 4818304 + ($$1448 * 264 | 0) + 12 >> 2];
      $$2444 = 0;
      $$2454 = -1;
      $$2460 = 1.0e8;
      while (1) {
       if (($$2444 | 0) == 4) break;
       $$1441 = 0;
       $$1463 = 0.0;
       while (1) {
        if (($$1441 | 0) == 4) break;
        $296 = $$1441 + $$2444 & 3;
        $299 = +HEAPF64[$0 + 4818304 + ($$1448 * 264 | 0) + 168 + ($$1441 << 4) >> 3] - +HEAPF64[$0 + 48 + ($$0456 << 8) + 168 + ($296 << 4) >> 3];
        $305 = +HEAPF64[$0 + 4818304 + ($$1448 * 264 | 0) + 168 + ($$1441 << 4) + 8 >> 3] - +HEAPF64[$0 + 48 + ($$0456 << 8) + 168 + ($296 << 4) + 8 >> 3];
        $$1441 = $$1441 + 1 | 0;
        $$1463 = $$1463 + ($299 * $299 + $305 * $305);
       }
       $310 = $$1463 < $$2460;
       $$3455 = $310 ? $$2444 : $$2454;
       $$2444 = $$2444 + 1 | 0;
       $$2454 = $$3455;
       $$2460 = $310 ? $$1463 : $$2460;
      }
      $314 = 4 - $$2454 | 0;
      HEAP32[$0 + 48 + ($$0456 << 8) + 20 >> 2] = ($314 + (HEAP32[$0 + 4818304 + ($$1448 * 264 | 0) + 20 >> 2] | 0) | 0) % 4 | 0;
      HEAP32[$0 + 48 + ($$0456 << 8) + 24 >> 2] = ($314 + (HEAP32[$0 + 4818304 + ($$1448 * 264 | 0) + 24 >> 2] | 0) | 0) % 4 | 0;
      break L85;
      break;
     }
    default:
     {
      $$4 = -1;
      break L1;
     }
    }
    $237 = $0 + 48 + ($$0456 << 8) + 32 | 0;
    $240 = +HEAPF64[$0 + 4818304 + ($$1448 * 264 | 0) + 32 >> 3];
    if (+HEAPF64[$237 >> 3] < $240) {
     HEAPF64[$237 >> 3] = $240;
     $243 = HEAP32[$0 + 4818304 + ($$1448 * 264 | 0) + 4 >> 2] | 0;
     HEAP32[$0 + 48 + ($$0456 << 8) + 4 >> 2] = $243;
     $245 = $0 + 4818304 + ($$1448 * 264 | 0) + 16 | 0;
     $$0452 = -1;
     $$0458 = 1.0e8;
     $$1443 = 0;
     while (1) {
      if (($$1443 | 0) == 4) break;
      $$0440 = 0;
      $$0462 = 0.0;
      while (1) {
       if (($$0440 | 0) == 4) break;
       $249 = $$0440 + $$1443 & 3;
       $252 = +HEAPF64[$0 + 4818304 + ($$1448 * 264 | 0) + 168 + ($$0440 << 4) >> 3] - +HEAPF64[$0 + 48 + ($$0456 << 8) + 168 + ($249 << 4) >> 3];
       $258 = +HEAPF64[$0 + 4818304 + ($$1448 * 264 | 0) + 168 + ($$0440 << 4) + 8 >> 3] - +HEAPF64[$0 + 48 + ($$0456 << 8) + 168 + ($249 << 4) + 8 >> 3];
       $$0440 = $$0440 + 1 | 0;
       $$0462 = $$0462 + ($252 * $252 + $258 * $258);
      }
      if ($$0462 < $$0458) {
       $$1453 = (4 - $$1443 + (HEAP32[$245 >> 2] | 0) | 0) % 4 | 0;
       $$1459 = $$0462;
      } else {
       $$1453 = $$0452;
       $$1459 = $$0458;
      }
      $$0452 = $$1453;
      $$0458 = $$1459;
      $$1443 = $$1443 + 1 | 0;
     }
     HEAP32[$0 + 48 + ($$0456 << 8) + 16 >> 2] = $$0452;
     if ($236 >>> 0 < 2) {
      HEAP32[$0 + 48 + ($$0456 << 8) + 8 >> 2] = $243;
      HEAPF64[$0 + 48 + ($$0456 << 8) + 40 >> 3] = $240;
      HEAP32[$0 + 48 + ($$0456 << 8) + 20 >> 2] = $$0452;
      break;
     } else {
      HEAP32[$0 + 48 + ($$0456 << 8) + 12 >> 2] = $243;
      HEAPF64[$0 + 48 + ($$0456 << 8) + 48 >> 3] = $240;
      HEAP32[$0 + 48 + ($$0456 << 8) + 24 >> 2] = $$0452;
      break;
     }
    }
   } while (0);
   $$1448 = $$1448 + 1 | 0;
  }
  _confidenceCutoff($0);
  $$2449 = 0;
  $$3445 = 0;
  while (1) {
   if (($$2449 | 0) >= (HEAP32[$204 >> 2] | 0)) break;
   $326 = $0 + 4818304 + ($$2449 * 264 | 0) + 256 | 0;
   $327 = HEAP32[$326 >> 2] | 0;
   HEAP32[$326 >> 2] = $327 + 1;
   if (($327 | 0) < 3) {
    if (($$2449 | 0) != ($$3445 | 0)) _memcpy($0 + 4818304 + ($$3445 * 264 | 0) | 0, $0 + 4818304 + ($$2449 * 264 | 0) | 0, 264) | 0;
    $$4446 = $$3445 + 1 | 0;
   } else $$4446 = $$3445;
   $$2449 = $$2449 + 1 | 0;
   $$3445 = $$4446;
  }
  HEAP32[$204 >> 2] = $$3445;
  $$pre487 = HEAP32[$6 >> 2] | 0;
  $$3450 = 0;
  $341 = $$3445;
  while (1) {
   if (($$3450 | 0) >= ($$pre487 | 0)) break;
   $336 = $0 + 48 + ($$3450 << 8) | 0;
   $338 = HEAP32[$0 + 48 + ($$3450 << 8) + 4 >> 2] | 0;
   if (($338 | 0) < 0) $388 = $341; else {
    $$5 = 0;
    while (1) {
     if (($$5 | 0) >= ($341 | 0)) break;
     if ((HEAP32[$0 + 4818304 + ($$5 * 264 | 0) + 4 >> 2] | 0) == ($338 | 0)) break;
     $$5 = $$5 + 1 | 0;
    }
    if (($$5 | 0) == ($341 | 0)) {
     if (($341 | 0) == 60) break;
     $348 = $341 + 1 | 0;
     HEAP32[$204 >> 2] = $348;
     $389 = $348;
    } else $389 = $341;
    _memcpy($0 + 4818304 + ($$5 * 264 | 0) | 0, $336 | 0, 256) | 0;
    HEAP32[$0 + 4818304 + ($$5 * 264 | 0) + 256 >> 2] = 1;
    $388 = $389;
   }
   $$3450 = $$3450 + 1 | 0;
   $341 = $388;
  }
  if ((HEAP32[$201 >> 2] | 0) == 2) $$4 = 0; else {
   $$4451 = 0;
   $355 = $341;
   $360 = $$pre487;
   while (1) {
    if (($$4451 | 0) >= ($355 | 0)) {
     $$4 = 0;
     break L1;
    }
    $356 = $0 + 4818304 + ($$4451 * 264 | 0) | 0;
    $357 = $0 + 4818304 + ($$4451 * 264 | 0) + 56 | 0;
    $358 = $0 + 4818304 + ($$4451 * 264 | 0) + 64 | 0;
    $$6 = 0;
    while (1) {
     if (($$6 | 0) >= ($360 | 0)) break;
     $365 = +(HEAP32[$0 + 48 + ($$6 << 8) >> 2] | 0);
     $366 = +(HEAP32[$356 >> 2] | 0) / $365;
     if (!($366 < .7 | $366 > 1.43)) {
      $372 = +HEAPF64[$0 + 48 + ($$6 << 8) + 56 >> 3] - +HEAPF64[$357 >> 3];
      $377 = +HEAPF64[$0 + 48 + ($$6 << 8) + 64 >> 3] - +HEAPF64[$358 >> 3];
      if (($372 * $372 + $377 * $377) / $365 < .5) break;
     }
     $$6 = $$6 + 1 | 0;
    }
    if (($$6 | 0) == ($360 | 0)) {
     _memcpy($0 + 48 + ($360 << 8) | 0, $0 + 4818304 + ($$4451 * 264 | 0) | 0, 256) | 0;
     $386 = $360 + 1 | 0;
     HEAP32[$6 >> 2] = $386;
     $$pre488 = HEAP32[$204 >> 2] | 0;
     $390 = $386;
    } else {
     $$pre488 = $355;
     $390 = $360;
    }
    $$4451 = $$4451 + 1 | 0;
    $355 = $$pre488;
    $360 = $390;
   }
  }
 } else $$4 = -1; while (0);
 STACKTOP = sp;
 return $$4 | 0;
}

function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0228 = 0, $$0229334 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240313 = 0, $$0240313371 = 0, $$0240333 = 0, $$0243 = 0, $$0243$ph = 0, $$0243$ph$be = 0, $$0247 = 0, $$0247$ph = 0, $$0249$lcssa = 0, $$0249321 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262328 = 0, $$0269$ph = 0, $$1 = 0, $$1230340 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241339 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242320 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3317 = 0, $$4258370 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa308 = 0, $$pre$phiZ2D = 0, $$pre360 = 0, $$pre363 = 0, $$sink = 0, $10 = 0, $102 = 0, $103 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $114 = 0, $12 = 0, $122 = 0, $126 = 0, $13 = 0, $137 = 0, $14 = 0, $141 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $154 = 0, $163 = 0, $164 = 0, $169 = 0, $172 = 0, $177 = 0, $178 = 0, $18 = 0, $183 = 0, $185 = 0, $192 = 0, $193 = 0, $20 = 0, $204 = 0, $21 = 0, $216 = 0, $223 = 0, $225 = 0, $228 = 0, $23 = 0, $230 = 0, $238 = 0, $24 = 0, $240 = 0, $243 = 0, $244 = 0, $248 = 0, $25 = 0, $252 = 0, $254 = 0, $257 = 0, $259 = 0, $260 = 0, $261 = 0, $27 = 0, $271 = 0, $272 = 0, $277 = 0, $279 = 0, $280 = 0, $286 = 0, $295 = 0, $298 = 0, $30 = 0, $301 = 0, $302 = 0, $315 = 0, $317 = 0, $318 = 0, $322 = 0, $326 = 0, $328 = 0, $339 = 0, $341 = 0, $348 = 0, $351 = 0, $358 = 0, $359 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $76 = 0, $8 = 0, $80 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $spec$select = 0, $spec$select284 = 0, $storemerge273$lcssa = 0, $storemerge273327 = 0, $storemerge274 = 0, label = 0, sp = 0, $154$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $5 = sp + 16 | 0;
 $6 = sp;
 $7 = sp + 24 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 20 | 0;
 HEAP32[$5 >> 2] = $1;
 $10 = ($0 | 0) != 0;
 $11 = $7 + 40 | 0;
 $12 = $11;
 $13 = $7 + 39 | 0;
 $14 = $8 + 4 | 0;
 $$0243$ph = 0;
 $$0247$ph = 0;
 $$0269$ph = 0;
 L1 : while (1) {
  $$0243 = $$0243$ph;
  $$0247 = $$0247$ph;
  while (1) {
   do if (($$0247 | 0) > -1) if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
    $18 = ___errno_location() | 0;
    HEAP32[$18 >> 2] = 75;
    $$1248 = -1;
    break;
   } else {
    $$1248 = $$0243 + $$0247 | 0;
    break;
   } else $$1248 = $$0247; while (0);
   $20 = HEAP32[$5 >> 2] | 0;
   $21 = HEAP8[$20 >> 0] | 0;
   if (!($21 << 24 >> 24)) {
    label = 94;
    break L1;
   }
   $23 = $21;
   $25 = $20;
   L12 : while (1) {
    switch ($23 << 24 >> 24) {
    case 37:
     {
      label = 10;
      break L12;
      break;
     }
    case 0:
     {
      $$0249$lcssa = $25;
      break L12;
      break;
     }
    default:
     {}
    }
    $24 = $25 + 1 | 0;
    HEAP32[$5 >> 2] = $24;
    $23 = HEAP8[$24 >> 0] | 0;
    $25 = $24;
   }
   L15 : do if ((label | 0) == 10) {
    label = 0;
    $$0249321 = $25;
    $27 = $25;
    while (1) {
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249321;
      break L15;
     }
     $30 = $$0249321 + 1 | 0;
     $27 = $27 + 2 | 0;
     HEAP32[$5 >> 2] = $27;
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30;
      break;
     } else $$0249321 = $30;
    }
   } while (0);
   $$0243 = $$0249$lcssa - $20 | 0;
   if ($10) _out_670($0, $20, $$0243);
   if (!$$0243) break; else $$0247 = $$1248;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0;
  $$pre360 = HEAP32[$5 >> 2] | 0;
  if ($43) {
   $$0253 = -1;
   $$1270 = $$0269$ph;
   $$sink = 1;
  } else if ((HEAP8[$$pre360 + 2 >> 0] | 0) == 36) {
   $$0253 = (HEAP8[$$pre360 + 1 >> 0] | 0) + -48 | 0;
   $$1270 = 1;
   $$sink = 3;
  } else {
   $$0253 = -1;
   $$1270 = $$0269$ph;
   $$sink = 1;
  }
  $51 = $$pre360 + $$sink | 0;
  HEAP32[$5 >> 2] = $51;
  $52 = HEAP8[$51 >> 0] | 0;
  $54 = ($52 << 24 >> 24) + -32 | 0;
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0;
   $$lcssa308 = $52;
   $storemerge273$lcssa = $51;
  } else {
   $$0262328 = 0;
   $60 = $54;
   $storemerge273327 = $51;
   while (1) {
    $61 = 1 << $60 | $$0262328;
    $62 = $storemerge273327 + 1 | 0;
    HEAP32[$5 >> 2] = $62;
    $63 = HEAP8[$62 >> 0] | 0;
    $60 = ($63 << 24 >> 24) + -32 | 0;
    if ($60 >>> 0 > 31 | (1 << $60 & 75913 | 0) == 0) {
     $$0262$lcssa = $61;
     $$lcssa308 = $63;
     $storemerge273$lcssa = $62;
     break;
    } else {
     $$0262328 = $61;
     $storemerge273327 = $62;
    }
   }
  }
  if ($$lcssa308 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$storemerge273$lcssa + 1 >> 0] | 0) | 0)) label = 27; else {
    $76 = HEAP32[$5 >> 2] | 0;
    if ((HEAP8[$76 + 2 >> 0] | 0) == 36) {
     $80 = $76 + 1 | 0;
     HEAP32[$4 + ((HEAP8[$80 >> 0] | 0) + -48 << 2) >> 2] = 10;
     $$0259 = HEAP32[$3 + ((HEAP8[$80 >> 0] | 0) + -48 << 3) >> 2] | 0;
     $$2271 = 1;
     $storemerge274 = $76 + 3 | 0;
    } else label = 27;
   }
   if ((label | 0) == 27) {
    label = 0;
    if ($$1270 | 0) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $102 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $103 = HEAP32[$102 >> 2] | 0;
     HEAP32[$2 >> 2] = $102 + 4;
     $358 = $103;
    } else $358 = 0;
    $$0259 = $358;
    $$2271 = 0;
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0;
   }
   HEAP32[$5 >> 2] = $storemerge274;
   $106 = ($$0259 | 0) < 0;
   $$1260 = $106 ? 0 - $$0259 | 0 : $$0259;
   $$1263 = $106 ? $$0262$lcssa | 8192 : $$0262$lcssa;
   $$3272 = $$2271;
   $112 = $storemerge274;
  } else {
   $109 = _getint_671($5) | 0;
   if (($109 | 0) < 0) {
    $$0 = -1;
    break;
   }
   $$1260 = $109;
   $$1263 = $$0262$lcssa;
   $$3272 = $$1270;
   $112 = HEAP32[$5 >> 2] | 0;
  }
  do if ((HEAP8[$112 >> 0] | 0) == 46) {
   $114 = $112 + 1 | 0;
   if ((HEAP8[$114 >> 0] | 0) != 42) {
    HEAP32[$5 >> 2] = $114;
    $152 = _getint_671($5) | 0;
    $$0254 = $152;
    $$pre363 = HEAP32[$5 >> 2] | 0;
    break;
   }
   if (_isdigit(HEAP8[$112 + 2 >> 0] | 0) | 0) {
    $122 = HEAP32[$5 >> 2] | 0;
    if ((HEAP8[$122 + 3 >> 0] | 0) == 36) {
     $126 = $122 + 2 | 0;
     HEAP32[$4 + ((HEAP8[$126 >> 0] | 0) + -48 << 2) >> 2] = 10;
     $137 = HEAP32[$3 + ((HEAP8[$126 >> 0] | 0) + -48 << 3) >> 2] | 0;
     $141 = $122 + 4 | 0;
     HEAP32[$5 >> 2] = $141;
     $$0254 = $137;
     $$pre363 = $141;
     break;
    }
   }
   if ($$3272 | 0) {
    $$0 = -1;
    break L1;
   }
   if ($10) {
    $148 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $149 = HEAP32[$148 >> 2] | 0;
    HEAP32[$2 >> 2] = $148 + 4;
    $359 = $149;
   } else $359 = 0;
   $151 = (HEAP32[$5 >> 2] | 0) + 2 | 0;
   HEAP32[$5 >> 2] = $151;
   $$0254 = $359;
   $$pre363 = $151;
  } else {
   $$0254 = -1;
   $$pre363 = $112;
  } while (0);
  $$0252 = 0;
  $154 = $$pre363;
  while (1) {
   if (((HEAP8[$154 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1;
    break L1;
   }
   $154$looptemp = $154;
   $154 = $154 + 1 | 0;
   HEAP32[$5 >> 2] = $154;
   $163 = HEAP8[(HEAP8[$154$looptemp >> 0] | 0) + -65 + (12038 + ($$0252 * 58 | 0)) >> 0] | 0;
   $164 = $163 & 255;
   if (($164 + -1 | 0) >>> 0 >= 8) break; else $$0252 = $164;
  }
  if (!($163 << 24 >> 24)) {
   $$0 = -1;
   break;
  }
  $169 = ($$0253 | 0) > -1;
  do if ($163 << 24 >> 24 == 19) if ($169) {
   $$0 = -1;
   break L1;
  } else label = 54; else {
   if ($169) {
    HEAP32[$4 + ($$0253 << 2) >> 2] = $164;
    $172 = $3 + ($$0253 << 3) | 0;
    $177 = HEAP32[$172 + 4 >> 2] | 0;
    $178 = $6;
    HEAP32[$178 >> 2] = HEAP32[$172 >> 2];
    HEAP32[$178 + 4 >> 2] = $177;
    label = 54;
    break;
   }
   if (!$10) {
    $$0 = 0;
    break L1;
   }
   _pop_arg_673($6, $164, $2);
   $183 = HEAP32[$5 >> 2] | 0;
   label = 55;
  } while (0);
  if ((label | 0) == 54) {
   label = 0;
   if ($10) {
    $183 = $154;
    label = 55;
   } else $$0243$ph$be = 0;
  }
  L77 : do if ((label | 0) == 55) {
   label = 0;
   $185 = HEAP8[$183 + -1 >> 0] | 0;
   $$0235 = ($$0252 | 0) != 0 & ($185 & 15 | 0) == 3 ? $185 & -33 : $185;
   $192 = $$1263 & -65537;
   $spec$select = ($$1263 & 8192 | 0) == 0 ? $$1263 : $192;
   L79 : do switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     case 2:
      {
       $204 = HEAP32[$6 >> 2] | 0;
       HEAP32[$204 >> 2] = $$1248;
       HEAP32[$204 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     case 7:
      {
       $216 = HEAP32[$6 >> 2] | 0;
       HEAP32[$216 >> 2] = $$1248;
       HEAP32[$216 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     default:
      {
       $$0243$ph$be = 0;
       break L77;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120;
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8;
     $$3265 = $spec$select | 8;
     label = 67;
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235;
     $$1255 = $$0254;
     $$3265 = $spec$select;
     label = 67;
     break;
    }
   case 111:
    {
     $238 = $6;
     $240 = HEAP32[$238 >> 2] | 0;
     $243 = HEAP32[$238 + 4 >> 2] | 0;
     $244 = _fmt_o($240, $243, $11) | 0;
     $248 = $12 - $244 | 0;
     $$0228 = $244;
     $$1233 = 0;
     $$1238 = 12502;
     $$2256 = ($spec$select & 8 | 0) == 0 | ($$0254 | 0) > ($248 | 0) ? $$0254 : $248 + 1 | 0;
     $$4266 = $spec$select;
     $277 = $240;
     $279 = $243;
     label = 73;
     break;
    }
   case 105:
   case 100:
    {
     $252 = $6;
     $254 = HEAP32[$252 >> 2] | 0;
     $257 = HEAP32[$252 + 4 >> 2] | 0;
     if (($257 | 0) < 0) {
      $259 = _i64Subtract(0, 0, $254 | 0, $257 | 0) | 0;
      $260 = tempRet0;
      $261 = $6;
      HEAP32[$261 >> 2] = $259;
      HEAP32[$261 + 4 >> 2] = $260;
      $$0232 = 1;
      $$0237 = 12502;
      $271 = $259;
      $272 = $260;
      label = 72;
      break L79;
     } else {
      $$0232 = ($spec$select & 2049 | 0) != 0 & 1;
      $$0237 = ($spec$select & 2048 | 0) == 0 ? (($spec$select & 1 | 0) == 0 ? 12502 : 12504) : 12503;
      $271 = $254;
      $272 = $257;
      label = 72;
      break L79;
     }
     break;
    }
   case 117:
    {
     $193 = $6;
     $$0232 = 0;
     $$0237 = 12502;
     $271 = HEAP32[$193 >> 2] | 0;
     $272 = HEAP32[$193 + 4 >> 2] | 0;
     label = 72;
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2];
     $$2 = $13;
     $$2234 = 0;
     $$2239 = 12502;
     $$5 = 1;
     $$6268 = $192;
     $$pre$phiZ2D = $12;
     break;
    }
   case 109:
    {
     $295 = ___errno_location() | 0;
     $$1 = _strerror(HEAP32[$295 >> 2] | 0) | 0;
     label = 77;
     break;
    }
   case 115:
    {
     $298 = HEAP32[$6 >> 2] | 0;
     $$1 = ($298 | 0) == 0 ? 12512 : $298;
     label = 77;
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$14 >> 2] = 0;
     HEAP32[$6 >> 2] = $8;
     $$4258370 = -1;
     label = 81;
     break;
    }
   case 83:
    {
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $spec$select);
      $$0240313371 = 0;
      label = 91;
     } else {
      $$4258370 = $$0254;
      label = 81;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243$ph$be = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $spec$select, $$0235) | 0;
     break L77;
     break;
    }
   default:
    {
     $$2 = $20;
     $$2234 = 0;
     $$2239 = 12502;
     $$5 = $$0254;
     $$6268 = $spec$select;
     $$pre$phiZ2D = $12;
    }
   } while (0);
   L103 : do if ((label | 0) == 67) {
    label = 0;
    $223 = $6;
    $225 = HEAP32[$223 >> 2] | 0;
    $228 = HEAP32[$223 + 4 >> 2] | 0;
    $230 = _fmt_x($225, $228, $11, $$1236 & 32) | 0;
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($225 | 0) == 0 & ($228 | 0) == 0;
    $$0228 = $230;
    $$1233 = $or$cond278 ? 0 : 2;
    $$1238 = $or$cond278 ? 12502 : 12502 + ($$1236 >>> 4) | 0;
    $$2256 = $$1255;
    $$4266 = $$3265;
    $277 = $225;
    $279 = $228;
    label = 73;
   } else if ((label | 0) == 72) {
    label = 0;
    $$0228 = _fmt_u($271, $272, $11) | 0;
    $$1233 = $$0232;
    $$1238 = $$0237;
    $$2256 = $$0254;
    $$4266 = $spec$select;
    $277 = $271;
    $279 = $272;
    label = 73;
   } else if ((label | 0) == 77) {
    label = 0;
    $301 = _memchr($$1, 0, $$0254) | 0;
    $302 = ($301 | 0) == 0;
    $$2 = $$1;
    $$2234 = 0;
    $$2239 = 12502;
    $$5 = $302 ? $$0254 : $301 - $$1 | 0;
    $$6268 = $192;
    $$pre$phiZ2D = $302 ? $$1 + $$0254 | 0 : $301;
   } else if ((label | 0) == 81) {
    label = 0;
    $$0229334 = HEAP32[$6 >> 2] | 0;
    $$0240333 = 0;
    while (1) {
     $315 = HEAP32[$$0229334 >> 2] | 0;
     if (!$315) {
      $$0240313 = $$0240333;
      break;
     }
     $317 = _wctomb($9, $315) | 0;
     $318 = ($317 | 0) < 0;
     if ($318 | $317 >>> 0 > ($$4258370 - $$0240333 | 0) >>> 0) {
      label = 85;
      break;
     }
     $322 = $317 + $$0240333 | 0;
     if ($$4258370 >>> 0 > $322 >>> 0) {
      $$0229334 = $$0229334 + 4 | 0;
      $$0240333 = $322;
     } else {
      $$0240313 = $322;
      break;
     }
    }
    if ((label | 0) == 85) {
     label = 0;
     if ($318) {
      $$0 = -1;
      break L1;
     } else $$0240313 = $$0240333;
    }
    _pad_676($0, 32, $$1260, $$0240313, $spec$select);
    if (!$$0240313) {
     $$0240313371 = 0;
     label = 91;
    } else {
     $$1230340 = HEAP32[$6 >> 2] | 0;
     $$1241339 = 0;
     while (1) {
      $326 = HEAP32[$$1230340 >> 2] | 0;
      if (!$326) {
       $$0240313371 = $$0240313;
       label = 91;
       break L103;
      }
      $328 = _wctomb($9, $326) | 0;
      $$1241339 = $328 + $$1241339 | 0;
      if (($$1241339 | 0) > ($$0240313 | 0)) {
       $$0240313371 = $$0240313;
       label = 91;
       break L103;
      }
      _out_670($0, $9, $328);
      if ($$1241339 >>> 0 >= $$0240313 >>> 0) {
       $$0240313371 = $$0240313;
       label = 91;
       break;
      } else $$1230340 = $$1230340 + 4 | 0;
     }
    }
   } while (0);
   if ((label | 0) == 73) {
    label = 0;
    $280 = ($277 | 0) != 0 | ($279 | 0) != 0;
    $or$cond = ($$2256 | 0) != 0 | $280;
    $286 = $12 - $$0228 + (($280 ^ 1) & 1) | 0;
    $$2 = $or$cond ? $$0228 : $11;
    $$2234 = $$1233;
    $$2239 = $$1238;
    $$5 = $or$cond ? (($$2256 | 0) > ($286 | 0) ? $$2256 : $286) : 0;
    $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266;
    $$pre$phiZ2D = $12;
   } else if ((label | 0) == 91) {
    label = 0;
    _pad_676($0, 32, $$1260, $$0240313371, $spec$select ^ 8192);
    $$0243$ph$be = ($$1260 | 0) > ($$0240313371 | 0) ? $$1260 : $$0240313371;
    break;
   }
   $339 = $$pre$phiZ2D - $$2 | 0;
   $spec$select284 = ($$5 | 0) < ($339 | 0) ? $339 : $$5;
   $341 = $spec$select284 + $$2234 | 0;
   $$2261 = ($$1260 | 0) < ($341 | 0) ? $341 : $$1260;
   _pad_676($0, 32, $$2261, $341, $$6268);
   _out_670($0, $$2239, $$2234);
   _pad_676($0, 48, $$2261, $341, $$6268 ^ 65536);
   _pad_676($0, 48, $spec$select284, $339, 0);
   _out_670($0, $$2, $339);
   _pad_676($0, 32, $$2261, $341, $$6268 ^ 8192);
   $$0243$ph$be = $$2261;
  } while (0);
  $$0243$ph = $$0243$ph$be;
  $$0247$ph = $$1248;
  $$0269$ph = $$3272;
 }
 L125 : do if ((label | 0) == 94) if (!$0) if (!$$0269$ph) $$0 = 0; else {
  $$2242320 = 1;
  while (1) {
   $348 = HEAP32[$4 + ($$2242320 << 2) >> 2] | 0;
   if (!$348) break;
   _pop_arg_673($3 + ($$2242320 << 3) | 0, $348, $2);
   $351 = $$2242320 + 1 | 0;
   if ($351 >>> 0 < 10) $$2242320 = $351; else {
    $$0 = 1;
    break L125;
   }
  }
  $$3317 = $$2242320;
  while (1) {
   if (HEAP32[$4 + ($$3317 << 2) >> 2] | 0) {
    $$0 = -1;
    break L125;
   }
   $$3317 = $$3317 + 1 | 0;
   if ($$3317 >>> 0 >= 10) {
    $$0 = 1;
    break;
   }
  }
 } else $$0 = $$1248; while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i246 = 0, $$0$i$i$i250 = 0, $$0208 = 0, $$3 = 0, $100 = 0, $102 = 0, $103 = 0, $108 = 0, $109 = 0, $115 = 0, $121 = 0, $127 = 0, $128 = 0, $138 = 0, $139 = 0, $15 = 0, $18 = 0, $20 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $37 = 0, $4 = 0, $44 = 0, $46 = 0, $48 = 0, $5 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $7 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $97 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $3 = sp + 64 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 12 | 0;
 $8 = sp;
 L1 : do if (($1 - $0 | 0) > 3) if ((HEAP8[$0 >> 0] | 0) == 76) {
  $15 = $0 + 1 | 0;
  do switch (HEAP8[$15 >> 0] | 0) {
  case 84:
   {
    $$3 = $0;
    break L1;
    break;
   }
  case 119:
   {
    $18 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16311, __ZNSt3__211char_traitsIcE6lengthEPKc(16311) | 0);
    $20 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($18, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($20 | 0) == ($18 | 0) ? $0 : $20;
    break L1;
    break;
   }
  case 98:
   {
    if ((HEAP8[$0 + 3 >> 0] | 0) != 69) {
     $$3 = $0;
     break L1;
    }
    switch (HEAP8[$0 + 2 >> 0] | 0) {
    case 48:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($3, 16319);
      $28 = $2 + 4 | 0;
      $29 = HEAP32[$28 >> 2] | 0;
      if ($29 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($29, $3);
       HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $0 + 4 | 0;
      break L1;
      break;
     }
    case 49:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3, 16325);
      $36 = $2 + 4 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      if ($37 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($37, $3);
       HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $0 + 4 | 0;
      break L1;
      break;
     }
    default:
     {
      $$3 = $0;
      break L1;
     }
    }
    break;
   }
  case 99:
   {
    $44 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16330, __ZNSt3__211char_traitsIcE6lengthEPKc(16330) | 0);
    $46 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($44, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($46 | 0) == ($44 | 0) ? $0 : $46;
    break L1;
    break;
   }
  case 97:
   {
    $48 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16335, __ZNSt3__211char_traitsIcE6lengthEPKc(16335) | 0);
    $50 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($48, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($50 | 0) == ($48 | 0) ? $0 : $50;
    break L1;
    break;
   }
  case 104:
   {
    $52 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16347, __ZNSt3__211char_traitsIcE6lengthEPKc(16347) | 0);
    $54 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($52, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($54 | 0) == ($52 | 0) ? $0 : $54;
    break L1;
    break;
   }
  case 115:
   {
    $56 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16361, __ZNSt3__211char_traitsIcE6lengthEPKc(16361) | 0);
    $58 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($56, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($58 | 0) == ($56 | 0) ? $0 : $58;
    break L1;
    break;
   }
  case 116:
   {
    $60 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16367, __ZNSt3__211char_traitsIcE6lengthEPKc(16367) | 0);
    $62 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($60, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($62 | 0) == ($60 | 0) ? $0 : $62;
    break L1;
    break;
   }
  case 105:
   {
    $64 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 19061, __ZNSt3__211char_traitsIcE6lengthEPKc(19061) | 0);
    $66 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($64, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($66 | 0) == ($64 | 0) ? $0 : $66;
    break L1;
    break;
   }
  case 106:
   {
    $68 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16382, __ZNSt3__211char_traitsIcE6lengthEPKc(16382) | 0);
    $70 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($68, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($70 | 0) == ($68 | 0) ? $0 : $70;
    break L1;
    break;
   }
  case 108:
   {
    $72 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16384, __ZNSt3__211char_traitsIcE6lengthEPKc(16384) | 0);
    $74 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($72, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($74 | 0) == ($72 | 0) ? $0 : $74;
    break L1;
    break;
   }
  case 109:
   {
    $76 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16386, __ZNSt3__211char_traitsIcE6lengthEPKc(16386) | 0);
    $78 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($76, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($78 | 0) == ($76 | 0) ? $0 : $78;
    break L1;
    break;
   }
  case 120:
   {
    $80 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16389, __ZNSt3__211char_traitsIcE6lengthEPKc(16389) | 0);
    $82 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($80, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($82 | 0) == ($80 | 0) ? $0 : $82;
    break L1;
    break;
   }
  case 121:
   {
    $84 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16392, __ZNSt3__211char_traitsIcE6lengthEPKc(16392) | 0);
    $86 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($84, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($86 | 0) == ($84 | 0) ? $0 : $86;
    break L1;
    break;
   }
  case 110:
   {
    $88 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16396, __ZNSt3__211char_traitsIcE6lengthEPKc(16396) | 0);
    $90 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($88, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($90 | 0) == ($88 | 0) ? $0 : $90;
    break L1;
    break;
   }
  case 111:
   {
    $92 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16405, __ZNSt3__211char_traitsIcE6lengthEPKc(16405) | 0);
    $94 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($92, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($94 | 0) == ($92 | 0) ? $0 : $94;
    break L1;
    break;
   }
  case 102:
   {
    $96 = $0 + 2 | 0;
    $97 = __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIfNS0_2DbEEEPKcS4_S4_RT0_($96, $1, $2) | 0;
    $$3 = ($97 | 0) == ($96 | 0) ? $0 : $97;
    break L1;
    break;
   }
  case 100:
   {
    $99 = $0 + 2 | 0;
    $100 = __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIdNS0_2DbEEEPKcS4_S4_RT0_($99, $1, $2) | 0;
    $$3 = ($100 | 0) == ($99 | 0) ? $0 : $100;
    break L1;
    break;
   }
  case 101:
   {
    $102 = $0 + 2 | 0;
    $103 = __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIeNS0_2DbEEEPKcS4_S4_RT0_($102, $1, $2) | 0;
    $$3 = ($103 | 0) == ($102 | 0) ? $0 : $103;
    break L1;
    break;
   }
  case 95:
   {
    if ((HEAP8[$0 + 2 >> 0] | 0) != 90) {
     $$3 = $0;
     break L1;
    }
    $108 = $0 + 3 | 0;
    $109 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($108, $1, $2) | 0;
    if (($109 | 0) == ($108 | 0) | ($109 | 0) == ($1 | 0)) {
     $$3 = $0;
     break L1;
    }
    $$3 = (HEAP8[$109 >> 0] | 0) == 69 ? $109 + 1 | 0 : $0;
    break L1;
    break;
   }
  default:
   {
    $115 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
    if (($115 | 0) == ($15 | 0) | ($115 | 0) == ($1 | 0)) {
     $$3 = $0;
     break L1;
    }
    if ((HEAP8[$115 >> 0] | 0) == 69) {
     $$3 = $115 + 1 | 0;
     break L1;
    }
    $$0208 = $115;
    while (1) {
     if (($$0208 | 0) == ($1 | 0)) {
      $$3 = $0;
      break L1;
     }
     $121 = HEAP8[$$0208 >> 0] | 0;
     if ((($121 << 24 >> 24) + -48 | 0) >>> 0 >= 10) break;
     $$0208 = $$0208 + 1 | 0;
    }
    if (!(($$0208 | 0) != ($115 | 0) & $121 << 24 >> 24 == 69)) {
     $$3 = $0;
     break L1;
    }
    $127 = $2 + 4 | 0;
    $128 = HEAP32[$127 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($128 | 0)) {
     $$3 = $0;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7, $128 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($7, 0, 15119) | 0;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$7 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15117) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i246 = 0;
    while (1) {
     if (($$0$i$i$i246 | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i246 << 2) >> 2] = 0;
     $$0$i$i$i246 = $$0$i$i$i246 + 1 | 0;
    }
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    HEAP32[$8 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($8, $115, $$0208);
    $138 = HEAP8[$8 + 11 >> 0] | 0;
    $139 = $138 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($5, $139 ? HEAP32[$8 >> 2] | 0 : $8, $139 ? HEAP32[$8 + 4 >> 2] | 0 : $138 & 255) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i250 = 0;
    while (1) {
     if (($$0$i$i$i250 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i250 << 2) >> 2] = 0;
     $$0$i$i$i250 = $$0$i$i$i250 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$127 >> 2] | 0) + -24 | 0, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    $$3 = $$0208 + 1 | 0;
    break L1;
   }
  } while (0);
 } else $$3 = $0; else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$add$i188 = 0, $$0$i$i$i$i = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i187 = 0, $$0$i$i193 = 0, $$0$i$i198 = 0, $$0132 = 0, $$0141$off0$ph = 0, $$0168 = 0, $$11 = 0, $$1135 = 0, $$1169 = 0, $$1169$ph = 0, $$2136 = 0, $$3144$off0$ph = 0, $$3171 = 0, $$4158 = 0, $$5139 = 0, $$6140 = 0, $$6160 = 0, $$in = 0, $$in210 = 0, $$pre$phi248Z2D = 0, $$pre$phiZ2D = 0, $$pre242 = 0, $10 = 0, $104 = 0, $105 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $13 = 0, $134 = 0, $142 = 0, $143 = 0, $151 = 0, $153 = 0, $154 = 0, $157 = 0, $162 = 0, $166 = 0, $167 = 0, $168 = 0, $172 = 0, $176 = 0, $177 = 0, $19 = 0, $198 = 0, $199 = 0, $21 = 0, $23 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $4 = 0, $41 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $61 = 0, $7 = 0, $70 = 0, $73 = 0, $75 = 0, $8 = 0, $80 = 0, $81 = 0, $84 = 0, $85 = 0, $88 = 0, $92 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 48 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 32 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 12 | 0;
 $8 = sp;
 if (($0 | 0) == ($1 | 0)) {
  $$6140 = $0;
  label = 90;
 } else {
  $10 = $2 + 56 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjEC2ERj($4, $10);
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
  $13 = $2 + 61 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($5, $13);
  if ((HEAP32[$10 >> 2] | 0) >>> 0 > 1) HEAP8[$13 >> 0] = 1;
  L6 : do switch (HEAP8[$0 >> 0] | 0) {
  case 84:
  case 71:
   {
    $$5139 = __ZN10__cxxabiv112_GLOBAL__N_118parse_special_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    $$6160 = 1;
    break;
   }
  default:
   {
    $19 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    $21 = HEAP32[$2 + 48 >> 2] | 0;
    $23 = HEAP32[$2 + 52 >> 2] | 0;
    L8 : do if (($19 | 0) == ($0 | 0)) $$2136 = $0; else if (($19 | 0) == ($1 | 0)) $$2136 = $1; else {
     switch (HEAP8[$19 >> 0] | 0) {
     case 46:
     case 69:
      {
       $$2136 = $19;
       break L8;
       break;
      }
     default:
      {}
     }
     __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($6, $13);
     HEAP8[$13 >> 0] = 0;
     HEAP32[$7 >> 2] = 0;
     HEAP32[$7 + 4 >> 2] = 0;
     HEAP32[$7 + 8 >> 2] = 0;
     $$0$i$i198 = 0;
     while (1) {
      if (($$0$i$i198 | 0) == 3) break;
      HEAP32[$7 + ($$0$i$i198 << 2) >> 2] = 0;
      $$0$i$i198 = $$0$i$i198 + 1 | 0;
     }
     $30 = $2 + 4 | 0;
     $31 = HEAP32[$30 >> 2] | 0;
     L16 : do if ((HEAP32[$2 >> 2] | 0) == ($31 | 0)) {
      $$1135 = $0;
      $$4158 = 0;
     } else {
      $33 = $31 + -24 | 0;
      $35 = HEAP8[$33 + 11 >> 0] | 0;
      $36 = $35 << 24 >> 24 < 0;
      if ($36) $41 = HEAP32[$31 + -20 >> 2] | 0; else $41 = $35 & 255;
      if (!$41) {
       $$1135 = $0;
       $$4158 = 0;
      } else {
       if (!(HEAP8[$2 + 60 >> 0] | 0)) {
        if ($36) {
         $50 = HEAP32[$33 >> 2] | 0;
         $51 = HEAP32[$31 + -20 >> 2] | 0;
        } else {
         $50 = $33;
         $51 = $35 & 255;
        }
        if ((HEAP8[$50 + $51 + -1 >> 0] | 0) == 62) {
         if ($36) {
          $$in = HEAP32[$31 + -20 >> 2] | 0;
          $61 = HEAP32[$33 >> 2] | 0;
         } else {
          $$in = $35 & 255;
          $61 = $33;
         }
         if ((HEAP8[$61 + ($$in + -2) >> 0] | 0) == 45) {
          $$0168 = $19;
          $$pre$phiZ2D = $33;
         } else {
          if ($36) {
           $$in210 = HEAP32[$31 + -20 >> 2] | 0;
           $70 = HEAP32[$33 >> 2] | 0;
          } else {
           $$in210 = $35 & 255;
           $70 = $33;
          }
          if ((HEAP8[$70 + ($$in210 + -2) >> 0] | 0) == 62) {
           $$0168 = $19;
           $$pre$phiZ2D = $33;
          } else {
           $73 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19, $1, $2) | 0;
           if (($73 | 0) == ($19 | 0)) {
            $$1135 = $0;
            $$4158 = 0;
            break;
           }
           $75 = HEAP32[$30 >> 2] | 0;
           $80 = $75;
           if ((($75 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
            $$1135 = $0;
            $$4158 = 0;
            break;
           }
           $81 = $80 + -24 | 0;
           HEAP32[$8 >> 2] = HEAP32[$81 >> 2];
           HEAP32[$8 + 4 >> 2] = HEAP32[$81 + 4 >> 2];
           HEAP32[$8 + 8 >> 2] = HEAP32[$81 + 8 >> 2];
           $$0$i$i193 = 0;
           while (1) {
            if (($$0$i$i193 | 0) == 3) break;
            HEAP32[$81 + ($$0$i$i193 << 2) >> 2] = 0;
            $$0$i$i193 = $$0$i$i193 + 1 | 0;
           }
           $84 = $80 + -12 | 0;
           $85 = $7 + 11 | 0;
           if ((HEAP8[$85 >> 0] | 0) < 0) {
            $88 = HEAP32[$7 >> 2] | 0;
            HEAP8[$3 >> 0] = 0;
            __ZNSt3__211char_traitsIcE6assignERcRKc($88, $3);
            HEAP32[$7 + 4 >> 2] = 0;
           } else {
            HEAP8[$3 >> 0] = 0;
            __ZNSt3__211char_traitsIcE6assignERcRKc($7, $3);
            HEAP8[$85 >> 0] = 0;
           }
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($7);
           HEAP32[$7 >> 2] = HEAP32[$84 >> 2];
           HEAP32[$7 + 4 >> 2] = HEAP32[$84 + 4 >> 2];
           HEAP32[$7 + 8 >> 2] = HEAP32[$84 + 8 >> 2];
           $$0$i$i$i$i = 0;
           while (1) {
            if (($$0$i$i$i$i | 0) == 3) break;
            HEAP32[$84 + ($$0$i$i$i$i << 2) >> 2] = 0;
            $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
           }
           $92 = HEAP8[$85 >> 0] | 0;
           if (!(($92 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $92 & 255) | 0)) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($8, 32);
           $99 = HEAP32[$30 >> 2] | 0;
           $$0$i$i$idx$i187 = 0;
           while (1) {
            if (($$0$i$i$idx$i187 | 0) == -1) break;
            $$0$i$i$add$i188 = $$0$i$i$idx$i187 + -1 | 0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($99 + ($$0$i$i$add$i188 * 24 | 0) | 0);
            $$0$i$i$idx$i187 = $$0$i$i$add$i188;
           }
           HEAP32[$30 >> 2] = $99 + -24;
           $104 = HEAP8[$8 + 11 >> 0] | 0;
           $105 = $104 << 24 >> 24 < 0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($99 + -48 | 0, 0, $105 ? HEAP32[$8 >> 2] | 0 : $8, $105 ? HEAP32[$8 + 4 >> 2] | 0 : $104 & 255) | 0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
           $$0168 = $73;
           $$pre$phiZ2D = (HEAP32[$30 >> 2] | 0) + -24 | 0;
          }
         }
        } else {
         $$0168 = $19;
         $$pre$phiZ2D = $33;
        }
       } else {
        $$0168 = $19;
        $$pre$phiZ2D = $33;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($$pre$phiZ2D, 40);
       if (($$0168 | 0) == ($1 | 0)) label = 50; else if ((HEAP8[$$0168 >> 0] | 0) == 118) {
        $$3171 = $$0168 + 1 | 0;
        $176 = HEAP32[$2 >> 2] | 0;
        $177 = HEAP32[$30 >> 2] | 0;
       } else label = 50;
       do if ((label | 0) == 50) {
        $116 = $3 + 11 | 0;
        $117 = $3 + 4 | 0;
        $118 = $8 + 11 | 0;
        $119 = $8 + 4 | 0;
        $$0141$off0$ph = 1;
        $$1169$ph = $$0168;
        L67 : while (1) {
         $$1169 = $$1169$ph;
         while (1) {
          $123 = ((HEAP32[$30 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
          $124 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$1169, $1, $2) | 0;
          $125 = HEAP32[$30 >> 2] | 0;
          $126 = HEAP32[$2 >> 2] | 0;
          $128 = ($125 - $126 | 0) / 24 | 0;
          if (($124 | 0) == ($$1169 | 0)) {
           label = 74;
           break L67;
          }
          if ($128 >>> 0 > $123 >>> 0) break; else $$1169 = $124;
         }
         HEAP32[$3 >> 2] = 0;
         HEAP32[$3 + 4 >> 2] = 0;
         HEAP32[$3 + 8 >> 2] = 0;
         $$0$i$i = 0;
         while (1) {
          if (($$0$i$i | 0) == 3) break;
          HEAP32[$3 + ($$0$i$i << 2) >> 2] = 0;
          $$0$i$i = $$0$i$i + 1 | 0;
         }
         $$0132 = $123;
         while (1) {
          if ($$0132 >>> 0 >= $128 >>> 0) break;
          $134 = HEAP8[$116 >> 0] | 0;
          if (($134 << 24 >> 24 < 0 ? HEAP32[$117 >> 2] | 0 : $134 & 255) | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 15341) | 0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8, (HEAP32[$2 >> 2] | 0) + ($$0132 * 24 | 0) | 0);
          $142 = HEAP8[$118 >> 0] | 0;
          $143 = $142 << 24 >> 24 < 0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3, $143 ? HEAP32[$8 >> 2] | 0 : $8, $143 ? HEAP32[$119 >> 2] | 0 : $142 & 255) | 0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
          $$0132 = $$0132 + 1 | 0;
         }
         $$0 = $123;
         while (1) {
          if ($$0 >>> 0 >= $128 >>> 0) break;
          $157 = HEAP32[$30 >> 2] | 0;
          $$0$i$i$idx$i = 0;
          while (1) {
           if (($$0$i$i$idx$i | 0) == -1) break;
           $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($157 + ($$0$i$i$add$i * 24 | 0) | 0);
           $$0$i$i$idx$i = $$0$i$i$add$i;
          }
          HEAP32[$30 >> 2] = $157 + -24;
          $$0 = $$0 + 1 | 0;
         }
         $151 = HEAP8[$116 >> 0] | 0;
         $153 = HEAP32[$117 >> 2] | 0;
         $154 = $151 & 255;
         if (!(($151 << 24 >> 24 < 0 ? $153 : $154) | 0)) $$3144$off0$ph = $$0141$off0$ph; else {
          $162 = HEAP32[$30 >> 2] | 0;
          if ((HEAP32[$2 >> 2] | 0) == ($162 | 0)) {
           label = 86;
           break;
          }
          if ($$0141$off0$ph) {
           $$pre$phi248Z2D = $154;
           $166 = $162;
           $168 = $151;
           $172 = $153;
          } else {
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($162 + -24 | 0, 15341) | 0;
           $$pre242 = HEAP8[$116 >> 0] | 0;
           $$pre$phi248Z2D = $$pre242 & 255;
           $166 = HEAP32[$30 >> 2] | 0;
           $168 = $$pre242;
           $172 = HEAP32[$117 >> 2] | 0;
          }
          $167 = $168 << 24 >> 24 < 0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($166 + -24 | 0, $167 ? HEAP32[$3 >> 2] | 0 : $3, $167 ? $172 : $$pre$phi248Z2D) | 0;
          $$3144$off0$ph = 0;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         $$0141$off0$ph = $$3144$off0$ph;
         $$1169$ph = $124;
        }
        if ((label | 0) == 74) {
         $$3171 = $$1169;
         $176 = $126;
         $177 = $125;
         break;
        } else if ((label | 0) == 86) {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         $$1135 = $0;
         $$4158 = 0;
         break L16;
        }
       } while (0);
       if (($176 | 0) == ($177 | 0)) {
        $$1135 = $0;
        $$4158 = 0;
       } else {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($177 + -24 | 0, 41);
        if ($21 & 1 | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$30 >> 2] | 0) + -24 | 0, 15064) | 0;
        if ($21 & 2 | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$30 >> 2] | 0) + -24 | 0, 15071) | 0;
        if ($21 & 4 | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$30 >> 2] | 0) + -24 | 0, 15081) | 0;
        switch ($23 | 0) {
        case 1:
         {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$30 >> 2] | 0) + -24 | 0, 16545) | 0;
          break;
         }
        case 2:
         {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$30 >> 2] | 0) + -24 | 0, 16548) | 0;
          break;
         }
        default:
         {}
        }
        $198 = HEAP8[$7 + 11 >> 0] | 0;
        $199 = $198 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$30 >> 2] | 0) + -24 | 0, $199 ? HEAP32[$7 >> 2] | 0 : $7, $199 ? HEAP32[$7 + 4 >> 2] | 0 : $198 & 255) | 0;
        $$1135 = $$3171;
        $$4158 = 1;
       }
      }
     } while (0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
     __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($6);
     if ($$4158) $$2136 = $$1135; else {
      $$5139 = $$1135;
      $$6160 = 0;
      break L6;
     }
    } while (0);
    $$5139 = $$2136;
    $$6160 = 1;
   }
  } while (0);
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($5);
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjED2Ev($4);
  if ($$6160) {
   $$6140 = $$5139;
   label = 90;
  } else $$11 = $0;
 }
 if ((label | 0) == 90) $$11 = $$6140;
 STACKTOP = sp;
 return $$11 | 0;
}

function _arGetTransMatMultiSquare2($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0389 = 0, $$0394 = 0, $$0404 = 0.0, $$0405 = 0, $$0407 = 0, $$0410 = 0, $$0413 = 0.0, $$1 = 0, $$10 = 0, $$1390 = 0, $$1395 = 0, $$1406 = 0, $$1408 = 0, $$1411 = 0, $$1414 = 0.0, $$2 = 0, $$2391 = 0, $$2396 = 0, $$2409 = 0, $$2412 = 0, $$2415 = 0.0, $$3 = 0, $$3392 = 0, $$3397 = 0, $$3416 = 0.0, $$4 = 0, $$4393 = 0, $$4398 = 0, $$4417 = 0.0, $$5 = 0, $$5399 = 0, $$5418 = 0.0, $$6 = 0, $$6400 = 0, $$6419 = 0.0, $$7 = 0, $$7401 = 0, $$8 = 0, $$8402 = 0, $$9 = 0, $$9403 = 0, $$pre441 = 0, $10 = 0, $109 = 0, $111 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $123 = 0, $125 = 0, $128 = 0, $135 = 0, $145 = 0, $155 = 0, $16 = 0, $166 = 0, $214 = 0, $217 = 0, $218 = 0, $219 = 0.0, $222 = 0.0, $225 = 0.0, $228 = 0.0, $23 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0, $243 = 0.0, $244 = 0.0, $253 = 0.0, $254 = 0.0, $263 = 0.0, $264 = 0.0, $273 = 0.0, $274 = 0.0, $287 = 0, $291 = 0, $293 = 0, $36 = 0, $39 = 0, $42 = 0, $44 = 0, $47 = 0, $5 = 0, $51 = 0, $6 = 0, $63 = 0.0, $7 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $9 = 0, $90 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $vararg_buffer1 = sp + 200 | 0;
 $vararg_buffer = sp + 192 | 0;
 $5 = sp + 96 | 0;
 $6 = sp;
 $7 = $3 + 4 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $3 + 112 | 0;
 $10 = $3 + 120 | 0;
 $$0394 = 0;
 while (1) {
  if (($$0394 | 0) >= ($8 | 0)) break;
  $12 = HEAP32[$3 >> 2] | 0;
  $16 = $12 + ($$0394 * 320 | 0) | 0;
  if (!(HEAP32[$12 + ($$0394 * 320 | 0) + 4 >> 2] | 0)) {
   $$0 = -1;
   $$0389 = 0;
   while (1) {
    if (($$0389 | 0) >= ($2 | 0)) break;
    if ((HEAP32[$1 + ($$0389 << 8) + 8 >> 2] | 0) == (HEAP32[$16 >> 2] | 0)) {
     $23 = +HEAPF64[$1 + ($$0389 << 8) + 40 >> 3];
     if ($23 < +HEAPF64[$9 >> 3]) $$1 = $$0; else if (($$0 | 0) == -1) $$1 = $$0389; else if (+HEAPF64[$1 + ($$0 << 8) + 40 >> 3] < $23) $$1 = $$0389; else $$1 = $$0;
    } else $$1 = $$0;
    $$0 = $$1;
    $$0389 = $$0389 + 1 | 0;
   }
   HEAP32[$12 + ($$0394 * 320 | 0) + 304 >> 2] = $$0;
   if (($$0 | 0) > -1) HEAP32[$1 + ($$0 << 8) + 16 >> 2] = HEAP32[$1 + ($$0 << 8) + 20 >> 2];
  } else {
   $36 = $12 + ($$0394 * 320 | 0) + 312 | 0;
   $$1390 = 0;
   $$2 = -1;
   while (1) {
    if (($$1390 | 0) >= ($2 | 0)) break;
    $39 = HEAP32[$1 + ($$1390 << 8) + 12 >> 2] | 0;
    if (!$39) {
     $42 = $1 + ($$1390 << 8) + 248 | 0;
     $44 = HEAP32[$42 >> 2] | 0;
     $47 = HEAP32[$42 + 4 >> 2] | 0;
     if (($44 | 0) == 0 & ($47 | 0) == 0) label = 19; else {
      $51 = $36;
      if (($44 | 0) == (HEAP32[$51 >> 2] | 0) ? ($47 | 0) == (HEAP32[$51 + 4 >> 2] | 0) : 0) label = 20; else $$3 = $$2;
     }
    } else label = 19;
    if ((label | 0) == 19) {
     label = 0;
     if (($39 | 0) == (HEAP32[$16 >> 2] | 0)) label = 20; else $$3 = $$2;
    }
    if ((label | 0) == 20) {
     label = 0;
     $63 = +HEAPF64[$1 + ($$1390 << 8) + 48 >> 3];
     if ($63 < +HEAPF64[$10 >> 3]) $$3 = $$2; else if (($$2 | 0) == -1) $$3 = $$1390; else if (+HEAPF64[$1 + ($$2 << 8) + 48 >> 3] < $63) $$3 = $$1390; else $$3 = $$2;
    }
    $$1390 = $$1390 + 1 | 0;
    $$2 = $$3;
   }
   HEAP32[$12 + ($$0394 * 320 | 0) + 304 >> 2] = $$2;
   if (($$2 | 0) > -1) HEAP32[$1 + ($$2 << 8) + 16 >> 2] = HEAP32[$1 + ($$2 << 8) + 24 >> 2];
  }
  $$0394 = $$0394 + 1 | 0;
 }
 $$0405 = 0;
 $$0407 = 0;
 $$0410 = 0;
 $$1395 = 0;
 $78 = $8;
 while (1) {
  if (($$1395 | 0) >= ($78 | 0)) break;
  $79 = HEAP32[$3 >> 2] | 0;
  $81 = HEAP32[$79 + ($$1395 * 320 | 0) + 304 >> 2] | 0;
  do if (($81 | 0) < 0) {
   $$1406 = $$0405;
   $$2409 = $$0407;
   $$2412 = $$0410;
  } else {
   $83 = $1 + ($81 << 8) | 0;
   if (+_arGetTransMatSquare($0, $83, +HEAPF64[$79 + ($$1395 * 320 | 0) + 8 >> 3], $6) > 4.0) {
    HEAP32[(HEAP32[$3 >> 2] | 0) + ($$1395 * 320 | 0) + 304 >> 2] = -1;
    $90 = $1 + ($81 << 8) + 236 | 0;
    if (HEAP32[$90 >> 2] | 0) {
     $$1406 = $$0405;
     $$2409 = $$0407;
     $$2412 = $$0410;
     break;
    }
    HEAP32[$90 >> 2] = 7;
    $$1406 = $$0405;
    $$2409 = $$0407;
    $$2412 = $$0410;
    break;
   }
   $$pre441 = HEAP32[$83 >> 2] | 0;
   L45 : do if (($$0405 | 0) == 0 | ($$0407 | 0) < ($$pre441 | 0)) {
    $$2391 = 0;
    while (1) {
     if (($$2391 | 0) == 3) {
      $$1408 = $$pre441;
      $$1411 = $$1395;
      break L45;
     }
     $$4 = 0;
     while (1) {
      if (($$4 | 0) == 4) break;
      HEAPF64[$5 + ($$2391 << 5) + ($$4 << 3) >> 3] = +HEAPF64[$6 + ($$2391 << 5) + ($$4 << 3) >> 3];
      $$4 = $$4 + 1 | 0;
     }
     $$2391 = $$2391 + 1 | 0;
    }
   } else {
    $$1408 = $$0407;
    $$1411 = $$0410;
   } while (0);
   $$1406 = $$0405 + 1 | 0;
   $$2409 = $$1408;
   $$2412 = $$1411;
  } while (0);
  $$0405 = $$1406;
  $$0407 = $$2409;
  $$0410 = $$2412;
  $$1395 = $$1395 + 1 | 0;
  $78 = HEAP32[$7 >> 2] | 0;
 }
 L57 : do if (!$$0405) label = 45; else if (($$0405 | 0) < (HEAP32[$3 + 128 >> 2] | 0)) label = 45; else {
  _arUtilMatMul($5, (HEAP32[$3 >> 2] | 0) + ($$0410 * 320 | 0) + 112 | 0, $6) | 0;
  $109 = $$0405 << 2;
  $111 = _malloc($$0405 << 6) | 0;
  if (!$111) {
   _arLog(0, 3, 5051, $vararg_buffer);
   _exit(1);
  }
  $114 = _malloc($$0405 * 96 | 0) | 0;
  if (!$114) {
   _arLog(0, 3, 5051, $vararg_buffer1);
   _exit(1);
  }
  $116 = HEAP32[$7 >> 2] | 0;
  $$2396 = 0;
  $$3392 = 0;
  while (1) {
   if (($$2396 | 0) >= ($116 | 0)) break;
   $118 = HEAP32[$3 >> 2] | 0;
   $120 = HEAP32[$118 + ($$2396 * 320 | 0) + 304 >> 2] | 0;
   if (($120 | 0) < 0) $$4393 = $$3392; else {
    $123 = HEAP32[$1 + ($120 << 8) + 16 >> 2] | 0;
    $125 = (4 - $123 | 0) % 4 | 0;
    $128 = $$3392 << 3;
    HEAPF64[$111 + ($128 << 3) >> 3] = +HEAPF64[$1 + ($120 << 8) + 168 + ($125 << 4) >> 3];
    HEAPF64[$111 + (($128 | 1) << 3) >> 3] = +HEAPF64[$1 + ($120 << 8) + 168 + ($125 << 4) + 8 >> 3];
    $135 = (5 - $123 | 0) % 4 | 0;
    HEAPF64[$111 + (($128 | 2) << 3) >> 3] = +HEAPF64[$1 + ($120 << 8) + 168 + ($135 << 4) >> 3];
    HEAPF64[$111 + (($128 | 3) << 3) >> 3] = +HEAPF64[$1 + ($120 << 8) + 168 + ($135 << 4) + 8 >> 3];
    $145 = (6 - $123 | 0) % 4 | 0;
    HEAPF64[$111 + (($128 | 4) << 3) >> 3] = +HEAPF64[$1 + ($120 << 8) + 168 + ($145 << 4) >> 3];
    HEAPF64[$111 + (($128 | 5) << 3) >> 3] = +HEAPF64[$1 + ($120 << 8) + 168 + ($145 << 4) + 8 >> 3];
    $155 = (7 - $123 | 0) % 4 | 0;
    HEAPF64[$111 + (($128 | 6) << 3) >> 3] = +HEAPF64[$1 + ($120 << 8) + 168 + ($155 << 4) >> 3];
    HEAPF64[$111 + (($128 | 7) << 3) >> 3] = +HEAPF64[$1 + ($120 << 8) + 168 + ($155 << 4) + 8 >> 3];
    $166 = $$3392 * 12 | 0;
    HEAPF64[$114 + ($166 << 3) >> 3] = +HEAPF64[$118 + ($$2396 * 320 | 0) + 208 >> 3];
    HEAPF64[$114 + (($166 | 1) << 3) >> 3] = +HEAPF64[$118 + ($$2396 * 320 | 0) + 216 >> 3];
    HEAPF64[$114 + (($166 | 2) << 3) >> 3] = +HEAPF64[$118 + ($$2396 * 320 | 0) + 224 >> 3];
    HEAPF64[$114 + (($166 | 3) << 3) >> 3] = +HEAPF64[$118 + ($$2396 * 320 | 0) + 232 >> 3];
    HEAPF64[$114 + ($166 + 4 << 3) >> 3] = +HEAPF64[$118 + ($$2396 * 320 | 0) + 240 >> 3];
    HEAPF64[$114 + ($166 + 5 << 3) >> 3] = +HEAPF64[$118 + ($$2396 * 320 | 0) + 248 >> 3];
    HEAPF64[$114 + ($166 + 6 << 3) >> 3] = +HEAPF64[$118 + ($$2396 * 320 | 0) + 256 >> 3];
    HEAPF64[$114 + ($166 + 7 << 3) >> 3] = +HEAPF64[$118 + ($$2396 * 320 | 0) + 264 >> 3];
    HEAPF64[$114 + ($166 + 8 << 3) >> 3] = +HEAPF64[$118 + ($$2396 * 320 | 0) + 272 >> 3];
    HEAPF64[$114 + ($166 + 9 << 3) >> 3] = +HEAPF64[$118 + ($$2396 * 320 | 0) + 280 >> 3];
    HEAPF64[$114 + ($166 + 10 << 3) >> 3] = +HEAPF64[$118 + ($$2396 * 320 | 0) + 288 >> 3];
    HEAPF64[$114 + ($166 + 11 << 3) >> 3] = +HEAPF64[$118 + ($$2396 * 320 | 0) + 296 >> 3];
    $$4393 = $$3392 + 1 | 0;
   }
   $$2396 = $$2396 + 1 | 0;
   $$3392 = $$4393;
  }
  $214 = $3 + 104 | 0;
  $217 = ($4 | 0) != 0;
  if (!(HEAP32[$214 >> 2] | 0)) {
   $218 = $3 + 8 | 0;
   $219 = +_arGetTransMat($0, $6, $111, $114, $109, $218);
   if ($217 & $219 >= 20.0) {
    _icpSetInlierProbability(HEAP32[$0 >> 2] | 0, .8) | 0;
    $222 = +_arGetTransMatRobust($0, $6, $111, $114, $109, $218);
    if (!($222 >= 20.0)) $$0413 = $222; else {
     _icpSetInlierProbability(HEAP32[$0 >> 2] | 0, .6) | 0;
     $225 = +_arGetTransMatRobust($0, $6, $111, $114, $109, $218);
     if (!($225 >= 20.0)) $$0413 = $225; else {
      _icpSetInlierProbability(HEAP32[$0 >> 2] | 0, .4) | 0;
      $228 = +_arGetTransMatRobust($0, $6, $111, $114, $109, $218);
      if (!($228 >= 20.0)) $$0413 = $228; else {
       _icpSetInlierProbability(HEAP32[$0 >> 2] | 0, 0.0) | 0;
       $$0413 = +_arGetTransMatRobust($0, $6, $111, $114, $109, $218);
      }
     }
    }
   } else $$0413 = $219;
   _free($114);
   _free($111);
   $$6419 = $$0413;
  } else {
   $232 = +_arGetTransMat($0, $6, $111, $114, $109, $5);
   $233 = $3 + 8 | 0;
   $234 = +_arGetTransMat($0, $233, $111, $114, $109, $233);
   $235 = $232 < $234;
   L82 : do if ($217) {
    L84 : do if ($235) {
     $$5 = 0;
     while (1) {
      if (($$5 | 0) == 3) {
       $$1414 = $232;
       break L84;
      }
      $$3397 = 0;
      while (1) {
       if (($$3397 | 0) == 4) break;
       HEAPF64[$3 + 8 + ($$5 << 5) + ($$3397 << 3) >> 3] = +HEAPF64[$5 + ($$5 << 5) + ($$3397 << 3) >> 3];
       $$3397 = $$3397 + 1 | 0;
      }
      $$5 = $$5 + 1 | 0;
     }
    } else $$1414 = $234; while (0);
    if (!($$1414 >= 20.0)) $$5418 = $$1414; else {
     _icpSetInlierProbability(HEAP32[$0 >> 2] | 0, .8) | 0;
     $243 = +_arGetTransMatRobust($0, $6, $111, $114, $109, $5);
     $244 = +_arGetTransMatRobust($0, $233, $111, $114, $109, $233);
     L95 : do if ($243 < $244) {
      $$6 = 0;
      while (1) {
       if (($$6 | 0) == 3) {
        $$2415 = $243;
        break L95;
       }
       $$4398 = 0;
       while (1) {
        if (($$4398 | 0) == 4) break;
        HEAPF64[$3 + 8 + ($$6 << 5) + ($$4398 << 3) >> 3] = +HEAPF64[$5 + ($$6 << 5) + ($$4398 << 3) >> 3];
        $$4398 = $$4398 + 1 | 0;
       }
       $$6 = $$6 + 1 | 0;
      }
     } else $$2415 = $244; while (0);
     if (!($$2415 >= 20.0)) $$5418 = $$2415; else {
      _icpSetInlierProbability(HEAP32[$0 >> 2] | 0, .6) | 0;
      $253 = +_arGetTransMatRobust($0, $6, $111, $114, $109, $5);
      $254 = +_arGetTransMatRobust($0, $233, $111, $114, $109, $233);
      L106 : do if ($253 < $254) {
       $$7 = 0;
       while (1) {
        if (($$7 | 0) == 3) {
         $$3416 = $253;
         break L106;
        }
        $$5399 = 0;
        while (1) {
         if (($$5399 | 0) == 4) break;
         HEAPF64[$3 + 8 + ($$7 << 5) + ($$5399 << 3) >> 3] = +HEAPF64[$5 + ($$7 << 5) + ($$5399 << 3) >> 3];
         $$5399 = $$5399 + 1 | 0;
        }
        $$7 = $$7 + 1 | 0;
       }
      } else $$3416 = $254; while (0);
      if (!($$3416 >= 20.0)) $$5418 = $$3416; else {
       _icpSetInlierProbability(HEAP32[$0 >> 2] | 0, .4) | 0;
       $263 = +_arGetTransMatRobust($0, $6, $111, $114, $109, $5);
       $264 = +_arGetTransMatRobust($0, $233, $111, $114, $109, $233);
       L117 : do if ($263 < $264) {
        $$8 = 0;
        while (1) {
         if (($$8 | 0) == 3) {
          $$4417 = $263;
          break L117;
         }
         $$6400 = 0;
         while (1) {
          if (($$6400 | 0) == 4) break;
          HEAPF64[$3 + 8 + ($$8 << 5) + ($$6400 << 3) >> 3] = +HEAPF64[$5 + ($$8 << 5) + ($$6400 << 3) >> 3];
          $$6400 = $$6400 + 1 | 0;
         }
         $$8 = $$8 + 1 | 0;
        }
       } else $$4417 = $264; while (0);
       if (!($$4417 >= 20.0)) $$5418 = $$4417; else {
        _icpSetInlierProbability(HEAP32[$0 >> 2] | 0, 0.0) | 0;
        $273 = +_arGetTransMatRobust($0, $6, $111, $114, $109, $5);
        $274 = +_arGetTransMatRobust($0, $233, $111, $114, $109, $233);
        if ($273 < $274) {
         $$9 = 0;
         while (1) {
          if (($$9 | 0) == 3) {
           $$5418 = $273;
           break L82;
          }
          $$7401 = 0;
          while (1) {
           if (($$7401 | 0) == 4) break;
           HEAPF64[$3 + 8 + ($$9 << 5) + ($$7401 << 3) >> 3] = +HEAPF64[$5 + ($$9 << 5) + ($$7401 << 3) >> 3];
           $$7401 = $$7401 + 1 | 0;
          }
          $$9 = $$9 + 1 | 0;
         }
        } else $$5418 = $274;
       }
      }
     }
    }
   } else if ($235) {
    $$10 = 0;
    while (1) {
     if (($$10 | 0) == 3) {
      $$5418 = $232;
      break L82;
     }
     $$8402 = 0;
     while (1) {
      if (($$8402 | 0) == 4) break;
      HEAPF64[$3 + 8 + ($$10 << 5) + ($$8402 << 3) >> 3] = +HEAPF64[$5 + ($$10 << 5) + ($$8402 << 3) >> 3];
      $$8402 = $$8402 + 1 | 0;
     }
     $$10 = $$10 + 1 | 0;
    }
   } else $$5418 = $234; while (0);
   _free($114);
   _free($111);
   $$6419 = $$5418;
  }
  if ($$6419 < 20.0) {
   HEAP32[$214 >> 2] = 1;
   $$0404 = $$6419;
   break;
  }
  HEAP32[$214 >> 2] = 0;
  $287 = HEAP32[$7 >> 2] | 0;
  $$9403 = 0;
  while (1) {
   if (($$9403 | 0) >= ($287 | 0)) {
    $$0404 = $$6419;
    break L57;
   }
   $291 = HEAP32[(HEAP32[$3 >> 2] | 0) + ($$9403 * 320 | 0) + 304 >> 2] | 0;
   if (($291 | 0) >= 0) {
    $293 = $1 + ($291 << 8) + 236 | 0;
    if (!(HEAP32[$293 >> 2] | 0)) HEAP32[$293 >> 2] = 8;
   }
   $$9403 = $$9403 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 45) {
  HEAP32[$3 + 104 >> 2] = 0;
  $$0404 = -1.0;
 }
 STACKTOP = sp;
 return +$$0404;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_new_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$add$i174 = 0, $$0$i$i$add$i186 = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i182 = 0, $$0$i$i$i196 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i173 = 0, $$0$i$i$idx$i185 = 0, $$0$i$i177 = 0, $$0$i$i189 = 0, $$0$i$i202 = 0, $$0$off0207 = 0, $$0138$off0 = 0, $$0150 = 0, $$0159$off0 = 0, $$0160 = 0, $$1151 = 0, $$1161 = 0, $$16 = 0, $$3143 = 0, $$3163 = 0, $$4144 = 0, $$4164206 = 0, $$phi$trans$insert = 0, $$pre$phi225Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $117 = 0, $118 = 0, $127 = 0, $14 = 0, $18 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $33 = 0, $39 = 0, $4 = 0, $5 = 0, $54 = 0, $55 = 0, $58 = 0, $6 = 0, $61 = 0, $65 = 0, $67 = 0, $7 = 0, $70 = 0, $72 = 0, $74 = 0, $8 = 0, $80 = 0, $83 = 0, $87 = 0, $9 = 0, $96 = 0, $97 = 0, $spec$select = 0, label = 0, sp = 0, $$3163$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $3 = sp + 88 | 0;
 $4 = sp + 76 | 0;
 $5 = sp + 64 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 16 | 0;
 $8 = sp;
 $9 = sp + 52 | 0;
 $10 = $1;
 L1 : do if (($10 - $0 | 0) > 3) {
  $14 = HEAP8[$0 >> 0] | 0;
  if ($14 << 24 >> 24 == 103) {
   $18 = (HEAP8[$0 + 1 >> 0] | 0) == 115;
   $spec$select = $18 ? $0 + 2 | 0 : $0;
   $$0159$off0 = $18;
   $$0160 = $spec$select;
   $21 = HEAP8[$spec$select >> 0] | 0;
  } else {
   $$0159$off0 = 0;
   $$0160 = $0;
   $21 = $14;
  }
  if ($21 << 24 >> 24 == 110) {
   $23 = HEAP8[$$0160 + 1 >> 0] | 0;
   switch ($23 << 24 >> 24) {
   case 97:
   case 119:
    break;
   default:
    {
     $$16 = $0;
     break L1;
    }
   }
   $24 = $23 << 24 >> 24 == 97;
   $25 = $$0160 + 2 | 0;
   L8 : do if (($25 | 0) != ($1 | 0)) {
    $$0138$off0 = 0;
    $$1161 = $25;
    while (1) {
     if ((HEAP8[$$1161 >> 0] | 0) == 95) break;
     $29 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$1161, $1, $2) | 0;
     if (($29 | 0) == ($$1161 | 0) | ($29 | 0) == ($1 | 0)) break L8; else {
      $$0138$off0 = 1;
      $$1161 = $29;
     }
    }
    $32 = $$1161 + 1 | 0;
    $33 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($32, $1, $2) | 0;
    if (!(($33 | 0) == ($32 | 0) | ($33 | 0) == ($1 | 0))) {
     $39 = HEAP8[$33 >> 0] | 0;
     L15 : do if (($10 - $33 | 0) > 2 & $39 << 24 >> 24 == 112) {
      if ((HEAP8[$33 + 1 >> 0] | 0) != 105) break L8;
      $$3163 = $33 + 2 | 0;
      while (1) {
       if ((HEAP8[$$3163 >> 0] | 0) == 69) {
        $$0$off0207 = 1;
        $$4164206 = $$3163;
        break L15;
       }
       $$3163$looptemp = $$3163;
       $$3163 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$3163, $1, $2) | 0;
       if (($$3163 | 0) == ($$3163$looptemp | 0) | ($$3163 | 0) == ($1 | 0)) break L8;
      }
     } else if ($39 << 24 >> 24 == 69) {
      $$0$off0207 = 0;
      $$4164206 = $33;
     } else break L8; while (0);
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     HEAP32[$4 + 8 >> 2] = 0;
     $$0$i$i = 0;
     while (1) {
      if (($$0$i$i | 0) == 3) break;
      HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
      $$0$i$i = $$0$i$i + 1 | 0;
     }
     if ($$0$off0207) {
      $54 = $2 + 4 | 0;
      $55 = HEAP32[$54 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($55 | 0)) {
       $$1151 = $0;
       $$4144 = 1;
      } else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $55 + -24 | 0);
       $58 = $4 + 11 | 0;
       if ((HEAP8[$58 >> 0] | 0) < 0) {
        $61 = HEAP32[$4 >> 2] | 0;
        HEAP8[$3 >> 0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($61, $3);
        HEAP32[$4 + 4 >> 2] = 0;
       } else {
        HEAP8[$3 >> 0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($4, $3);
        HEAP8[$58 >> 0] = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($4);
       HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
       HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
       $$0$i$i$i$i = 0;
       while (1) {
        if (($$0$i$i$i$i | 0) == 3) break;
        HEAP32[$5 + ($$0$i$i$i$i << 2) >> 2] = 0;
        $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       $65 = HEAP32[$54 >> 2] | 0;
       $$0$i$i$idx$i = 0;
       while (1) {
        if (($$0$i$i$idx$i | 0) == -1) break;
        $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($65 + ($$0$i$i$add$i * 24 | 0) | 0);
        $$0$i$i$idx$i = $$0$i$i$add$i;
       }
       $67 = $65 + -24 | 0;
       HEAP32[$54 >> 2] = $67;
       $$pre$phi225Z2D = $54;
       $$pre$phiZ2D = $2;
       $70 = $67;
       label = 33;
      }
     } else {
      $$phi$trans$insert = $2 + 4 | 0;
      $$pre$phi225Z2D = $$phi$trans$insert;
      $$pre$phiZ2D = $2;
      $70 = HEAP32[$$phi$trans$insert >> 2] | 0;
      label = 33;
     }
     if ((label | 0) == 33) if ((HEAP32[$$pre$phiZ2D >> 2] | 0) == ($70 | 0)) {
      $$1151 = $0;
      $$4144 = 1;
     } else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $70 + -24 | 0);
      $72 = HEAP32[$$pre$phi225Z2D >> 2] | 0;
      $$0$i$i$idx$i173 = 0;
      while (1) {
       if (($$0$i$i$idx$i173 | 0) == -1) break;
       $$0$i$i$add$i174 = $$0$i$i$idx$i173 + -1 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($72 + ($$0$i$i$add$i174 * 24 | 0) | 0);
       $$0$i$i$idx$i173 = $$0$i$i$add$i174;
      }
      $74 = $72 + -24 | 0;
      HEAP32[$$pre$phi225Z2D >> 2] = $74;
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      HEAP32[$6 + 8 >> 2] = 0;
      $$0$i$i177 = 0;
      while (1) {
       if (($$0$i$i177 | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i177 << 2) >> 2] = 0;
       $$0$i$i177 = $$0$i$i177 + 1 | 0;
      }
      if ($$0138$off0) if ((HEAP32[$$pre$phiZ2D >> 2] | 0) == ($74 | 0)) {
       $$0150 = $0;
       $$3143 = 1;
      } else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7, $72 + -48 | 0);
       $80 = $6 + 11 | 0;
       if ((HEAP8[$80 >> 0] | 0) < 0) {
        $83 = HEAP32[$6 >> 2] | 0;
        HEAP8[$3 >> 0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($83, $3);
        HEAP32[$6 + 4 >> 2] = 0;
       } else {
        HEAP8[$3 >> 0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($6, $3);
        HEAP8[$80 >> 0] = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($6);
       HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
       HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
       $$0$i$i$i$i182 = 0;
       while (1) {
        if (($$0$i$i$i$i182 | 0) == 3) break;
        HEAP32[$7 + ($$0$i$i$i$i182 << 2) >> 2] = 0;
        $$0$i$i$i$i182 = $$0$i$i$i$i182 + 1 | 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       $87 = HEAP32[$$pre$phi225Z2D >> 2] | 0;
       $$0$i$i$idx$i185 = 0;
       while (1) {
        if (($$0$i$i$idx$i185 | 0) == -1) break;
        $$0$i$i$add$i186 = $$0$i$i$idx$i185 + -1 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($87 + ($$0$i$i$add$i186 * 24 | 0) | 0);
        $$0$i$i$idx$i185 = $$0$i$i$add$i186;
       }
       HEAP32[$$pre$phi225Z2D >> 2] = $87 + -24;
       label = 52;
      } else label = 52;
      if ((label | 0) == 52) {
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       HEAP32[$3 + 8 >> 2] = 0;
       $$0$i$i189 = 0;
       while (1) {
        if (($$0$i$i189 | 0) == 3) break;
        HEAP32[$3 + ($$0$i$i189 << 2) >> 2] = 0;
        $$0$i$i189 = $$0$i$i189 + 1 | 0;
       }
       if ($$0159$off0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($3, 15191);
       if ($24) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 15401) | 0; else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 15151) | 0;
       if ($$0138$off0) {
        __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($8, 15119, $6);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 15405) | 0;
        HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
        HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
        $$0$i$i$i = 0;
        while (1) {
         if (($$0$i$i$i | 0) == 3) break;
         HEAP32[$8 + ($$0$i$i$i << 2) >> 2] = 0;
         $$0$i$i$i = $$0$i$i$i + 1 | 0;
        }
        $96 = HEAP8[$7 + 11 >> 0] | 0;
        $97 = $96 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3, $97 ? HEAP32[$7 >> 2] | 0 : $7, $97 ? HEAP32[$7 + 4 >> 2] | 0 : $96 & 255) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       }
       $105 = HEAP8[$5 + 11 >> 0] | 0;
       $106 = $105 << 24 >> 24 < 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3, $106 ? HEAP32[$5 >> 2] | 0 : $5, $106 ? HEAP32[$5 + 4 >> 2] | 0 : $105 & 255) | 0;
       if ($$0$off0207) {
        __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($8, 15114, $4);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 15117) | 0;
        HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
        HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
        $$0$i$i$i196 = 0;
        while (1) {
         if (($$0$i$i$i196 | 0) == 3) break;
         HEAP32[$8 + ($$0$i$i$i196 << 2) >> 2] = 0;
         $$0$i$i$i196 = $$0$i$i$i196 + 1 | 0;
        }
        $117 = HEAP8[$7 + 11 >> 0] | 0;
        $118 = $117 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3, $118 ? HEAP32[$7 >> 2] | 0 : $7, $118 ? HEAP32[$7 + 4 >> 2] | 0 : $117 & 255) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       };
       HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$9 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
       HEAP32[$9 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
       $$0$i$i202 = 0;
       while (1) {
        if (($$0$i$i202 | 0) == 3) break;
        HEAP32[$3 + ($$0$i$i202 << 2) >> 2] = 0;
        $$0$i$i202 = $$0$i$i202 + 1 | 0;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($7, $9);
       $127 = HEAP32[$$pre$phi225Z2D >> 2] | 0;
       if ($127 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($127, $7);
        HEAP32[$$pre$phi225Z2D >> 2] = (HEAP32[$$pre$phi225Z2D >> 2] | 0) + 24;
       } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $7);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$0150 = $$4164206 + 1 | 0;
       $$3143 = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$1151 = $$0150;
      $$4144 = $$3143;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     if (!$$4144) {
      $$16 = $$1151;
      break L1;
     }
    }
   } while (0);
   $$16 = $0;
  } else $$16 = $0;
 } else $$16 = $0; while (0);
 STACKTOP = sp;
 return $$16 | 0;
}

function _free($0) {
 $0 = $0 | 0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381438 = 0, $$0382$lcssa = 0, $$0382437 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1385$be = 0, $$1385$ph = 0, $$1388 = 0, $$1388$be = 0, $$1388$ph = 0, $$1396 = 0, $$1396$be = 0, $$1396$ph = 0, $$1400 = 0, $$1400$be = 0, $$1400$ph = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre$phi444Z2D = 0, $$pre$phi446Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $205 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $288 = 0, $3 = 0, $300 = 0, $305 = 0, $312 = 0, $313 = 0, $314 = 0, $323 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $84 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0;
 if (!$0) return;
 $2 = $0 + -8 | 0;
 $3 = HEAP32[4355] | 0;
 if ($2 >>> 0 < $3 >>> 0) _abort();
 $6 = HEAP32[$0 + -4 >> 2] | 0;
 $7 = $6 & 3;
 if (($7 | 0) == 1) _abort();
 $9 = $6 & -8;
 $10 = $2 + $9 | 0;
 L10 : do if (!($6 & 1)) {
  $13 = HEAP32[$2 >> 2] | 0;
  if (!$7) return;
  $16 = $2 + (0 - $13) | 0;
  $17 = $13 + $9 | 0;
  if ($16 >>> 0 < $3 >>> 0) _abort();
  if ((HEAP32[4356] | 0) == ($16 | 0)) {
   $105 = $10 + 4 | 0;
   $106 = HEAP32[$105 >> 2] | 0;
   if (($106 & 3 | 0) != 3) {
    $$1 = $16;
    $$1380 = $17;
    $114 = $16;
    break;
   }
   HEAP32[4353] = $17;
   HEAP32[$105 >> 2] = $106 & -2;
   HEAP32[$16 + 4 >> 2] = $17 | 1;
   HEAP32[$16 + $17 >> 2] = $17;
   return;
  }
  $21 = $13 >>> 3;
  if ($13 >>> 0 < 256) {
   $24 = HEAP32[$16 + 8 >> 2] | 0;
   $26 = HEAP32[$16 + 12 >> 2] | 0;
   $28 = 17444 + ($21 << 1 << 2) | 0;
   if (($24 | 0) != ($28 | 0)) {
    if ($3 >>> 0 > $24 >>> 0) _abort();
    if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) _abort();
   }
   if (($26 | 0) == ($24 | 0)) {
    HEAP32[4351] = HEAP32[4351] & ~(1 << $21);
    $$1 = $16;
    $$1380 = $17;
    $114 = $16;
    break;
   }
   if (($26 | 0) == ($28 | 0)) $$pre$phi446Z2D = $26 + 8 | 0; else {
    if ($3 >>> 0 > $26 >>> 0) _abort();
    $41 = $26 + 8 | 0;
    if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) $$pre$phi446Z2D = $41; else _abort();
   }
   HEAP32[$24 + 12 >> 2] = $26;
   HEAP32[$$pre$phi446Z2D >> 2] = $24;
   $$1 = $16;
   $$1380 = $17;
   $114 = $16;
   break;
  }
  $46 = HEAP32[$16 + 24 >> 2] | 0;
  $48 = HEAP32[$16 + 12 >> 2] | 0;
  do if (($48 | 0) == ($16 | 0)) {
   $59 = $16 + 16 | 0;
   $60 = $59 + 4 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   if (!$61) {
    $63 = HEAP32[$59 >> 2] | 0;
    if (!$63) {
     $$3 = 0;
     break;
    } else {
     $$1385$ph = $63;
     $$1388$ph = $59;
    }
   } else {
    $$1385$ph = $61;
    $$1388$ph = $60;
   }
   $$1385 = $$1385$ph;
   $$1388 = $$1388$ph;
   while (1) {
    $65 = $$1385 + 20 | 0;
    $66 = HEAP32[$65 >> 2] | 0;
    if (!$66) {
     $68 = $$1385 + 16 | 0;
     $69 = HEAP32[$68 >> 2] | 0;
     if (!$69) break; else {
      $$1385$be = $69;
      $$1388$be = $68;
     }
    } else {
     $$1385$be = $66;
     $$1388$be = $65;
    }
    $$1385 = $$1385$be;
    $$1388 = $$1388$be;
   }
   if ($3 >>> 0 > $$1388 >>> 0) _abort(); else {
    HEAP32[$$1388 >> 2] = 0;
    $$3 = $$1385;
    break;
   }
  } else {
   $51 = HEAP32[$16 + 8 >> 2] | 0;
   if ($3 >>> 0 > $51 >>> 0) _abort();
   $53 = $51 + 12 | 0;
   if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) _abort();
   $56 = $48 + 8 | 0;
   if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
    HEAP32[$53 >> 2] = $48;
    HEAP32[$56 >> 2] = $51;
    $$3 = $48;
    break;
   } else _abort();
  } while (0);
  if (!$46) {
   $$1 = $16;
   $$1380 = $17;
   $114 = $16;
  } else {
   $74 = HEAP32[$16 + 28 >> 2] | 0;
   $75 = 17708 + ($74 << 2) | 0;
   do if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
    HEAP32[$75 >> 2] = $$3;
    if (!$$3) {
     HEAP32[4352] = HEAP32[4352] & ~(1 << $74);
     $$1 = $16;
     $$1380 = $17;
     $114 = $16;
     break L10;
    }
   } else if ((HEAP32[4355] | 0) >>> 0 > $46 >>> 0) _abort(); else {
    $84 = $46 + 16 | 0;
    HEAP32[((HEAP32[$84 >> 2] | 0) == ($16 | 0) ? $84 : $46 + 20 | 0) >> 2] = $$3;
    if (!$$3) {
     $$1 = $16;
     $$1380 = $17;
     $114 = $16;
     break L10;
    } else break;
   } while (0);
   $89 = HEAP32[4355] | 0;
   if ($89 >>> 0 > $$3 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $46;
   $92 = $16 + 16 | 0;
   $93 = HEAP32[$92 >> 2] | 0;
   do if ($93 | 0) if ($89 >>> 0 > $93 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $93;
    HEAP32[$93 + 24 >> 2] = $$3;
    break;
   } while (0);
   $99 = HEAP32[$92 + 4 >> 2] | 0;
   if (!$99) {
    $$1 = $16;
    $$1380 = $17;
    $114 = $16;
   } else if ((HEAP32[4355] | 0) >>> 0 > $99 >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $99;
    HEAP32[$99 + 24 >> 2] = $$3;
    $$1 = $16;
    $$1380 = $17;
    $114 = $16;
    break;
   }
  }
 } else {
  $$1 = $2;
  $$1380 = $9;
  $114 = $2;
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) _abort();
 $115 = $10 + 4 | 0;
 $116 = HEAP32[$115 >> 2] | 0;
 if (!($116 & 1)) _abort();
 if (!($116 & 2)) {
  if ((HEAP32[4357] | 0) == ($10 | 0)) {
   $124 = (HEAP32[4354] | 0) + $$1380 | 0;
   HEAP32[4354] = $124;
   HEAP32[4357] = $$1;
   HEAP32[$$1 + 4 >> 2] = $124 | 1;
   if (($$1 | 0) != (HEAP32[4356] | 0)) return;
   HEAP32[4356] = 0;
   HEAP32[4353] = 0;
   return;
  }
  if ((HEAP32[4356] | 0) == ($10 | 0)) {
   $132 = (HEAP32[4353] | 0) + $$1380 | 0;
   HEAP32[4353] = $132;
   HEAP32[4356] = $114;
   HEAP32[$$1 + 4 >> 2] = $132 | 1;
   HEAP32[$114 + $132 >> 2] = $132;
   return;
  }
  $137 = ($116 & -8) + $$1380 | 0;
  $138 = $116 >>> 3;
  L111 : do if ($116 >>> 0 < 256) {
   $141 = HEAP32[$10 + 8 >> 2] | 0;
   $143 = HEAP32[$10 + 12 >> 2] | 0;
   $145 = 17444 + ($138 << 1 << 2) | 0;
   if (($141 | 0) != ($145 | 0)) {
    if ((HEAP32[4355] | 0) >>> 0 > $141 >>> 0) _abort();
    if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) _abort();
   }
   if (($143 | 0) == ($141 | 0)) {
    HEAP32[4351] = HEAP32[4351] & ~(1 << $138);
    break;
   }
   if (($143 | 0) == ($145 | 0)) $$pre$phi444Z2D = $143 + 8 | 0; else {
    if ((HEAP32[4355] | 0) >>> 0 > $143 >>> 0) _abort();
    $160 = $143 + 8 | 0;
    if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) $$pre$phi444Z2D = $160; else _abort();
   }
   HEAP32[$141 + 12 >> 2] = $143;
   HEAP32[$$pre$phi444Z2D >> 2] = $141;
  } else {
   $165 = HEAP32[$10 + 24 >> 2] | 0;
   $167 = HEAP32[$10 + 12 >> 2] | 0;
   do if (($167 | 0) == ($10 | 0)) {
    $179 = $10 + 16 | 0;
    $180 = $179 + 4 | 0;
    $181 = HEAP32[$180 >> 2] | 0;
    if (!$181) {
     $183 = HEAP32[$179 >> 2] | 0;
     if (!$183) {
      $$3398 = 0;
      break;
     } else {
      $$1396$ph = $183;
      $$1400$ph = $179;
     }
    } else {
     $$1396$ph = $181;
     $$1400$ph = $180;
    }
    $$1396 = $$1396$ph;
    $$1400 = $$1400$ph;
    while (1) {
     $185 = $$1396 + 20 | 0;
     $186 = HEAP32[$185 >> 2] | 0;
     if (!$186) {
      $188 = $$1396 + 16 | 0;
      $189 = HEAP32[$188 >> 2] | 0;
      if (!$189) break; else {
       $$1396$be = $189;
       $$1400$be = $188;
      }
     } else {
      $$1396$be = $186;
      $$1400$be = $185;
     }
     $$1396 = $$1396$be;
     $$1400 = $$1400$be;
    }
    if ((HEAP32[4355] | 0) >>> 0 > $$1400 >>> 0) _abort(); else {
     HEAP32[$$1400 >> 2] = 0;
     $$3398 = $$1396;
     break;
    }
   } else {
    $170 = HEAP32[$10 + 8 >> 2] | 0;
    if ((HEAP32[4355] | 0) >>> 0 > $170 >>> 0) _abort();
    $173 = $170 + 12 | 0;
    if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) _abort();
    $176 = $167 + 8 | 0;
    if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$173 >> 2] = $167;
     HEAP32[$176 >> 2] = $170;
     $$3398 = $167;
     break;
    } else _abort();
   } while (0);
   if ($165 | 0) {
    $195 = HEAP32[$10 + 28 >> 2] | 0;
    $196 = 17708 + ($195 << 2) | 0;
    do if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$196 >> 2] = $$3398;
     if (!$$3398) {
      HEAP32[4352] = HEAP32[4352] & ~(1 << $195);
      break L111;
     }
    } else if ((HEAP32[4355] | 0) >>> 0 > $165 >>> 0) _abort(); else {
     $205 = $165 + 16 | 0;
     HEAP32[((HEAP32[$205 >> 2] | 0) == ($10 | 0) ? $205 : $165 + 20 | 0) >> 2] = $$3398;
     if (!$$3398) break L111; else break;
    } while (0);
    $210 = HEAP32[4355] | 0;
    if ($210 >>> 0 > $$3398 >>> 0) _abort();
    HEAP32[$$3398 + 24 >> 2] = $165;
    $213 = $10 + 16 | 0;
    $214 = HEAP32[$213 >> 2] | 0;
    do if ($214 | 0) if ($210 >>> 0 > $214 >>> 0) _abort(); else {
     HEAP32[$$3398 + 16 >> 2] = $214;
     HEAP32[$214 + 24 >> 2] = $$3398;
     break;
    } while (0);
    $220 = HEAP32[$213 + 4 >> 2] | 0;
    if ($220 | 0) if ((HEAP32[4355] | 0) >>> 0 > $220 >>> 0) _abort(); else {
     HEAP32[$$3398 + 20 >> 2] = $220;
     HEAP32[$220 + 24 >> 2] = $$3398;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1;
  HEAP32[$114 + $137 >> 2] = $137;
  if (($$1 | 0) == (HEAP32[4356] | 0)) {
   HEAP32[4353] = $137;
   return;
  } else $$2 = $137;
 } else {
  HEAP32[$115 >> 2] = $116 & -2;
  HEAP32[$$1 + 4 >> 2] = $$1380 | 1;
  HEAP32[$114 + $$1380 >> 2] = $$1380;
  $$2 = $$1380;
 }
 $235 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $238 = 17444 + ($235 << 1 << 2) | 0;
  $239 = HEAP32[4351] | 0;
  $240 = 1 << $235;
  if (!($239 & $240)) {
   HEAP32[4351] = $239 | $240;
   $$0401 = $238;
   $$pre$phiZ2D = $238 + 8 | 0;
  } else {
   $244 = $238 + 8 | 0;
   $245 = HEAP32[$244 >> 2] | 0;
   if ((HEAP32[4355] | 0) >>> 0 > $245 >>> 0) _abort(); else {
    $$0401 = $245;
    $$pre$phiZ2D = $244;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$$0401 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$0401;
  HEAP32[$$1 + 12 >> 2] = $238;
  return;
 }
 $251 = $$2 >>> 8;
 if (!$251) $$0394 = 0; else if ($$2 >>> 0 > 16777215) $$0394 = 31; else {
  $256 = ($251 + 1048320 | 0) >>> 16 & 8;
  $257 = $251 << $256;
  $260 = ($257 + 520192 | 0) >>> 16 & 4;
  $262 = $257 << $260;
  $265 = ($262 + 245760 | 0) >>> 16 & 2;
  $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0;
  $$0394 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1;
 }
 $276 = 17708 + ($$0394 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $$0394;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $280 = HEAP32[4352] | 0;
 $281 = 1 << $$0394;
 L197 : do if (!($280 & $281)) {
  HEAP32[4352] = $280 | $281;
  HEAP32[$276 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $276;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
 } else {
  $288 = HEAP32[$276 >> 2] | 0;
  L200 : do if ((HEAP32[$288 + 4 >> 2] & -8 | 0) == ($$2 | 0)) $$0382$lcssa = $288; else {
   $$0381438 = $$2 << (($$0394 | 0) == 31 ? 0 : 25 - ($$0394 >>> 1) | 0);
   $$0382437 = $288;
   while (1) {
    $305 = $$0382437 + 16 + ($$0381438 >>> 31 << 2) | 0;
    $300 = HEAP32[$305 >> 2] | 0;
    if (!$300) break;
    if ((HEAP32[$300 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     $$0382$lcssa = $300;
     break L200;
    } else {
     $$0381438 = $$0381438 << 1;
     $$0382437 = $300;
    }
   }
   if ((HEAP32[4355] | 0) >>> 0 > $305 >>> 0) _abort(); else {
    HEAP32[$305 >> 2] = $$1;
    HEAP32[$$1 + 24 >> 2] = $$0382437;
    HEAP32[$$1 + 12 >> 2] = $$1;
    HEAP32[$$1 + 8 >> 2] = $$1;
    break L197;
   }
  } while (0);
  $312 = $$0382$lcssa + 8 | 0;
  $313 = HEAP32[$312 >> 2] | 0;
  $314 = HEAP32[4355] | 0;
  if ($314 >>> 0 <= $313 >>> 0 & $314 >>> 0 <= $$0382$lcssa >>> 0) {
   HEAP32[$313 + 12 >> 2] = $$1;
   HEAP32[$312 >> 2] = $$1;
   HEAP32[$$1 + 8 >> 2] = $313;
   HEAP32[$$1 + 12 >> 2] = $$0382$lcssa;
   HEAP32[$$1 + 24 >> 2] = 0;
   break;
  } else _abort();
 } while (0);
 $323 = (HEAP32[4359] | 0) + -1 | 0;
 HEAP32[4359] = $323;
 if ($323 | 0) return;
 $$0211$in$i = 17860;
 while (1) {
  $$0211$i = HEAP32[$$0211$in$i >> 2] | 0;
  if (!$$0211$i) break; else $$0211$in$i = $$0211$i + 8 | 0;
 }
 HEAP32[4359] = -1;
 return;
}

function _arLabelingSubEWZ($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0373 = 0, $$0374 = 0, $$0376 = 0, $$0378 = 0, $$0380 = 0, $$0384 = 0, $$0387 = 0, $$0392 = 0, $$0395 = 0, $$0399 = 0, $$1 = 0, $$1375 = 0, $$1377 = 0, $$1379 = 0, $$1381 = 0, $$1385 = 0, $$1388 = 0, $$1393 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$2382 = 0, $$2386 = 0, $$2389 = 0, $$2394 = 0, $$2397 = 0, $$3 = 0, $$3383 = 0, $$3390 = 0, $$3398 = 0, $$4 = 0, $$4391 = 0, $$5 = 0, $$6 = 0, $103 = 0, $106 = 0, $121 = 0, $123 = 0, $125 = 0, $129 = 0, $13 = 0, $133 = 0, $136 = 0, $138 = 0, $142 = 0, $146 = 0, $150 = 0, $155 = 0, $157 = 0, $161 = 0, $165 = 0, $169 = 0, $175 = 0, $178 = 0, $180 = 0, $184 = 0, $188 = 0, $19 = 0, $192 = 0, $195 = 0, $20 = 0, $200 = 0, $224 = 0, $226 = 0, $232 = 0, $235 = 0, $236 = 0, $242 = 0, $254 = 0, $255 = 0, $258 = 0, $265 = 0, $266 = 0, $27 = 0, $274 = 0, $277 = 0, $278 = 0, $282 = 0, $285 = 0, $289 = 0, $292 = 0, $296 = 0, $299 = 0, $303 = 0, $306 = 0, $310 = 0.0, $311 = 0, $312 = 0, $316 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $43 = 0, $47 = 0, $5 = 0, $53 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $65 = 0, $80 = 0, $82 = 0, $84 = 0, $88 = 0, $92 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0376 = $5;
 $$0387 = 0;
 $$0395 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 while (1) {
  if (($$0387 | 0) >= ($1 | 0)) break;
  HEAP16[$$0395 >> 1] = 0;
  HEAP16[$$0376 >> 1] = 0;
  $$0376 = $$0376 + 2 | 0;
  $$0387 = $$0387 + 1 | 0;
  $$0395 = $$0395 + 2 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1377 = $5;
 $$1388 = 0;
 $$1396 = $5 + ($13 << 1) | 0;
 while (1) {
  if (($$1388 | 0) >= ($2 | 0)) break;
  HEAP16[$$1396 >> 1] = 0;
  HEAP16[$$1377 >> 1] = 0;
  $$1377 = $$1377 + ($1 << 1) | 0;
  $$1388 = $$1388 + 1 | 0;
  $$1396 = $$1396 + ($1 << 1) | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $27 = 0 - $1 | 0;
 $$0373 = $0 + $20 | 0;
 $$0374 = $3 + $20 | 0;
 $$0384 = 1;
 $$0392 = 0;
 $$0399 = (HEAP32[$4 + 4 >> 2] | 0) + $20 | 0;
 $$2397 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0384 | 0) >= ($6 | 0)) {
   label = 59;
   break;
  }
  $$1 = $$0373;
  $$1375 = $$0374;
  $$1393 = $$0392;
  $$1400 = $$0399;
  $$2389 = 1;
  $$3398 = $$2397;
  while (1) {
   if (($$2389 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0) > (HEAPU8[$$1375 >> 0] | 0)) {
    HEAP8[$$1400 >> 0] = -1;
    $33 = $$3398 + ($27 << 1) | 0;
    $34 = HEAP16[$33 >> 1] | 0;
    if ($34 << 16 >> 16 > 0) {
     HEAP16[$$3398 >> 1] = $34;
     $37 = ($34 << 16 >> 16) * 7 | 0;
     $39 = $4 + 1310736 + ($37 + -7 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1;
     $43 = $4 + 1310736 + ($37 + -6 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $$2389;
     $47 = $4 + 1310736 + ($37 + -5 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($37 + -1 << 2) >> 2] = $$0384;
     $$2394 = $$1393;
     break;
    }
    $53 = HEAP16[$33 + 2 >> 1] | 0;
    $54 = $53 << 16 >> 16;
    $57 = HEAP16[$33 + -2 >> 1] | 0;
    $58 = $57 << 16 >> 16;
    $59 = $57 << 16 >> 16 > 0;
    if ($53 << 16 >> 16 <= 0) {
     if ($59) {
      HEAP16[$$3398 >> 1] = $57;
      $155 = $58 * 7 | 0;
      $157 = $4 + 1310736 + ($155 + -7 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + 1;
      $161 = $4 + 1310736 + ($155 + -6 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $$2389;
      $165 = $4 + 1310736 + ($155 + -5 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + $$0384;
      $169 = $4 + 1310736 + ($155 + -3 << 2) | 0;
      if ((HEAP32[$169 >> 2] | 0) < ($$2389 | 0)) HEAP32[$169 >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($155 + -1 << 2) >> 2] = $$0384;
      $$2394 = $$1393;
      break;
     }
     $175 = HEAP16[$$3398 + -2 >> 1] | 0;
     if ($175 << 16 >> 16 > 0) {
      HEAP16[$$3398 >> 1] = $175;
      $178 = ($175 << 16 >> 16) * 7 | 0;
      $180 = $4 + 1310736 + ($178 + -7 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + 1;
      $184 = $4 + 1310736 + ($178 + -6 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $$2389;
      $188 = $4 + 1310736 + ($178 + -5 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + $$0384;
      $192 = $4 + 1310736 + ($178 + -3 << 2) | 0;
      if ((HEAP32[$192 >> 2] | 0) >= ($$2389 | 0)) {
       $$2394 = $$1393;
       break;
      }
      HEAP32[$192 >> 2] = $$2389;
      $$2394 = $$1393;
      break;
     } else {
      $195 = $$1393 + 1 | 0;
      if (($$1393 | 0) > 32767) {
       label = 54;
       break L9;
      }
      HEAP16[$$3398 >> 1] = $195;
      HEAP32[$4 + 1179664 + ($$1393 << 2) >> 2] = $195 << 16 >> 16;
      $200 = $$1393 * 7 | 0;
      HEAP32[$4 + 1310736 + ($200 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($200 + 1 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($200 + 2 << 2) >> 2] = $$0384;
      HEAP32[$4 + 1310736 + ($200 + 3 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($200 + 4 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($200 + 5 << 2) >> 2] = $$0384;
      HEAP32[$4 + 1310736 + ($200 + 6 << 2) >> 2] = $$0384;
      $$2394 = $195;
      break;
     }
    }
    if ($59) {
     $62 = HEAP32[$4 + 1179664 + ($54 + -1 << 2) >> 2] | 0;
     $65 = HEAP32[$4 + 1179664 + ($58 + -1 << 2) >> 2] | 0;
     L36 : do if (($62 | 0) > ($65 | 0)) {
      HEAP16[$$3398 >> 1] = $65;
      $$0378 = $19;
      $$0380 = 0;
      while (1) {
       if (($$0380 | 0) >= ($$1393 | 0)) {
        $80 = $65;
        break L36;
       }
       if ((HEAP32[$$0378 >> 2] | 0) == ($62 | 0)) HEAP32[$$0378 >> 2] = $65;
       $$0378 = $$0378 + 4 | 0;
       $$0380 = $$0380 + 1 | 0;
      }
     } else {
      HEAP16[$$3398 >> 1] = $62;
      if (($62 | 0) < ($65 | 0)) {
       $$1379 = $19;
       $$1381 = 0;
       while (1) {
        if (($$1381 | 0) >= ($$1393 | 0)) {
         $80 = $62;
         break L36;
        }
        if ((HEAP32[$$1379 >> 2] | 0) == ($65 | 0)) HEAP32[$$1379 >> 2] = $62;
        $$1379 = $$1379 + 4 | 0;
        $$1381 = $$1381 + 1 | 0;
       }
      } else $80 = $62;
     } while (0);
     $82 = ($80 << 16 >> 16) * 7 | 0;
     $84 = $4 + 1310736 + ($82 + -7 << 2) | 0;
     HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + 1;
     $88 = $4 + 1310736 + ($82 + -6 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + $$2389;
     $92 = $4 + 1310736 + ($82 + -5 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($82 + -1 << 2) >> 2] = $$0384;
     $$2394 = $$1393;
     break;
    }
    $98 = HEAP16[$$3398 + -2 >> 1] | 0;
    if ($98 << 16 >> 16 <= 0) {
     HEAP16[$$3398 >> 1] = $53;
     $136 = $54 * 7 | 0;
     $138 = $4 + 1310736 + ($136 + -7 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + 1;
     $142 = $4 + 1310736 + ($136 + -6 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$2389;
     $146 = $4 + 1310736 + ($136 + -5 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $$0384;
     $150 = $4 + 1310736 + ($136 + -4 << 2) | 0;
     if ((HEAP32[$150 >> 2] | 0) > ($$2389 | 0)) HEAP32[$150 >> 2] = $$2389;
     HEAP32[$4 + 1310736 + ($136 + -1 << 2) >> 2] = $$0384;
     $$2394 = $$1393;
     break;
    }
    $103 = HEAP32[$4 + 1179664 + ($54 + -1 << 2) >> 2] | 0;
    $106 = HEAP32[$4 + 1179664 + (($98 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L60 : do if (($103 | 0) > ($106 | 0)) {
     HEAP16[$$3398 >> 1] = $106;
     $$2 = $19;
     $$2382 = 0;
     while (1) {
      if (($$2382 | 0) >= ($$1393 | 0)) {
       $121 = $106;
       break L60;
      }
      if ((HEAP32[$$2 >> 2] | 0) == ($103 | 0)) HEAP32[$$2 >> 2] = $106;
      $$2 = $$2 + 4 | 0;
      $$2382 = $$2382 + 1 | 0;
     }
    } else {
     HEAP16[$$3398 >> 1] = $103;
     if (($103 | 0) < ($106 | 0)) {
      $$3 = $19;
      $$3383 = 0;
      while (1) {
       if (($$3383 | 0) >= ($$1393 | 0)) {
        $121 = $103;
        break L60;
       }
       if ((HEAP32[$$3 >> 2] | 0) == ($106 | 0)) HEAP32[$$3 >> 2] = $103;
       $$3 = $$3 + 4 | 0;
       $$3383 = $$3383 + 1 | 0;
      }
     } else $121 = $103;
    } while (0);
    $123 = ($121 << 16 >> 16) * 7 | 0;
    $125 = $4 + 1310736 + ($123 + -7 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + 1;
    $129 = $4 + 1310736 + ($123 + -6 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + $$2389;
    $133 = $4 + 1310736 + ($123 + -5 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $$0384;
    $$2394 = $$1393;
   } else {
    HEAP16[$$3398 >> 1] = 0;
    HEAP8[$$1400 >> 0] = 0;
    $$2394 = $$1393;
   } while (0);
   $$1 = $$1 + 1 | 0;
   $$1375 = $$1375 + 1 | 0;
   $$1393 = $$2394;
   $$1400 = $$1400 + 1 | 0;
   $$2389 = $$2389 + 1 | 0;
   $$3398 = $$3398 + 2 | 0;
  }
  $$0373 = $$1 + 2 | 0;
  $$0374 = $$1375 + 2 | 0;
  $$0384 = $$0384 + 1 | 0;
  $$0392 = $$1393;
  $$0399 = $$1400 + 2 | 0;
  $$2397 = $$3398 + 4 | 0;
 }
 L80 : do if ((label | 0) == 54) {
  _arLog(0, 3, 3524, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 59) {
  $224 = $4 + 12 | 0;
  $$1385 = 1;
  $$3390 = 1;
  $$4 = $19;
  while (1) {
   if (($$3390 | 0) > ($$0392 | 0)) break;
   $226 = HEAP32[$$4 >> 2] | 0;
   if (($226 | 0) == ($$3390 | 0)) {
    $$2386 = $$1385 + 1 | 0;
    $232 = $$1385;
   } else {
    $$2386 = $$1385;
    $232 = HEAP32[$4 + 1179664 + ($226 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $232;
   $$1385 = $$2386;
   $$3390 = $$3390 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $235 = $4 + 8 | 0;
  $236 = $$1385 + -1 | 0;
  HEAP32[$235 >> 2] = $236;
  if (!$236) $$0 = 0; else {
   _memset($224 | 0, 0, $236 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $236 << 4 | 0) | 0;
   $$4391 = 0;
   while (1) {
    if (($$4391 | 0) >= ($236 | 0)) break;
    $242 = $$4391 << 2;
    HEAP32[$4 + 131084 + ($242 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($242 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($242 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($242 | 3) << 2) >> 2] = 0;
    $$4391 = $$4391 + 1 | 0;
   }
   $$5 = 0;
   while (1) {
    if (($$5 | 0) >= ($$0392 | 0)) break;
    $254 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $255 = $$5 * 7 | 0;
    $258 = $4 + 12 + ($254 << 2) | 0;
    HEAP32[$258 >> 2] = (HEAP32[$258 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($255 << 2) >> 2] | 0);
    $265 = $254 << 1;
    $266 = $4 + 655376 + ($265 << 3) | 0;
    HEAPF64[$266 >> 3] = +HEAPF64[$266 >> 3] + +(HEAP32[$4 + 1310736 + ($255 + 1 << 2) >> 2] | 0);
    $274 = $4 + 655376 + (($265 | 1) << 3) | 0;
    HEAPF64[$274 >> 3] = +HEAPF64[$274 >> 3] + +(HEAP32[$4 + 1310736 + ($255 + 2 << 2) >> 2] | 0);
    $277 = $254 << 2;
    $278 = $4 + 131084 + ($277 << 2) | 0;
    $282 = HEAP32[$4 + 1310736 + ($255 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$278 >> 2] | 0) > ($282 | 0)) HEAP32[$278 >> 2] = $282;
    $285 = $4 + 131084 + (($277 | 1) << 2) | 0;
    $289 = HEAP32[$4 + 1310736 + ($255 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$285 >> 2] | 0) < ($289 | 0)) HEAP32[$285 >> 2] = $289;
    $292 = $4 + 131084 + (($277 | 2) << 2) | 0;
    $296 = HEAP32[$4 + 1310736 + ($255 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) > ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $299 = $4 + 131084 + (($277 | 3) << 2) | 0;
    $303 = HEAP32[$4 + 1310736 + ($255 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$299 >> 2] | 0) < ($303 | 0)) HEAP32[$299 >> 2] = $303;
    $$5 = $$5 + 1 | 0;
   }
   $306 = HEAP32[$235 >> 2] | 0;
   $$6 = 0;
   while (1) {
    if (($$6 | 0) >= ($306 | 0)) {
     $$0 = 0;
     break L80;
    }
    $310 = +(HEAP32[$4 + 12 + ($$6 << 2) >> 2] | 0);
    $311 = $$6 << 1;
    $312 = $4 + 655376 + ($311 << 3) | 0;
    HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] / $310;
    $316 = $4 + 655376 + (($311 | 1) << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / $310;
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBZ($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0373 = 0, $$0374 = 0, $$0376 = 0, $$0378 = 0, $$0380 = 0, $$0384 = 0, $$0387 = 0, $$0392 = 0, $$0395 = 0, $$0399 = 0, $$1 = 0, $$1375 = 0, $$1377 = 0, $$1379 = 0, $$1381 = 0, $$1385 = 0, $$1388 = 0, $$1393 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$2382 = 0, $$2386 = 0, $$2389 = 0, $$2394 = 0, $$2397 = 0, $$3 = 0, $$3383 = 0, $$3390 = 0, $$3398 = 0, $$4 = 0, $$4391 = 0, $$5 = 0, $$6 = 0, $103 = 0, $106 = 0, $121 = 0, $123 = 0, $125 = 0, $129 = 0, $13 = 0, $133 = 0, $136 = 0, $138 = 0, $142 = 0, $146 = 0, $150 = 0, $155 = 0, $157 = 0, $161 = 0, $165 = 0, $169 = 0, $175 = 0, $178 = 0, $180 = 0, $184 = 0, $188 = 0, $19 = 0, $192 = 0, $195 = 0, $20 = 0, $200 = 0, $224 = 0, $226 = 0, $232 = 0, $235 = 0, $236 = 0, $242 = 0, $254 = 0, $255 = 0, $258 = 0, $265 = 0, $266 = 0, $27 = 0, $274 = 0, $277 = 0, $278 = 0, $282 = 0, $285 = 0, $289 = 0, $292 = 0, $296 = 0, $299 = 0, $303 = 0, $306 = 0, $310 = 0.0, $311 = 0, $312 = 0, $316 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $43 = 0, $47 = 0, $5 = 0, $53 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $65 = 0, $80 = 0, $82 = 0, $84 = 0, $88 = 0, $92 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0376 = $5;
 $$0387 = 0;
 $$0395 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 while (1) {
  if (($$0387 | 0) >= ($1 | 0)) break;
  HEAP16[$$0395 >> 1] = 0;
  HEAP16[$$0376 >> 1] = 0;
  $$0376 = $$0376 + 2 | 0;
  $$0387 = $$0387 + 1 | 0;
  $$0395 = $$0395 + 2 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1377 = $5;
 $$1388 = 0;
 $$1396 = $5 + ($13 << 1) | 0;
 while (1) {
  if (($$1388 | 0) >= ($2 | 0)) break;
  HEAP16[$$1396 >> 1] = 0;
  HEAP16[$$1377 >> 1] = 0;
  $$1377 = $$1377 + ($1 << 1) | 0;
  $$1388 = $$1388 + 1 | 0;
  $$1396 = $$1396 + ($1 << 1) | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $27 = 0 - $1 | 0;
 $$0373 = $0 + $20 | 0;
 $$0374 = $3 + $20 | 0;
 $$0384 = 1;
 $$0392 = 0;
 $$0399 = (HEAP32[$4 + 4 >> 2] | 0) + $20 | 0;
 $$2397 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0384 | 0) >= ($6 | 0)) {
   label = 59;
   break;
  }
  $$1 = $$0373;
  $$1375 = $$0374;
  $$1393 = $$0392;
  $$1400 = $$0399;
  $$2389 = 1;
  $$3398 = $$2397;
  while (1) {
   if (($$2389 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0) > (HEAPU8[$$1375 >> 0] | 0)) {
    HEAP16[$$3398 >> 1] = 0;
    HEAP8[$$1400 >> 0] = 0;
    $$2394 = $$1393;
   } else {
    HEAP8[$$1400 >> 0] = -1;
    $33 = $$3398 + ($27 << 1) | 0;
    $34 = HEAP16[$33 >> 1] | 0;
    if ($34 << 16 >> 16 > 0) {
     HEAP16[$$3398 >> 1] = $34;
     $37 = ($34 << 16 >> 16) * 7 | 0;
     $39 = $4 + 1310736 + ($37 + -7 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1;
     $43 = $4 + 1310736 + ($37 + -6 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $$2389;
     $47 = $4 + 1310736 + ($37 + -5 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($37 + -1 << 2) >> 2] = $$0384;
     $$2394 = $$1393;
     break;
    }
    $53 = HEAP16[$33 + 2 >> 1] | 0;
    $54 = $53 << 16 >> 16;
    $57 = HEAP16[$33 + -2 >> 1] | 0;
    $58 = $57 << 16 >> 16;
    $59 = $57 << 16 >> 16 > 0;
    if ($53 << 16 >> 16 <= 0) {
     if ($59) {
      HEAP16[$$3398 >> 1] = $57;
      $155 = $58 * 7 | 0;
      $157 = $4 + 1310736 + ($155 + -7 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + 1;
      $161 = $4 + 1310736 + ($155 + -6 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $$2389;
      $165 = $4 + 1310736 + ($155 + -5 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + $$0384;
      $169 = $4 + 1310736 + ($155 + -3 << 2) | 0;
      if ((HEAP32[$169 >> 2] | 0) < ($$2389 | 0)) HEAP32[$169 >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($155 + -1 << 2) >> 2] = $$0384;
      $$2394 = $$1393;
      break;
     }
     $175 = HEAP16[$$3398 + -2 >> 1] | 0;
     if ($175 << 16 >> 16 > 0) {
      HEAP16[$$3398 >> 1] = $175;
      $178 = ($175 << 16 >> 16) * 7 | 0;
      $180 = $4 + 1310736 + ($178 + -7 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + 1;
      $184 = $4 + 1310736 + ($178 + -6 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $$2389;
      $188 = $4 + 1310736 + ($178 + -5 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + $$0384;
      $192 = $4 + 1310736 + ($178 + -3 << 2) | 0;
      if ((HEAP32[$192 >> 2] | 0) >= ($$2389 | 0)) {
       $$2394 = $$1393;
       break;
      }
      HEAP32[$192 >> 2] = $$2389;
      $$2394 = $$1393;
      break;
     } else {
      $195 = $$1393 + 1 | 0;
      if (($$1393 | 0) > 32767) {
       label = 54;
       break L9;
      }
      HEAP16[$$3398 >> 1] = $195;
      HEAP32[$4 + 1179664 + ($$1393 << 2) >> 2] = $195 << 16 >> 16;
      $200 = $$1393 * 7 | 0;
      HEAP32[$4 + 1310736 + ($200 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($200 + 1 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($200 + 2 << 2) >> 2] = $$0384;
      HEAP32[$4 + 1310736 + ($200 + 3 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($200 + 4 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($200 + 5 << 2) >> 2] = $$0384;
      HEAP32[$4 + 1310736 + ($200 + 6 << 2) >> 2] = $$0384;
      $$2394 = $195;
      break;
     }
    }
    if ($59) {
     $62 = HEAP32[$4 + 1179664 + ($54 + -1 << 2) >> 2] | 0;
     $65 = HEAP32[$4 + 1179664 + ($58 + -1 << 2) >> 2] | 0;
     L37 : do if (($62 | 0) > ($65 | 0)) {
      HEAP16[$$3398 >> 1] = $65;
      $$0378 = $19;
      $$0380 = 0;
      while (1) {
       if (($$0380 | 0) >= ($$1393 | 0)) {
        $80 = $65;
        break L37;
       }
       if ((HEAP32[$$0378 >> 2] | 0) == ($62 | 0)) HEAP32[$$0378 >> 2] = $65;
       $$0378 = $$0378 + 4 | 0;
       $$0380 = $$0380 + 1 | 0;
      }
     } else {
      HEAP16[$$3398 >> 1] = $62;
      if (($62 | 0) < ($65 | 0)) {
       $$1379 = $19;
       $$1381 = 0;
       while (1) {
        if (($$1381 | 0) >= ($$1393 | 0)) {
         $80 = $62;
         break L37;
        }
        if ((HEAP32[$$1379 >> 2] | 0) == ($65 | 0)) HEAP32[$$1379 >> 2] = $62;
        $$1379 = $$1379 + 4 | 0;
        $$1381 = $$1381 + 1 | 0;
       }
      } else $80 = $62;
     } while (0);
     $82 = ($80 << 16 >> 16) * 7 | 0;
     $84 = $4 + 1310736 + ($82 + -7 << 2) | 0;
     HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + 1;
     $88 = $4 + 1310736 + ($82 + -6 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + $$2389;
     $92 = $4 + 1310736 + ($82 + -5 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($82 + -1 << 2) >> 2] = $$0384;
     $$2394 = $$1393;
     break;
    }
    $98 = HEAP16[$$3398 + -2 >> 1] | 0;
    if ($98 << 16 >> 16 <= 0) {
     HEAP16[$$3398 >> 1] = $53;
     $136 = $54 * 7 | 0;
     $138 = $4 + 1310736 + ($136 + -7 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + 1;
     $142 = $4 + 1310736 + ($136 + -6 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$2389;
     $146 = $4 + 1310736 + ($136 + -5 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $$0384;
     $150 = $4 + 1310736 + ($136 + -4 << 2) | 0;
     if ((HEAP32[$150 >> 2] | 0) > ($$2389 | 0)) HEAP32[$150 >> 2] = $$2389;
     HEAP32[$4 + 1310736 + ($136 + -1 << 2) >> 2] = $$0384;
     $$2394 = $$1393;
     break;
    }
    $103 = HEAP32[$4 + 1179664 + ($54 + -1 << 2) >> 2] | 0;
    $106 = HEAP32[$4 + 1179664 + (($98 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L61 : do if (($103 | 0) > ($106 | 0)) {
     HEAP16[$$3398 >> 1] = $106;
     $$2 = $19;
     $$2382 = 0;
     while (1) {
      if (($$2382 | 0) >= ($$1393 | 0)) {
       $121 = $106;
       break L61;
      }
      if ((HEAP32[$$2 >> 2] | 0) == ($103 | 0)) HEAP32[$$2 >> 2] = $106;
      $$2 = $$2 + 4 | 0;
      $$2382 = $$2382 + 1 | 0;
     }
    } else {
     HEAP16[$$3398 >> 1] = $103;
     if (($103 | 0) < ($106 | 0)) {
      $$3 = $19;
      $$3383 = 0;
      while (1) {
       if (($$3383 | 0) >= ($$1393 | 0)) {
        $121 = $103;
        break L61;
       }
       if ((HEAP32[$$3 >> 2] | 0) == ($106 | 0)) HEAP32[$$3 >> 2] = $103;
       $$3 = $$3 + 4 | 0;
       $$3383 = $$3383 + 1 | 0;
      }
     } else $121 = $103;
    } while (0);
    $123 = ($121 << 16 >> 16) * 7 | 0;
    $125 = $4 + 1310736 + ($123 + -7 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + 1;
    $129 = $4 + 1310736 + ($123 + -6 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + $$2389;
    $133 = $4 + 1310736 + ($123 + -5 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $$0384;
    $$2394 = $$1393;
   } while (0);
   $$1 = $$1 + 1 | 0;
   $$1375 = $$1375 + 1 | 0;
   $$1393 = $$2394;
   $$1400 = $$1400 + 1 | 0;
   $$2389 = $$2389 + 1 | 0;
   $$3398 = $$3398 + 2 | 0;
  }
  $$0373 = $$1 + 2 | 0;
  $$0374 = $$1375 + 2 | 0;
  $$0384 = $$0384 + 1 | 0;
  $$0392 = $$1393;
  $$0399 = $$1400 + 2 | 0;
  $$2397 = $$3398 + 4 | 0;
 }
 L80 : do if ((label | 0) == 54) {
  _arLog(0, 3, 3524, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 59) {
  $224 = $4 + 12 | 0;
  $$1385 = 1;
  $$3390 = 1;
  $$4 = $19;
  while (1) {
   if (($$3390 | 0) > ($$0392 | 0)) break;
   $226 = HEAP32[$$4 >> 2] | 0;
   if (($226 | 0) == ($$3390 | 0)) {
    $$2386 = $$1385 + 1 | 0;
    $232 = $$1385;
   } else {
    $$2386 = $$1385;
    $232 = HEAP32[$4 + 1179664 + ($226 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $232;
   $$1385 = $$2386;
   $$3390 = $$3390 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $235 = $4 + 8 | 0;
  $236 = $$1385 + -1 | 0;
  HEAP32[$235 >> 2] = $236;
  if (!$236) $$0 = 0; else {
   _memset($224 | 0, 0, $236 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $236 << 4 | 0) | 0;
   $$4391 = 0;
   while (1) {
    if (($$4391 | 0) >= ($236 | 0)) break;
    $242 = $$4391 << 2;
    HEAP32[$4 + 131084 + ($242 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($242 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($242 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($242 | 3) << 2) >> 2] = 0;
    $$4391 = $$4391 + 1 | 0;
   }
   $$5 = 0;
   while (1) {
    if (($$5 | 0) >= ($$0392 | 0)) break;
    $254 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $255 = $$5 * 7 | 0;
    $258 = $4 + 12 + ($254 << 2) | 0;
    HEAP32[$258 >> 2] = (HEAP32[$258 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($255 << 2) >> 2] | 0);
    $265 = $254 << 1;
    $266 = $4 + 655376 + ($265 << 3) | 0;
    HEAPF64[$266 >> 3] = +HEAPF64[$266 >> 3] + +(HEAP32[$4 + 1310736 + ($255 + 1 << 2) >> 2] | 0);
    $274 = $4 + 655376 + (($265 | 1) << 3) | 0;
    HEAPF64[$274 >> 3] = +HEAPF64[$274 >> 3] + +(HEAP32[$4 + 1310736 + ($255 + 2 << 2) >> 2] | 0);
    $277 = $254 << 2;
    $278 = $4 + 131084 + ($277 << 2) | 0;
    $282 = HEAP32[$4 + 1310736 + ($255 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$278 >> 2] | 0) > ($282 | 0)) HEAP32[$278 >> 2] = $282;
    $285 = $4 + 131084 + (($277 | 1) << 2) | 0;
    $289 = HEAP32[$4 + 1310736 + ($255 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$285 >> 2] | 0) < ($289 | 0)) HEAP32[$285 >> 2] = $289;
    $292 = $4 + 131084 + (($277 | 2) << 2) | 0;
    $296 = HEAP32[$4 + 1310736 + ($255 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) > ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $299 = $4 + 131084 + (($277 | 3) << 2) | 0;
    $303 = HEAP32[$4 + 1310736 + ($255 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$299 >> 2] | 0) < ($303 | 0)) HEAP32[$299 >> 2] = $303;
    $$5 = $$5 + 1 | 0;
   }
   $306 = HEAP32[$235 >> 2] | 0;
   $$6 = 0;
   while (1) {
    if (($$6 | 0) >= ($306 | 0)) {
     $$0 = 0;
     break L80;
    }
    $310 = +(HEAP32[$4 + 12 + ($$6 << 2) >> 2] | 0);
    $311 = $$6 << 1;
    $312 = $4 + 655376 + ($311 << 3) | 0;
    HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] / $310;
    $316 = $4 + 655376 + (($311 | 1) << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / $310;
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWIC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0369 = 0, $$0370 = 0, $$0372 = 0, $$0374 = 0, $$0378 = 0, $$0382 = 0, $$0385 = 0, $$0390 = 0, $$0393 = 0, $$1 = 0, $$1371 = 0, $$1373 = 0, $$1375 = 0, $$1379 = 0, $$1383 = 0, $$1386 = 0, $$1391 = 0, $$1394 = 0, $$2 = 0, $$2376 = 0, $$2380 = 0, $$2384 = 0, $$2387 = 0, $$2392 = 0, $$3 = 0, $$3377 = 0, $$3381 = 0, $$3388 = 0, $$4 = 0, $$4389 = 0, $$5 = 0, $$6 = 0, $101 = 0, $106 = 0, $109 = 0, $124 = 0, $126 = 0, $128 = 0, $132 = 0, $136 = 0, $139 = 0, $141 = 0, $145 = 0, $149 = 0, $15 = 0, $153 = 0, $158 = 0, $160 = 0, $164 = 0, $168 = 0, $172 = 0, $178 = 0, $181 = 0, $183 = 0, $187 = 0, $191 = 0, $195 = 0, $198 = 0, $203 = 0, $21 = 0, $22 = 0, $226 = 0, $228 = 0, $234 = 0, $237 = 0, $238 = 0, $244 = 0, $256 = 0, $257 = 0, $260 = 0, $267 = 0, $268 = 0, $276 = 0, $279 = 0, $280 = 0, $284 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $30 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0.0, $313 = 0, $314 = 0, $318 = 0, $36 = 0, $37 = 0, $40 = 0, $42 = 0, $46 = 0, $5 = 0, $50 = 0, $56 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $65 = 0, $68 = 0, $7 = 0, $8 = 0, $83 = 0, $85 = 0, $87 = 0, $91 = 0, $95 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0370 = $7;
 $$0372 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0385 = 0;
 while (1) {
  if (($$0385 | 0) >= ($5 | 0)) break;
  HEAP16[$$0372 >> 1] = 0;
  HEAP16[$$0370 >> 1] = 0;
  $$0370 = $$0370 + 2 | 0;
  $$0372 = $$0372 + 2 | 0;
  $$0385 = $$0385 + 1 | 0;
 }
 $15 = $5 + -1 | 0;
 $$1371 = $7;
 $$1373 = $7 + ($15 << 1) | 0;
 $$1386 = 0;
 while (1) {
  if (($$1386 | 0) >= ($6 | 0)) break;
  HEAP16[$$1373 >> 1] = 0;
  HEAP16[$$1371 >> 1] = 0;
  $$1371 = $$1371 + ($5 << 1) | 0;
  $$1373 = $$1373 + ($5 << 1) | 0;
  $$1386 = $$1386 + 1 | 0;
 }
 $21 = $4 + 1179664 | 0;
 $22 = $5 + 1 | 0;
 $30 = 0 - $5 | 0;
 $$0369 = $0 + (($1 << 1) + 2) | 0;
 $$0382 = 1;
 $$0390 = 0;
 $$0393 = (HEAP32[$4 + 4 >> 2] | 0) + $22 | 0;
 $$2 = $7 + ($22 << 1) | 0;
 L9 : while (1) {
  if (($$0382 | 0) >= ($8 | 0)) {
   label = 59;
   break;
  }
  $$1 = $$0369;
  $$1391 = $$0390;
  $$1394 = $$0393;
  $$2387 = 1;
  $$3 = $$2;
  while (1) {
   if (($$2387 | 0) >= ($15 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP8[$$1394 >> 0] = -1;
    $36 = $$3 + ($30 << 1) | 0;
    $37 = HEAP16[$36 >> 1] | 0;
    if ($37 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $37;
     $40 = ($37 << 16 >> 16) * 7 | 0;
     $42 = $4 + 1310736 + ($40 + -7 << 2) | 0;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + 1;
     $46 = $4 + 1310736 + ($40 + -6 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + $$2387;
     $50 = $4 + 1310736 + ($40 + -5 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + $$0382;
     HEAP32[$4 + 1310736 + ($40 + -1 << 2) >> 2] = $$0382;
     $$2392 = $$1391;
     break;
    }
    $56 = HEAP16[$36 + 2 >> 1] | 0;
    $57 = $56 << 16 >> 16;
    $60 = HEAP16[$36 + -2 >> 1] | 0;
    $61 = $60 << 16 >> 16;
    $62 = $60 << 16 >> 16 > 0;
    if ($56 << 16 >> 16 <= 0) {
     if ($62) {
      HEAP16[$$3 >> 1] = $60;
      $158 = $61 * 7 | 0;
      $160 = $4 + 1310736 + ($158 + -7 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + 1;
      $164 = $4 + 1310736 + ($158 + -6 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + $$2387;
      $168 = $4 + 1310736 + ($158 + -5 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + $$0382;
      $172 = $4 + 1310736 + ($158 + -3 << 2) | 0;
      if ((HEAP32[$172 >> 2] | 0) < ($$2387 | 0)) HEAP32[$172 >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($158 + -1 << 2) >> 2] = $$0382;
      $$2392 = $$1391;
      break;
     }
     $178 = HEAP16[$$3 + -2 >> 1] | 0;
     if ($178 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $178;
      $181 = ($178 << 16 >> 16) * 7 | 0;
      $183 = $4 + 1310736 + ($181 + -7 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + 1;
      $187 = $4 + 1310736 + ($181 + -6 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + $$2387;
      $191 = $4 + 1310736 + ($181 + -5 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $$0382;
      $195 = $4 + 1310736 + ($181 + -3 << 2) | 0;
      if ((HEAP32[$195 >> 2] | 0) >= ($$2387 | 0)) {
       $$2392 = $$1391;
       break;
      }
      HEAP32[$195 >> 2] = $$2387;
      $$2392 = $$1391;
      break;
     } else {
      $198 = $$1391 + 1 | 0;
      if (($$1391 | 0) > 32767) {
       label = 54;
       break L9;
      }
      HEAP16[$$3 >> 1] = $198;
      HEAP32[$4 + 1179664 + ($$1391 << 2) >> 2] = $198 << 16 >> 16;
      $203 = $$1391 * 7 | 0;
      HEAP32[$4 + 1310736 + ($203 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($203 + 1 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($203 + 2 << 2) >> 2] = $$0382;
      HEAP32[$4 + 1310736 + ($203 + 3 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($203 + 4 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($203 + 5 << 2) >> 2] = $$0382;
      HEAP32[$4 + 1310736 + ($203 + 6 << 2) >> 2] = $$0382;
      $$2392 = $198;
      break;
     }
    }
    if ($62) {
     $65 = HEAP32[$4 + 1179664 + ($57 + -1 << 2) >> 2] | 0;
     $68 = HEAP32[$4 + 1179664 + ($61 + -1 << 2) >> 2] | 0;
     L36 : do if (($65 | 0) > ($68 | 0)) {
      HEAP16[$$3 >> 1] = $68;
      $$0374 = $21;
      $$0378 = 0;
      while (1) {
       if (($$0378 | 0) >= ($$1391 | 0)) {
        $83 = $68;
        break L36;
       }
       if ((HEAP32[$$0374 >> 2] | 0) == ($65 | 0)) HEAP32[$$0374 >> 2] = $68;
       $$0374 = $$0374 + 4 | 0;
       $$0378 = $$0378 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $65;
      if (($65 | 0) < ($68 | 0)) {
       $$1375 = $21;
       $$1379 = 0;
       while (1) {
        if (($$1379 | 0) >= ($$1391 | 0)) {
         $83 = $65;
         break L36;
        }
        if ((HEAP32[$$1375 >> 2] | 0) == ($68 | 0)) HEAP32[$$1375 >> 2] = $65;
        $$1375 = $$1375 + 4 | 0;
        $$1379 = $$1379 + 1 | 0;
       }
      } else $83 = $65;
     } while (0);
     $85 = ($83 << 16 >> 16) * 7 | 0;
     $87 = $4 + 1310736 + ($85 + -7 << 2) | 0;
     HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + 1;
     $91 = $4 + 1310736 + ($85 + -6 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + $$2387;
     $95 = $4 + 1310736 + ($85 + -5 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $$0382;
     HEAP32[$4 + 1310736 + ($85 + -1 << 2) >> 2] = $$0382;
     $$2392 = $$1391;
     break;
    }
    $101 = HEAP16[$$3 + -2 >> 1] | 0;
    if ($101 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $56;
     $139 = $57 * 7 | 0;
     $141 = $4 + 1310736 + ($139 + -7 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + 1;
     $145 = $4 + 1310736 + ($139 + -6 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + $$2387;
     $149 = $4 + 1310736 + ($139 + -5 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $$0382;
     $153 = $4 + 1310736 + ($139 + -4 << 2) | 0;
     if ((HEAP32[$153 >> 2] | 0) > ($$2387 | 0)) HEAP32[$153 >> 2] = $$2387;
     HEAP32[$4 + 1310736 + ($139 + -1 << 2) >> 2] = $$0382;
     $$2392 = $$1391;
     break;
    }
    $106 = HEAP32[$4 + 1179664 + ($57 + -1 << 2) >> 2] | 0;
    $109 = HEAP32[$4 + 1179664 + (($101 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L60 : do if (($106 | 0) > ($109 | 0)) {
     HEAP16[$$3 >> 1] = $109;
     $$2376 = $21;
     $$2380 = 0;
     while (1) {
      if (($$2380 | 0) >= ($$1391 | 0)) {
       $124 = $109;
       break L60;
      }
      if ((HEAP32[$$2376 >> 2] | 0) == ($106 | 0)) HEAP32[$$2376 >> 2] = $109;
      $$2376 = $$2376 + 4 | 0;
      $$2380 = $$2380 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $106;
     if (($106 | 0) < ($109 | 0)) {
      $$3377 = $21;
      $$3381 = 0;
      while (1) {
       if (($$3381 | 0) >= ($$1391 | 0)) {
        $124 = $106;
        break L60;
       }
       if ((HEAP32[$$3377 >> 2] | 0) == ($109 | 0)) HEAP32[$$3377 >> 2] = $106;
       $$3377 = $$3377 + 4 | 0;
       $$3381 = $$3381 + 1 | 0;
      }
     } else $124 = $106;
    } while (0);
    $126 = ($124 << 16 >> 16) * 7 | 0;
    $128 = $4 + 1310736 + ($126 + -7 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + 1;
    $132 = $4 + 1310736 + ($126 + -6 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + $$2387;
    $136 = $4 + 1310736 + ($126 + -5 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $$0382;
    $$2392 = $$1391;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1394 >> 0] = 0;
    $$2392 = $$1391;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1391 = $$2392;
   $$1394 = $$1394 + 1 | 0;
   $$2387 = $$2387 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0369 = $$1 + $1 + 4 | 0;
  $$0382 = $$0382 + 1 | 0;
  $$0390 = $$1391;
  $$0393 = $$1394 + 2 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L80 : do if ((label | 0) == 54) {
  _arLog(0, 3, 3524, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 59) {
  $226 = $4 + 12 | 0;
  $$1383 = 1;
  $$3388 = 1;
  $$4 = $21;
  while (1) {
   if (($$3388 | 0) > ($$0390 | 0)) break;
   $228 = HEAP32[$$4 >> 2] | 0;
   if (($228 | 0) == ($$3388 | 0)) {
    $$2384 = $$1383 + 1 | 0;
    $234 = $$1383;
   } else {
    $$2384 = $$1383;
    $234 = HEAP32[$4 + 1179664 + ($228 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $234;
   $$1383 = $$2384;
   $$3388 = $$3388 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $237 = $4 + 8 | 0;
  $238 = $$1383 + -1 | 0;
  HEAP32[$237 >> 2] = $238;
  if (!$238) $$0 = 0; else {
   _memset($226 | 0, 0, $238 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $238 << 4 | 0) | 0;
   $$4389 = 0;
   while (1) {
    if (($$4389 | 0) >= ($238 | 0)) break;
    $244 = $$4389 << 2;
    HEAP32[$4 + 131084 + ($244 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($244 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($244 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($244 | 3) << 2) >> 2] = 0;
    $$4389 = $$4389 + 1 | 0;
   }
   $$5 = 0;
   while (1) {
    if (($$5 | 0) >= ($$0390 | 0)) break;
    $256 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $257 = $$5 * 7 | 0;
    $260 = $4 + 12 + ($256 << 2) | 0;
    HEAP32[$260 >> 2] = (HEAP32[$260 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($257 << 2) >> 2] | 0);
    $267 = $256 << 1;
    $268 = $4 + 655376 + ($267 << 3) | 0;
    HEAPF64[$268 >> 3] = +HEAPF64[$268 >> 3] + +(HEAP32[$4 + 1310736 + ($257 + 1 << 2) >> 2] | 0);
    $276 = $4 + 655376 + (($267 | 1) << 3) | 0;
    HEAPF64[$276 >> 3] = +HEAPF64[$276 >> 3] + +(HEAP32[$4 + 1310736 + ($257 + 2 << 2) >> 2] | 0);
    $279 = $256 << 2;
    $280 = $4 + 131084 + ($279 << 2) | 0;
    $284 = HEAP32[$4 + 1310736 + ($257 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$280 >> 2] | 0) > ($284 | 0)) HEAP32[$280 >> 2] = $284;
    $287 = $4 + 131084 + (($279 | 1) << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($257 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) < ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $4 + 131084 + (($279 | 2) << 2) | 0;
    $298 = HEAP32[$4 + 1310736 + ($257 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) > ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $4 + 131084 + (($279 | 3) << 2) | 0;
    $305 = HEAP32[$4 + 1310736 + ($257 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) < ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $$5 = $$5 + 1 | 0;
   }
   $308 = HEAP32[$237 >> 2] | 0;
   $$6 = 0;
   while (1) {
    if (($$6 | 0) >= ($308 | 0)) {
     $$0 = 0;
     break L80;
    }
    $312 = +(HEAP32[$4 + 12 + ($$6 << 2) >> 2] | 0);
    $313 = $$6 << 1;
    $314 = $4 + 655376 + ($313 << 3) | 0;
    HEAPF64[$314 >> 3] = +HEAPF64[$314 >> 3] / $312;
    $318 = $4 + 655376 + (($313 | 1) << 3) | 0;
    HEAPF64[$318 >> 3] = +HEAPF64[$318 >> 3] / $312;
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBIC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0369 = 0, $$0370 = 0, $$0372 = 0, $$0374 = 0, $$0378 = 0, $$0382 = 0, $$0385 = 0, $$0390 = 0, $$0393 = 0, $$1 = 0, $$1371 = 0, $$1373 = 0, $$1375 = 0, $$1379 = 0, $$1383 = 0, $$1386 = 0, $$1391 = 0, $$1394 = 0, $$2 = 0, $$2376 = 0, $$2380 = 0, $$2384 = 0, $$2387 = 0, $$2392 = 0, $$3 = 0, $$3377 = 0, $$3381 = 0, $$3388 = 0, $$4 = 0, $$4389 = 0, $$5 = 0, $$6 = 0, $101 = 0, $106 = 0, $109 = 0, $124 = 0, $126 = 0, $128 = 0, $132 = 0, $136 = 0, $139 = 0, $141 = 0, $145 = 0, $149 = 0, $15 = 0, $153 = 0, $158 = 0, $160 = 0, $164 = 0, $168 = 0, $172 = 0, $178 = 0, $181 = 0, $183 = 0, $187 = 0, $191 = 0, $195 = 0, $198 = 0, $203 = 0, $21 = 0, $22 = 0, $226 = 0, $228 = 0, $234 = 0, $237 = 0, $238 = 0, $244 = 0, $256 = 0, $257 = 0, $260 = 0, $267 = 0, $268 = 0, $276 = 0, $279 = 0, $280 = 0, $284 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $30 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0.0, $313 = 0, $314 = 0, $318 = 0, $36 = 0, $37 = 0, $40 = 0, $42 = 0, $46 = 0, $5 = 0, $50 = 0, $56 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $65 = 0, $68 = 0, $7 = 0, $8 = 0, $83 = 0, $85 = 0, $87 = 0, $91 = 0, $95 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0370 = $7;
 $$0372 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0385 = 0;
 while (1) {
  if (($$0385 | 0) >= ($5 | 0)) break;
  HEAP16[$$0372 >> 1] = 0;
  HEAP16[$$0370 >> 1] = 0;
  $$0370 = $$0370 + 2 | 0;
  $$0372 = $$0372 + 2 | 0;
  $$0385 = $$0385 + 1 | 0;
 }
 $15 = $5 + -1 | 0;
 $$1371 = $7;
 $$1373 = $7 + ($15 << 1) | 0;
 $$1386 = 0;
 while (1) {
  if (($$1386 | 0) >= ($6 | 0)) break;
  HEAP16[$$1373 >> 1] = 0;
  HEAP16[$$1371 >> 1] = 0;
  $$1371 = $$1371 + ($5 << 1) | 0;
  $$1373 = $$1373 + ($5 << 1) | 0;
  $$1386 = $$1386 + 1 | 0;
 }
 $21 = $4 + 1179664 | 0;
 $22 = $5 + 1 | 0;
 $30 = 0 - $5 | 0;
 $$0369 = $0 + (($1 << 1) + 2) | 0;
 $$0382 = 1;
 $$0390 = 0;
 $$0393 = (HEAP32[$4 + 4 >> 2] | 0) + $22 | 0;
 $$2 = $7 + ($22 << 1) | 0;
 L9 : while (1) {
  if (($$0382 | 0) >= ($8 | 0)) {
   label = 59;
   break;
  }
  $$1 = $$0369;
  $$1391 = $$0390;
  $$1394 = $$0393;
  $$2387 = 1;
  $$3 = $$2;
  while (1) {
   if (($$2387 | 0) >= ($15 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1394 >> 0] = 0;
    $$2392 = $$1391;
   } else {
    HEAP8[$$1394 >> 0] = -1;
    $36 = $$3 + ($30 << 1) | 0;
    $37 = HEAP16[$36 >> 1] | 0;
    if ($37 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $37;
     $40 = ($37 << 16 >> 16) * 7 | 0;
     $42 = $4 + 1310736 + ($40 + -7 << 2) | 0;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + 1;
     $46 = $4 + 1310736 + ($40 + -6 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + $$2387;
     $50 = $4 + 1310736 + ($40 + -5 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + $$0382;
     HEAP32[$4 + 1310736 + ($40 + -1 << 2) >> 2] = $$0382;
     $$2392 = $$1391;
     break;
    }
    $56 = HEAP16[$36 + 2 >> 1] | 0;
    $57 = $56 << 16 >> 16;
    $60 = HEAP16[$36 + -2 >> 1] | 0;
    $61 = $60 << 16 >> 16;
    $62 = $60 << 16 >> 16 > 0;
    if ($56 << 16 >> 16 <= 0) {
     if ($62) {
      HEAP16[$$3 >> 1] = $60;
      $158 = $61 * 7 | 0;
      $160 = $4 + 1310736 + ($158 + -7 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + 1;
      $164 = $4 + 1310736 + ($158 + -6 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + $$2387;
      $168 = $4 + 1310736 + ($158 + -5 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + $$0382;
      $172 = $4 + 1310736 + ($158 + -3 << 2) | 0;
      if ((HEAP32[$172 >> 2] | 0) < ($$2387 | 0)) HEAP32[$172 >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($158 + -1 << 2) >> 2] = $$0382;
      $$2392 = $$1391;
      break;
     }
     $178 = HEAP16[$$3 + -2 >> 1] | 0;
     if ($178 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $178;
      $181 = ($178 << 16 >> 16) * 7 | 0;
      $183 = $4 + 1310736 + ($181 + -7 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + 1;
      $187 = $4 + 1310736 + ($181 + -6 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + $$2387;
      $191 = $4 + 1310736 + ($181 + -5 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $$0382;
      $195 = $4 + 1310736 + ($181 + -3 << 2) | 0;
      if ((HEAP32[$195 >> 2] | 0) >= ($$2387 | 0)) {
       $$2392 = $$1391;
       break;
      }
      HEAP32[$195 >> 2] = $$2387;
      $$2392 = $$1391;
      break;
     } else {
      $198 = $$1391 + 1 | 0;
      if (($$1391 | 0) > 32767) {
       label = 54;
       break L9;
      }
      HEAP16[$$3 >> 1] = $198;
      HEAP32[$4 + 1179664 + ($$1391 << 2) >> 2] = $198 << 16 >> 16;
      $203 = $$1391 * 7 | 0;
      HEAP32[$4 + 1310736 + ($203 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($203 + 1 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($203 + 2 << 2) >> 2] = $$0382;
      HEAP32[$4 + 1310736 + ($203 + 3 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($203 + 4 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($203 + 5 << 2) >> 2] = $$0382;
      HEAP32[$4 + 1310736 + ($203 + 6 << 2) >> 2] = $$0382;
      $$2392 = $198;
      break;
     }
    }
    if ($62) {
     $65 = HEAP32[$4 + 1179664 + ($57 + -1 << 2) >> 2] | 0;
     $68 = HEAP32[$4 + 1179664 + ($61 + -1 << 2) >> 2] | 0;
     L37 : do if (($65 | 0) > ($68 | 0)) {
      HEAP16[$$3 >> 1] = $68;
      $$0374 = $21;
      $$0378 = 0;
      while (1) {
       if (($$0378 | 0) >= ($$1391 | 0)) {
        $83 = $68;
        break L37;
       }
       if ((HEAP32[$$0374 >> 2] | 0) == ($65 | 0)) HEAP32[$$0374 >> 2] = $68;
       $$0374 = $$0374 + 4 | 0;
       $$0378 = $$0378 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $65;
      if (($65 | 0) < ($68 | 0)) {
       $$1375 = $21;
       $$1379 = 0;
       while (1) {
        if (($$1379 | 0) >= ($$1391 | 0)) {
         $83 = $65;
         break L37;
        }
        if ((HEAP32[$$1375 >> 2] | 0) == ($68 | 0)) HEAP32[$$1375 >> 2] = $65;
        $$1375 = $$1375 + 4 | 0;
        $$1379 = $$1379 + 1 | 0;
       }
      } else $83 = $65;
     } while (0);
     $85 = ($83 << 16 >> 16) * 7 | 0;
     $87 = $4 + 1310736 + ($85 + -7 << 2) | 0;
     HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + 1;
     $91 = $4 + 1310736 + ($85 + -6 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + $$2387;
     $95 = $4 + 1310736 + ($85 + -5 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $$0382;
     HEAP32[$4 + 1310736 + ($85 + -1 << 2) >> 2] = $$0382;
     $$2392 = $$1391;
     break;
    }
    $101 = HEAP16[$$3 + -2 >> 1] | 0;
    if ($101 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $56;
     $139 = $57 * 7 | 0;
     $141 = $4 + 1310736 + ($139 + -7 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + 1;
     $145 = $4 + 1310736 + ($139 + -6 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + $$2387;
     $149 = $4 + 1310736 + ($139 + -5 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $$0382;
     $153 = $4 + 1310736 + ($139 + -4 << 2) | 0;
     if ((HEAP32[$153 >> 2] | 0) > ($$2387 | 0)) HEAP32[$153 >> 2] = $$2387;
     HEAP32[$4 + 1310736 + ($139 + -1 << 2) >> 2] = $$0382;
     $$2392 = $$1391;
     break;
    }
    $106 = HEAP32[$4 + 1179664 + ($57 + -1 << 2) >> 2] | 0;
    $109 = HEAP32[$4 + 1179664 + (($101 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L61 : do if (($106 | 0) > ($109 | 0)) {
     HEAP16[$$3 >> 1] = $109;
     $$2376 = $21;
     $$2380 = 0;
     while (1) {
      if (($$2380 | 0) >= ($$1391 | 0)) {
       $124 = $109;
       break L61;
      }
      if ((HEAP32[$$2376 >> 2] | 0) == ($106 | 0)) HEAP32[$$2376 >> 2] = $109;
      $$2376 = $$2376 + 4 | 0;
      $$2380 = $$2380 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $106;
     if (($106 | 0) < ($109 | 0)) {
      $$3377 = $21;
      $$3381 = 0;
      while (1) {
       if (($$3381 | 0) >= ($$1391 | 0)) {
        $124 = $106;
        break L61;
       }
       if ((HEAP32[$$3377 >> 2] | 0) == ($109 | 0)) HEAP32[$$3377 >> 2] = $106;
       $$3377 = $$3377 + 4 | 0;
       $$3381 = $$3381 + 1 | 0;
      }
     } else $124 = $106;
    } while (0);
    $126 = ($124 << 16 >> 16) * 7 | 0;
    $128 = $4 + 1310736 + ($126 + -7 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + 1;
    $132 = $4 + 1310736 + ($126 + -6 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + $$2387;
    $136 = $4 + 1310736 + ($126 + -5 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $$0382;
    $$2392 = $$1391;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1391 = $$2392;
   $$1394 = $$1394 + 1 | 0;
   $$2387 = $$2387 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0369 = $$1 + $1 + 4 | 0;
  $$0382 = $$0382 + 1 | 0;
  $$0390 = $$1391;
  $$0393 = $$1394 + 2 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L80 : do if ((label | 0) == 54) {
  _arLog(0, 3, 3524, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 59) {
  $226 = $4 + 12 | 0;
  $$1383 = 1;
  $$3388 = 1;
  $$4 = $21;
  while (1) {
   if (($$3388 | 0) > ($$0390 | 0)) break;
   $228 = HEAP32[$$4 >> 2] | 0;
   if (($228 | 0) == ($$3388 | 0)) {
    $$2384 = $$1383 + 1 | 0;
    $234 = $$1383;
   } else {
    $$2384 = $$1383;
    $234 = HEAP32[$4 + 1179664 + ($228 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $234;
   $$1383 = $$2384;
   $$3388 = $$3388 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $237 = $4 + 8 | 0;
  $238 = $$1383 + -1 | 0;
  HEAP32[$237 >> 2] = $238;
  if (!$238) $$0 = 0; else {
   _memset($226 | 0, 0, $238 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $238 << 4 | 0) | 0;
   $$4389 = 0;
   while (1) {
    if (($$4389 | 0) >= ($238 | 0)) break;
    $244 = $$4389 << 2;
    HEAP32[$4 + 131084 + ($244 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($244 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($244 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($244 | 3) << 2) >> 2] = 0;
    $$4389 = $$4389 + 1 | 0;
   }
   $$5 = 0;
   while (1) {
    if (($$5 | 0) >= ($$0390 | 0)) break;
    $256 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $257 = $$5 * 7 | 0;
    $260 = $4 + 12 + ($256 << 2) | 0;
    HEAP32[$260 >> 2] = (HEAP32[$260 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($257 << 2) >> 2] | 0);
    $267 = $256 << 1;
    $268 = $4 + 655376 + ($267 << 3) | 0;
    HEAPF64[$268 >> 3] = +HEAPF64[$268 >> 3] + +(HEAP32[$4 + 1310736 + ($257 + 1 << 2) >> 2] | 0);
    $276 = $4 + 655376 + (($267 | 1) << 3) | 0;
    HEAPF64[$276 >> 3] = +HEAPF64[$276 >> 3] + +(HEAP32[$4 + 1310736 + ($257 + 2 << 2) >> 2] | 0);
    $279 = $256 << 2;
    $280 = $4 + 131084 + ($279 << 2) | 0;
    $284 = HEAP32[$4 + 1310736 + ($257 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$280 >> 2] | 0) > ($284 | 0)) HEAP32[$280 >> 2] = $284;
    $287 = $4 + 131084 + (($279 | 1) << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($257 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) < ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $4 + 131084 + (($279 | 2) << 2) | 0;
    $298 = HEAP32[$4 + 1310736 + ($257 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) > ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $4 + 131084 + (($279 | 3) << 2) | 0;
    $305 = HEAP32[$4 + 1310736 + ($257 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) < ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $$5 = $$5 + 1 | 0;
   }
   $308 = HEAP32[$237 >> 2] | 0;
   $$6 = 0;
   while (1) {
    if (($$6 | 0) >= ($308 | 0)) {
     $$0 = 0;
     break L80;
    }
    $312 = +(HEAP32[$4 + 12 + ($$6 << 2) >> 2] | 0);
    $313 = $$6 << 1;
    $314 = $4 + 655376 + ($313 << 3) | 0;
    HEAPF64[$314 >> 3] = +HEAPF64[$314 >> 3] / $312;
    $318 = $4 + 655376 + (($313 | 1) << 3) | 0;
    HEAPF64[$318 >> 3] = +HEAPF64[$318 >> 3] / $312;
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWRC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0367 = 0, $$0368 = 0, $$0370 = 0, $$0372 = 0, $$0376 = 0, $$0380 = 0, $$0383 = 0, $$0388 = 0, $$0391 = 0, $$1 = 0, $$1369 = 0, $$1371 = 0, $$1373 = 0, $$1377 = 0, $$1381 = 0, $$1384 = 0, $$1389 = 0, $$1392 = 0, $$2 = 0, $$2374 = 0, $$2378 = 0, $$2382 = 0, $$2385 = 0, $$2390 = 0, $$3 = 0, $$3375 = 0, $$3379 = 0, $$3386 = 0, $$4 = 0, $$4387 = 0, $$5 = 0, $$6 = 0, $102 = 0, $105 = 0, $120 = 0, $122 = 0, $124 = 0, $128 = 0, $13 = 0, $132 = 0, $135 = 0, $137 = 0, $141 = 0, $145 = 0, $149 = 0, $154 = 0, $156 = 0, $160 = 0, $164 = 0, $168 = 0, $174 = 0, $177 = 0, $179 = 0, $183 = 0, $187 = 0, $19 = 0, $191 = 0, $194 = 0, $199 = 0, $20 = 0, $221 = 0, $223 = 0, $229 = 0, $232 = 0, $233 = 0, $239 = 0, $251 = 0, $252 = 0, $255 = 0, $26 = 0, $262 = 0, $263 = 0, $271 = 0, $274 = 0, $275 = 0, $279 = 0, $282 = 0, $286 = 0, $289 = 0, $293 = 0, $296 = 0, $300 = 0, $303 = 0, $307 = 0.0, $308 = 0, $309 = 0, $313 = 0, $32 = 0, $33 = 0, $36 = 0, $38 = 0, $42 = 0, $46 = 0, $5 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $64 = 0, $79 = 0, $81 = 0, $83 = 0, $87 = 0, $91 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0368 = $5;
 $$0370 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0383 = 0;
 while (1) {
  if (($$0383 | 0) >= ($1 | 0)) break;
  HEAP16[$$0370 >> 1] = 0;
  HEAP16[$$0368 >> 1] = 0;
  $$0368 = $$0368 + 2 | 0;
  $$0370 = $$0370 + 2 | 0;
  $$0383 = $$0383 + 1 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1369 = $5;
 $$1371 = $5 + ($13 << 1) | 0;
 $$1384 = 0;
 while (1) {
  if (($$1384 | 0) >= ($2 | 0)) break;
  HEAP16[$$1371 >> 1] = 0;
  HEAP16[$$1369 >> 1] = 0;
  $$1369 = $$1369 + ($1 << 1) | 0;
  $$1371 = $$1371 + ($1 << 1) | 0;
  $$1384 = $$1384 + 1 | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $26 = 0 - $1 | 0;
 $$0367 = $0 + $20 | 0;
 $$0380 = 1;
 $$0388 = 0;
 $$0391 = (HEAP32[$4 + 4 >> 2] | 0) + $20 | 0;
 $$2 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0380 | 0) >= ($6 | 0)) {
   label = 59;
   break;
  }
  $$1 = $$0367;
  $$1389 = $$0388;
  $$1392 = $$0391;
  $$2385 = 1;
  $$3 = $$2;
  while (1) {
   if (($$2385 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP8[$$1392 >> 0] = -1;
    $32 = $$3 + ($26 << 1) | 0;
    $33 = HEAP16[$32 >> 1] | 0;
    if ($33 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $33;
     $36 = ($33 << 16 >> 16) * 7 | 0;
     $38 = $4 + 1310736 + ($36 + -7 << 2) | 0;
     HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + 1;
     $42 = $4 + 1310736 + ($36 + -6 << 2) | 0;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + $$2385;
     $46 = $4 + 1310736 + ($36 + -5 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + $$0380;
     HEAP32[$4 + 1310736 + ($36 + -1 << 2) >> 2] = $$0380;
     $$2390 = $$1389;
     break;
    }
    $52 = HEAP16[$32 + 2 >> 1] | 0;
    $53 = $52 << 16 >> 16;
    $56 = HEAP16[$32 + -2 >> 1] | 0;
    $57 = $56 << 16 >> 16;
    $58 = $56 << 16 >> 16 > 0;
    if ($52 << 16 >> 16 <= 0) {
     if ($58) {
      HEAP16[$$3 >> 1] = $56;
      $154 = $57 * 7 | 0;
      $156 = $4 + 1310736 + ($154 + -7 << 2) | 0;
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + 1;
      $160 = $4 + 1310736 + ($154 + -6 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + $$2385;
      $164 = $4 + 1310736 + ($154 + -5 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + $$0380;
      $168 = $4 + 1310736 + ($154 + -3 << 2) | 0;
      if ((HEAP32[$168 >> 2] | 0) < ($$2385 | 0)) HEAP32[$168 >> 2] = $$2385;
      HEAP32[$4 + 1310736 + ($154 + -1 << 2) >> 2] = $$0380;
      $$2390 = $$1389;
      break;
     }
     $174 = HEAP16[$$3 + -2 >> 1] | 0;
     if ($174 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $174;
      $177 = ($174 << 16 >> 16) * 7 | 0;
      $179 = $4 + 1310736 + ($177 + -7 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + 1;
      $183 = $4 + 1310736 + ($177 + -6 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + $$2385;
      $187 = $4 + 1310736 + ($177 + -5 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + $$0380;
      $191 = $4 + 1310736 + ($177 + -3 << 2) | 0;
      if ((HEAP32[$191 >> 2] | 0) >= ($$2385 | 0)) {
       $$2390 = $$1389;
       break;
      }
      HEAP32[$191 >> 2] = $$2385;
      $$2390 = $$1389;
      break;
     } else {
      $194 = $$1389 + 1 | 0;
      if (($$1389 | 0) > 32767) {
       label = 54;
       break L9;
      }
      HEAP16[$$3 >> 1] = $194;
      HEAP32[$4 + 1179664 + ($$1389 << 2) >> 2] = $194 << 16 >> 16;
      $199 = $$1389 * 7 | 0;
      HEAP32[$4 + 1310736 + ($199 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($199 + 1 << 2) >> 2] = $$2385;
      HEAP32[$4 + 1310736 + ($199 + 2 << 2) >> 2] = $$0380;
      HEAP32[$4 + 1310736 + ($199 + 3 << 2) >> 2] = $$2385;
      HEAP32[$4 + 1310736 + ($199 + 4 << 2) >> 2] = $$2385;
      HEAP32[$4 + 1310736 + ($199 + 5 << 2) >> 2] = $$0380;
      HEAP32[$4 + 1310736 + ($199 + 6 << 2) >> 2] = $$0380;
      $$2390 = $194;
      break;
     }
    }
    if ($58) {
     $61 = HEAP32[$4 + 1179664 + ($53 + -1 << 2) >> 2] | 0;
     $64 = HEAP32[$4 + 1179664 + ($57 + -1 << 2) >> 2] | 0;
     L36 : do if (($61 | 0) > ($64 | 0)) {
      HEAP16[$$3 >> 1] = $64;
      $$0372 = $19;
      $$0376 = 0;
      while (1) {
       if (($$0376 | 0) >= ($$1389 | 0)) {
        $79 = $64;
        break L36;
       }
       if ((HEAP32[$$0372 >> 2] | 0) == ($61 | 0)) HEAP32[$$0372 >> 2] = $64;
       $$0372 = $$0372 + 4 | 0;
       $$0376 = $$0376 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $61;
      if (($61 | 0) < ($64 | 0)) {
       $$1373 = $19;
       $$1377 = 0;
       while (1) {
        if (($$1377 | 0) >= ($$1389 | 0)) {
         $79 = $61;
         break L36;
        }
        if ((HEAP32[$$1373 >> 2] | 0) == ($64 | 0)) HEAP32[$$1373 >> 2] = $61;
        $$1373 = $$1373 + 4 | 0;
        $$1377 = $$1377 + 1 | 0;
       }
      } else $79 = $61;
     } while (0);
     $81 = ($79 << 16 >> 16) * 7 | 0;
     $83 = $4 + 1310736 + ($81 + -7 << 2) | 0;
     HEAP32[$83 >> 2] = (HEAP32[$83 >> 2] | 0) + 1;
     $87 = $4 + 1310736 + ($81 + -6 << 2) | 0;
     HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + $$2385;
     $91 = $4 + 1310736 + ($81 + -5 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + $$0380;
     HEAP32[$4 + 1310736 + ($81 + -1 << 2) >> 2] = $$0380;
     $$2390 = $$1389;
     break;
    }
    $97 = HEAP16[$$3 + -2 >> 1] | 0;
    if ($97 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $52;
     $135 = $53 * 7 | 0;
     $137 = $4 + 1310736 + ($135 + -7 << 2) | 0;
     HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + 1;
     $141 = $4 + 1310736 + ($135 + -6 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $$2385;
     $145 = $4 + 1310736 + ($135 + -5 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + $$0380;
     $149 = $4 + 1310736 + ($135 + -4 << 2) | 0;
     if ((HEAP32[$149 >> 2] | 0) > ($$2385 | 0)) HEAP32[$149 >> 2] = $$2385;
     HEAP32[$4 + 1310736 + ($135 + -1 << 2) >> 2] = $$0380;
     $$2390 = $$1389;
     break;
    }
    $102 = HEAP32[$4 + 1179664 + ($53 + -1 << 2) >> 2] | 0;
    $105 = HEAP32[$4 + 1179664 + (($97 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L60 : do if (($102 | 0) > ($105 | 0)) {
     HEAP16[$$3 >> 1] = $105;
     $$2374 = $19;
     $$2378 = 0;
     while (1) {
      if (($$2378 | 0) >= ($$1389 | 0)) {
       $120 = $105;
       break L60;
      }
      if ((HEAP32[$$2374 >> 2] | 0) == ($102 | 0)) HEAP32[$$2374 >> 2] = $105;
      $$2374 = $$2374 + 4 | 0;
      $$2378 = $$2378 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $102;
     if (($102 | 0) < ($105 | 0)) {
      $$3375 = $19;
      $$3379 = 0;
      while (1) {
       if (($$3379 | 0) >= ($$1389 | 0)) {
        $120 = $102;
        break L60;
       }
       if ((HEAP32[$$3375 >> 2] | 0) == ($105 | 0)) HEAP32[$$3375 >> 2] = $102;
       $$3375 = $$3375 + 4 | 0;
       $$3379 = $$3379 + 1 | 0;
      }
     } else $120 = $102;
    } while (0);
    $122 = ($120 << 16 >> 16) * 7 | 0;
    $124 = $4 + 1310736 + ($122 + -7 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + 1;
    $128 = $4 + 1310736 + ($122 + -6 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + $$2385;
    $132 = $4 + 1310736 + ($122 + -5 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + $$0380;
    $$2390 = $$1389;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1392 >> 0] = 0;
    $$2390 = $$1389;
   } while (0);
   $$1 = $$1 + 1 | 0;
   $$1389 = $$2390;
   $$1392 = $$1392 + 1 | 0;
   $$2385 = $$2385 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0367 = $$1 + 2 | 0;
  $$0380 = $$0380 + 1 | 0;
  $$0388 = $$1389;
  $$0391 = $$1392 + 2 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L80 : do if ((label | 0) == 54) {
  _arLog(0, 3, 3524, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 59) {
  $221 = $4 + 12 | 0;
  $$1381 = 1;
  $$3386 = 1;
  $$4 = $19;
  while (1) {
   if (($$3386 | 0) > ($$0388 | 0)) break;
   $223 = HEAP32[$$4 >> 2] | 0;
   if (($223 | 0) == ($$3386 | 0)) {
    $$2382 = $$1381 + 1 | 0;
    $229 = $$1381;
   } else {
    $$2382 = $$1381;
    $229 = HEAP32[$4 + 1179664 + ($223 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $229;
   $$1381 = $$2382;
   $$3386 = $$3386 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $232 = $4 + 8 | 0;
  $233 = $$1381 + -1 | 0;
  HEAP32[$232 >> 2] = $233;
  if (!$233) $$0 = 0; else {
   _memset($221 | 0, 0, $233 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $233 << 4 | 0) | 0;
   $$4387 = 0;
   while (1) {
    if (($$4387 | 0) >= ($233 | 0)) break;
    $239 = $$4387 << 2;
    HEAP32[$4 + 131084 + ($239 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($239 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($239 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($239 | 3) << 2) >> 2] = 0;
    $$4387 = $$4387 + 1 | 0;
   }
   $$5 = 0;
   while (1) {
    if (($$5 | 0) >= ($$0388 | 0)) break;
    $251 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $252 = $$5 * 7 | 0;
    $255 = $4 + 12 + ($251 << 2) | 0;
    HEAP32[$255 >> 2] = (HEAP32[$255 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($252 << 2) >> 2] | 0);
    $262 = $251 << 1;
    $263 = $4 + 655376 + ($262 << 3) | 0;
    HEAPF64[$263 >> 3] = +HEAPF64[$263 >> 3] + +(HEAP32[$4 + 1310736 + ($252 + 1 << 2) >> 2] | 0);
    $271 = $4 + 655376 + (($262 | 1) << 3) | 0;
    HEAPF64[$271 >> 3] = +HEAPF64[$271 >> 3] + +(HEAP32[$4 + 1310736 + ($252 + 2 << 2) >> 2] | 0);
    $274 = $251 << 2;
    $275 = $4 + 131084 + ($274 << 2) | 0;
    $279 = HEAP32[$4 + 1310736 + ($252 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$275 >> 2] | 0) > ($279 | 0)) HEAP32[$275 >> 2] = $279;
    $282 = $4 + 131084 + (($274 | 1) << 2) | 0;
    $286 = HEAP32[$4 + 1310736 + ($252 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) < ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $4 + 131084 + (($274 | 2) << 2) | 0;
    $293 = HEAP32[$4 + 1310736 + ($252 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) > ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $4 + 131084 + (($274 | 3) << 2) | 0;
    $300 = HEAP32[$4 + 1310736 + ($252 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) < ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $$5 = $$5 + 1 | 0;
   }
   $303 = HEAP32[$232 >> 2] | 0;
   $$6 = 0;
   while (1) {
    if (($$6 | 0) >= ($303 | 0)) {
     $$0 = 0;
     break L80;
    }
    $307 = +(HEAP32[$4 + 12 + ($$6 << 2) >> 2] | 0);
    $308 = $$6 << 1;
    $309 = $4 + 655376 + ($308 << 3) | 0;
    HEAPF64[$309 >> 3] = +HEAPF64[$309 >> 3] / $307;
    $313 = $4 + 655376 + (($308 | 1) << 3) | 0;
    HEAPF64[$313 >> 3] = +HEAPF64[$313 >> 3] / $307;
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBRC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0367 = 0, $$0368 = 0, $$0370 = 0, $$0372 = 0, $$0376 = 0, $$0380 = 0, $$0383 = 0, $$0388 = 0, $$0391 = 0, $$1 = 0, $$1369 = 0, $$1371 = 0, $$1373 = 0, $$1377 = 0, $$1381 = 0, $$1384 = 0, $$1389 = 0, $$1392 = 0, $$2 = 0, $$2374 = 0, $$2378 = 0, $$2382 = 0, $$2385 = 0, $$2390 = 0, $$3 = 0, $$3375 = 0, $$3379 = 0, $$3386 = 0, $$4 = 0, $$4387 = 0, $$5 = 0, $$6 = 0, $102 = 0, $105 = 0, $120 = 0, $122 = 0, $124 = 0, $128 = 0, $13 = 0, $132 = 0, $135 = 0, $137 = 0, $141 = 0, $145 = 0, $149 = 0, $154 = 0, $156 = 0, $160 = 0, $164 = 0, $168 = 0, $174 = 0, $177 = 0, $179 = 0, $183 = 0, $187 = 0, $19 = 0, $191 = 0, $194 = 0, $199 = 0, $20 = 0, $221 = 0, $223 = 0, $229 = 0, $232 = 0, $233 = 0, $239 = 0, $251 = 0, $252 = 0, $255 = 0, $26 = 0, $262 = 0, $263 = 0, $271 = 0, $274 = 0, $275 = 0, $279 = 0, $282 = 0, $286 = 0, $289 = 0, $293 = 0, $296 = 0, $300 = 0, $303 = 0, $307 = 0.0, $308 = 0, $309 = 0, $313 = 0, $32 = 0, $33 = 0, $36 = 0, $38 = 0, $42 = 0, $46 = 0, $5 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $64 = 0, $79 = 0, $81 = 0, $83 = 0, $87 = 0, $91 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0368 = $5;
 $$0370 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0383 = 0;
 while (1) {
  if (($$0383 | 0) >= ($1 | 0)) break;
  HEAP16[$$0370 >> 1] = 0;
  HEAP16[$$0368 >> 1] = 0;
  $$0368 = $$0368 + 2 | 0;
  $$0370 = $$0370 + 2 | 0;
  $$0383 = $$0383 + 1 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1369 = $5;
 $$1371 = $5 + ($13 << 1) | 0;
 $$1384 = 0;
 while (1) {
  if (($$1384 | 0) >= ($2 | 0)) break;
  HEAP16[$$1371 >> 1] = 0;
  HEAP16[$$1369 >> 1] = 0;
  $$1369 = $$1369 + ($1 << 1) | 0;
  $$1371 = $$1371 + ($1 << 1) | 0;
  $$1384 = $$1384 + 1 | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $26 = 0 - $1 | 0;
 $$0367 = $0 + $20 | 0;
 $$0380 = 1;
 $$0388 = 0;
 $$0391 = (HEAP32[$4 + 4 >> 2] | 0) + $20 | 0;
 $$2 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0380 | 0) >= ($6 | 0)) {
   label = 59;
   break;
  }
  $$1 = $$0367;
  $$1389 = $$0388;
  $$1392 = $$0391;
  $$2385 = 1;
  $$3 = $$2;
  while (1) {
   if (($$2385 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1392 >> 0] = 0;
    $$2390 = $$1389;
   } else {
    HEAP8[$$1392 >> 0] = -1;
    $32 = $$3 + ($26 << 1) | 0;
    $33 = HEAP16[$32 >> 1] | 0;
    if ($33 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $33;
     $36 = ($33 << 16 >> 16) * 7 | 0;
     $38 = $4 + 1310736 + ($36 + -7 << 2) | 0;
     HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + 1;
     $42 = $4 + 1310736 + ($36 + -6 << 2) | 0;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + $$2385;
     $46 = $4 + 1310736 + ($36 + -5 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + $$0380;
     HEAP32[$4 + 1310736 + ($36 + -1 << 2) >> 2] = $$0380;
     $$2390 = $$1389;
     break;
    }
    $52 = HEAP16[$32 + 2 >> 1] | 0;
    $53 = $52 << 16 >> 16;
    $56 = HEAP16[$32 + -2 >> 1] | 0;
    $57 = $56 << 16 >> 16;
    $58 = $56 << 16 >> 16 > 0;
    if ($52 << 16 >> 16 <= 0) {
     if ($58) {
      HEAP16[$$3 >> 1] = $56;
      $154 = $57 * 7 | 0;
      $156 = $4 + 1310736 + ($154 + -7 << 2) | 0;
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + 1;
      $160 = $4 + 1310736 + ($154 + -6 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + $$2385;
      $164 = $4 + 1310736 + ($154 + -5 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + $$0380;
      $168 = $4 + 1310736 + ($154 + -3 << 2) | 0;
      if ((HEAP32[$168 >> 2] | 0) < ($$2385 | 0)) HEAP32[$168 >> 2] = $$2385;
      HEAP32[$4 + 1310736 + ($154 + -1 << 2) >> 2] = $$0380;
      $$2390 = $$1389;
      break;
     }
     $174 = HEAP16[$$3 + -2 >> 1] | 0;
     if ($174 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $174;
      $177 = ($174 << 16 >> 16) * 7 | 0;
      $179 = $4 + 1310736 + ($177 + -7 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + 1;
      $183 = $4 + 1310736 + ($177 + -6 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + $$2385;
      $187 = $4 + 1310736 + ($177 + -5 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + $$0380;
      $191 = $4 + 1310736 + ($177 + -3 << 2) | 0;
      if ((HEAP32[$191 >> 2] | 0) >= ($$2385 | 0)) {
       $$2390 = $$1389;
       break;
      }
      HEAP32[$191 >> 2] = $$2385;
      $$2390 = $$1389;
      break;
     } else {
      $194 = $$1389 + 1 | 0;
      if (($$1389 | 0) > 32767) {
       label = 54;
       break L9;
      }
      HEAP16[$$3 >> 1] = $194;
      HEAP32[$4 + 1179664 + ($$1389 << 2) >> 2] = $194 << 16 >> 16;
      $199 = $$1389 * 7 | 0;
      HEAP32[$4 + 1310736 + ($199 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($199 + 1 << 2) >> 2] = $$2385;
      HEAP32[$4 + 1310736 + ($199 + 2 << 2) >> 2] = $$0380;
      HEAP32[$4 + 1310736 + ($199 + 3 << 2) >> 2] = $$2385;
      HEAP32[$4 + 1310736 + ($199 + 4 << 2) >> 2] = $$2385;
      HEAP32[$4 + 1310736 + ($199 + 5 << 2) >> 2] = $$0380;
      HEAP32[$4 + 1310736 + ($199 + 6 << 2) >> 2] = $$0380;
      $$2390 = $194;
      break;
     }
    }
    if ($58) {
     $61 = HEAP32[$4 + 1179664 + ($53 + -1 << 2) >> 2] | 0;
     $64 = HEAP32[$4 + 1179664 + ($57 + -1 << 2) >> 2] | 0;
     L37 : do if (($61 | 0) > ($64 | 0)) {
      HEAP16[$$3 >> 1] = $64;
      $$0372 = $19;
      $$0376 = 0;
      while (1) {
       if (($$0376 | 0) >= ($$1389 | 0)) {
        $79 = $64;
        break L37;
       }
       if ((HEAP32[$$0372 >> 2] | 0) == ($61 | 0)) HEAP32[$$0372 >> 2] = $64;
       $$0372 = $$0372 + 4 | 0;
       $$0376 = $$0376 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $61;
      if (($61 | 0) < ($64 | 0)) {
       $$1373 = $19;
       $$1377 = 0;
       while (1) {
        if (($$1377 | 0) >= ($$1389 | 0)) {
         $79 = $61;
         break L37;
        }
        if ((HEAP32[$$1373 >> 2] | 0) == ($64 | 0)) HEAP32[$$1373 >> 2] = $61;
        $$1373 = $$1373 + 4 | 0;
        $$1377 = $$1377 + 1 | 0;
       }
      } else $79 = $61;
     } while (0);
     $81 = ($79 << 16 >> 16) * 7 | 0;
     $83 = $4 + 1310736 + ($81 + -7 << 2) | 0;
     HEAP32[$83 >> 2] = (HEAP32[$83 >> 2] | 0) + 1;
     $87 = $4 + 1310736 + ($81 + -6 << 2) | 0;
     HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + $$2385;
     $91 = $4 + 1310736 + ($81 + -5 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + $$0380;
     HEAP32[$4 + 1310736 + ($81 + -1 << 2) >> 2] = $$0380;
     $$2390 = $$1389;
     break;
    }
    $97 = HEAP16[$$3 + -2 >> 1] | 0;
    if ($97 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $52;
     $135 = $53 * 7 | 0;
     $137 = $4 + 1310736 + ($135 + -7 << 2) | 0;
     HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + 1;
     $141 = $4 + 1310736 + ($135 + -6 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $$2385;
     $145 = $4 + 1310736 + ($135 + -5 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + $$0380;
     $149 = $4 + 1310736 + ($135 + -4 << 2) | 0;
     if ((HEAP32[$149 >> 2] | 0) > ($$2385 | 0)) HEAP32[$149 >> 2] = $$2385;
     HEAP32[$4 + 1310736 + ($135 + -1 << 2) >> 2] = $$0380;
     $$2390 = $$1389;
     break;
    }
    $102 = HEAP32[$4 + 1179664 + ($53 + -1 << 2) >> 2] | 0;
    $105 = HEAP32[$4 + 1179664 + (($97 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L61 : do if (($102 | 0) > ($105 | 0)) {
     HEAP16[$$3 >> 1] = $105;
     $$2374 = $19;
     $$2378 = 0;
     while (1) {
      if (($$2378 | 0) >= ($$1389 | 0)) {
       $120 = $105;
       break L61;
      }
      if ((HEAP32[$$2374 >> 2] | 0) == ($102 | 0)) HEAP32[$$2374 >> 2] = $105;
      $$2374 = $$2374 + 4 | 0;
      $$2378 = $$2378 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $102;
     if (($102 | 0) < ($105 | 0)) {
      $$3375 = $19;
      $$3379 = 0;
      while (1) {
       if (($$3379 | 0) >= ($$1389 | 0)) {
        $120 = $102;
        break L61;
       }
       if ((HEAP32[$$3375 >> 2] | 0) == ($105 | 0)) HEAP32[$$3375 >> 2] = $102;
       $$3375 = $$3375 + 4 | 0;
       $$3379 = $$3379 + 1 | 0;
      }
     } else $120 = $102;
    } while (0);
    $122 = ($120 << 16 >> 16) * 7 | 0;
    $124 = $4 + 1310736 + ($122 + -7 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + 1;
    $128 = $4 + 1310736 + ($122 + -6 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + $$2385;
    $132 = $4 + 1310736 + ($122 + -5 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + $$0380;
    $$2390 = $$1389;
   } while (0);
   $$1 = $$1 + 1 | 0;
   $$1389 = $$2390;
   $$1392 = $$1392 + 1 | 0;
   $$2385 = $$2385 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0367 = $$1 + 2 | 0;
  $$0380 = $$0380 + 1 | 0;
  $$0388 = $$1389;
  $$0391 = $$1392 + 2 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L80 : do if ((label | 0) == 54) {
  _arLog(0, 3, 3524, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 59) {
  $221 = $4 + 12 | 0;
  $$1381 = 1;
  $$3386 = 1;
  $$4 = $19;
  while (1) {
   if (($$3386 | 0) > ($$0388 | 0)) break;
   $223 = HEAP32[$$4 >> 2] | 0;
   if (($223 | 0) == ($$3386 | 0)) {
    $$2382 = $$1381 + 1 | 0;
    $229 = $$1381;
   } else {
    $$2382 = $$1381;
    $229 = HEAP32[$4 + 1179664 + ($223 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $229;
   $$1381 = $$2382;
   $$3386 = $$3386 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $232 = $4 + 8 | 0;
  $233 = $$1381 + -1 | 0;
  HEAP32[$232 >> 2] = $233;
  if (!$233) $$0 = 0; else {
   _memset($221 | 0, 0, $233 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $233 << 4 | 0) | 0;
   $$4387 = 0;
   while (1) {
    if (($$4387 | 0) >= ($233 | 0)) break;
    $239 = $$4387 << 2;
    HEAP32[$4 + 131084 + ($239 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($239 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($239 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($239 | 3) << 2) >> 2] = 0;
    $$4387 = $$4387 + 1 | 0;
   }
   $$5 = 0;
   while (1) {
    if (($$5 | 0) >= ($$0388 | 0)) break;
    $251 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $252 = $$5 * 7 | 0;
    $255 = $4 + 12 + ($251 << 2) | 0;
    HEAP32[$255 >> 2] = (HEAP32[$255 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($252 << 2) >> 2] | 0);
    $262 = $251 << 1;
    $263 = $4 + 655376 + ($262 << 3) | 0;
    HEAPF64[$263 >> 3] = +HEAPF64[$263 >> 3] + +(HEAP32[$4 + 1310736 + ($252 + 1 << 2) >> 2] | 0);
    $271 = $4 + 655376 + (($262 | 1) << 3) | 0;
    HEAPF64[$271 >> 3] = +HEAPF64[$271 >> 3] + +(HEAP32[$4 + 1310736 + ($252 + 2 << 2) >> 2] | 0);
    $274 = $251 << 2;
    $275 = $4 + 131084 + ($274 << 2) | 0;
    $279 = HEAP32[$4 + 1310736 + ($252 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$275 >> 2] | 0) > ($279 | 0)) HEAP32[$275 >> 2] = $279;
    $282 = $4 + 131084 + (($274 | 1) << 2) | 0;
    $286 = HEAP32[$4 + 1310736 + ($252 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) < ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $4 + 131084 + (($274 | 2) << 2) | 0;
    $293 = HEAP32[$4 + 1310736 + ($252 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) > ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $4 + 131084 + (($274 | 3) << 2) | 0;
    $300 = HEAP32[$4 + 1310736 + ($252 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) < ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $$5 = $$5 + 1 | 0;
   }
   $303 = HEAP32[$232 >> 2] | 0;
   $$6 = 0;
   while (1) {
    if (($$6 | 0) >= ($303 | 0)) {
     $$0 = 0;
     break L80;
    }
    $307 = +(HEAP32[$4 + 12 + ($$6 << 2) >> 2] | 0);
    $308 = $$6 << 1;
    $309 = $4 + 655376 + ($308 << 3) | 0;
    HEAPF64[$309 >> 3] = +HEAPF64[$309 >> 3] / $307;
    $313 = $4 + 655376 + (($308 | 1) << 3) | 0;
    HEAPF64[$313 >> 3] = +HEAPF64[$313 >> 3] / $307;
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWZ($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0364 = 0, $$0365 = 0, $$0367 = 0, $$0369 = 0, $$0371 = 0, $$0375 = 0, $$0378 = 0, $$0383 = 0, $$0386 = 0, $$1 = 0, $$1366 = 0, $$1368 = 0, $$1370 = 0, $$1372 = 0, $$1376 = 0, $$1379 = 0, $$1384 = 0, $$1387 = 0, $$2 = 0, $$2373 = 0, $$2377 = 0, $$2380 = 0, $$2385 = 0, $$2388 = 0, $$3 = 0, $$3374 = 0, $$3381 = 0, $$3389 = 0, $$4 = 0, $$4382 = 0, $$5 = 0, $$6 = 0, $100 = 0, $103 = 0, $118 = 0, $120 = 0, $122 = 0, $126 = 0, $13 = 0, $130 = 0, $133 = 0, $135 = 0, $139 = 0, $143 = 0, $147 = 0, $152 = 0, $154 = 0, $158 = 0, $162 = 0, $166 = 0, $172 = 0, $175 = 0, $177 = 0, $181 = 0, $185 = 0, $189 = 0, $19 = 0, $192 = 0, $197 = 0, $20 = 0, $219 = 0, $221 = 0, $227 = 0, $230 = 0, $231 = 0, $237 = 0, $24 = 0, $249 = 0, $250 = 0, $253 = 0, $260 = 0, $261 = 0, $269 = 0, $272 = 0, $273 = 0, $277 = 0, $280 = 0, $284 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $30 = 0, $301 = 0, $305 = 0.0, $306 = 0, $307 = 0, $31 = 0, $311 = 0, $34 = 0, $36 = 0, $40 = 0, $44 = 0, $5 = 0, $50 = 0, $51 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $6 = 0, $62 = 0, $77 = 0, $79 = 0, $81 = 0, $85 = 0, $89 = 0, $95 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0367 = $5;
 $$0378 = 0;
 $$0386 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 while (1) {
  if (($$0378 | 0) >= ($1 | 0)) break;
  HEAP16[$$0386 >> 1] = 0;
  HEAP16[$$0367 >> 1] = 0;
  $$0367 = $$0367 + 2 | 0;
  $$0378 = $$0378 + 1 | 0;
  $$0386 = $$0386 + 2 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1368 = $5;
 $$1379 = 0;
 $$1387 = $5 + ($13 << 1) | 0;
 while (1) {
  if (($$1379 | 0) >= ($2 | 0)) break;
  HEAP16[$$1387 >> 1] = 0;
  HEAP16[$$1368 >> 1] = 0;
  $$1368 = $$1368 + ($1 << 1) | 0;
  $$1379 = $$1379 + 1 | 0;
  $$1387 = $$1387 + ($1 << 1) | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $24 = 0 - $1 | 0;
 $$0364 = $0 + $20 | 0;
 $$0365 = $3 + $20 | 0;
 $$0375 = 1;
 $$0383 = 0;
 $$2388 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0375 | 0) >= ($6 | 0)) {
   label = 59;
   break;
  }
  $$1 = $$0364;
  $$1366 = $$0365;
  $$1384 = $$0383;
  $$2380 = 1;
  $$3389 = $$2388;
  while (1) {
   if (($$2380 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0) > (HEAPU8[$$1366 >> 0] | 0)) {
    $30 = $$3389 + ($24 << 1) | 0;
    $31 = HEAP16[$30 >> 1] | 0;
    if ($31 << 16 >> 16 > 0) {
     HEAP16[$$3389 >> 1] = $31;
     $34 = ($31 << 16 >> 16) * 7 | 0;
     $36 = $4 + 1310736 + ($34 + -7 << 2) | 0;
     HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 1;
     $40 = $4 + 1310736 + ($34 + -6 << 2) | 0;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + $$2380;
     $44 = $4 + 1310736 + ($34 + -5 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + $$0375;
     HEAP32[$4 + 1310736 + ($34 + -1 << 2) >> 2] = $$0375;
     $$2385 = $$1384;
     break;
    }
    $50 = HEAP16[$30 + 2 >> 1] | 0;
    $51 = $50 << 16 >> 16;
    $54 = HEAP16[$30 + -2 >> 1] | 0;
    $55 = $54 << 16 >> 16;
    $56 = $54 << 16 >> 16 > 0;
    if ($50 << 16 >> 16 <= 0) {
     if ($56) {
      HEAP16[$$3389 >> 1] = $54;
      $152 = $55 * 7 | 0;
      $154 = $4 + 1310736 + ($152 + -7 << 2) | 0;
      HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + 1;
      $158 = $4 + 1310736 + ($152 + -6 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$2380;
      $162 = $4 + 1310736 + ($152 + -5 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + $$0375;
      $166 = $4 + 1310736 + ($152 + -3 << 2) | 0;
      if ((HEAP32[$166 >> 2] | 0) < ($$2380 | 0)) HEAP32[$166 >> 2] = $$2380;
      HEAP32[$4 + 1310736 + ($152 + -1 << 2) >> 2] = $$0375;
      $$2385 = $$1384;
      break;
     }
     $172 = HEAP16[$$3389 + -2 >> 1] | 0;
     if ($172 << 16 >> 16 > 0) {
      HEAP16[$$3389 >> 1] = $172;
      $175 = ($172 << 16 >> 16) * 7 | 0;
      $177 = $4 + 1310736 + ($175 + -7 << 2) | 0;
      HEAP32[$177 >> 2] = (HEAP32[$177 >> 2] | 0) + 1;
      $181 = $4 + 1310736 + ($175 + -6 << 2) | 0;
      HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + $$2380;
      $185 = $4 + 1310736 + ($175 + -5 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + $$0375;
      $189 = $4 + 1310736 + ($175 + -3 << 2) | 0;
      if ((HEAP32[$189 >> 2] | 0) >= ($$2380 | 0)) {
       $$2385 = $$1384;
       break;
      }
      HEAP32[$189 >> 2] = $$2380;
      $$2385 = $$1384;
      break;
     } else {
      $192 = $$1384 + 1 | 0;
      if (($$1384 | 0) > 32767) {
       label = 54;
       break L9;
      }
      HEAP16[$$3389 >> 1] = $192;
      HEAP32[$4 + 1179664 + ($$1384 << 2) >> 2] = $192 << 16 >> 16;
      $197 = $$1384 * 7 | 0;
      HEAP32[$4 + 1310736 + ($197 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($197 + 1 << 2) >> 2] = $$2380;
      HEAP32[$4 + 1310736 + ($197 + 2 << 2) >> 2] = $$0375;
      HEAP32[$4 + 1310736 + ($197 + 3 << 2) >> 2] = $$2380;
      HEAP32[$4 + 1310736 + ($197 + 4 << 2) >> 2] = $$2380;
      HEAP32[$4 + 1310736 + ($197 + 5 << 2) >> 2] = $$0375;
      HEAP32[$4 + 1310736 + ($197 + 6 << 2) >> 2] = $$0375;
      $$2385 = $192;
      break;
     }
    }
    if ($56) {
     $59 = HEAP32[$4 + 1179664 + ($51 + -1 << 2) >> 2] | 0;
     $62 = HEAP32[$4 + 1179664 + ($55 + -1 << 2) >> 2] | 0;
     L36 : do if (($59 | 0) > ($62 | 0)) {
      HEAP16[$$3389 >> 1] = $62;
      $$0369 = $19;
      $$0371 = 0;
      while (1) {
       if (($$0371 | 0) >= ($$1384 | 0)) {
        $77 = $62;
        break L36;
       }
       if ((HEAP32[$$0369 >> 2] | 0) == ($59 | 0)) HEAP32[$$0369 >> 2] = $62;
       $$0369 = $$0369 + 4 | 0;
       $$0371 = $$0371 + 1 | 0;
      }
     } else {
      HEAP16[$$3389 >> 1] = $59;
      if (($59 | 0) < ($62 | 0)) {
       $$1370 = $19;
       $$1372 = 0;
       while (1) {
        if (($$1372 | 0) >= ($$1384 | 0)) {
         $77 = $59;
         break L36;
        }
        if ((HEAP32[$$1370 >> 2] | 0) == ($62 | 0)) HEAP32[$$1370 >> 2] = $59;
        $$1370 = $$1370 + 4 | 0;
        $$1372 = $$1372 + 1 | 0;
       }
      } else $77 = $59;
     } while (0);
     $79 = ($77 << 16 >> 16) * 7 | 0;
     $81 = $4 + 1310736 + ($79 + -7 << 2) | 0;
     HEAP32[$81 >> 2] = (HEAP32[$81 >> 2] | 0) + 1;
     $85 = $4 + 1310736 + ($79 + -6 << 2) | 0;
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + $$2380;
     $89 = $4 + 1310736 + ($79 + -5 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + $$0375;
     HEAP32[$4 + 1310736 + ($79 + -1 << 2) >> 2] = $$0375;
     $$2385 = $$1384;
     break;
    }
    $95 = HEAP16[$$3389 + -2 >> 1] | 0;
    if ($95 << 16 >> 16 <= 0) {
     HEAP16[$$3389 >> 1] = $50;
     $133 = $51 * 7 | 0;
     $135 = $4 + 1310736 + ($133 + -7 << 2) | 0;
     HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
     $139 = $4 + 1310736 + ($133 + -6 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $$2380;
     $143 = $4 + 1310736 + ($133 + -5 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$0375;
     $147 = $4 + 1310736 + ($133 + -4 << 2) | 0;
     if ((HEAP32[$147 >> 2] | 0) > ($$2380 | 0)) HEAP32[$147 >> 2] = $$2380;
     HEAP32[$4 + 1310736 + ($133 + -1 << 2) >> 2] = $$0375;
     $$2385 = $$1384;
     break;
    }
    $100 = HEAP32[$4 + 1179664 + ($51 + -1 << 2) >> 2] | 0;
    $103 = HEAP32[$4 + 1179664 + (($95 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L60 : do if (($100 | 0) > ($103 | 0)) {
     HEAP16[$$3389 >> 1] = $103;
     $$2 = $19;
     $$2373 = 0;
     while (1) {
      if (($$2373 | 0) >= ($$1384 | 0)) {
       $118 = $103;
       break L60;
      }
      if ((HEAP32[$$2 >> 2] | 0) == ($100 | 0)) HEAP32[$$2 >> 2] = $103;
      $$2 = $$2 + 4 | 0;
      $$2373 = $$2373 + 1 | 0;
     }
    } else {
     HEAP16[$$3389 >> 1] = $100;
     if (($100 | 0) < ($103 | 0)) {
      $$3 = $19;
      $$3374 = 0;
      while (1) {
       if (($$3374 | 0) >= ($$1384 | 0)) {
        $118 = $100;
        break L60;
       }
       if ((HEAP32[$$3 >> 2] | 0) == ($103 | 0)) HEAP32[$$3 >> 2] = $100;
       $$3 = $$3 + 4 | 0;
       $$3374 = $$3374 + 1 | 0;
      }
     } else $118 = $100;
    } while (0);
    $120 = ($118 << 16 >> 16) * 7 | 0;
    $122 = $4 + 1310736 + ($120 + -7 << 2) | 0;
    HEAP32[$122 >> 2] = (HEAP32[$122 >> 2] | 0) + 1;
    $126 = $4 + 1310736 + ($120 + -6 << 2) | 0;
    HEAP32[$126 >> 2] = (HEAP32[$126 >> 2] | 0) + $$2380;
    $130 = $4 + 1310736 + ($120 + -5 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + $$0375;
    $$2385 = $$1384;
   } else {
    HEAP16[$$3389 >> 1] = 0;
    $$2385 = $$1384;
   } while (0);
   $$1 = $$1 + 1 | 0;
   $$1366 = $$1366 + 1 | 0;
   $$1384 = $$2385;
   $$2380 = $$2380 + 1 | 0;
   $$3389 = $$3389 + 2 | 0;
  }
  $$0364 = $$1 + 2 | 0;
  $$0365 = $$1366 + 2 | 0;
  $$0375 = $$0375 + 1 | 0;
  $$0383 = $$1384;
  $$2388 = $$3389 + 4 | 0;
 }
 L80 : do if ((label | 0) == 54) {
  _arLog(0, 3, 3524, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 59) {
  $219 = $4 + 12 | 0;
  $$1376 = 1;
  $$3381 = 1;
  $$4 = $19;
  while (1) {
   if (($$3381 | 0) > ($$0383 | 0)) break;
   $221 = HEAP32[$$4 >> 2] | 0;
   if (($221 | 0) == ($$3381 | 0)) {
    $$2377 = $$1376 + 1 | 0;
    $227 = $$1376;
   } else {
    $$2377 = $$1376;
    $227 = HEAP32[$4 + 1179664 + ($221 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $227;
   $$1376 = $$2377;
   $$3381 = $$3381 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $230 = $4 + 8 | 0;
  $231 = $$1376 + -1 | 0;
  HEAP32[$230 >> 2] = $231;
  if (!$231) $$0 = 0; else {
   _memset($219 | 0, 0, $231 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $231 << 4 | 0) | 0;
   $$4382 = 0;
   while (1) {
    if (($$4382 | 0) >= ($231 | 0)) break;
    $237 = $$4382 << 2;
    HEAP32[$4 + 131084 + ($237 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($237 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($237 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($237 | 3) << 2) >> 2] = 0;
    $$4382 = $$4382 + 1 | 0;
   }
   $$5 = 0;
   while (1) {
    if (($$5 | 0) >= ($$0383 | 0)) break;
    $249 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $250 = $$5 * 7 | 0;
    $253 = $4 + 12 + ($249 << 2) | 0;
    HEAP32[$253 >> 2] = (HEAP32[$253 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($250 << 2) >> 2] | 0);
    $260 = $249 << 1;
    $261 = $4 + 655376 + ($260 << 3) | 0;
    HEAPF64[$261 >> 3] = +HEAPF64[$261 >> 3] + +(HEAP32[$4 + 1310736 + ($250 + 1 << 2) >> 2] | 0);
    $269 = $4 + 655376 + (($260 | 1) << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$4 + 1310736 + ($250 + 2 << 2) >> 2] | 0);
    $272 = $249 << 2;
    $273 = $4 + 131084 + ($272 << 2) | 0;
    $277 = HEAP32[$4 + 1310736 + ($250 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$273 >> 2] | 0) > ($277 | 0)) HEAP32[$273 >> 2] = $277;
    $280 = $4 + 131084 + (($272 | 1) << 2) | 0;
    $284 = HEAP32[$4 + 1310736 + ($250 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$280 >> 2] | 0) < ($284 | 0)) HEAP32[$280 >> 2] = $284;
    $287 = $4 + 131084 + (($272 | 2) << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($250 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $4 + 131084 + (($272 | 3) << 2) | 0;
    $298 = HEAP32[$4 + 1310736 + ($250 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $$5 = $$5 + 1 | 0;
   }
   $301 = HEAP32[$230 >> 2] | 0;
   $$6 = 0;
   while (1) {
    if (($$6 | 0) >= ($301 | 0)) {
     $$0 = 0;
     break L80;
    }
    $305 = +(HEAP32[$4 + 12 + ($$6 << 2) >> 2] | 0);
    $306 = $$6 << 1;
    $307 = $4 + 655376 + ($306 << 3) | 0;
    HEAPF64[$307 >> 3] = +HEAPF64[$307 >> 3] / $305;
    $311 = $4 + 655376 + (($306 | 1) << 3) | 0;
    HEAPF64[$311 >> 3] = +HEAPF64[$311 >> 3] / $305;
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBZ($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0364 = 0, $$0365 = 0, $$0367 = 0, $$0369 = 0, $$0371 = 0, $$0375 = 0, $$0378 = 0, $$0383 = 0, $$0386 = 0, $$1 = 0, $$1366 = 0, $$1368 = 0, $$1370 = 0, $$1372 = 0, $$1376 = 0, $$1379 = 0, $$1384 = 0, $$1387 = 0, $$2 = 0, $$2373 = 0, $$2377 = 0, $$2380 = 0, $$2385 = 0, $$2388 = 0, $$3 = 0, $$3374 = 0, $$3381 = 0, $$3389 = 0, $$4 = 0, $$4382 = 0, $$5 = 0, $$6 = 0, $100 = 0, $103 = 0, $118 = 0, $120 = 0, $122 = 0, $126 = 0, $13 = 0, $130 = 0, $133 = 0, $135 = 0, $139 = 0, $143 = 0, $147 = 0, $152 = 0, $154 = 0, $158 = 0, $162 = 0, $166 = 0, $172 = 0, $175 = 0, $177 = 0, $181 = 0, $185 = 0, $189 = 0, $19 = 0, $192 = 0, $197 = 0, $20 = 0, $219 = 0, $221 = 0, $227 = 0, $230 = 0, $231 = 0, $237 = 0, $24 = 0, $249 = 0, $250 = 0, $253 = 0, $260 = 0, $261 = 0, $269 = 0, $272 = 0, $273 = 0, $277 = 0, $280 = 0, $284 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $30 = 0, $301 = 0, $305 = 0.0, $306 = 0, $307 = 0, $31 = 0, $311 = 0, $34 = 0, $36 = 0, $40 = 0, $44 = 0, $5 = 0, $50 = 0, $51 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $6 = 0, $62 = 0, $77 = 0, $79 = 0, $81 = 0, $85 = 0, $89 = 0, $95 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0367 = $5;
 $$0378 = 0;
 $$0386 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 while (1) {
  if (($$0378 | 0) >= ($1 | 0)) break;
  HEAP16[$$0386 >> 1] = 0;
  HEAP16[$$0367 >> 1] = 0;
  $$0367 = $$0367 + 2 | 0;
  $$0378 = $$0378 + 1 | 0;
  $$0386 = $$0386 + 2 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1368 = $5;
 $$1379 = 0;
 $$1387 = $5 + ($13 << 1) | 0;
 while (1) {
  if (($$1379 | 0) >= ($2 | 0)) break;
  HEAP16[$$1387 >> 1] = 0;
  HEAP16[$$1368 >> 1] = 0;
  $$1368 = $$1368 + ($1 << 1) | 0;
  $$1379 = $$1379 + 1 | 0;
  $$1387 = $$1387 + ($1 << 1) | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $24 = 0 - $1 | 0;
 $$0364 = $0 + $20 | 0;
 $$0365 = $3 + $20 | 0;
 $$0375 = 1;
 $$0383 = 0;
 $$2388 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0375 | 0) >= ($6 | 0)) {
   label = 59;
   break;
  }
  $$1 = $$0364;
  $$1366 = $$0365;
  $$1384 = $$0383;
  $$2380 = 1;
  $$3389 = $$2388;
  while (1) {
   if (($$2380 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0) > (HEAPU8[$$1366 >> 0] | 0)) {
    HEAP16[$$3389 >> 1] = 0;
    $$2385 = $$1384;
   } else {
    $30 = $$3389 + ($24 << 1) | 0;
    $31 = HEAP16[$30 >> 1] | 0;
    if ($31 << 16 >> 16 > 0) {
     HEAP16[$$3389 >> 1] = $31;
     $34 = ($31 << 16 >> 16) * 7 | 0;
     $36 = $4 + 1310736 + ($34 + -7 << 2) | 0;
     HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 1;
     $40 = $4 + 1310736 + ($34 + -6 << 2) | 0;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + $$2380;
     $44 = $4 + 1310736 + ($34 + -5 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + $$0375;
     HEAP32[$4 + 1310736 + ($34 + -1 << 2) >> 2] = $$0375;
     $$2385 = $$1384;
     break;
    }
    $50 = HEAP16[$30 + 2 >> 1] | 0;
    $51 = $50 << 16 >> 16;
    $54 = HEAP16[$30 + -2 >> 1] | 0;
    $55 = $54 << 16 >> 16;
    $56 = $54 << 16 >> 16 > 0;
    if ($50 << 16 >> 16 <= 0) {
     if ($56) {
      HEAP16[$$3389 >> 1] = $54;
      $152 = $55 * 7 | 0;
      $154 = $4 + 1310736 + ($152 + -7 << 2) | 0;
      HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + 1;
      $158 = $4 + 1310736 + ($152 + -6 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$2380;
      $162 = $4 + 1310736 + ($152 + -5 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + $$0375;
      $166 = $4 + 1310736 + ($152 + -3 << 2) | 0;
      if ((HEAP32[$166 >> 2] | 0) < ($$2380 | 0)) HEAP32[$166 >> 2] = $$2380;
      HEAP32[$4 + 1310736 + ($152 + -1 << 2) >> 2] = $$0375;
      $$2385 = $$1384;
      break;
     }
     $172 = HEAP16[$$3389 + -2 >> 1] | 0;
     if ($172 << 16 >> 16 > 0) {
      HEAP16[$$3389 >> 1] = $172;
      $175 = ($172 << 16 >> 16) * 7 | 0;
      $177 = $4 + 1310736 + ($175 + -7 << 2) | 0;
      HEAP32[$177 >> 2] = (HEAP32[$177 >> 2] | 0) + 1;
      $181 = $4 + 1310736 + ($175 + -6 << 2) | 0;
      HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + $$2380;
      $185 = $4 + 1310736 + ($175 + -5 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + $$0375;
      $189 = $4 + 1310736 + ($175 + -3 << 2) | 0;
      if ((HEAP32[$189 >> 2] | 0) >= ($$2380 | 0)) {
       $$2385 = $$1384;
       break;
      }
      HEAP32[$189 >> 2] = $$2380;
      $$2385 = $$1384;
      break;
     } else {
      $192 = $$1384 + 1 | 0;
      if (($$1384 | 0) > 32767) {
       label = 54;
       break L9;
      }
      HEAP16[$$3389 >> 1] = $192;
      HEAP32[$4 + 1179664 + ($$1384 << 2) >> 2] = $192 << 16 >> 16;
      $197 = $$1384 * 7 | 0;
      HEAP32[$4 + 1310736 + ($197 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($197 + 1 << 2) >> 2] = $$2380;
      HEAP32[$4 + 1310736 + ($197 + 2 << 2) >> 2] = $$0375;
      HEAP32[$4 + 1310736 + ($197 + 3 << 2) >> 2] = $$2380;
      HEAP32[$4 + 1310736 + ($197 + 4 << 2) >> 2] = $$2380;
      HEAP32[$4 + 1310736 + ($197 + 5 << 2) >> 2] = $$0375;
      HEAP32[$4 + 1310736 + ($197 + 6 << 2) >> 2] = $$0375;
      $$2385 = $192;
      break;
     }
    }
    if ($56) {
     $59 = HEAP32[$4 + 1179664 + ($51 + -1 << 2) >> 2] | 0;
     $62 = HEAP32[$4 + 1179664 + ($55 + -1 << 2) >> 2] | 0;
     L37 : do if (($59 | 0) > ($62 | 0)) {
      HEAP16[$$3389 >> 1] = $62;
      $$0369 = $19;
      $$0371 = 0;
      while (1) {
       if (($$0371 | 0) >= ($$1384 | 0)) {
        $77 = $62;
        break L37;
       }
       if ((HEAP32[$$0369 >> 2] | 0) == ($59 | 0)) HEAP32[$$0369 >> 2] = $62;
       $$0369 = $$0369 + 4 | 0;
       $$0371 = $$0371 + 1 | 0;
      }
     } else {
      HEAP16[$$3389 >> 1] = $59;
      if (($59 | 0) < ($62 | 0)) {
       $$1370 = $19;
       $$1372 = 0;
       while (1) {
        if (($$1372 | 0) >= ($$1384 | 0)) {
         $77 = $59;
         break L37;
        }
        if ((HEAP32[$$1370 >> 2] | 0) == ($62 | 0)) HEAP32[$$1370 >> 2] = $59;
        $$1370 = $$1370 + 4 | 0;
        $$1372 = $$1372 + 1 | 0;
       }
      } else $77 = $59;
     } while (0);
     $79 = ($77 << 16 >> 16) * 7 | 0;
     $81 = $4 + 1310736 + ($79 + -7 << 2) | 0;
     HEAP32[$81 >> 2] = (HEAP32[$81 >> 2] | 0) + 1;
     $85 = $4 + 1310736 + ($79 + -6 << 2) | 0;
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + $$2380;
     $89 = $4 + 1310736 + ($79 + -5 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + $$0375;
     HEAP32[$4 + 1310736 + ($79 + -1 << 2) >> 2] = $$0375;
     $$2385 = $$1384;
     break;
    }
    $95 = HEAP16[$$3389 + -2 >> 1] | 0;
    if ($95 << 16 >> 16 <= 0) {
     HEAP16[$$3389 >> 1] = $50;
     $133 = $51 * 7 | 0;
     $135 = $4 + 1310736 + ($133 + -7 << 2) | 0;
     HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
     $139 = $4 + 1310736 + ($133 + -6 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $$2380;
     $143 = $4 + 1310736 + ($133 + -5 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$0375;
     $147 = $4 + 1310736 + ($133 + -4 << 2) | 0;
     if ((HEAP32[$147 >> 2] | 0) > ($$2380 | 0)) HEAP32[$147 >> 2] = $$2380;
     HEAP32[$4 + 1310736 + ($133 + -1 << 2) >> 2] = $$0375;
     $$2385 = $$1384;
     break;
    }
    $100 = HEAP32[$4 + 1179664 + ($51 + -1 << 2) >> 2] | 0;
    $103 = HEAP32[$4 + 1179664 + (($95 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L61 : do if (($100 | 0) > ($103 | 0)) {
     HEAP16[$$3389 >> 1] = $103;
     $$2 = $19;
     $$2373 = 0;
     while (1) {
      if (($$2373 | 0) >= ($$1384 | 0)) {
       $118 = $103;
       break L61;
      }
      if ((HEAP32[$$2 >> 2] | 0) == ($100 | 0)) HEAP32[$$2 >> 2] = $103;
      $$2 = $$2 + 4 | 0;
      $$2373 = $$2373 + 1 | 0;
     }
    } else {
     HEAP16[$$3389 >> 1] = $100;
     if (($100 | 0) < ($103 | 0)) {
      $$3 = $19;
      $$3374 = 0;
      while (1) {
       if (($$3374 | 0) >= ($$1384 | 0)) {
        $118 = $100;
        break L61;
       }
       if ((HEAP32[$$3 >> 2] | 0) == ($103 | 0)) HEAP32[$$3 >> 2] = $100;
       $$3 = $$3 + 4 | 0;
       $$3374 = $$3374 + 1 | 0;
      }
     } else $118 = $100;
    } while (0);
    $120 = ($118 << 16 >> 16) * 7 | 0;
    $122 = $4 + 1310736 + ($120 + -7 << 2) | 0;
    HEAP32[$122 >> 2] = (HEAP32[$122 >> 2] | 0) + 1;
    $126 = $4 + 1310736 + ($120 + -6 << 2) | 0;
    HEAP32[$126 >> 2] = (HEAP32[$126 >> 2] | 0) + $$2380;
    $130 = $4 + 1310736 + ($120 + -5 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + $$0375;
    $$2385 = $$1384;
   } while (0);
   $$1 = $$1 + 1 | 0;
   $$1366 = $$1366 + 1 | 0;
   $$1384 = $$2385;
   $$2380 = $$2380 + 1 | 0;
   $$3389 = $$3389 + 2 | 0;
  }
  $$0364 = $$1 + 2 | 0;
  $$0365 = $$1366 + 2 | 0;
  $$0375 = $$0375 + 1 | 0;
  $$0383 = $$1384;
  $$2388 = $$3389 + 4 | 0;
 }
 L80 : do if ((label | 0) == 54) {
  _arLog(0, 3, 3524, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 59) {
  $219 = $4 + 12 | 0;
  $$1376 = 1;
  $$3381 = 1;
  $$4 = $19;
  while (1) {
   if (($$3381 | 0) > ($$0383 | 0)) break;
   $221 = HEAP32[$$4 >> 2] | 0;
   if (($221 | 0) == ($$3381 | 0)) {
    $$2377 = $$1376 + 1 | 0;
    $227 = $$1376;
   } else {
    $$2377 = $$1376;
    $227 = HEAP32[$4 + 1179664 + ($221 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $227;
   $$1376 = $$2377;
   $$3381 = $$3381 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $230 = $4 + 8 | 0;
  $231 = $$1376 + -1 | 0;
  HEAP32[$230 >> 2] = $231;
  if (!$231) $$0 = 0; else {
   _memset($219 | 0, 0, $231 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $231 << 4 | 0) | 0;
   $$4382 = 0;
   while (1) {
    if (($$4382 | 0) >= ($231 | 0)) break;
    $237 = $$4382 << 2;
    HEAP32[$4 + 131084 + ($237 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($237 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($237 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($237 | 3) << 2) >> 2] = 0;
    $$4382 = $$4382 + 1 | 0;
   }
   $$5 = 0;
   while (1) {
    if (($$5 | 0) >= ($$0383 | 0)) break;
    $249 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $250 = $$5 * 7 | 0;
    $253 = $4 + 12 + ($249 << 2) | 0;
    HEAP32[$253 >> 2] = (HEAP32[$253 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($250 << 2) >> 2] | 0);
    $260 = $249 << 1;
    $261 = $4 + 655376 + ($260 << 3) | 0;
    HEAPF64[$261 >> 3] = +HEAPF64[$261 >> 3] + +(HEAP32[$4 + 1310736 + ($250 + 1 << 2) >> 2] | 0);
    $269 = $4 + 655376 + (($260 | 1) << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$4 + 1310736 + ($250 + 2 << 2) >> 2] | 0);
    $272 = $249 << 2;
    $273 = $4 + 131084 + ($272 << 2) | 0;
    $277 = HEAP32[$4 + 1310736 + ($250 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$273 >> 2] | 0) > ($277 | 0)) HEAP32[$273 >> 2] = $277;
    $280 = $4 + 131084 + (($272 | 1) << 2) | 0;
    $284 = HEAP32[$4 + 1310736 + ($250 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$280 >> 2] | 0) < ($284 | 0)) HEAP32[$280 >> 2] = $284;
    $287 = $4 + 131084 + (($272 | 2) << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($250 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $4 + 131084 + (($272 | 3) << 2) | 0;
    $298 = HEAP32[$4 + 1310736 + ($250 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $$5 = $$5 + 1 | 0;
   }
   $301 = HEAP32[$230 >> 2] | 0;
   $$6 = 0;
   while (1) {
    if (($$6 | 0) >= ($301 | 0)) {
     $$0 = 0;
     break L80;
    }
    $305 = +(HEAP32[$4 + 12 + ($$6 << 2) >> 2] | 0);
    $306 = $$6 << 1;
    $307 = $4 + 655376 + ($306 << 3) | 0;
    HEAPF64[$307 >> 3] = +HEAPF64[$307 >> 3] / $305;
    $311 = $4 + 655376 + (($306 | 1) << 3) | 0;
    HEAPF64[$311 >> 3] = +HEAPF64[$311 >> 3] / $305;
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWIC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0360 = 0, $$0361 = 0, $$0363 = 0, $$0365 = 0, $$0369 = 0, $$0373 = 0, $$0376 = 0, $$0381 = 0, $$1 = 0, $$1362 = 0, $$1364 = 0, $$1366 = 0, $$1370 = 0, $$1374 = 0, $$1377 = 0, $$1382 = 0, $$2 = 0, $$2367 = 0, $$2371 = 0, $$2375 = 0, $$2378 = 0, $$2383 = 0, $$3 = 0, $$3368 = 0, $$3372 = 0, $$3379 = 0, $$4 = 0, $$4380 = 0, $$5 = 0, $$6 = 0, $103 = 0, $106 = 0, $121 = 0, $123 = 0, $125 = 0, $129 = 0, $133 = 0, $136 = 0, $138 = 0, $142 = 0, $146 = 0, $15 = 0, $150 = 0, $155 = 0, $157 = 0, $161 = 0, $165 = 0, $169 = 0, $175 = 0, $178 = 0, $180 = 0, $184 = 0, $188 = 0, $192 = 0, $195 = 0, $200 = 0, $21 = 0, $221 = 0, $223 = 0, $229 = 0, $232 = 0, $233 = 0, $239 = 0, $251 = 0, $252 = 0, $255 = 0, $262 = 0, $263 = 0, $27 = 0, $271 = 0, $274 = 0, $275 = 0, $279 = 0, $282 = 0, $286 = 0, $289 = 0, $293 = 0, $296 = 0, $300 = 0, $303 = 0, $307 = 0.0, $308 = 0, $309 = 0, $313 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $43 = 0, $47 = 0, $5 = 0, $53 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $65 = 0, $7 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $88 = 0, $92 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0361 = $7;
 $$0363 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0376 = 0;
 while (1) {
  if (($$0376 | 0) >= ($5 | 0)) break;
  HEAP16[$$0363 >> 1] = 0;
  HEAP16[$$0361 >> 1] = 0;
  $$0361 = $$0361 + 2 | 0;
  $$0363 = $$0363 + 2 | 0;
  $$0376 = $$0376 + 1 | 0;
 }
 $15 = $5 + -1 | 0;
 $$1362 = $7;
 $$1364 = $7 + ($15 << 1) | 0;
 $$1377 = 0;
 while (1) {
  if (($$1377 | 0) >= ($6 | 0)) break;
  HEAP16[$$1364 >> 1] = 0;
  HEAP16[$$1362 >> 1] = 0;
  $$1362 = $$1362 + ($5 << 1) | 0;
  $$1364 = $$1364 + ($5 << 1) | 0;
  $$1377 = $$1377 + 1 | 0;
 }
 $21 = $4 + 1179664 | 0;
 $27 = 0 - $5 | 0;
 $$0360 = $0 + (($1 << 1) + 2) | 0;
 $$0373 = 1;
 $$0381 = 0;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0373 | 0) >= ($8 | 0)) {
   label = 59;
   break;
  }
  $$1 = $$0360;
  $$1382 = $$0381;
  $$2378 = 1;
  $$3 = $$2;
  while (1) {
   if (($$2378 | 0) >= ($15 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    $33 = $$3 + ($27 << 1) | 0;
    $34 = HEAP16[$33 >> 1] | 0;
    if ($34 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $34;
     $37 = ($34 << 16 >> 16) * 7 | 0;
     $39 = $4 + 1310736 + ($37 + -7 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1;
     $43 = $4 + 1310736 + ($37 + -6 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $$2378;
     $47 = $4 + 1310736 + ($37 + -5 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + $$0373;
     HEAP32[$4 + 1310736 + ($37 + -1 << 2) >> 2] = $$0373;
     $$2383 = $$1382;
     break;
    }
    $53 = HEAP16[$33 + 2 >> 1] | 0;
    $54 = $53 << 16 >> 16;
    $57 = HEAP16[$33 + -2 >> 1] | 0;
    $58 = $57 << 16 >> 16;
    $59 = $57 << 16 >> 16 > 0;
    if ($53 << 16 >> 16 <= 0) {
     if ($59) {
      HEAP16[$$3 >> 1] = $57;
      $155 = $58 * 7 | 0;
      $157 = $4 + 1310736 + ($155 + -7 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + 1;
      $161 = $4 + 1310736 + ($155 + -6 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $$2378;
      $165 = $4 + 1310736 + ($155 + -5 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + $$0373;
      $169 = $4 + 1310736 + ($155 + -3 << 2) | 0;
      if ((HEAP32[$169 >> 2] | 0) < ($$2378 | 0)) HEAP32[$169 >> 2] = $$2378;
      HEAP32[$4 + 1310736 + ($155 + -1 << 2) >> 2] = $$0373;
      $$2383 = $$1382;
      break;
     }
     $175 = HEAP16[$$3 + -2 >> 1] | 0;
     if ($175 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $175;
      $178 = ($175 << 16 >> 16) * 7 | 0;
      $180 = $4 + 1310736 + ($178 + -7 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + 1;
      $184 = $4 + 1310736 + ($178 + -6 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $$2378;
      $188 = $4 + 1310736 + ($178 + -5 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + $$0373;
      $192 = $4 + 1310736 + ($178 + -3 << 2) | 0;
      if ((HEAP32[$192 >> 2] | 0) >= ($$2378 | 0)) {
       $$2383 = $$1382;
       break;
      }
      HEAP32[$192 >> 2] = $$2378;
      $$2383 = $$1382;
      break;
     } else {
      $195 = $$1382 + 1 | 0;
      if (($$1382 | 0) > 32767) {
       label = 54;
       break L9;
      }
      HEAP16[$$3 >> 1] = $195;
      HEAP32[$4 + 1179664 + ($$1382 << 2) >> 2] = $195 << 16 >> 16;
      $200 = $$1382 * 7 | 0;
      HEAP32[$4 + 1310736 + ($200 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($200 + 1 << 2) >> 2] = $$2378;
      HEAP32[$4 + 1310736 + ($200 + 2 << 2) >> 2] = $$0373;
      HEAP32[$4 + 1310736 + ($200 + 3 << 2) >> 2] = $$2378;
      HEAP32[$4 + 1310736 + ($200 + 4 << 2) >> 2] = $$2378;
      HEAP32[$4 + 1310736 + ($200 + 5 << 2) >> 2] = $$0373;
      HEAP32[$4 + 1310736 + ($200 + 6 << 2) >> 2] = $$0373;
      $$2383 = $195;
      break;
     }
    }
    if ($59) {
     $62 = HEAP32[$4 + 1179664 + ($54 + -1 << 2) >> 2] | 0;
     $65 = HEAP32[$4 + 1179664 + ($58 + -1 << 2) >> 2] | 0;
     L36 : do if (($62 | 0) > ($65 | 0)) {
      HEAP16[$$3 >> 1] = $65;
      $$0365 = $21;
      $$0369 = 0;
      while (1) {
       if (($$0369 | 0) >= ($$1382 | 0)) {
        $80 = $65;
        break L36;
       }
       if ((HEAP32[$$0365 >> 2] | 0) == ($62 | 0)) HEAP32[$$0365 >> 2] = $65;
       $$0365 = $$0365 + 4 | 0;
       $$0369 = $$0369 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $62;
      if (($62 | 0) < ($65 | 0)) {
       $$1366 = $21;
       $$1370 = 0;
       while (1) {
        if (($$1370 | 0) >= ($$1382 | 0)) {
         $80 = $62;
         break L36;
        }
        if ((HEAP32[$$1366 >> 2] | 0) == ($65 | 0)) HEAP32[$$1366 >> 2] = $62;
        $$1366 = $$1366 + 4 | 0;
        $$1370 = $$1370 + 1 | 0;
       }
      } else $80 = $62;
     } while (0);
     $82 = ($80 << 16 >> 16) * 7 | 0;
     $84 = $4 + 1310736 + ($82 + -7 << 2) | 0;
     HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + 1;
     $88 = $4 + 1310736 + ($82 + -6 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + $$2378;
     $92 = $4 + 1310736 + ($82 + -5 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + $$0373;
     HEAP32[$4 + 1310736 + ($82 + -1 << 2) >> 2] = $$0373;
     $$2383 = $$1382;
     break;
    }
    $98 = HEAP16[$$3 + -2 >> 1] | 0;
    if ($98 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $53;
     $136 = $54 * 7 | 0;
     $138 = $4 + 1310736 + ($136 + -7 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + 1;
     $142 = $4 + 1310736 + ($136 + -6 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$2378;
     $146 = $4 + 1310736 + ($136 + -5 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $$0373;
     $150 = $4 + 1310736 + ($136 + -4 << 2) | 0;
     if ((HEAP32[$150 >> 2] | 0) > ($$2378 | 0)) HEAP32[$150 >> 2] = $$2378;
     HEAP32[$4 + 1310736 + ($136 + -1 << 2) >> 2] = $$0373;
     $$2383 = $$1382;
     break;
    }
    $103 = HEAP32[$4 + 1179664 + ($54 + -1 << 2) >> 2] | 0;
    $106 = HEAP32[$4 + 1179664 + (($98 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L60 : do if (($103 | 0) > ($106 | 0)) {
     HEAP16[$$3 >> 1] = $106;
     $$2367 = $21;
     $$2371 = 0;
     while (1) {
      if (($$2371 | 0) >= ($$1382 | 0)) {
       $121 = $106;
       break L60;
      }
      if ((HEAP32[$$2367 >> 2] | 0) == ($103 | 0)) HEAP32[$$2367 >> 2] = $106;
      $$2367 = $$2367 + 4 | 0;
      $$2371 = $$2371 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $103;
     if (($103 | 0) < ($106 | 0)) {
      $$3368 = $21;
      $$3372 = 0;
      while (1) {
       if (($$3372 | 0) >= ($$1382 | 0)) {
        $121 = $103;
        break L60;
       }
       if ((HEAP32[$$3368 >> 2] | 0) == ($106 | 0)) HEAP32[$$3368 >> 2] = $103;
       $$3368 = $$3368 + 4 | 0;
       $$3372 = $$3372 + 1 | 0;
      }
     } else $121 = $103;
    } while (0);
    $123 = ($121 << 16 >> 16) * 7 | 0;
    $125 = $4 + 1310736 + ($123 + -7 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + 1;
    $129 = $4 + 1310736 + ($123 + -6 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + $$2378;
    $133 = $4 + 1310736 + ($123 + -5 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $$0373;
    $$2383 = $$1382;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$2383 = $$1382;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1382 = $$2383;
   $$2378 = $$2378 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0360 = $$1 + $1 + 4 | 0;
  $$0373 = $$0373 + 1 | 0;
  $$0381 = $$1382;
  $$2 = $$3 + 4 | 0;
 }
 L80 : do if ((label | 0) == 54) {
  _arLog(0, 3, 3524, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 59) {
  $221 = $4 + 12 | 0;
  $$1374 = 1;
  $$3379 = 1;
  $$4 = $21;
  while (1) {
   if (($$3379 | 0) > ($$0381 | 0)) break;
   $223 = HEAP32[$$4 >> 2] | 0;
   if (($223 | 0) == ($$3379 | 0)) {
    $$2375 = $$1374 + 1 | 0;
    $229 = $$1374;
   } else {
    $$2375 = $$1374;
    $229 = HEAP32[$4 + 1179664 + ($223 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $229;
   $$1374 = $$2375;
   $$3379 = $$3379 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $232 = $4 + 8 | 0;
  $233 = $$1374 + -1 | 0;
  HEAP32[$232 >> 2] = $233;
  if (!$233) $$0 = 0; else {
   _memset($221 | 0, 0, $233 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $233 << 4 | 0) | 0;
   $$4380 = 0;
   while (1) {
    if (($$4380 | 0) >= ($233 | 0)) break;
    $239 = $$4380 << 2;
    HEAP32[$4 + 131084 + ($239 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($239 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($239 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($239 | 3) << 2) >> 2] = 0;
    $$4380 = $$4380 + 1 | 0;
   }
   $$5 = 0;
   while (1) {
    if (($$5 | 0) >= ($$0381 | 0)) break;
    $251 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $252 = $$5 * 7 | 0;
    $255 = $4 + 12 + ($251 << 2) | 0;
    HEAP32[$255 >> 2] = (HEAP32[$255 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($252 << 2) >> 2] | 0);
    $262 = $251 << 1;
    $263 = $4 + 655376 + ($262 << 3) | 0;
    HEAPF64[$263 >> 3] = +HEAPF64[$263 >> 3] + +(HEAP32[$4 + 1310736 + ($252 + 1 << 2) >> 2] | 0);
    $271 = $4 + 655376 + (($262 | 1) << 3) | 0;
    HEAPF64[$271 >> 3] = +HEAPF64[$271 >> 3] + +(HEAP32[$4 + 1310736 + ($252 + 2 << 2) >> 2] | 0);
    $274 = $251 << 2;
    $275 = $4 + 131084 + ($274 << 2) | 0;
    $279 = HEAP32[$4 + 1310736 + ($252 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$275 >> 2] | 0) > ($279 | 0)) HEAP32[$275 >> 2] = $279;
    $282 = $4 + 131084 + (($274 | 1) << 2) | 0;
    $286 = HEAP32[$4 + 1310736 + ($252 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) < ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $4 + 131084 + (($274 | 2) << 2) | 0;
    $293 = HEAP32[$4 + 1310736 + ($252 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) > ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $4 + 131084 + (($274 | 3) << 2) | 0;
    $300 = HEAP32[$4 + 1310736 + ($252 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) < ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $$5 = $$5 + 1 | 0;
   }
   $303 = HEAP32[$232 >> 2] | 0;
   $$6 = 0;
   while (1) {
    if (($$6 | 0) >= ($303 | 0)) {
     $$0 = 0;
     break L80;
    }
    $307 = +(HEAP32[$4 + 12 + ($$6 << 2) >> 2] | 0);
    $308 = $$6 << 1;
    $309 = $4 + 655376 + ($308 << 3) | 0;
    HEAPF64[$309 >> 3] = +HEAPF64[$309 >> 3] / $307;
    $313 = $4 + 655376 + (($308 | 1) << 3) | 0;
    HEAPF64[$313 >> 3] = +HEAPF64[$313 >> 3] / $307;
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBIC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0360 = 0, $$0361 = 0, $$0363 = 0, $$0365 = 0, $$0369 = 0, $$0373 = 0, $$0376 = 0, $$0381 = 0, $$1 = 0, $$1362 = 0, $$1364 = 0, $$1366 = 0, $$1370 = 0, $$1374 = 0, $$1377 = 0, $$1382 = 0, $$2 = 0, $$2367 = 0, $$2371 = 0, $$2375 = 0, $$2378 = 0, $$2383 = 0, $$3 = 0, $$3368 = 0, $$3372 = 0, $$3379 = 0, $$4 = 0, $$4380 = 0, $$5 = 0, $$6 = 0, $103 = 0, $106 = 0, $121 = 0, $123 = 0, $125 = 0, $129 = 0, $133 = 0, $136 = 0, $138 = 0, $142 = 0, $146 = 0, $15 = 0, $150 = 0, $155 = 0, $157 = 0, $161 = 0, $165 = 0, $169 = 0, $175 = 0, $178 = 0, $180 = 0, $184 = 0, $188 = 0, $192 = 0, $195 = 0, $200 = 0, $21 = 0, $221 = 0, $223 = 0, $229 = 0, $232 = 0, $233 = 0, $239 = 0, $251 = 0, $252 = 0, $255 = 0, $262 = 0, $263 = 0, $27 = 0, $271 = 0, $274 = 0, $275 = 0, $279 = 0, $282 = 0, $286 = 0, $289 = 0, $293 = 0, $296 = 0, $300 = 0, $303 = 0, $307 = 0.0, $308 = 0, $309 = 0, $313 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $43 = 0, $47 = 0, $5 = 0, $53 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $65 = 0, $7 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $88 = 0, $92 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0361 = $7;
 $$0363 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0376 = 0;
 while (1) {
  if (($$0376 | 0) >= ($5 | 0)) break;
  HEAP16[$$0363 >> 1] = 0;
  HEAP16[$$0361 >> 1] = 0;
  $$0361 = $$0361 + 2 | 0;
  $$0363 = $$0363 + 2 | 0;
  $$0376 = $$0376 + 1 | 0;
 }
 $15 = $5 + -1 | 0;
 $$1362 = $7;
 $$1364 = $7 + ($15 << 1) | 0;
 $$1377 = 0;
 while (1) {
  if (($$1377 | 0) >= ($6 | 0)) break;
  HEAP16[$$1364 >> 1] = 0;
  HEAP16[$$1362 >> 1] = 0;
  $$1362 = $$1362 + ($5 << 1) | 0;
  $$1364 = $$1364 + ($5 << 1) | 0;
  $$1377 = $$1377 + 1 | 0;
 }
 $21 = $4 + 1179664 | 0;
 $27 = 0 - $5 | 0;
 $$0360 = $0 + (($1 << 1) + 2) | 0;
 $$0373 = 1;
 $$0381 = 0;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0373 | 0) >= ($8 | 0)) {
   label = 59;
   break;
  }
  $$1 = $$0360;
  $$1382 = $$0381;
  $$2378 = 1;
  $$3 = $$2;
  while (1) {
   if (($$2378 | 0) >= ($15 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$2383 = $$1382;
   } else {
    $33 = $$3 + ($27 << 1) | 0;
    $34 = HEAP16[$33 >> 1] | 0;
    if ($34 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $34;
     $37 = ($34 << 16 >> 16) * 7 | 0;
     $39 = $4 + 1310736 + ($37 + -7 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1;
     $43 = $4 + 1310736 + ($37 + -6 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $$2378;
     $47 = $4 + 1310736 + ($37 + -5 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + $$0373;
     HEAP32[$4 + 1310736 + ($37 + -1 << 2) >> 2] = $$0373;
     $$2383 = $$1382;
     break;
    }
    $53 = HEAP16[$33 + 2 >> 1] | 0;
    $54 = $53 << 16 >> 16;
    $57 = HEAP16[$33 + -2 >> 1] | 0;
    $58 = $57 << 16 >> 16;
    $59 = $57 << 16 >> 16 > 0;
    if ($53 << 16 >> 16 <= 0) {
     if ($59) {
      HEAP16[$$3 >> 1] = $57;
      $155 = $58 * 7 | 0;
      $157 = $4 + 1310736 + ($155 + -7 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + 1;
      $161 = $4 + 1310736 + ($155 + -6 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $$2378;
      $165 = $4 + 1310736 + ($155 + -5 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + $$0373;
      $169 = $4 + 1310736 + ($155 + -3 << 2) | 0;
      if ((HEAP32[$169 >> 2] | 0) < ($$2378 | 0)) HEAP32[$169 >> 2] = $$2378;
      HEAP32[$4 + 1310736 + ($155 + -1 << 2) >> 2] = $$0373;
      $$2383 = $$1382;
      break;
     }
     $175 = HEAP16[$$3 + -2 >> 1] | 0;
     if ($175 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $175;
      $178 = ($175 << 16 >> 16) * 7 | 0;
      $180 = $4 + 1310736 + ($178 + -7 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + 1;
      $184 = $4 + 1310736 + ($178 + -6 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $$2378;
      $188 = $4 + 1310736 + ($178 + -5 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + $$0373;
      $192 = $4 + 1310736 + ($178 + -3 << 2) | 0;
      if ((HEAP32[$192 >> 2] | 0) >= ($$2378 | 0)) {
       $$2383 = $$1382;
       break;
      }
      HEAP32[$192 >> 2] = $$2378;
      $$2383 = $$1382;
      break;
     } else {
      $195 = $$1382 + 1 | 0;
      if (($$1382 | 0) > 32767) {
       label = 54;
       break L9;
      }
      HEAP16[$$3 >> 1] = $195;
      HEAP32[$4 + 1179664 + ($$1382 << 2) >> 2] = $195 << 16 >> 16;
      $200 = $$1382 * 7 | 0;
      HEAP32[$4 + 1310736 + ($200 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($200 + 1 << 2) >> 2] = $$2378;
      HEAP32[$4 + 1310736 + ($200 + 2 << 2) >> 2] = $$0373;
      HEAP32[$4 + 1310736 + ($200 + 3 << 2) >> 2] = $$2378;
      HEAP32[$4 + 1310736 + ($200 + 4 << 2) >> 2] = $$2378;
      HEAP32[$4 + 1310736 + ($200 + 5 << 2) >> 2] = $$0373;
      HEAP32[$4 + 1310736 + ($200 + 6 << 2) >> 2] = $$0373;
      $$2383 = $195;
      break;
     }
    }
    if ($59) {
     $62 = HEAP32[$4 + 1179664 + ($54 + -1 << 2) >> 2] | 0;
     $65 = HEAP32[$4 + 1179664 + ($58 + -1 << 2) >> 2] | 0;
     L37 : do if (($62 | 0) > ($65 | 0)) {
      HEAP16[$$3 >> 1] = $65;
      $$0365 = $21;
      $$0369 = 0;
      while (1) {
       if (($$0369 | 0) >= ($$1382 | 0)) {
        $80 = $65;
        break L37;
       }
       if ((HEAP32[$$0365 >> 2] | 0) == ($62 | 0)) HEAP32[$$0365 >> 2] = $65;
       $$0365 = $$0365 + 4 | 0;
       $$0369 = $$0369 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $62;
      if (($62 | 0) < ($65 | 0)) {
       $$1366 = $21;
       $$1370 = 0;
       while (1) {
        if (($$1370 | 0) >= ($$1382 | 0)) {
         $80 = $62;
         break L37;
        }
        if ((HEAP32[$$1366 >> 2] | 0) == ($65 | 0)) HEAP32[$$1366 >> 2] = $62;
        $$1366 = $$1366 + 4 | 0;
        $$1370 = $$1370 + 1 | 0;
       }
      } else $80 = $62;
     } while (0);
     $82 = ($80 << 16 >> 16) * 7 | 0;
     $84 = $4 + 1310736 + ($82 + -7 << 2) | 0;
     HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + 1;
     $88 = $4 + 1310736 + ($82 + -6 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + $$2378;
     $92 = $4 + 1310736 + ($82 + -5 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + $$0373;
     HEAP32[$4 + 1310736 + ($82 + -1 << 2) >> 2] = $$0373;
     $$2383 = $$1382;
     break;
    }
    $98 = HEAP16[$$3 + -2 >> 1] | 0;
    if ($98 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $53;
     $136 = $54 * 7 | 0;
     $138 = $4 + 1310736 + ($136 + -7 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + 1;
     $142 = $4 + 1310736 + ($136 + -6 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$2378;
     $146 = $4 + 1310736 + ($136 + -5 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $$0373;
     $150 = $4 + 1310736 + ($136 + -4 << 2) | 0;
     if ((HEAP32[$150 >> 2] | 0) > ($$2378 | 0)) HEAP32[$150 >> 2] = $$2378;
     HEAP32[$4 + 1310736 + ($136 + -1 << 2) >> 2] = $$0373;
     $$2383 = $$1382;
     break;
    }
    $103 = HEAP32[$4 + 1179664 + ($54 + -1 << 2) >> 2] | 0;
    $106 = HEAP32[$4 + 1179664 + (($98 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L61 : do if (($103 | 0) > ($106 | 0)) {
     HEAP16[$$3 >> 1] = $106;
     $$2367 = $21;
     $$2371 = 0;
     while (1) {
      if (($$2371 | 0) >= ($$1382 | 0)) {
       $121 = $106;
       break L61;
      }
      if ((HEAP32[$$2367 >> 2] | 0) == ($103 | 0)) HEAP32[$$2367 >> 2] = $106;
      $$2367 = $$2367 + 4 | 0;
      $$2371 = $$2371 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $103;
     if (($103 | 0) < ($106 | 0)) {
      $$3368 = $21;
      $$3372 = 0;
      while (1) {
       if (($$3372 | 0) >= ($$1382 | 0)) {
        $121 = $103;
        break L61;
       }
       if ((HEAP32[$$3368 >> 2] | 0) == ($106 | 0)) HEAP32[$$3368 >> 2] = $103;
       $$3368 = $$3368 + 4 | 0;
       $$3372 = $$3372 + 1 | 0;
      }
     } else $121 = $103;
    } while (0);
    $123 = ($121 << 16 >> 16) * 7 | 0;
    $125 = $4 + 1310736 + ($123 + -7 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + 1;
    $129 = $4 + 1310736 + ($123 + -6 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + $$2378;
    $133 = $4 + 1310736 + ($123 + -5 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $$0373;
    $$2383 = $$1382;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1382 = $$2383;
   $$2378 = $$2378 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0360 = $$1 + $1 + 4 | 0;
  $$0373 = $$0373 + 1 | 0;
  $$0381 = $$1382;
  $$2 = $$3 + 4 | 0;
 }
 L80 : do if ((label | 0) == 54) {
  _arLog(0, 3, 3524, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 59) {
  $221 = $4 + 12 | 0;
  $$1374 = 1;
  $$3379 = 1;
  $$4 = $21;
  while (1) {
   if (($$3379 | 0) > ($$0381 | 0)) break;
   $223 = HEAP32[$$4 >> 2] | 0;
   if (($223 | 0) == ($$3379 | 0)) {
    $$2375 = $$1374 + 1 | 0;
    $229 = $$1374;
   } else {
    $$2375 = $$1374;
    $229 = HEAP32[$4 + 1179664 + ($223 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $229;
   $$1374 = $$2375;
   $$3379 = $$3379 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $232 = $4 + 8 | 0;
  $233 = $$1374 + -1 | 0;
  HEAP32[$232 >> 2] = $233;
  if (!$233) $$0 = 0; else {
   _memset($221 | 0, 0, $233 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $233 << 4 | 0) | 0;
   $$4380 = 0;
   while (1) {
    if (($$4380 | 0) >= ($233 | 0)) break;
    $239 = $$4380 << 2;
    HEAP32[$4 + 131084 + ($239 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($239 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($239 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($239 | 3) << 2) >> 2] = 0;
    $$4380 = $$4380 + 1 | 0;
   }
   $$5 = 0;
   while (1) {
    if (($$5 | 0) >= ($$0381 | 0)) break;
    $251 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $252 = $$5 * 7 | 0;
    $255 = $4 + 12 + ($251 << 2) | 0;
    HEAP32[$255 >> 2] = (HEAP32[$255 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($252 << 2) >> 2] | 0);
    $262 = $251 << 1;
    $263 = $4 + 655376 + ($262 << 3) | 0;
    HEAPF64[$263 >> 3] = +HEAPF64[$263 >> 3] + +(HEAP32[$4 + 1310736 + ($252 + 1 << 2) >> 2] | 0);
    $271 = $4 + 655376 + (($262 | 1) << 3) | 0;
    HEAPF64[$271 >> 3] = +HEAPF64[$271 >> 3] + +(HEAP32[$4 + 1310736 + ($252 + 2 << 2) >> 2] | 0);
    $274 = $251 << 2;
    $275 = $4 + 131084 + ($274 << 2) | 0;
    $279 = HEAP32[$4 + 1310736 + ($252 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$275 >> 2] | 0) > ($279 | 0)) HEAP32[$275 >> 2] = $279;
    $282 = $4 + 131084 + (($274 | 1) << 2) | 0;
    $286 = HEAP32[$4 + 1310736 + ($252 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) < ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $4 + 131084 + (($274 | 2) << 2) | 0;
    $293 = HEAP32[$4 + 1310736 + ($252 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) > ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $4 + 131084 + (($274 | 3) << 2) | 0;
    $300 = HEAP32[$4 + 1310736 + ($252 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) < ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $$5 = $$5 + 1 | 0;
   }
   $303 = HEAP32[$232 >> 2] | 0;
   $$6 = 0;
   while (1) {
    if (($$6 | 0) >= ($303 | 0)) {
     $$0 = 0;
     break L80;
    }
    $307 = +(HEAP32[$4 + 12 + ($$6 << 2) >> 2] | 0);
    $308 = $$6 << 1;
    $309 = $4 + 655376 + ($308 << 3) | 0;
    HEAPF64[$309 >> 3] = +HEAPF64[$309 >> 3] / $307;
    $313 = $4 + 655376 + (($308 | 1) << 3) | 0;
    HEAPF64[$313 >> 3] = +HEAPF64[$313 >> 3] / $307;
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWRC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0358 = 0, $$0359 = 0, $$0361 = 0, $$0363 = 0, $$0367 = 0, $$0371 = 0, $$0374 = 0, $$0379 = 0, $$1 = 0, $$1360 = 0, $$1362 = 0, $$1364 = 0, $$1368 = 0, $$1372 = 0, $$1375 = 0, $$1380 = 0, $$2 = 0, $$2365 = 0, $$2369 = 0, $$2373 = 0, $$2376 = 0, $$2381 = 0, $$3 = 0, $$3366 = 0, $$3370 = 0, $$3377 = 0, $$4 = 0, $$4378 = 0, $$5 = 0, $$6 = 0, $102 = 0, $117 = 0, $119 = 0, $121 = 0, $125 = 0, $129 = 0, $13 = 0, $132 = 0, $134 = 0, $138 = 0, $142 = 0, $146 = 0, $151 = 0, $153 = 0, $157 = 0, $161 = 0, $165 = 0, $171 = 0, $174 = 0, $176 = 0, $180 = 0, $184 = 0, $188 = 0, $19 = 0, $191 = 0, $196 = 0, $20 = 0, $216 = 0, $218 = 0, $224 = 0, $227 = 0, $228 = 0, $23 = 0, $234 = 0, $246 = 0, $247 = 0, $250 = 0, $257 = 0, $258 = 0, $266 = 0, $269 = 0, $270 = 0, $274 = 0, $277 = 0, $281 = 0, $284 = 0, $288 = 0, $29 = 0, $291 = 0, $295 = 0, $298 = 0, $30 = 0, $302 = 0.0, $303 = 0, $304 = 0, $308 = 0, $33 = 0, $35 = 0, $39 = 0, $43 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $58 = 0, $6 = 0, $61 = 0, $76 = 0, $78 = 0, $80 = 0, $84 = 0, $88 = 0, $94 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0359 = $5;
 $$0361 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0374 = 0;
 while (1) {
  if (($$0374 | 0) >= ($1 | 0)) break;
  HEAP16[$$0361 >> 1] = 0;
  HEAP16[$$0359 >> 1] = 0;
  $$0359 = $$0359 + 2 | 0;
  $$0361 = $$0361 + 2 | 0;
  $$0374 = $$0374 + 1 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1360 = $5;
 $$1362 = $5 + ($13 << 1) | 0;
 $$1375 = 0;
 while (1) {
  if (($$1375 | 0) >= ($2 | 0)) break;
  HEAP16[$$1362 >> 1] = 0;
  HEAP16[$$1360 >> 1] = 0;
  $$1360 = $$1360 + ($1 << 1) | 0;
  $$1362 = $$1362 + ($1 << 1) | 0;
  $$1375 = $$1375 + 1 | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $23 = 0 - $1 | 0;
 $$0358 = $0 + $20 | 0;
 $$0371 = 1;
 $$0379 = 0;
 $$2 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0371 | 0) >= ($6 | 0)) {
   label = 59;
   break;
  }
  $$1 = $$0358;
  $$1380 = $$0379;
  $$2376 = 1;
  $$3 = $$2;
  while (1) {
   if (($$2376 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    $29 = $$3 + ($23 << 1) | 0;
    $30 = HEAP16[$29 >> 1] | 0;
    if ($30 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $30;
     $33 = ($30 << 16 >> 16) * 7 | 0;
     $35 = $4 + 1310736 + ($33 + -7 << 2) | 0;
     HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + 1;
     $39 = $4 + 1310736 + ($33 + -6 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + $$2376;
     $43 = $4 + 1310736 + ($33 + -5 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $$0371;
     HEAP32[$4 + 1310736 + ($33 + -1 << 2) >> 2] = $$0371;
     $$2381 = $$1380;
     break;
    }
    $49 = HEAP16[$29 + 2 >> 1] | 0;
    $50 = $49 << 16 >> 16;
    $53 = HEAP16[$29 + -2 >> 1] | 0;
    $54 = $53 << 16 >> 16;
    $55 = $53 << 16 >> 16 > 0;
    if ($49 << 16 >> 16 <= 0) {
     if ($55) {
      HEAP16[$$3 >> 1] = $53;
      $151 = $54 * 7 | 0;
      $153 = $4 + 1310736 + ($151 + -7 << 2) | 0;
      HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + 1;
      $157 = $4 + 1310736 + ($151 + -6 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $$2376;
      $161 = $4 + 1310736 + ($151 + -5 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $$0371;
      $165 = $4 + 1310736 + ($151 + -3 << 2) | 0;
      if ((HEAP32[$165 >> 2] | 0) < ($$2376 | 0)) HEAP32[$165 >> 2] = $$2376;
      HEAP32[$4 + 1310736 + ($151 + -1 << 2) >> 2] = $$0371;
      $$2381 = $$1380;
      break;
     }
     $171 = HEAP16[$$3 + -2 >> 1] | 0;
     if ($171 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $171;
      $174 = ($171 << 16 >> 16) * 7 | 0;
      $176 = $4 + 1310736 + ($174 + -7 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + 1;
      $180 = $4 + 1310736 + ($174 + -6 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $$2376;
      $184 = $4 + 1310736 + ($174 + -5 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $$0371;
      $188 = $4 + 1310736 + ($174 + -3 << 2) | 0;
      if ((HEAP32[$188 >> 2] | 0) >= ($$2376 | 0)) {
       $$2381 = $$1380;
       break;
      }
      HEAP32[$188 >> 2] = $$2376;
      $$2381 = $$1380;
      break;
     } else {
      $191 = $$1380 + 1 | 0;
      if (($$1380 | 0) > 32767) {
       label = 54;
       break L9;
      }
      HEAP16[$$3 >> 1] = $191;
      HEAP32[$4 + 1179664 + ($$1380 << 2) >> 2] = $191 << 16 >> 16;
      $196 = $$1380 * 7 | 0;
      HEAP32[$4 + 1310736 + ($196 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($196 + 1 << 2) >> 2] = $$2376;
      HEAP32[$4 + 1310736 + ($196 + 2 << 2) >> 2] = $$0371;
      HEAP32[$4 + 1310736 + ($196 + 3 << 2) >> 2] = $$2376;
      HEAP32[$4 + 1310736 + ($196 + 4 << 2) >> 2] = $$2376;
      HEAP32[$4 + 1310736 + ($196 + 5 << 2) >> 2] = $$0371;
      HEAP32[$4 + 1310736 + ($196 + 6 << 2) >> 2] = $$0371;
      $$2381 = $191;
      break;
     }
    }
    if ($55) {
     $58 = HEAP32[$4 + 1179664 + ($50 + -1 << 2) >> 2] | 0;
     $61 = HEAP32[$4 + 1179664 + ($54 + -1 << 2) >> 2] | 0;
     L36 : do if (($58 | 0) > ($61 | 0)) {
      HEAP16[$$3 >> 1] = $61;
      $$0363 = $19;
      $$0367 = 0;
      while (1) {
       if (($$0367 | 0) >= ($$1380 | 0)) {
        $76 = $61;
        break L36;
       }
       if ((HEAP32[$$0363 >> 2] | 0) == ($58 | 0)) HEAP32[$$0363 >> 2] = $61;
       $$0363 = $$0363 + 4 | 0;
       $$0367 = $$0367 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $58;
      if (($58 | 0) < ($61 | 0)) {
       $$1364 = $19;
       $$1368 = 0;
       while (1) {
        if (($$1368 | 0) >= ($$1380 | 0)) {
         $76 = $58;
         break L36;
        }
        if ((HEAP32[$$1364 >> 2] | 0) == ($61 | 0)) HEAP32[$$1364 >> 2] = $58;
        $$1364 = $$1364 + 4 | 0;
        $$1368 = $$1368 + 1 | 0;
       }
      } else $76 = $58;
     } while (0);
     $78 = ($76 << 16 >> 16) * 7 | 0;
     $80 = $4 + 1310736 + ($78 + -7 << 2) | 0;
     HEAP32[$80 >> 2] = (HEAP32[$80 >> 2] | 0) + 1;
     $84 = $4 + 1310736 + ($78 + -6 << 2) | 0;
     HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + $$2376;
     $88 = $4 + 1310736 + ($78 + -5 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + $$0371;
     HEAP32[$4 + 1310736 + ($78 + -1 << 2) >> 2] = $$0371;
     $$2381 = $$1380;
     break;
    }
    $94 = HEAP16[$$3 + -2 >> 1] | 0;
    if ($94 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $49;
     $132 = $50 * 7 | 0;
     $134 = $4 + 1310736 + ($132 + -7 << 2) | 0;
     HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + 1;
     $138 = $4 + 1310736 + ($132 + -6 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $$2376;
     $142 = $4 + 1310736 + ($132 + -5 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$0371;
     $146 = $4 + 1310736 + ($132 + -4 << 2) | 0;
     if ((HEAP32[$146 >> 2] | 0) > ($$2376 | 0)) HEAP32[$146 >> 2] = $$2376;
     HEAP32[$4 + 1310736 + ($132 + -1 << 2) >> 2] = $$0371;
     $$2381 = $$1380;
     break;
    }
    $99 = HEAP32[$4 + 1179664 + ($50 + -1 << 2) >> 2] | 0;
    $102 = HEAP32[$4 + 1179664 + (($94 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L60 : do if (($99 | 0) > ($102 | 0)) {
     HEAP16[$$3 >> 1] = $102;
     $$2365 = $19;
     $$2369 = 0;
     while (1) {
      if (($$2369 | 0) >= ($$1380 | 0)) {
       $117 = $102;
       break L60;
      }
      if ((HEAP32[$$2365 >> 2] | 0) == ($99 | 0)) HEAP32[$$2365 >> 2] = $102;
      $$2365 = $$2365 + 4 | 0;
      $$2369 = $$2369 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $99;
     if (($99 | 0) < ($102 | 0)) {
      $$3366 = $19;
      $$3370 = 0;
      while (1) {
       if (($$3370 | 0) >= ($$1380 | 0)) {
        $117 = $99;
        break L60;
       }
       if ((HEAP32[$$3366 >> 2] | 0) == ($102 | 0)) HEAP32[$$3366 >> 2] = $99;
       $$3366 = $$3366 + 4 | 0;
       $$3370 = $$3370 + 1 | 0;
      }
     } else $117 = $99;
    } while (0);
    $119 = ($117 << 16 >> 16) * 7 | 0;
    $121 = $4 + 1310736 + ($119 + -7 << 2) | 0;
    HEAP32[$121 >> 2] = (HEAP32[$121 >> 2] | 0) + 1;
    $125 = $4 + 1310736 + ($119 + -6 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + $$2376;
    $129 = $4 + 1310736 + ($119 + -5 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + $$0371;
    $$2381 = $$1380;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$2381 = $$1380;
   } while (0);
   $$1 = $$1 + 1 | 0;
   $$1380 = $$2381;
   $$2376 = $$2376 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0358 = $$1 + 2 | 0;
  $$0371 = $$0371 + 1 | 0;
  $$0379 = $$1380;
  $$2 = $$3 + 4 | 0;
 }
 L80 : do if ((label | 0) == 54) {
  _arLog(0, 3, 3524, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 59) {
  $216 = $4 + 12 | 0;
  $$1372 = 1;
  $$3377 = 1;
  $$4 = $19;
  while (1) {
   if (($$3377 | 0) > ($$0379 | 0)) break;
   $218 = HEAP32[$$4 >> 2] | 0;
   if (($218 | 0) == ($$3377 | 0)) {
    $$2373 = $$1372 + 1 | 0;
    $224 = $$1372;
   } else {
    $$2373 = $$1372;
    $224 = HEAP32[$4 + 1179664 + ($218 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $224;
   $$1372 = $$2373;
   $$3377 = $$3377 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $227 = $4 + 8 | 0;
  $228 = $$1372 + -1 | 0;
  HEAP32[$227 >> 2] = $228;
  if (!$228) $$0 = 0; else {
   _memset($216 | 0, 0, $228 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $228 << 4 | 0) | 0;
   $$4378 = 0;
   while (1) {
    if (($$4378 | 0) >= ($228 | 0)) break;
    $234 = $$4378 << 2;
    HEAP32[$4 + 131084 + ($234 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($234 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($234 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($234 | 3) << 2) >> 2] = 0;
    $$4378 = $$4378 + 1 | 0;
   }
   $$5 = 0;
   while (1) {
    if (($$5 | 0) >= ($$0379 | 0)) break;
    $246 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $247 = $$5 * 7 | 0;
    $250 = $4 + 12 + ($246 << 2) | 0;
    HEAP32[$250 >> 2] = (HEAP32[$250 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($247 << 2) >> 2] | 0);
    $257 = $246 << 1;
    $258 = $4 + 655376 + ($257 << 3) | 0;
    HEAPF64[$258 >> 3] = +HEAPF64[$258 >> 3] + +(HEAP32[$4 + 1310736 + ($247 + 1 << 2) >> 2] | 0);
    $266 = $4 + 655376 + (($257 | 1) << 3) | 0;
    HEAPF64[$266 >> 3] = +HEAPF64[$266 >> 3] + +(HEAP32[$4 + 1310736 + ($247 + 2 << 2) >> 2] | 0);
    $269 = $246 << 2;
    $270 = $4 + 131084 + ($269 << 2) | 0;
    $274 = HEAP32[$4 + 1310736 + ($247 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$270 >> 2] | 0) > ($274 | 0)) HEAP32[$270 >> 2] = $274;
    $277 = $4 + 131084 + (($269 | 1) << 2) | 0;
    $281 = HEAP32[$4 + 1310736 + ($247 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$277 >> 2] | 0) < ($281 | 0)) HEAP32[$277 >> 2] = $281;
    $284 = $4 + 131084 + (($269 | 2) << 2) | 0;
    $288 = HEAP32[$4 + 1310736 + ($247 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$284 >> 2] | 0) > ($288 | 0)) HEAP32[$284 >> 2] = $288;
    $291 = $4 + 131084 + (($269 | 3) << 2) | 0;
    $295 = HEAP32[$4 + 1310736 + ($247 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$291 >> 2] | 0) < ($295 | 0)) HEAP32[$291 >> 2] = $295;
    $$5 = $$5 + 1 | 0;
   }
   $298 = HEAP32[$227 >> 2] | 0;
   $$6 = 0;
   while (1) {
    if (($$6 | 0) >= ($298 | 0)) {
     $$0 = 0;
     break L80;
    }
    $302 = +(HEAP32[$4 + 12 + ($$6 << 2) >> 2] | 0);
    $303 = $$6 << 1;
    $304 = $4 + 655376 + ($303 << 3) | 0;
    HEAPF64[$304 >> 3] = +HEAPF64[$304 >> 3] / $302;
    $308 = $4 + 655376 + (($303 | 1) << 3) | 0;
    HEAPF64[$308 >> 3] = +HEAPF64[$308 >> 3] / $302;
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBRC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0358 = 0, $$0359 = 0, $$0361 = 0, $$0363 = 0, $$0367 = 0, $$0371 = 0, $$0374 = 0, $$0379 = 0, $$1 = 0, $$1360 = 0, $$1362 = 0, $$1364 = 0, $$1368 = 0, $$1372 = 0, $$1375 = 0, $$1380 = 0, $$2 = 0, $$2365 = 0, $$2369 = 0, $$2373 = 0, $$2376 = 0, $$2381 = 0, $$3 = 0, $$3366 = 0, $$3370 = 0, $$3377 = 0, $$4 = 0, $$4378 = 0, $$5 = 0, $$6 = 0, $102 = 0, $117 = 0, $119 = 0, $121 = 0, $125 = 0, $129 = 0, $13 = 0, $132 = 0, $134 = 0, $138 = 0, $142 = 0, $146 = 0, $151 = 0, $153 = 0, $157 = 0, $161 = 0, $165 = 0, $171 = 0, $174 = 0, $176 = 0, $180 = 0, $184 = 0, $188 = 0, $19 = 0, $191 = 0, $196 = 0, $20 = 0, $216 = 0, $218 = 0, $224 = 0, $227 = 0, $228 = 0, $23 = 0, $234 = 0, $246 = 0, $247 = 0, $250 = 0, $257 = 0, $258 = 0, $266 = 0, $269 = 0, $270 = 0, $274 = 0, $277 = 0, $281 = 0, $284 = 0, $288 = 0, $29 = 0, $291 = 0, $295 = 0, $298 = 0, $30 = 0, $302 = 0.0, $303 = 0, $304 = 0, $308 = 0, $33 = 0, $35 = 0, $39 = 0, $43 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $58 = 0, $6 = 0, $61 = 0, $76 = 0, $78 = 0, $80 = 0, $84 = 0, $88 = 0, $94 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0359 = $5;
 $$0361 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0374 = 0;
 while (1) {
  if (($$0374 | 0) >= ($1 | 0)) break;
  HEAP16[$$0361 >> 1] = 0;
  HEAP16[$$0359 >> 1] = 0;
  $$0359 = $$0359 + 2 | 0;
  $$0361 = $$0361 + 2 | 0;
  $$0374 = $$0374 + 1 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1360 = $5;
 $$1362 = $5 + ($13 << 1) | 0;
 $$1375 = 0;
 while (1) {
  if (($$1375 | 0) >= ($2 | 0)) break;
  HEAP16[$$1362 >> 1] = 0;
  HEAP16[$$1360 >> 1] = 0;
  $$1360 = $$1360 + ($1 << 1) | 0;
  $$1362 = $$1362 + ($1 << 1) | 0;
  $$1375 = $$1375 + 1 | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $23 = 0 - $1 | 0;
 $$0358 = $0 + $20 | 0;
 $$0371 = 1;
 $$0379 = 0;
 $$2 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0371 | 0) >= ($6 | 0)) {
   label = 59;
   break;
  }
  $$1 = $$0358;
  $$1380 = $$0379;
  $$2376 = 1;
  $$3 = $$2;
  while (1) {
   if (($$2376 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$2381 = $$1380;
   } else {
    $29 = $$3 + ($23 << 1) | 0;
    $30 = HEAP16[$29 >> 1] | 0;
    if ($30 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $30;
     $33 = ($30 << 16 >> 16) * 7 | 0;
     $35 = $4 + 1310736 + ($33 + -7 << 2) | 0;
     HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + 1;
     $39 = $4 + 1310736 + ($33 + -6 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + $$2376;
     $43 = $4 + 1310736 + ($33 + -5 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $$0371;
     HEAP32[$4 + 1310736 + ($33 + -1 << 2) >> 2] = $$0371;
     $$2381 = $$1380;
     break;
    }
    $49 = HEAP16[$29 + 2 >> 1] | 0;
    $50 = $49 << 16 >> 16;
    $53 = HEAP16[$29 + -2 >> 1] | 0;
    $54 = $53 << 16 >> 16;
    $55 = $53 << 16 >> 16 > 0;
    if ($49 << 16 >> 16 <= 0) {
     if ($55) {
      HEAP16[$$3 >> 1] = $53;
      $151 = $54 * 7 | 0;
      $153 = $4 + 1310736 + ($151 + -7 << 2) | 0;
      HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + 1;
      $157 = $4 + 1310736 + ($151 + -6 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $$2376;
      $161 = $4 + 1310736 + ($151 + -5 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $$0371;
      $165 = $4 + 1310736 + ($151 + -3 << 2) | 0;
      if ((HEAP32[$165 >> 2] | 0) < ($$2376 | 0)) HEAP32[$165 >> 2] = $$2376;
      HEAP32[$4 + 1310736 + ($151 + -1 << 2) >> 2] = $$0371;
      $$2381 = $$1380;
      break;
     }
     $171 = HEAP16[$$3 + -2 >> 1] | 0;
     if ($171 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $171;
      $174 = ($171 << 16 >> 16) * 7 | 0;
      $176 = $4 + 1310736 + ($174 + -7 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + 1;
      $180 = $4 + 1310736 + ($174 + -6 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $$2376;
      $184 = $4 + 1310736 + ($174 + -5 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $$0371;
      $188 = $4 + 1310736 + ($174 + -3 << 2) | 0;
      if ((HEAP32[$188 >> 2] | 0) >= ($$2376 | 0)) {
       $$2381 = $$1380;
       break;
      }
      HEAP32[$188 >> 2] = $$2376;
      $$2381 = $$1380;
      break;
     } else {
      $191 = $$1380 + 1 | 0;
      if (($$1380 | 0) > 32767) {
       label = 54;
       break L9;
      }
      HEAP16[$$3 >> 1] = $191;
      HEAP32[$4 + 1179664 + ($$1380 << 2) >> 2] = $191 << 16 >> 16;
      $196 = $$1380 * 7 | 0;
      HEAP32[$4 + 1310736 + ($196 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($196 + 1 << 2) >> 2] = $$2376;
      HEAP32[$4 + 1310736 + ($196 + 2 << 2) >> 2] = $$0371;
      HEAP32[$4 + 1310736 + ($196 + 3 << 2) >> 2] = $$2376;
      HEAP32[$4 + 1310736 + ($196 + 4 << 2) >> 2] = $$2376;
      HEAP32[$4 + 1310736 + ($196 + 5 << 2) >> 2] = $$0371;
      HEAP32[$4 + 1310736 + ($196 + 6 << 2) >> 2] = $$0371;
      $$2381 = $191;
      break;
     }
    }
    if ($55) {
     $58 = HEAP32[$4 + 1179664 + ($50 + -1 << 2) >> 2] | 0;
     $61 = HEAP32[$4 + 1179664 + ($54 + -1 << 2) >> 2] | 0;
     L37 : do if (($58 | 0) > ($61 | 0)) {
      HEAP16[$$3 >> 1] = $61;
      $$0363 = $19;
      $$0367 = 0;
      while (1) {
       if (($$0367 | 0) >= ($$1380 | 0)) {
        $76 = $61;
        break L37;
       }
       if ((HEAP32[$$0363 >> 2] | 0) == ($58 | 0)) HEAP32[$$0363 >> 2] = $61;
       $$0363 = $$0363 + 4 | 0;
       $$0367 = $$0367 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $58;
      if (($58 | 0) < ($61 | 0)) {
       $$1364 = $19;
       $$1368 = 0;
       while (1) {
        if (($$1368 | 0) >= ($$1380 | 0)) {
         $76 = $58;
         break L37;
        }
        if ((HEAP32[$$1364 >> 2] | 0) == ($61 | 0)) HEAP32[$$1364 >> 2] = $58;
        $$1364 = $$1364 + 4 | 0;
        $$1368 = $$1368 + 1 | 0;
       }
      } else $76 = $58;
     } while (0);
     $78 = ($76 << 16 >> 16) * 7 | 0;
     $80 = $4 + 1310736 + ($78 + -7 << 2) | 0;
     HEAP32[$80 >> 2] = (HEAP32[$80 >> 2] | 0) + 1;
     $84 = $4 + 1310736 + ($78 + -6 << 2) | 0;
     HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + $$2376;
     $88 = $4 + 1310736 + ($78 + -5 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + $$0371;
     HEAP32[$4 + 1310736 + ($78 + -1 << 2) >> 2] = $$0371;
     $$2381 = $$1380;
     break;
    }
    $94 = HEAP16[$$3 + -2 >> 1] | 0;
    if ($94 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $49;
     $132 = $50 * 7 | 0;
     $134 = $4 + 1310736 + ($132 + -7 << 2) | 0;
     HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + 1;
     $138 = $4 + 1310736 + ($132 + -6 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $$2376;
     $142 = $4 + 1310736 + ($132 + -5 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$0371;
     $146 = $4 + 1310736 + ($132 + -4 << 2) | 0;
     if ((HEAP32[$146 >> 2] | 0) > ($$2376 | 0)) HEAP32[$146 >> 2] = $$2376;
     HEAP32[$4 + 1310736 + ($132 + -1 << 2) >> 2] = $$0371;
     $$2381 = $$1380;
     break;
    }
    $99 = HEAP32[$4 + 1179664 + ($50 + -1 << 2) >> 2] | 0;
    $102 = HEAP32[$4 + 1179664 + (($94 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L61 : do if (($99 | 0) > ($102 | 0)) {
     HEAP16[$$3 >> 1] = $102;
     $$2365 = $19;
     $$2369 = 0;
     while (1) {
      if (($$2369 | 0) >= ($$1380 | 0)) {
       $117 = $102;
       break L61;
      }
      if ((HEAP32[$$2365 >> 2] | 0) == ($99 | 0)) HEAP32[$$2365 >> 2] = $102;
      $$2365 = $$2365 + 4 | 0;
      $$2369 = $$2369 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $99;
     if (($99 | 0) < ($102 | 0)) {
      $$3366 = $19;
      $$3370 = 0;
      while (1) {
       if (($$3370 | 0) >= ($$1380 | 0)) {
        $117 = $99;
        break L61;
       }
       if ((HEAP32[$$3366 >> 2] | 0) == ($102 | 0)) HEAP32[$$3366 >> 2] = $99;
       $$3366 = $$3366 + 4 | 0;
       $$3370 = $$3370 + 1 | 0;
      }
     } else $117 = $99;
    } while (0);
    $119 = ($117 << 16 >> 16) * 7 | 0;
    $121 = $4 + 1310736 + ($119 + -7 << 2) | 0;
    HEAP32[$121 >> 2] = (HEAP32[$121 >> 2] | 0) + 1;
    $125 = $4 + 1310736 + ($119 + -6 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + $$2376;
    $129 = $4 + 1310736 + ($119 + -5 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + $$0371;
    $$2381 = $$1380;
   } while (0);
   $$1 = $$1 + 1 | 0;
   $$1380 = $$2381;
   $$2376 = $$2376 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0358 = $$1 + 2 | 0;
  $$0371 = $$0371 + 1 | 0;
  $$0379 = $$1380;
  $$2 = $$3 + 4 | 0;
 }
 L80 : do if ((label | 0) == 54) {
  _arLog(0, 3, 3524, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 59) {
  $216 = $4 + 12 | 0;
  $$1372 = 1;
  $$3377 = 1;
  $$4 = $19;
  while (1) {
   if (($$3377 | 0) > ($$0379 | 0)) break;
   $218 = HEAP32[$$4 >> 2] | 0;
   if (($218 | 0) == ($$3377 | 0)) {
    $$2373 = $$1372 + 1 | 0;
    $224 = $$1372;
   } else {
    $$2373 = $$1372;
    $224 = HEAP32[$4 + 1179664 + ($218 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $224;
   $$1372 = $$2373;
   $$3377 = $$3377 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $227 = $4 + 8 | 0;
  $228 = $$1372 + -1 | 0;
  HEAP32[$227 >> 2] = $228;
  if (!$228) $$0 = 0; else {
   _memset($216 | 0, 0, $228 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $228 << 4 | 0) | 0;
   $$4378 = 0;
   while (1) {
    if (($$4378 | 0) >= ($228 | 0)) break;
    $234 = $$4378 << 2;
    HEAP32[$4 + 131084 + ($234 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($234 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($234 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($234 | 3) << 2) >> 2] = 0;
    $$4378 = $$4378 + 1 | 0;
   }
   $$5 = 0;
   while (1) {
    if (($$5 | 0) >= ($$0379 | 0)) break;
    $246 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $247 = $$5 * 7 | 0;
    $250 = $4 + 12 + ($246 << 2) | 0;
    HEAP32[$250 >> 2] = (HEAP32[$250 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($247 << 2) >> 2] | 0);
    $257 = $246 << 1;
    $258 = $4 + 655376 + ($257 << 3) | 0;
    HEAPF64[$258 >> 3] = +HEAPF64[$258 >> 3] + +(HEAP32[$4 + 1310736 + ($247 + 1 << 2) >> 2] | 0);
    $266 = $4 + 655376 + (($257 | 1) << 3) | 0;
    HEAPF64[$266 >> 3] = +HEAPF64[$266 >> 3] + +(HEAP32[$4 + 1310736 + ($247 + 2 << 2) >> 2] | 0);
    $269 = $246 << 2;
    $270 = $4 + 131084 + ($269 << 2) | 0;
    $274 = HEAP32[$4 + 1310736 + ($247 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$270 >> 2] | 0) > ($274 | 0)) HEAP32[$270 >> 2] = $274;
    $277 = $4 + 131084 + (($269 | 1) << 2) | 0;
    $281 = HEAP32[$4 + 1310736 + ($247 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$277 >> 2] | 0) < ($281 | 0)) HEAP32[$277 >> 2] = $281;
    $284 = $4 + 131084 + (($269 | 2) << 2) | 0;
    $288 = HEAP32[$4 + 1310736 + ($247 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$284 >> 2] | 0) > ($288 | 0)) HEAP32[$284 >> 2] = $288;
    $291 = $4 + 131084 + (($269 | 3) << 2) | 0;
    $295 = HEAP32[$4 + 1310736 + ($247 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$291 >> 2] | 0) < ($295 | 0)) HEAP32[$291 >> 2] = $295;
    $$5 = $$5 + 1 | 0;
   }
   $298 = HEAP32[$227 >> 2] | 0;
   $$6 = 0;
   while (1) {
    if (($$6 | 0) >= ($298 | 0)) {
     $$0 = 0;
     break L80;
    }
    $302 = +(HEAP32[$4 + 12 + ($$6 << 2) >> 2] | 0);
    $303 = $$6 << 1;
    $304 = $4 + 655376 + ($303 << 3) | 0;
    HEAPF64[$304 >> 3] = +HEAPF64[$304 >> 3] / $302;
    $308 = $4 + 655376 + (($303 | 1) << 3) | 0;
    HEAPF64[$308 >> 3] = +HEAPF64[$308 >> 3] / $302;
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_array_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i132 = 0, $$0$i$i$i112 = 0, $$0$i$i$i119 = 0, $$0$i$i$i123 = 0, $$0$i$i$i127 = 0, $$0$i$i$idx$i = 0, $$7 = 0, $103 = 0, $104 = 0, $105 = 0, $108 = 0, $112 = 0, $113 = 0, $115 = 0, $123 = 0, $13 = 0, $131 = 0, $132 = 0, $142 = 0, $143 = 0, $144 = 0, $147 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $25 = 0, $27 = 0, $3 = 0, $35 = 0, $4 = 0, $41 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $55 = 0, $6 = 0, $63 = 0, $67 = 0, $7 = 0, $75 = 0, $76 = 0, $8 = 0, $83 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $3 = sp + 96 | 0;
 $4 = sp + 72 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 do if (($0 | 0) == ($1 | 0)) $$7 = $0; else if ((HEAP8[$0 >> 0] | 0) == 65) {
  $13 = $0 + 1 | 0;
  if (($13 | 0) == ($1 | 0)) $$7 = $0; else {
   $15 = HEAP8[$13 >> 0] | 0;
   if ($15 << 24 >> 24 == 95) {
    $17 = $0 + 2 | 0;
    $18 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($17, $1, $2) | 0;
    if (($18 | 0) == ($17 | 0)) {
     $$7 = $0;
     break;
    }
    $21 = $2 + 4 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($22 | 0)) {
     $$7 = $0;
     break;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3, $22 + -12 | 0, 2);
    $25 = __ZNSt3__211char_traitsIcE6lengthEPKc(15111) | 0;
    $27 = HEAP8[$3 + 11 >> 0] | 0;
    if (($25 | 0) == (($27 << 24 >> 24 < 0 ? HEAP32[$3 + 4 >> 2] | 0 : $27 & 255) | 0)) {
     $35 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3, 15111, $25) | 0) == 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     if ($35) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj((HEAP32[$21 >> 2] | 0) + -12 | 0);
    } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$21 >> 2] | 0) + -12 | 0, 0, 16552) | 0;
    $$7 = $18;
    break;
   }
   if (($15 + -49 & 255) < 9) {
    $41 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($13, $1) | 0;
    if (($41 | 0) == ($1 | 0)) {
     $$7 = $0;
     break;
    }
    if ((HEAP8[$41 >> 0] | 0) != 95) {
     $$7 = $0;
     break;
    }
    $45 = $41 + 1 | 0;
    $46 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($45, $1, $2) | 0;
    if (($46 | 0) == ($45 | 0)) {
     $$7 = $0;
     break;
    }
    $49 = $2 + 4 | 0;
    $50 = HEAP32[$49 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($50 | 0)) {
     $$7 = $0;
     break;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3, $50 + -12 | 0, 2);
    $53 = __ZNSt3__211char_traitsIcE6lengthEPKc(15111) | 0;
    $55 = HEAP8[$3 + 11 >> 0] | 0;
    if (($53 | 0) == (($55 << 24 >> 24 < 0 ? HEAP32[$3 + 4 >> 2] | 0 : $55 & 255) | 0)) {
     $63 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3, 15111, $53) | 0) == 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     if ($63) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj((HEAP32[$49 >> 2] | 0) + -12 | 0);
    } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $67 = (HEAP32[$49 >> 2] | 0) + -12 | 0;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($5, $13, $41);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5, 0, 15111) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15166) | 0;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    $$0$i$i$i112 = 0;
    while (1) {
     if (($$0$i$i$i112 | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i$i112 << 2) >> 2] = 0;
     $$0$i$i$i112 = $$0$i$i$i112 + 1 | 0;
    }
    $75 = HEAP8[$3 + 11 >> 0] | 0;
    $76 = $75 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($67, 0, $76 ? HEAP32[$3 >> 2] | 0 : $3, $76 ? HEAP32[$3 + 4 >> 2] | 0 : $75 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$7 = $46;
    break;
   }
   $83 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
   if (($83 | 0) == ($13 | 0) | ($83 | 0) == ($1 | 0)) $$7 = $0; else if ((HEAP8[$83 >> 0] | 0) == 95) {
    $88 = $83 + 1 | 0;
    $89 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($88, $1, $2) | 0;
    if (($89 | 0) == ($88 | 0)) $$7 = $0; else {
     $91 = $2 + 4 | 0;
     $92 = HEAP32[$91 >> 2] | 0;
     if ((($92 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$7 = $0; else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($4, $92 + -24 | 0);
      $99 = HEAP32[$91 >> 2] | 0;
      $$0$i$i$idx$i = 0;
      while (1) {
       if (($$0$i$i$idx$i | 0) == -1) break;
       $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($99 + ($$0$i$i$add$i * 24 | 0) | 0);
       $$0$i$i$idx$i = $$0$i$i$add$i;
      }
      HEAP32[$91 >> 2] = $99 + -24;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($5, $99 + -48 | 0);
      $103 = HEAP32[$91 >> 2] | 0;
      $104 = $103 + -24 | 0;
      $105 = $104 + 11 | 0;
      if ((HEAP8[$105 >> 0] | 0) < 0) {
       $108 = HEAP32[$104 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($108, $3);
       HEAP32[$103 + -20 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($104, $3);
       HEAP8[$105 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($104);
      HEAP32[$104 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$104 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$104 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i$i | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
      }
      $112 = $4 + 12 | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3, $112, 2);
      $113 = __ZNSt3__211char_traitsIcE6lengthEPKc(15111) | 0;
      $115 = HEAP8[$3 + 11 >> 0] | 0;
      if (($113 | 0) == (($115 << 24 >> 24 < 0 ? HEAP32[$3 + 4 >> 2] | 0 : $115 & 255) | 0)) {
       $123 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3, 15111, $113) | 0) == 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       if ($123) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($112);
      } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9, 0, 15111) | 0;
      HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
      HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
      $$0$i$i$i119 = 0;
      while (1) {
       if (($$0$i$i$i119 | 0) == 3) break;
       HEAP32[$9 + ($$0$i$i$i119 << 2) >> 2] = 0;
       $$0$i$i$i119 = $$0$i$i$i119 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 15166) | 0;
      HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
      HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
      $$0$i$i$i123 = 0;
      while (1) {
       if (($$0$i$i$i123 | 0) == 3) break;
       HEAP32[$8 + ($$0$i$i$i123 << 2) >> 2] = 0;
       $$0$i$i$i123 = $$0$i$i$i123 + 1 | 0;
      }
      $131 = HEAP8[$112 + 11 >> 0] | 0;
      $132 = $131 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, $132 ? HEAP32[$112 >> 2] | 0 : $112, $132 ? HEAP32[$4 + 16 >> 2] | 0 : $131 & 255) | 0;
      HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
      HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
      $$0$i$i$i127 = 0;
      while (1) {
       if (($$0$i$i$i127 | 0) == 3) break;
       HEAP32[$7 + ($$0$i$i$i127 << 2) >> 2] = 0;
       $$0$i$i$i127 = $$0$i$i$i127 + 1 | 0;
      }
      $142 = HEAP32[$91 >> 2] | 0;
      $143 = $142 + -12 | 0;
      $144 = $143 + 11 | 0;
      if ((HEAP8[$144 >> 0] | 0) < 0) {
       $147 = HEAP32[$143 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($147, $3);
       HEAP32[$142 + -8 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($143, $3);
       HEAP8[$144 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($143);
      HEAP32[$143 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$143 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$143 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $$0$i$i$i$i132 = 0;
      while (1) {
       if (($$0$i$i$i$i132 | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i$i$i132 << 2) >> 2] = 0;
       $$0$i$i$i$i132 = $$0$i$i$i$i132 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      $$7 = $89;
     }
    }
   } else $$7 = $0;
  }
 } else $$7 = $0; while (0);
 STACKTOP = sp;
 return $$7 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_unnamed_type_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i133 = 0, $$0$i$i$add$i139 = 0, $$0$i$i$add$i143 = 0, $$0$i$i$add$i148 = 0, $$0$i$i$add$i154 = 0, $$0$i$i$add$i158 = 0, $$0$i$i$add$i162 = 0, $$0$i$i$i$i = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i132 = 0, $$0$i$i$idx$i138 = 0, $$0$i$i$idx$i142 = 0, $$0$i$i$idx$i147 = 0, $$0$i$i$idx$i153 = 0, $$0$i$i$idx$i157 = 0, $$0$i$i$idx$i161 = 0, $$0105 = 0, $$0105$lcssa = 0, $$0106 = 0, $$0110 = 0, $$0110$lcssa = 0, $$0116 = 0, $$2108 = 0, $$3109 = 0, $$7 = 0, $$byval_copy = 0, $101 = 0, $104 = 0, $113 = 0, $114 = 0, $125 = 0, $128 = 0, $130 = 0, $141 = 0, $147 = 0, $152 = 0, $18 = 0, $19 = 0, $25 = 0, $27 = 0, $3 = 0, $4 = 0, $44 = 0, $49 = 0, $5 = 0, $50 = 0, $56 = 0, $6 = 0, $62 = 0, $64 = 0, $67 = 0, $7 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $82 = 0, $87 = 0, $89 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $$byval_copy = sp + 56 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 28 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 $7 = sp + 24 | 0;
 L1 : do if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 85) {
  switch (HEAP8[$0 + 1 >> 0] | 0) {
  case 116:
   {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15920, __ZNSt3__211char_traitsIcE6lengthEPKc(15920) | 0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($$byval_copy, $3);
    $18 = $2 + 4 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    if ($19 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($19, $$byval_copy);
     HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $$byval_copy);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$byval_copy);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $25 = $0 + 2 | 0;
    if (($25 | 0) == ($1 | 0)) {
     $27 = HEAP32[$18 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$18 >> 2] = $27 + -24;
     $$7 = $0;
     break L1;
    }
    if (((HEAP8[$25 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
     $$0110 = $0 + 3 | 0;
     while (1) {
      if (($$0110 | 0) == ($1 | 0)) {
       $$0110$lcssa = $1;
       break;
      }
      if (((HEAP8[$$0110 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
       $$0110$lcssa = $$0110;
       break;
      }
      $$0110 = $$0110 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE23__append_forward_unsafeIPKcEERS7_T_SC_((HEAP32[$18 >> 2] | 0) + -24 | 0, $25, $$0110$lcssa);
     $$0116 = $$0110$lcssa;
    } else $$0116 = $25;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc((HEAP32[$18 >> 2] | 0) + -24 | 0, 39);
    if (($$0116 | 0) != ($1 | 0)) if ((HEAP8[$$0116 >> 0] | 0) == 95) {
     $$7 = $$0116 + 1 | 0;
     break L1;
    }
    $44 = HEAP32[$18 >> 2] | 0;
    $$0$i$i$idx$i132 = 0;
    while (1) {
     if (($$0$i$i$idx$i132 | 0) == -1) break;
     $$0$i$i$add$i133 = $$0$i$i$idx$i132 + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($44 + ($$0$i$i$add$i133 * 24 | 0) | 0);
     $$0$i$i$idx$i132 = $$0$i$i$add$i133;
    }
    HEAP32[$18 >> 2] = $44 + -24;
    $$7 = $0;
    break L1;
    break;
   }
  case 108:
   break;
  default:
   {
    $$7 = $0;
    break L1;
   }
  }
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($4, 15929, __ZNSt3__211char_traitsIcE6lengthEPKc(15929) | 0);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($$byval_copy, $4);
  $49 = $2 + 4 | 0;
  $50 = HEAP32[$49 >> 2] | 0;
  if ($50 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($50, $$byval_copy);
   HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 24;
  } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $$byval_copy);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$byval_copy);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
  $56 = $0 + 2 | 0;
  do if ((HEAP8[$56 >> 0] | 0) == 118) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc((HEAP32[$49 >> 2] | 0) + -24 | 0, 41);
   $$2108 = $0 + 3 | 0;
  } else {
   $62 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($56, $1, $2) | 0;
   if (($62 | 0) == ($56 | 0)) {
    $64 = HEAP32[$49 >> 2] | 0;
    $$0$i$i$idx$i138 = 0;
    while (1) {
     if (($$0$i$i$idx$i138 | 0) == -1) break;
     $$0$i$i$add$i139 = $$0$i$i$idx$i138 + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($64 + ($$0$i$i$add$i139 * 24 | 0) | 0);
     $$0$i$i$idx$i138 = $$0$i$i$add$i139;
    }
    HEAP32[$49 >> 2] = $64 + -24;
    $$7 = $0;
    break L1;
   }
   $67 = HEAP32[$49 >> 2] | 0;
   if ((($67 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
    $$7 = $0;
    break L1;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $67 + -24 | 0);
   $74 = HEAP32[$49 >> 2] | 0;
   $$0$i$i$idx$i142 = 0;
   while (1) {
    if (($$0$i$i$idx$i142 | 0) == -1) break;
    $$0$i$i$add$i143 = $$0$i$i$idx$i142 + -1 | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($74 + ($$0$i$i$add$i143 * 24 | 0) | 0);
    $$0$i$i$idx$i142 = $$0$i$i$add$i143;
   }
   HEAP32[$49 >> 2] = $74 + -24;
   $78 = $5 + 11 | 0;
   $79 = HEAP8[$78 >> 0] | 0;
   $80 = $79 << 24 >> 24 < 0;
   $82 = $5 + 4 | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($74 + -48 | 0, $80 ? HEAP32[$5 >> 2] | 0 : $5, $80 ? HEAP32[$82 >> 2] | 0 : $79 & 255) | 0;
   $$0106 = $62;
   while (1) {
    $87 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$0106, $1, $2) | 0;
    if (($87 | 0) == ($$0106 | 0)) {
     label = 54;
     break;
    }
    $89 = HEAP32[$49 >> 2] | 0;
    if ((($89 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     label = 82;
     break;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $89 + -24 | 0);
    if ((HEAP8[$78 >> 0] | 0) < 0) {
     $98 = HEAP32[$5 >> 2] | 0;
     HEAP8[$$byval_copy >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($98, $$byval_copy);
     HEAP32[$82 >> 2] = 0;
    } else {
     HEAP8[$$byval_copy >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($5, $$byval_copy);
     HEAP8[$78 >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($5);
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $101 = HEAP32[$49 >> 2] | 0;
    $$0$i$i$idx$i147 = 0;
    while (1) {
     if (($$0$i$i$idx$i147 | 0) == -1) break;
     $$0$i$i$add$i148 = $$0$i$i$idx$i147 + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($101 + ($$0$i$i$add$i148 * 24 | 0) | 0);
     $$0$i$i$idx$i147 = $$0$i$i$add$i148;
    }
    HEAP32[$49 >> 2] = $101 + -24;
    $104 = HEAP8[$78 >> 0] | 0;
    if (($104 << 24 >> 24 < 0 ? HEAP32[$82 >> 2] | 0 : $104 & 255) | 0) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($101 + -48 | 0, 15341) | 0;
     $113 = HEAP8[$78 >> 0] | 0;
     $114 = $113 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$49 >> 2] | 0) + -24 | 0, $114 ? HEAP32[$5 >> 2] | 0 : $5, $114 ? HEAP32[$82 >> 2] | 0 : $113 & 255) | 0;
    }
    $$0106 = $87;
   }
   if ((label | 0) == 54) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$49 >> 2] | 0) + -24 | 0, 15117) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$2108 = $$0106;
    break;
   } else if ((label | 0) == 82) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$7 = $0;
    break L1;
   }
  } while (0);
  if (($$2108 | 0) != ($1 | 0)) if ((HEAP8[$$2108 >> 0] | 0) == 69) {
   $128 = $$2108 + 1 | 0;
   if (($128 | 0) == ($1 | 0)) {
    $130 = HEAP32[$49 >> 2] | 0;
    $$0$i$i$idx$i157 = 0;
    while (1) {
     if (($$0$i$i$idx$i157 | 0) == -1) break;
     $$0$i$i$add$i158 = $$0$i$i$idx$i157 + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($130 + ($$0$i$i$add$i158 * 24 | 0) | 0);
     $$0$i$i$idx$i157 = $$0$i$i$add$i158;
    }
    HEAP32[$49 >> 2] = $130 + -24;
    $$7 = $0;
    break;
   }
   if (((HEAP8[$128 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
    $$0105 = $$2108 + 2 | 0;
    while (1) {
     if (($$0105 | 0) == ($1 | 0)) {
      $$0105$lcssa = $1;
      break;
     }
     if (((HEAP8[$$0105 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
      $$0105$lcssa = $$0105;
      break;
     }
     $$0105 = $$0105 + 1 | 0;
    }
    $141 = (HEAP32[$49 >> 2] | 0) + -24 | 0;
    if ((HEAP8[$141 + 11 >> 0] | 0) < 0) $147 = HEAP32[$141 >> 2] | 0; else $147 = $141;
    HEAP32[$7 >> 2] = $147 + 7;
    HEAP32[$$byval_copy >> 2] = HEAP32[$7 >> 2];
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($141, $$byval_copy, $128, $$0105$lcssa) | 0;
    $$3109 = $$0105$lcssa;
   } else $$3109 = $128;
   if (($$3109 | 0) != ($1 | 0)) if ((HEAP8[$$3109 >> 0] | 0) == 95) {
    $$7 = $$3109 + 1 | 0;
    break;
   }
   $152 = HEAP32[$49 >> 2] | 0;
   $$0$i$i$idx$i161 = 0;
   while (1) {
    if (($$0$i$i$idx$i161 | 0) == -1) break;
    $$0$i$i$add$i162 = $$0$i$i$idx$i161 + -1 | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($152 + ($$0$i$i$add$i162 * 24 | 0) | 0);
    $$0$i$i$idx$i161 = $$0$i$i$add$i162;
   }
   HEAP32[$49 >> 2] = $152 + -24;
   $$7 = $0;
   break;
  }
  $125 = HEAP32[$49 >> 2] | 0;
  $$0$i$i$idx$i153 = 0;
  while (1) {
   if (($$0$i$i$idx$i153 | 0) == -1) break;
   $$0$i$i$add$i154 = $$0$i$i$idx$i153 + -1 | 0;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($125 + ($$0$i$i$add$i154 * 24 | 0) | 0);
   $$0$i$i$idx$i153 = $$0$i$i$add$i154;
  }
  HEAP32[$49 >> 2] = $125 + -24;
  $$7 = $0;
 } else $$7 = $0; else $$7 = $0; while (0);
 STACKTOP = sp;
 return $$7 | 0;
}

function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$041722 = 0, $$0418$lcssa = 0, $$041821 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1424$be = 0, $$1424$ph = 0, $$1427 = 0, $$1427$be = 0, $$1427$ph = 0, $$1431 = 0, $$1431$be = 0, $$1431$ph = 0, $$1435 = 0, $$1435$be = 0, $$1435$ph = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre$phi28Z2D = 0, $$pre$phi30Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $194 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $277 = 0, $289 = 0, $294 = 0, $301 = 0, $302 = 0, $303 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $80 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0;
 $2 = $0 + $1 | 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if (!($4 & 1)) {
  $7 = HEAP32[$0 >> 2] | 0;
  if (!($4 & 3)) return;
  $11 = $0 + (0 - $7) | 0;
  $12 = $7 + $1 | 0;
  $13 = HEAP32[4355] | 0;
  if ($11 >>> 0 < $13 >>> 0) _abort();
  if ((HEAP32[4356] | 0) == ($11 | 0)) {
   $101 = $2 + 4 | 0;
   $102 = HEAP32[$101 >> 2] | 0;
   if (($102 & 3 | 0) != 3) {
    $$1 = $11;
    $$1416 = $12;
    break;
   }
   HEAP32[4353] = $12;
   HEAP32[$101 >> 2] = $102 & -2;
   HEAP32[$11 + 4 >> 2] = $12 | 1;
   HEAP32[$2 >> 2] = $12;
   return;
  }
  $17 = $7 >>> 3;
  if ($7 >>> 0 < 256) {
   $20 = HEAP32[$11 + 8 >> 2] | 0;
   $22 = HEAP32[$11 + 12 >> 2] | 0;
   $24 = 17444 + ($17 << 1 << 2) | 0;
   if (($20 | 0) != ($24 | 0)) {
    if ($13 >>> 0 > $20 >>> 0) _abort();
    if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) _abort();
   }
   if (($22 | 0) == ($20 | 0)) {
    HEAP32[4351] = HEAP32[4351] & ~(1 << $17);
    $$1 = $11;
    $$1416 = $12;
    break;
   }
   if (($22 | 0) == ($24 | 0)) $$pre$phi30Z2D = $22 + 8 | 0; else {
    if ($13 >>> 0 > $22 >>> 0) _abort();
    $37 = $22 + 8 | 0;
    if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) $$pre$phi30Z2D = $37; else _abort();
   }
   HEAP32[$20 + 12 >> 2] = $22;
   HEAP32[$$pre$phi30Z2D >> 2] = $20;
   $$1 = $11;
   $$1416 = $12;
   break;
  }
  $42 = HEAP32[$11 + 24 >> 2] | 0;
  $44 = HEAP32[$11 + 12 >> 2] | 0;
  do if (($44 | 0) == ($11 | 0)) {
   $55 = $11 + 16 | 0;
   $56 = $55 + 4 | 0;
   $57 = HEAP32[$56 >> 2] | 0;
   if (!$57) {
    $59 = HEAP32[$55 >> 2] | 0;
    if (!$59) {
     $$3 = 0;
     break;
    } else {
     $$1424$ph = $59;
     $$1427$ph = $55;
    }
   } else {
    $$1424$ph = $57;
    $$1427$ph = $56;
   }
   $$1424 = $$1424$ph;
   $$1427 = $$1427$ph;
   while (1) {
    $61 = $$1424 + 20 | 0;
    $62 = HEAP32[$61 >> 2] | 0;
    if (!$62) {
     $64 = $$1424 + 16 | 0;
     $65 = HEAP32[$64 >> 2] | 0;
     if (!$65) break; else {
      $$1424$be = $65;
      $$1427$be = $64;
     }
    } else {
     $$1424$be = $62;
     $$1427$be = $61;
    }
    $$1424 = $$1424$be;
    $$1427 = $$1427$be;
   }
   if ($13 >>> 0 > $$1427 >>> 0) _abort(); else {
    HEAP32[$$1427 >> 2] = 0;
    $$3 = $$1424;
    break;
   }
  } else {
   $47 = HEAP32[$11 + 8 >> 2] | 0;
   if ($13 >>> 0 > $47 >>> 0) _abort();
   $49 = $47 + 12 | 0;
   if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) _abort();
   $52 = $44 + 8 | 0;
   if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
    HEAP32[$49 >> 2] = $44;
    HEAP32[$52 >> 2] = $47;
    $$3 = $44;
    break;
   } else _abort();
  } while (0);
  if (!$42) {
   $$1 = $11;
   $$1416 = $12;
  } else {
   $70 = HEAP32[$11 + 28 >> 2] | 0;
   $71 = 17708 + ($70 << 2) | 0;
   do if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
    HEAP32[$71 >> 2] = $$3;
    if (!$$3) {
     HEAP32[4352] = HEAP32[4352] & ~(1 << $70);
     $$1 = $11;
     $$1416 = $12;
     break L1;
    }
   } else if ((HEAP32[4355] | 0) >>> 0 > $42 >>> 0) _abort(); else {
    $80 = $42 + 16 | 0;
    HEAP32[((HEAP32[$80 >> 2] | 0) == ($11 | 0) ? $80 : $42 + 20 | 0) >> 2] = $$3;
    if (!$$3) {
     $$1 = $11;
     $$1416 = $12;
     break L1;
    } else break;
   } while (0);
   $85 = HEAP32[4355] | 0;
   if ($85 >>> 0 > $$3 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $42;
   $88 = $11 + 16 | 0;
   $89 = HEAP32[$88 >> 2] | 0;
   do if ($89 | 0) if ($85 >>> 0 > $89 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $89;
    HEAP32[$89 + 24 >> 2] = $$3;
    break;
   } while (0);
   $95 = HEAP32[$88 + 4 >> 2] | 0;
   if (!$95) {
    $$1 = $11;
    $$1416 = $12;
   } else if ((HEAP32[4355] | 0) >>> 0 > $95 >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $95;
    HEAP32[$95 + 24 >> 2] = $$3;
    $$1 = $11;
    $$1416 = $12;
    break;
   }
  }
 } else {
  $$1 = $0;
  $$1416 = $1;
 } while (0);
 $108 = HEAP32[4355] | 0;
 if ($2 >>> 0 < $108 >>> 0) _abort();
 $110 = $2 + 4 | 0;
 $111 = HEAP32[$110 >> 2] | 0;
 if (!($111 & 2)) {
  if ((HEAP32[4357] | 0) == ($2 | 0)) {
   $117 = (HEAP32[4354] | 0) + $$1416 | 0;
   HEAP32[4354] = $117;
   HEAP32[4357] = $$1;
   HEAP32[$$1 + 4 >> 2] = $117 | 1;
   if (($$1 | 0) != (HEAP32[4356] | 0)) return;
   HEAP32[4356] = 0;
   HEAP32[4353] = 0;
   return;
  }
  if ((HEAP32[4356] | 0) == ($2 | 0)) {
   $125 = (HEAP32[4353] | 0) + $$1416 | 0;
   HEAP32[4353] = $125;
   HEAP32[4356] = $$1;
   HEAP32[$$1 + 4 >> 2] = $125 | 1;
   HEAP32[$$1 + $125 >> 2] = $125;
   return;
  }
  $130 = ($111 & -8) + $$1416 | 0;
  $131 = $111 >>> 3;
  L99 : do if ($111 >>> 0 < 256) {
   $134 = HEAP32[$2 + 8 >> 2] | 0;
   $136 = HEAP32[$2 + 12 >> 2] | 0;
   $138 = 17444 + ($131 << 1 << 2) | 0;
   if (($134 | 0) != ($138 | 0)) {
    if ($108 >>> 0 > $134 >>> 0) _abort();
    if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) _abort();
   }
   if (($136 | 0) == ($134 | 0)) {
    HEAP32[4351] = HEAP32[4351] & ~(1 << $131);
    break;
   }
   if (($136 | 0) == ($138 | 0)) $$pre$phi28Z2D = $136 + 8 | 0; else {
    if ($108 >>> 0 > $136 >>> 0) _abort();
    $151 = $136 + 8 | 0;
    if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) $$pre$phi28Z2D = $151; else _abort();
   }
   HEAP32[$134 + 12 >> 2] = $136;
   HEAP32[$$pre$phi28Z2D >> 2] = $134;
  } else {
   $156 = HEAP32[$2 + 24 >> 2] | 0;
   $158 = HEAP32[$2 + 12 >> 2] | 0;
   do if (($158 | 0) == ($2 | 0)) {
    $169 = $2 + 16 | 0;
    $170 = $169 + 4 | 0;
    $171 = HEAP32[$170 >> 2] | 0;
    if (!$171) {
     $173 = HEAP32[$169 >> 2] | 0;
     if (!$173) {
      $$3433 = 0;
      break;
     } else {
      $$1431$ph = $173;
      $$1435$ph = $169;
     }
    } else {
     $$1431$ph = $171;
     $$1435$ph = $170;
    }
    $$1431 = $$1431$ph;
    $$1435 = $$1435$ph;
    while (1) {
     $175 = $$1431 + 20 | 0;
     $176 = HEAP32[$175 >> 2] | 0;
     if (!$176) {
      $178 = $$1431 + 16 | 0;
      $179 = HEAP32[$178 >> 2] | 0;
      if (!$179) break; else {
       $$1431$be = $179;
       $$1435$be = $178;
      }
     } else {
      $$1431$be = $176;
      $$1435$be = $175;
     }
     $$1431 = $$1431$be;
     $$1435 = $$1435$be;
    }
    if ($108 >>> 0 > $$1435 >>> 0) _abort(); else {
     HEAP32[$$1435 >> 2] = 0;
     $$3433 = $$1431;
     break;
    }
   } else {
    $161 = HEAP32[$2 + 8 >> 2] | 0;
    if ($108 >>> 0 > $161 >>> 0) _abort();
    $163 = $161 + 12 | 0;
    if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) _abort();
    $166 = $158 + 8 | 0;
    if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$163 >> 2] = $158;
     HEAP32[$166 >> 2] = $161;
     $$3433 = $158;
     break;
    } else _abort();
   } while (0);
   if ($156 | 0) {
    $184 = HEAP32[$2 + 28 >> 2] | 0;
    $185 = 17708 + ($184 << 2) | 0;
    do if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$185 >> 2] = $$3433;
     if (!$$3433) {
      HEAP32[4352] = HEAP32[4352] & ~(1 << $184);
      break L99;
     }
    } else if ((HEAP32[4355] | 0) >>> 0 > $156 >>> 0) _abort(); else {
     $194 = $156 + 16 | 0;
     HEAP32[((HEAP32[$194 >> 2] | 0) == ($2 | 0) ? $194 : $156 + 20 | 0) >> 2] = $$3433;
     if (!$$3433) break L99; else break;
    } while (0);
    $199 = HEAP32[4355] | 0;
    if ($199 >>> 0 > $$3433 >>> 0) _abort();
    HEAP32[$$3433 + 24 >> 2] = $156;
    $202 = $2 + 16 | 0;
    $203 = HEAP32[$202 >> 2] | 0;
    do if ($203 | 0) if ($199 >>> 0 > $203 >>> 0) _abort(); else {
     HEAP32[$$3433 + 16 >> 2] = $203;
     HEAP32[$203 + 24 >> 2] = $$3433;
     break;
    } while (0);
    $209 = HEAP32[$202 + 4 >> 2] | 0;
    if ($209 | 0) if ((HEAP32[4355] | 0) >>> 0 > $209 >>> 0) _abort(); else {
     HEAP32[$$3433 + 20 >> 2] = $209;
     HEAP32[$209 + 24 >> 2] = $$3433;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $130 | 1;
  HEAP32[$$1 + $130 >> 2] = $130;
  if (($$1 | 0) == (HEAP32[4356] | 0)) {
   HEAP32[4353] = $130;
   return;
  } else $$2 = $130;
 } else {
  HEAP32[$110 >> 2] = $111 & -2;
  HEAP32[$$1 + 4 >> 2] = $$1416 | 1;
  HEAP32[$$1 + $$1416 >> 2] = $$1416;
  $$2 = $$1416;
 }
 $224 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $227 = 17444 + ($224 << 1 << 2) | 0;
  $228 = HEAP32[4351] | 0;
  $229 = 1 << $224;
  if (!($228 & $229)) {
   HEAP32[4351] = $228 | $229;
   $$0436 = $227;
   $$pre$phiZ2D = $227 + 8 | 0;
  } else {
   $233 = $227 + 8 | 0;
   $234 = HEAP32[$233 >> 2] | 0;
   if ((HEAP32[4355] | 0) >>> 0 > $234 >>> 0) _abort(); else {
    $$0436 = $234;
    $$pre$phiZ2D = $233;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$$0436 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$0436;
  HEAP32[$$1 + 12 >> 2] = $227;
  return;
 }
 $240 = $$2 >>> 8;
 if (!$240) $$0429 = 0; else if ($$2 >>> 0 > 16777215) $$0429 = 31; else {
  $245 = ($240 + 1048320 | 0) >>> 16 & 8;
  $246 = $240 << $245;
  $249 = ($246 + 520192 | 0) >>> 16 & 4;
  $251 = $246 << $249;
  $254 = ($251 + 245760 | 0) >>> 16 & 2;
  $259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0;
  $$0429 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1;
 }
 $265 = 17708 + ($$0429 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $$0429;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $269 = HEAP32[4352] | 0;
 $270 = 1 << $$0429;
 if (!($269 & $270)) {
  HEAP32[4352] = $269 | $270;
  HEAP32[$265 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $265;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 }
 $277 = HEAP32[$265 >> 2] | 0;
 L189 : do if ((HEAP32[$277 + 4 >> 2] & -8 | 0) == ($$2 | 0)) $$0418$lcssa = $277; else {
  $$041722 = $$2 << (($$0429 | 0) == 31 ? 0 : 25 - ($$0429 >>> 1) | 0);
  $$041821 = $277;
  while (1) {
   $294 = $$041821 + 16 + ($$041722 >>> 31 << 2) | 0;
   $289 = HEAP32[$294 >> 2] | 0;
   if (!$289) break;
   if ((HEAP32[$289 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
    $$0418$lcssa = $289;
    break L189;
   } else {
    $$041722 = $$041722 << 1;
    $$041821 = $289;
   }
  }
  if ((HEAP32[4355] | 0) >>> 0 > $294 >>> 0) _abort();
  HEAP32[$294 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $$041821;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 } while (0);
 $301 = $$0418$lcssa + 8 | 0;
 $302 = HEAP32[$301 >> 2] | 0;
 $303 = HEAP32[4355] | 0;
 if (!($303 >>> 0 <= $302 >>> 0 & $303 >>> 0 <= $$0418$lcssa >>> 0)) _abort();
 HEAP32[$302 + 12 >> 2] = $$1;
 HEAP32[$301 >> 2] = $$1;
 HEAP32[$$1 + 8 >> 2] = $302;
 HEAP32[$$1 + 12 >> 2] = $$0418$lcssa;
 HEAP32[$$1 + 24 >> 2] = 0;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_special_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i158 = 0, $$0$i$i$i161 = 0, $$0$i$i$idx$i = 0, $$11 = 0, $$4156 = 0, $$8 = 0, $$8151 = 0, $104 = 0, $105 = 0, $106 = 0, $109 = 0, $113 = 0, $115 = 0, $119 = 0, $124 = 0, $128 = 0, $129 = 0, $133 = 0, $136 = 0, $137 = 0, $141 = 0, $15 = 0, $18 = 0, $19 = 0, $23 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $55 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $81 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 60 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 12 | 0;
 $8 = sp;
 L1 : do if (($1 - $0 | 0) > 2) {
  switch (HEAP8[$0 >> 0] | 0) {
  case 84:
   break;
  case 71:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 86:
     {
      $128 = $0 + 2 | 0;
      $129 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($128, $1, $2) | 0;
      if (($129 | 0) == ($128 | 0)) {
       $$11 = $0;
       label = 60;
       break L1;
      }
      $133 = HEAP32[$2 + 4 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($133 | 0)) {
       $$8 = $0;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($133 + -24 | 0, 0, 16949) | 0;
      $$11 = $129;
      label = 60;
      break L1;
      break;
     }
    case 82:
     {
      $136 = $0 + 2 | 0;
      $137 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($136, $1, $2) | 0;
      if (($137 | 0) == ($136 | 0)) {
       $$11 = $0;
       label = 60;
       break L1;
      }
      $141 = HEAP32[$2 + 4 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($141 | 0)) {
       $$8 = $0;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($141 + -24 | 0, 0, 16969) | 0;
      $$11 = $137;
      label = 60;
      break L1;
      break;
     }
    default:
     {
      $$11 = $0;
      label = 60;
      break L1;
     }
    }
    break;
   }
  default:
   {
    $$11 = $0;
    label = 60;
    break L1;
   }
  }
  $15 = $0 + 1 | 0;
  switch (HEAP8[$15 >> 0] | 0) {
  case 86:
   {
    $18 = $0 + 2 | 0;
    $19 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($18, $1, $2) | 0;
    if (($19 | 0) == ($18 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $23 = HEAP32[$2 + 4 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($23 | 0)) {
     $$8 = $0;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($23 + -24 | 0, 0, 16798) | 0;
    $$11 = $19;
    label = 60;
    break L1;
    break;
   }
  case 84:
   {
    $26 = $0 + 2 | 0;
    $27 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($26, $1, $2) | 0;
    if (($27 | 0) == ($26 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $31 = HEAP32[$2 + 4 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($31 | 0)) {
     $$8 = $0;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($31 + -24 | 0, 0, 16810) | 0;
    $$11 = $27;
    label = 60;
    break L1;
    break;
   }
  case 73:
   {
    $34 = $0 + 2 | 0;
    $35 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($34, $1, $2) | 0;
    if (($35 | 0) == ($34 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $39 = HEAP32[$2 + 4 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($39 | 0)) {
     $$8 = $0;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($39 + -24 | 0, 0, 16819) | 0;
    $$11 = $35;
    label = 60;
    break L1;
    break;
   }
  case 83:
   {
    $42 = $0 + 2 | 0;
    $43 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($42, $1, $2) | 0;
    if (($43 | 0) == ($42 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $47 = HEAP32[$2 + 4 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($47 | 0)) {
     $$8 = $0;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($47 + -24 | 0, 0, 16833) | 0;
    $$11 = $43;
    label = 60;
    break L1;
    break;
   }
  case 99:
   {
    $50 = $0 + 2 | 0;
    $51 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($50, $1) | 0;
    if (($51 | 0) == ($50 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $53 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($51, $1) | 0;
    if (($53 | 0) == ($51 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $55 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($53, $1, $2) | 0;
    if (($55 | 0) == ($53 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $59 = HEAP32[$2 + 4 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($59 | 0)) {
     $$8 = $0;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($59 + -24 | 0, 0, 16852) | 0;
    $$11 = $55;
    label = 60;
    break L1;
    break;
   }
  case 67:
   {
    $62 = $0 + 2 | 0;
    $63 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($62, $1, $2) | 0;
    if (($63 | 0) == ($62 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $65 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($63, $1) | 0;
    if (($65 | 0) == ($63 | 0) | ($65 | 0) == ($1 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    if ((HEAP8[$65 >> 0] | 0) != 95) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $70 = $65 + 1 | 0;
    $71 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($70, $1, $2) | 0;
    if (($71 | 0) == ($70 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $73 = $2 + 4 | 0;
    $74 = HEAP32[$73 >> 2] | 0;
    if ((($74 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$8 = $0;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, $74 + -24 | 0);
    $81 = HEAP32[$73 >> 2] | 0;
    $$0$i$i$idx$i = 0;
    while (1) {
     if (($$0$i$i$idx$i | 0) == -1) break;
     $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($81 + ($$0$i$i$add$i * 24 | 0) | 0);
     $$0$i$i$idx$i = $$0$i$i$add$i;
    }
    HEAP32[$73 >> 2] = $81 + -24;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($4, 0, 16879) | 0;
    HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$7 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    $$0$i$i$i161 = 0;
    while (1) {
     if (($$0$i$i$i161 | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i$i161 << 2) >> 2] = 0;
     $$0$i$i$i161 = $$0$i$i$i161 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 16904) | 0;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
    $$0$i$i$i158 = 0;
    while (1) {
     if (($$0$i$i$i158 | 0) == 3) break;
     HEAP32[$7 + ($$0$i$i$i158 << 2) >> 2] = 0;
     $$0$i$i$i158 = $$0$i$i$i158 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8, (HEAP32[$73 >> 2] | 0) + -24 | 0);
    $93 = HEAP8[$8 + 11 >> 0] | 0;
    $94 = $93 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($6, $94 ? HEAP32[$8 >> 2] | 0 : $8, $94 ? HEAP32[$8 + 4 >> 2] | 0 : $93 & 255) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    $104 = HEAP32[$73 >> 2] | 0;
    $105 = $104 + -24 | 0;
    $106 = $105 + 11 | 0;
    if ((HEAP8[$106 >> 0] | 0) < 0) {
     $109 = HEAP32[$105 >> 2] | 0;
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($109, $3);
     HEAP32[$104 + -20 >> 2] = 0;
    } else {
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($105, $3);
     HEAP8[$106 >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($105);
    HEAP32[$105 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$105 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$105 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i$i | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    $$11 = $71;
    label = 60;
    break L1;
    break;
   }
  default:
   {
    $113 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($15, $1) | 0;
    do if (($113 | 0) == ($15 | 0)) {
     $$4156 = 3;
     $$8151 = $0;
    } else {
     $115 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($113, $1, $2) | 0;
     if (($115 | 0) == ($113 | 0)) {
      $$4156 = 0;
      $$8151 = $0;
     } else {
      $119 = HEAP32[$2 + 4 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($119 | 0)) {
       $$4156 = 1;
       $$8151 = $0;
      } else {
       $124 = $119 + -24 | 0;
       if ((HEAP8[$0 + 2 >> 0] | 0) == 118) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($124, 0, 16909) | 0;
        $$4156 = 0;
        $$8151 = $115;
        break;
       } else {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($124, 0, 16927) | 0;
        $$4156 = 0;
        $$8151 = $115;
        break;
       }
      }
     }
    } while (0);
    switch ($$4156 & 3) {
    case 3:
    case 0:
     {
      $$11 = $$8151;
      label = 60;
      break L1;
      break;
     }
    default:
     {}
    }
    if (!$$4156) {
     $$11 = $$8151;
     label = 60;
     break L1;
    } else {
     $$8 = $0;
     break L1;
    }
   }
  }
 } else {
  $$11 = $0;
  label = 60;
 } while (0);
 if ((label | 0) == 60) $$8 = $$11;
 STACKTOP = sp;
 return $$8 | 0;
}

function ___intscan($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0154215 = 0, $$0157 = 0, $$0159 = 0, $$1155184 = 0, $$1158 = 0, $$1160 = 0, $$1160170 = 0, $$1165 = 0, $$1165168 = 0, $$1165169 = 0, $$2156202 = 0, $$3162208 = 0, $$4163$lcssa = 0, $$6$lcssa = 0, $$7190 = 0, $$8 = 0, $$pre$phi237Z2D = 0, $$pre$phi239Z2D = 0, $104 = 0, $112 = 0, $128 = 0, $130 = 0, $131 = 0, $135 = 0, $136 = 0, $144 = 0, $145 = 0, $150 = 0, $151 = 0, $154 = 0, $156 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $165 = 0, $166 = 0, $167 = 0, $175 = 0, $185 = 0, $186 = 0, $190 = 0, $191 = 0, $199 = 0, $20 = 0, $200 = 0, $206 = 0, $207 = 0, $209 = 0, $21 = 0, $211 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $225 = 0, $226 = 0, $227 = 0, $235 = 0, $243 = 0, $251 = 0, $255 = 0, $265 = 0, $267 = 0, $276 = 0, $277 = 0, $28 = 0, $284 = 0, $286 = 0, $289 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $32 = 0, $40 = 0, $42 = 0, $50 = 0, $54 = 0, $6 = 0, $68 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $8 = 0, $83 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $96 = 0, $spec$select166 = 0, label = 0;
 L1 : do if ($1 >>> 0 > 36) {
  $6 = ___errno_location() | 0;
  HEAP32[$6 >> 2] = 22;
  $291 = 0;
  $292 = 0;
 } else {
  $7 = $0 + 4 | 0;
  $8 = $0 + 100 | 0;
  do {
   $9 = HEAP32[$7 >> 2] | 0;
   if ($9 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
    HEAP32[$7 >> 2] = $9 + 1;
    $16 = HEAPU8[$9 >> 0] | 0;
   } else $16 = ___shgetc($0) | 0;
  } while ((_isspace($16) | 0) != 0);
  L11 : do switch ($16 | 0) {
  case 43:
  case 45:
   {
    $20 = (($16 | 0) == 45) << 31 >> 31;
    $21 = HEAP32[$7 >> 2] | 0;
    if ($21 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
     HEAP32[$7 >> 2] = $21 + 1;
     $$0157 = $20;
     $$0159 = HEAPU8[$21 >> 0] | 0;
     break L11;
    } else {
     $$0157 = $20;
     $$0159 = ___shgetc($0) | 0;
     break L11;
    }
    break;
   }
  default:
   {
    $$0157 = 0;
    $$0159 = $16;
   }
  } while (0);
  $28 = ($1 | 0) == 0;
  do if (($1 | 16 | 0) == 16 & ($$0159 | 0) == 48) {
   $32 = HEAP32[$7 >> 2] | 0;
   if ($32 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
    HEAP32[$7 >> 2] = $32 + 1;
    $40 = HEAPU8[$32 >> 0] | 0;
   } else $40 = ___shgetc($0) | 0;
   if (($40 | 32 | 0) != 120) if ($28) {
    $$1160170 = $40;
    $$1165168 = 8;
    label = 47;
    break;
   } else {
    $$1160 = $40;
    $$1165 = $1;
    label = 32;
    break;
   }
   $42 = HEAP32[$7 >> 2] | 0;
   if ($42 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
    HEAP32[$7 >> 2] = $42 + 1;
    $50 = HEAPU8[$42 >> 0] | 0;
   } else $50 = ___shgetc($0) | 0;
   if ((HEAPU8[11773 + $50 >> 0] | 0) > 15) {
    $54 = (HEAP32[$8 >> 2] | 0) == 0;
    if (!$54) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
    if (!$2) {
     ___shlim($0, 0);
     $291 = 0;
     $292 = 0;
     break L1;
    }
    if ($54) {
     $291 = 0;
     $292 = 0;
     break L1;
    }
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
    $291 = 0;
    $292 = 0;
    break L1;
   } else {
    $$1160170 = $50;
    $$1165168 = 16;
    label = 47;
   }
  } else {
   $spec$select166 = $28 ? 10 : $1;
   if ($spec$select166 >>> 0 > (HEAPU8[11773 + $$0159 >> 0] | 0) >>> 0) {
    $$1160 = $$0159;
    $$1165 = $spec$select166;
    label = 32;
   } else {
    if (HEAP32[$8 >> 2] | 0) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
    ___shlim($0, 0);
    $68 = ___errno_location() | 0;
    HEAP32[$68 >> 2] = 22;
    $291 = 0;
    $292 = 0;
    break L1;
   }
  } while (0);
  L43 : do if ((label | 0) == 32) if (($$1165 | 0) == 10) {
   $70 = $$1160 + -48 | 0;
   if ($70 >>> 0 < 10) {
    $$0154215 = 0;
    $74 = $70;
    do {
     $$0154215 = ($$0154215 * 10 | 0) + $74 | 0;
     $75 = HEAP32[$7 >> 2] | 0;
     if ($75 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $75 + 1;
      $83 = HEAPU8[$75 >> 0] | 0;
     } else $83 = ___shgetc($0) | 0;
     $74 = $83 + -48 | 0;
    } while ($74 >>> 0 < 10 & $$0154215 >>> 0 < 429496729);
    if ($74 >>> 0 < 10) {
     $$3162208 = $83;
     $88 = $$0154215;
     $89 = 0;
     $93 = $74;
     while (1) {
      $90 = ___muldi3($88 | 0, $89 | 0, 10, 0) | 0;
      $91 = tempRet0;
      $94 = (($93 | 0) < 0) << 31 >> 31;
      $96 = ~$94;
      if ($91 >>> 0 > $96 >>> 0 | ($91 | 0) == ($96 | 0) & $90 >>> 0 > ~$93 >>> 0) {
       $$1165169 = 10;
       $$8 = $$3162208;
       $293 = $88;
       $294 = $89;
       label = 76;
       break L43;
      }
      $88 = _i64Add($90 | 0, $91 | 0, $93 | 0, $94 | 0) | 0;
      $89 = tempRet0;
      $104 = HEAP32[$7 >> 2] | 0;
      if ($104 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
       HEAP32[$7 >> 2] = $104 + 1;
       $112 = HEAPU8[$104 >> 0] | 0;
      } else $112 = ___shgetc($0) | 0;
      $93 = $112 + -48 | 0;
      if (!($93 >>> 0 < 10 & ($89 >>> 0 < 429496729 | ($89 | 0) == 429496729 & $88 >>> 0 < 2576980378))) break; else $$3162208 = $112;
     }
     if ($93 >>> 0 > 9) {
      $$1158 = $$0157;
      $265 = $89;
      $267 = $88;
     } else {
      $$1165169 = 10;
      $$8 = $112;
      $293 = $88;
      $294 = $89;
      label = 76;
     }
    } else {
     $$1158 = $$0157;
     $265 = 0;
     $267 = $$0154215;
    }
   } else {
    $$1158 = $$0157;
    $265 = 0;
    $267 = 0;
   }
  } else {
   $$1160170 = $$1160;
   $$1165168 = $$1165;
   label = 47;
  } while (0);
  L63 : do if ((label | 0) == 47) {
   if (!($$1165168 + -1 & $$1165168)) {
    $128 = HEAP8[12029 + (($$1165168 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    $130 = HEAP8[11773 + $$1160170 >> 0] | 0;
    $131 = $130 & 255;
    if ($$1165168 >>> 0 > $131 >>> 0) {
     $$1155184 = 0;
     $135 = $131;
     do {
      $$1155184 = $135 | $$1155184 << $128;
      $136 = HEAP32[$7 >> 2] | 0;
      if ($136 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
       HEAP32[$7 >> 2] = $136 + 1;
       $144 = HEAPU8[$136 >> 0] | 0;
      } else $144 = ___shgetc($0) | 0;
      $145 = HEAP8[11773 + $144 >> 0] | 0;
      $135 = $145 & 255;
     } while ($$1155184 >>> 0 < 134217728 & $$1165168 >>> 0 > $135 >>> 0);
     $$4163$lcssa = $144;
     $$pre$phi237Z2D = $135;
     $154 = 0;
     $156 = $$1155184;
     $295 = $145;
    } else {
     $$4163$lcssa = $$1160170;
     $$pre$phi237Z2D = $131;
     $154 = 0;
     $156 = 0;
     $295 = $130;
    }
    $150 = _bitshift64Lshr(-1, -1, $128 | 0) | 0;
    $151 = tempRet0;
    if ($$1165168 >>> 0 <= $$pre$phi237Z2D >>> 0 | ($151 >>> 0 < $154 >>> 0 | ($151 | 0) == ($154 | 0) & $150 >>> 0 < $156 >>> 0)) {
     $$1165169 = $$1165168;
     $$8 = $$4163$lcssa;
     $293 = $156;
     $294 = $154;
     label = 76;
     break;
    }
    $160 = $156;
    $161 = $154;
    $165 = $295;
    while (1) {
     $162 = _bitshift64Shl($160 | 0, $161 | 0, $128 | 0) | 0;
     $163 = tempRet0;
     $166 = $162 | $165 & 255;
     $167 = HEAP32[$7 >> 2] | 0;
     if ($167 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $167 + 1;
      $175 = HEAPU8[$167 >> 0] | 0;
     } else $175 = ___shgetc($0) | 0;
     $165 = HEAP8[11773 + $175 >> 0] | 0;
     if ($$1165168 >>> 0 <= ($165 & 255) >>> 0 | ($163 >>> 0 > $151 >>> 0 | ($163 | 0) == ($151 | 0) & $166 >>> 0 > $150 >>> 0)) {
      $$1165169 = $$1165168;
      $$8 = $175;
      $293 = $166;
      $294 = $163;
      label = 76;
      break L63;
     } else {
      $160 = $166;
      $161 = $163;
     }
    }
   }
   $185 = HEAP8[11773 + $$1160170 >> 0] | 0;
   $186 = $185 & 255;
   if ($$1165168 >>> 0 > $186 >>> 0) {
    $$2156202 = 0;
    $190 = $186;
    do {
     $$2156202 = $190 + (Math_imul($$2156202, $$1165168) | 0) | 0;
     $191 = HEAP32[$7 >> 2] | 0;
     if ($191 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $191 + 1;
      $199 = HEAPU8[$191 >> 0] | 0;
     } else $199 = ___shgetc($0) | 0;
     $200 = HEAP8[11773 + $199 >> 0] | 0;
     $190 = $200 & 255;
    } while ($$2156202 >>> 0 < 119304647 & $$1165168 >>> 0 > $190 >>> 0);
    $$6$lcssa = $199;
    $$pre$phi239Z2D = $190;
    $296 = $200;
    $297 = $$2156202;
    $298 = 0;
   } else {
    $$6$lcssa = $$1160170;
    $$pre$phi239Z2D = $186;
    $296 = $185;
    $297 = 0;
    $298 = 0;
   }
   if ($$1165168 >>> 0 > $$pre$phi239Z2D >>> 0) {
    $206 = ___udivdi3(-1, -1, $$1165168 | 0, 0) | 0;
    $207 = tempRet0;
    $$7190 = $$6$lcssa;
    $209 = $298;
    $211 = $297;
    $218 = $296;
    while (1) {
     if ($209 >>> 0 > $207 >>> 0 | ($209 | 0) == ($207 | 0) & $211 >>> 0 > $206 >>> 0) {
      $$1165169 = $$1165168;
      $$8 = $$7190;
      $293 = $211;
      $294 = $209;
      label = 76;
      break L63;
     }
     $215 = ___muldi3($211 | 0, $209 | 0, $$1165168 | 0, 0) | 0;
     $216 = tempRet0;
     $217 = $218 & 255;
     if ($216 >>> 0 > 4294967295 | ($216 | 0) == -1 & $215 >>> 0 > ~$217 >>> 0) {
      $$1165169 = $$1165168;
      $$8 = $$7190;
      $293 = $211;
      $294 = $209;
      label = 76;
      break L63;
     }
     $225 = _i64Add($215 | 0, $216 | 0, $217 | 0, 0) | 0;
     $226 = tempRet0;
     $227 = HEAP32[$7 >> 2] | 0;
     if ($227 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $227 + 1;
      $235 = HEAPU8[$227 >> 0] | 0;
     } else $235 = ___shgetc($0) | 0;
     $218 = HEAP8[11773 + $235 >> 0] | 0;
     if ($$1165168 >>> 0 <= ($218 & 255) >>> 0) {
      $$1165169 = $$1165168;
      $$8 = $235;
      $293 = $225;
      $294 = $226;
      label = 76;
      break;
     } else {
      $$7190 = $235;
      $209 = $226;
      $211 = $225;
     }
    }
   } else {
    $$1165169 = $$1165168;
    $$8 = $$6$lcssa;
    $293 = $297;
    $294 = $298;
    label = 76;
   }
  } while (0);
  if ((label | 0) == 76) if ($$1165169 >>> 0 > (HEAPU8[11773 + $$8 >> 0] | 0) >>> 0) {
   do {
    $243 = HEAP32[$7 >> 2] | 0;
    if ($243 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
     HEAP32[$7 >> 2] = $243 + 1;
     $251 = HEAPU8[$243 >> 0] | 0;
    } else $251 = ___shgetc($0) | 0;
   } while ($$1165169 >>> 0 > (HEAPU8[11773 + $251 >> 0] | 0) >>> 0);
   $255 = ___errno_location() | 0;
   HEAP32[$255 >> 2] = 34;
   $$1158 = ($3 & 1 | 0) == 0 & 0 == 0 ? $$0157 : 0;
   $265 = $4;
   $267 = $3;
  } else {
   $$1158 = $$0157;
   $265 = $294;
   $267 = $293;
  }
  if (HEAP32[$8 >> 2] | 0) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
  if (!($265 >>> 0 < $4 >>> 0 | ($265 | 0) == ($4 | 0) & $267 >>> 0 < $3 >>> 0)) {
   if (!(($3 & 1 | 0) != 0 | 0 != 0 | ($$1158 | 0) != 0)) {
    $276 = ___errno_location() | 0;
    HEAP32[$276 >> 2] = 34;
    $277 = _i64Add($3 | 0, $4 | 0, -1, -1) | 0;
    $291 = tempRet0;
    $292 = $277;
    break;
   }
   if ($265 >>> 0 > $4 >>> 0 | ($265 | 0) == ($4 | 0) & $267 >>> 0 > $3 >>> 0) {
    $284 = ___errno_location() | 0;
    HEAP32[$284 >> 2] = 34;
    $291 = $4;
    $292 = $3;
    break;
   }
  }
  $286 = (($$1158 | 0) < 0) << 31 >> 31;
  $289 = _i64Subtract($267 ^ $$1158 | 0, $265 ^ $286 | 0, $$1158 | 0, $286 | 0) | 0;
  $291 = tempRet0;
  $292 = $289;
 } while (0);
 tempRet0 = $291;
 return $292 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_128parse_pointer_to_member_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i63 = 0, $$0$i$i$i$i80 = 0, $$0$i$i$i$i85 = 0, $$0$i$i$i51 = 0, $$0$i$i$i54 = 0, $$0$i$i$i58 = 0, $$0$i$i$i66 = 0, $$0$i$i$i70 = 0, $$0$i$i$i74 = 0, $$0$i$i$idx$i = 0, $$345 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $109 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $26 = 0, $3 = 0, $30 = 0, $4 = 0, $42 = 0, $43 = 0, $5 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $73 = 0, $8 = 0, $81 = 0, $82 = 0, $9 = 0, $95 = 0, $96 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $3 = sp + 96 | 0;
 $4 = sp + 72 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if (($0 | 0) == ($1 | 0)) $$345 = $0; else if ((HEAP8[$0 >> 0] | 0) == 77) {
  $13 = $0 + 1 | 0;
  $14 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
  if (($14 | 0) == ($13 | 0)) $$345 = $0; else {
   $16 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0;
   if (($16 | 0) == ($14 | 0)) $$345 = $0; else {
    $18 = $2 + 4 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    if ((($19 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$345 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($4, $19 + -24 | 0);
     $26 = HEAP32[$18 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$18 >> 2] = $26 + -24;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($5, $26 + -48 | 0);
     $30 = $4 + 12 | 0;
     L11 : do if ((HEAP8[((HEAP8[$30 + 11 >> 0] | 0) < 0 ? HEAP32[$30 >> 2] | 0 : $30) >> 0] | 0) == 40) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15119) | 0;
      HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$8 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$8 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i = $$0$i$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $5);
      $42 = HEAP8[$9 + 11 >> 0] | 0;
      $43 = $42 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($8, $43 ? HEAP32[$9 >> 2] | 0 : $9, $43 ? HEAP32[$9 + 4 >> 2] | 0 : $42 & 255) | 0;
      HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
      HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
      $$0$i$i$i51 = 0;
      while (1) {
       if (($$0$i$i$i51 | 0) == 3) break;
       HEAP32[$8 + ($$0$i$i$i51 << 2) >> 2] = 0;
       $$0$i$i$i51 = $$0$i$i$i51 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 16541) | 0;
      HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
      HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
      $$0$i$i$i54 = 0;
      while (1) {
       if (($$0$i$i$i54 | 0) == 3) break;
       HEAP32[$7 + ($$0$i$i$i54 << 2) >> 2] = 0;
       $$0$i$i$i54 = $$0$i$i$i54 + 1 | 0;
      }
      $56 = HEAP32[$18 >> 2] | 0;
      $57 = $56 + -24 | 0;
      $58 = $57 + 11 | 0;
      if ((HEAP8[$58 >> 0] | 0) < 0) {
       $61 = HEAP32[$57 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($61, $3);
       HEAP32[$56 + -20 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($57, $3);
       HEAP8[$58 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($57);
      HEAP32[$57 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$57 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$57 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $$0$i$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i$i | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($30, 0, 15117) | 0;
      HEAP32[$6 >> 2] = HEAP32[$30 >> 2];
      HEAP32[$6 + 4 >> 2] = HEAP32[$30 + 4 >> 2];
      HEAP32[$6 + 8 >> 2] = HEAP32[$30 + 8 >> 2];
      $$0$i$i$i58 = 0;
      while (1) {
       if (($$0$i$i$i58 | 0) == 3) break;
       HEAP32[$30 + ($$0$i$i$i58 << 2) >> 2] = 0;
       $$0$i$i$i58 = $$0$i$i$i58 + 1 | 0;
      }
      $68 = HEAP32[$18 >> 2] | 0;
      $69 = $68 + -12 | 0;
      $70 = $69 + 11 | 0;
      if ((HEAP8[$70 >> 0] | 0) < 0) {
       $73 = HEAP32[$69 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($73, $3);
       HEAP32[$68 + -8 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($69, $3);
       HEAP8[$70 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($69);
      HEAP32[$69 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$69 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$69 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $$0$i$i$i$i63 = 0;
      while (1) {
       if (($$0$i$i$i$i63 | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i$i$i63 << 2) >> 2] = 0;
       $$0$i$i$i$i63 = $$0$i$i$i$i63 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     } else {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15151) | 0;
      HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$8 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$8 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i66 = 0;
      while (1) {
       if (($$0$i$i$i66 | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i66 << 2) >> 2] = 0;
       $$0$i$i$i66 = $$0$i$i$i66 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $5);
      $81 = HEAP8[$9 + 11 >> 0] | 0;
      $82 = $81 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($8, $82 ? HEAP32[$9 >> 2] | 0 : $9, $82 ? HEAP32[$9 + 4 >> 2] | 0 : $81 & 255) | 0;
      HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
      HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
      $$0$i$i$i70 = 0;
      while (1) {
       if (($$0$i$i$i70 | 0) == 3) break;
       HEAP32[$8 + ($$0$i$i$i70 << 2) >> 2] = 0;
       $$0$i$i$i70 = $$0$i$i$i70 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 16541) | 0;
      HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
      HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
      $$0$i$i$i74 = 0;
      while (1) {
       if (($$0$i$i$i74 | 0) == 3) break;
       HEAP32[$7 + ($$0$i$i$i74 << 2) >> 2] = 0;
       $$0$i$i$i74 = $$0$i$i$i74 + 1 | 0;
      }
      $95 = HEAP32[$18 >> 2] | 0;
      $96 = $95 + -24 | 0;
      $97 = $96 + 11 | 0;
      if ((HEAP8[$97 >> 0] | 0) < 0) {
       $100 = HEAP32[$96 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($100, $3);
       HEAP32[$95 + -20 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($96, $3);
       HEAP8[$97 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($96);
      HEAP32[$96 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$96 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$96 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $$0$i$i$i$i80 = 0;
      while (1) {
       if (($$0$i$i$i$i80 | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i$i$i80 << 2) >> 2] = 0;
       $$0$i$i$i$i80 = $$0$i$i$i$i80 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
      $104 = HEAP32[$18 >> 2] | 0;
      $105 = $104 + -12 | 0;
      $106 = $105 + 11 | 0;
      if ((HEAP8[$106 >> 0] | 0) < 0) {
       $109 = HEAP32[$105 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($109, $3);
       HEAP32[$104 + -8 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($105, $3);
       HEAP8[$106 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($105);
      HEAP32[$105 >> 2] = HEAP32[$30 >> 2];
      HEAP32[$105 + 4 >> 2] = HEAP32[$30 + 4 >> 2];
      HEAP32[$105 + 8 >> 2] = HEAP32[$30 + 8 >> 2];
      $$0$i$i$i$i85 = 0;
      while (1) {
       if (($$0$i$i$i$i85 | 0) == 3) break L11;
       HEAP32[$30 + ($$0$i$i$i$i85 << 2) >> 2] = 0;
       $$0$i$i$i$i85 = $$0$i$i$i$i85 + 1 | 0;
      }
     } while (0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     $$345 = $16;
    }
   }
  }
 } else $$345 = $0;
 STACKTOP = sp;
 return $$345 | 0;
}

function _decode_bch($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$0 = 0, $$0235 = 0, $$0237 = 0, $$0238 = 0, $$0240 = 0, $$0242 = 0, $$0245 = 0, $$0251 = 0, $$0253 = 0, $$0259 = 0, $$0261 = 0, $$0268 = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$1236 = 0, $$1239 = 0, $$1241 = 0, $$1243 = 0, $$1246 = 0, $$1252 = 0, $$1254 = 0, $$1256 = 0, $$1260 = 0, $$1262 = 0, $$1264 = 0, $$2 = 0, $$2244 = 0, $$2247 = 0, $$2257 = 0, $$2265 = 0, $$3 = 0, $$3248 = 0, $$3258 = 0, $$3266 = 0, $$4 = 0, $$4249 = 0, $$5 = 0, $$5250 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $$pre$phiZ2D = 0, $$pre280 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $114 = 0, $118 = 0, $12 = 0, $122 = 0, $126 = 0, $129 = 0, $137 = 0, $138 = 0, $14 = 0, $145 = 0, $157 = 0, $158 = 0, $161 = 0, $17 = 0, $175 = 0, $179 = 0, $18 = 0, $188 = 0, $189 = 0, $190 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $200 = 0, $205 = 0, $206 = 0, $21 = 0, $23 = 0, $30 = 0, $32 = 0, $33 = 0, $39 = 0, $41 = 0, $5 = 0, $52 = 0, $53 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $66 = 0, $7 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $84 = 0, $89 = 0, $9 = 0, $90 = 0, $93 = 0, label = 0, sp = 0, $$1243$looptemp = 0, $$0240$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2368 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2368);
 $5 = sp + 2304 | 0;
 $6 = sp + 864 | 0;
 $7 = sp + 784 | 0;
 $8 = sp + 704 | 0;
 $9 = sp + 624 | 0;
 $10 = sp + 548 | 0;
 $11 = sp + 40 | 0;
 $12 = sp;
 switch ($0 | 0) {
 case 2830:
  {
   $$0268 = $3;
   $$1252 = 1392;
   $$1254 = 884;
   $$1260 = 120;
   $$1262 = 127;
   $$3258 = 64;
   $$3266 = 9;
   label = 8;
   break;
  }
 case 772:
  {
   $$0251 = 820;
   $$0253 = 632;
   $$0259 = 13;
   $$0261 = 15;
   $$2257 = 9;
   $$2265 = 1;
   label = 5;
   break;
  }
 case 1028:
  {
   $$0251 = 820;
   $$0253 = 632;
   $$0259 = 13;
   $$0261 = 15;
   $$2257 = 5;
   $$2265 = 2;
   label = 5;
   break;
  }
 case 1029:
  {
   $$1256 = 12;
   $$1264 = 2;
   label = 4;
   break;
  }
 case 1285:
  {
   $$1256 = 7;
   $$1264 = 3;
   label = 4;
   break;
  }
 default:
  $$0237 = -1;
 }
 if ((label | 0) == 4) {
  $$0251 = 692;
  $$0253 = 508;
  $$0259 = 22;
  $$0261 = 31;
  $$2257 = $$1256;
  $$2265 = $$1264;
  label = 5;
 }
 L6 : do if ((label | 0) == 5) {
  $$0245 = 0;
  $14 = $1;
  $17 = $2;
  while (1) {
   if (($$0245 | 0) == ($$0259 | 0)) {
    $$0268 = $5;
    $$1252 = $$0251;
    $$1254 = $$0253;
    $$1260 = $$0259;
    $$1262 = $$0261;
    $$3258 = $$2257;
    $$3266 = $$2265;
    label = 8;
    break L6;
   }
   HEAP8[$5 + $$0245 >> 0] = $14 & 1;
   $18 = _bitshift64Lshr($14 | 0, $17 | 0, 1) | 0;
   $$0245 = $$0245 + 1 | 0;
   $14 = $18;
   $17 = tempRet0;
  }
 } while (0);
 L11 : do if ((label | 0) == 8) {
  $21 = $$3266 << 1;
  $$0 = 0;
  $$1246 = 1;
  while (1) {
   if (($$1246 | 0) > ($21 | 0)) break;
   $23 = $10 + ($$1246 << 2) | 0;
   HEAP32[$23 >> 2] = 0;
   $$0242 = 0;
   $33 = 0;
   while (1) {
    if (($$0242 | 0) >= ($$1260 | 0)) break;
    if (!(HEAP8[$$0268 + $$0242 >> 0] | 0)) $205 = $33; else {
     $30 = $$1254 + (((Math_imul($$0242, $$1246) | 0) % ($$1262 | 0) | 0) << 2) | 0;
     $32 = $33 ^ HEAP32[$30 >> 2];
     HEAP32[$23 >> 2] = $32;
     $205 = $32;
    }
    $$0242 = $$0242 + 1 | 0;
    $33 = $205;
   }
   HEAP32[$23 >> 2] = HEAP32[$$1252 + ($33 << 2) >> 2];
   $$0 = ($33 | 0) == 0 ? $$0 : 1;
   $$1246 = $$1246 + 1 | 0;
  }
  $39 = ($$0 | 0) != 0;
  L24 : do if ($39) {
   HEAP32[$7 >> 2] = 0;
   $41 = HEAP32[$10 + 4 >> 2] | 0;
   HEAP32[$7 + 4 >> 2] = $41;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 72 >> 2] = 1;
   $$2247 = 1;
   while (1) {
    if (($$2247 | 0) >= ($21 | 0)) break;
    HEAP32[$6 + ($$2247 << 2) >> 2] = -1;
    HEAP32[$6 + 72 + ($$2247 << 2) >> 2] = 0;
    $$2247 = $$2247 + 1 | 0;
   }
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 0;
   HEAP32[$9 >> 2] = -1;
   HEAP32[$9 + 4 >> 2] = 0;
   $$0240 = 0;
   $52 = $41;
   $55 = 0;
   while (1) {
    $$0240$looptemp = $$0240;
    $$0240 = $$0240 + 1 | 0;
    L32 : do if (($52 | 0) == -1) {
     $53 = $$0240$looptemp + 2 | 0;
     HEAP32[$8 + ($53 << 2) >> 2] = $55;
     $$3248 = 0;
     while (1) {
      if (($$3248 | 0) > ($55 | 0)) {
       $$pre$phiZ2D = $53;
       $114 = $55;
       break L32;
      }
      $57 = $6 + ($$0240 * 72 | 0) + ($$3248 << 2) | 0;
      $58 = HEAP32[$57 >> 2] | 0;
      HEAP32[$6 + ($53 * 72 | 0) + ($$3248 << 2) >> 2] = $58;
      HEAP32[$57 >> 2] = HEAP32[$$1252 + ($58 << 2) >> 2];
      $$3248 = $$3248 + 1 | 0;
     }
    } else {
     $$0238 = $$0240$looptemp;
     while (1) {
      $66 = ($$0238 | 0) > 0;
      if ($66 & (HEAP32[$7 + ($$0238 << 2) >> 2] | 0) == -1) $$0238 = $$0238 + -1 | 0; else break;
     }
     if ($66) {
      $$1239 = $$0238;
      $$1243 = $$0238;
      while (1) {
       $$1243$looptemp = $$1243;
       $$1243 = $$1243 + -1 | 0;
       if ((HEAP32[$7 + ($$1243 << 2) >> 2] | 0) == -1) $$2 = $$1239; else $$2 = (HEAP32[$9 + ($$1239 << 2) >> 2] | 0) < (HEAP32[$9 + ($$1243 << 2) >> 2] | 0) ? $$1243 : $$1239;
       if (($$1243$looptemp | 0) <= 1) {
        $$3 = $$2;
        break;
       } else $$1239 = $$2;
      }
     } else $$3 = $$0238;
     $79 = $8 + ($$3 << 2) | 0;
     $81 = $$0240 - $$3 | 0;
     $82 = $81 + (HEAP32[$79 >> 2] | 0) | 0;
     $84 = $$0240$looptemp + 2 | 0;
     $$ = ($55 | 0) > ($82 | 0) ? $55 : $82;
     HEAP32[$8 + ($84 << 2) >> 2] = $$;
     $$4249 = 0;
     while (1) {
      if (($$4249 | 0) >= ($21 | 0)) break;
      HEAP32[$6 + ($84 * 72 | 0) + ($$4249 << 2) >> 2] = 0;
      $$4249 = $$4249 + 1 | 0;
     }
     $89 = $52 + $$1262 | 0;
     $90 = $7 + ($$3 << 2) | 0;
     $$pre280 = HEAP32[$79 >> 2] | 0;
     $$5250 = 0;
     while (1) {
      if (($$5250 | 0) > ($$pre280 | 0)) break;
      $93 = HEAP32[$6 + ($$3 * 72 | 0) + ($$5250 << 2) >> 2] | 0;
      if (($93 | 0) != -1) HEAP32[$6 + ($84 * 72 | 0) + ($81 + $$5250 << 2) >> 2] = HEAP32[$$1254 + ((($89 + $93 - (HEAP32[$90 >> 2] | 0) | 0) % ($$1262 | 0) | 0) << 2) >> 2];
      $$5250 = $$5250 + 1 | 0;
     }
     $$6 = 0;
     while (1) {
      if (($$6 | 0) > ($55 | 0)) {
       $$pre$phiZ2D = $84;
       $114 = $$;
       break L32;
      }
      $105 = $6 + ($$0240 * 72 | 0) + ($$6 << 2) | 0;
      $106 = HEAP32[$105 >> 2] | 0;
      $107 = $6 + ($84 * 72 | 0) + ($$6 << 2) | 0;
      HEAP32[$107 >> 2] = HEAP32[$107 >> 2] ^ $106;
      HEAP32[$105 >> 2] = HEAP32[$$1252 + ($106 << 2) >> 2];
      $$6 = $$6 + 1 | 0;
     }
    } while (0);
    HEAP32[$9 + ($$pre$phiZ2D << 2) >> 2] = $$0240 - $114;
    if (($$0240 | 0) >= ($21 | 0)) break;
    $118 = HEAP32[$10 + ($$pre$phiZ2D << 2) >> 2] | 0;
    if (($118 | 0) == -1) $$sink = 0; else $$sink = HEAP32[$$1254 + ($118 << 2) >> 2] | 0;
    $122 = $7 + ($$pre$phiZ2D << 2) | 0;
    HEAP32[$122 >> 2] = $$sink;
    $$7 = 1;
    $138 = $$sink;
    while (1) {
     if (($$7 | 0) > ($114 | 0)) break;
     $126 = HEAP32[$10 + ($$pre$phiZ2D - $$7 << 2) >> 2] | 0;
     if (($126 | 0) == -1) $206 = $138; else {
      $129 = HEAP32[$6 + ($$pre$phiZ2D * 72 | 0) + ($$7 << 2) >> 2] | 0;
      if (!$129) $206 = $138; else {
       $137 = $138 ^ HEAP32[$$1254 + ((((HEAP32[$$1252 + ($129 << 2) >> 2] | 0) + $126 | 0) % ($$1262 | 0) | 0) << 2) >> 2];
       HEAP32[$122 >> 2] = $137;
       $206 = $137;
      }
     }
     $$7 = $$7 + 1 | 0;
     $138 = $206;
    }
    $52 = HEAP32[$$1252 + ($138 << 2) >> 2] | 0;
    HEAP32[$122 >> 2] = $52;
    if (($114 | 0) > ($$3266 | 0)) break; else $55 = $114;
   }
   if (($114 | 0) > ($$3266 | 0)) {
    $$0237 = -1;
    break L11;
   }
   $$8 = 0;
   while (1) {
    if (($$8 | 0) > ($114 | 0)) break;
    $145 = $6 + ($$pre$phiZ2D * 72 | 0) + ($$8 << 2) | 0;
    HEAP32[$145 >> 2] = HEAP32[$$1252 + (HEAP32[$145 >> 2] << 2) >> 2];
    $$8 = $$8 + 1 | 0;
   }
   $$9 = 1;
   while (1) {
    if (($$9 | 0) > ($114 | 0)) break;
    HEAP32[$12 + ($$9 << 2) >> 2] = HEAP32[$6 + ($$pre$phiZ2D * 72 | 0) + ($$9 << 2) >> 2];
    $$9 = $$9 + 1 | 0;
   }
   $$0235 = 0;
   $$10 = 1;
   while (1) {
    if (($$1262 | 0) < ($$10 | 0)) break;
    $$2244 = 1;
    $$4 = 1;
    while (1) {
     if (($$2244 | 0) > ($114 | 0)) break;
     $157 = $12 + ($$2244 << 2) | 0;
     $158 = HEAP32[$157 >> 2] | 0;
     if (($158 | 0) == -1) $$5 = $$4; else {
      $161 = ($158 + $$2244 | 0) % ($$1262 | 0) | 0;
      HEAP32[$157 >> 2] = $161;
      $$5 = HEAP32[$$1254 + ($161 << 2) >> 2] ^ $$4;
     }
     $$2244 = $$2244 + 1 | 0;
     $$4 = $$5;
    }
    if (!$$4) {
     HEAP32[$11 + ($$0235 << 2) >> 2] = $$1262 - $$10;
     $$1236 = $$0235 + 1 | 0;
    } else $$1236 = $$0235;
    $$0235 = $$1236;
    $$10 = $$10 + 1 | 0;
   }
   if (($$0235 | 0) != ($114 | 0)) {
    $$0237 = -1;
    break L11;
   }
   $$11 = 0;
   while (1) {
    if (($$11 | 0) >= ($114 | 0)) {
     $$1241 = $$pre$phiZ2D;
     break L24;
    }
    $175 = $$0268 + (HEAP32[$11 + ($$11 << 2) >> 2] | 0) | 0;
    HEAP8[$175 >> 0] = HEAP8[$175 >> 0] ^ 1;
    $$11 = $$11 + 1 | 0;
   }
  } else $$1241 = 0; while (0);
  $179 = $4;
  HEAP32[$179 >> 2] = 0;
  HEAP32[$179 + 4 >> 2] = 0;
  $$12 = $$1260 - $$3258 | 0;
  $188 = 1;
  $189 = 0;
  $192 = 0;
  $193 = 0;
  while (1) {
   if (($$12 | 0) >= ($$1260 | 0)) break;
   $190 = ___muldi3($188 | 0, $189 | 0, HEAPU8[$$0268 + $$12 >> 0] | 0, 0) | 0;
   $194 = _i64Add($190 | 0, tempRet0 | 0, $192 | 0, $193 | 0) | 0;
   $195 = tempRet0;
   $196 = $4;
   HEAP32[$196 >> 2] = $194;
   HEAP32[$196 + 4 >> 2] = $195;
   $200 = _bitshift64Shl($188 | 0, $189 | 0, 1) | 0;
   $$12 = $$12 + 1 | 0;
   $188 = $200;
   $189 = tempRet0;
   $192 = $194;
   $193 = $195;
  }
  if ($39) $$0237 = HEAP32[$8 + ($$1241 << 2) >> 2] | 0; else $$0237 = 0;
 } while (0);
 STACKTOP = sp;
 return $$0237 | 0;
}

function _check_rotation($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0457 = 0.0, $$0458 = 0.0, $$0459 = 0.0, $$0460 = 0.0, $$0461 = 0.0, $$0462 = 0.0, $$0463 = 0.0, $$0464 = 0.0, $$0465 = 0.0, $$0466 = 0.0, $$0467 = 0.0, $$0468 = 0.0, $$0469 = 0.0, $$0470 = 0.0, $$0471 = 0.0, $$0472 = 0.0, $$0473 = 0.0, $$1 = 0, $$10 = 0.0, $$2 = 0.0, $$3 = 0.0, $$5 = 0.0, $$6 = 0.0, $$9 = 0.0, $$pre = 0.0, $$pre$phi15Z2D = 0.0, $$pre$phi17Z2D = 0.0, $$pre$phi19Z2D = 0.0, $$pre$phi21Z2D = 0.0, $$pre$phi23Z2D = 0.0, $$pre$phiZ2D = 0.0, $$pre14 = 0.0, $$pre18 = 0.0, $$pre20 = 0.0, $$sroa$0$0 = 0.0, $$sroa$0$1 = 0.0, $$sroa$0$1$$sroa$62$1 = 0.0, $$sroa$0$2 = 0.0, $$sroa$0333$0 = 0.0, $$sroa$0370$0 = 0.0, $$sroa$18$0 = 0.0, $$sroa$18384$0 = 0.0, $$sroa$33$0 = 0.0, $$sroa$33$1 = 0.0, $$sroa$33$2 = 0.0, $$sroa$33359$0 = 0.0, $$sroa$33397$0 = 0.0, $$sroa$62$0 = 0.0, $$sroa$62$1 = 0.0, $$sroa$62$1$$sroa$33$1 = 0.0, $$sroa$62$2 = 0.0, $1 = 0.0, $10 = 0, $102 = 0, $107 = 0.0, $109 = 0.0, $11 = 0.0, $113 = 0.0, $114 = 0.0, $116 = 0.0, $120 = 0.0, $123 = 0.0, $130 = 0.0, $133 = 0.0, $135 = 0.0, $137 = 0.0, $139 = 0.0, $14 = 0.0, $141 = 0.0, $143 = 0.0, $145 = 0.0, $150 = 0.0, $157 = 0.0, $164 = 0.0, $17 = 0.0, $171 = 0.0, $2 = 0, $20 = 0.0, $26 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $35 = 0.0, $4 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $5 = 0.0, $51 = 0, $56 = 0.0, $58 = 0.0, $6 = 0, $62 = 0.0, $63 = 0.0, $65 = 0.0, $69 = 0.0, $7 = 0.0, $72 = 0.0, $79 = 0.0, $8 = 0, $82 = 0.0, $84 = 0.0, $86 = 0.0, $88 = 0.0, $9 = 0.0, $90 = 0.0, $92 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0;
 $1 = +HEAPF64[$0 >> 3];
 $2 = $0 + 8 | 0;
 $3 = +HEAPF64[$2 >> 3];
 $4 = $0 + 16 | 0;
 $5 = +HEAPF64[$4 >> 3];
 $6 = $0 + 24 | 0;
 $7 = +HEAPF64[$6 >> 3];
 $8 = $0 + 32 | 0;
 $9 = +HEAPF64[$8 >> 3];
 $10 = $0 + 40 | 0;
 $11 = +HEAPF64[$10 >> 3];
 $14 = $3 * $11 - $5 * $9;
 $17 = $5 * $7 - $1 * $11;
 $20 = $1 * $9 - $3 * $7;
 $26 = +Math_sqrt(+($20 * $20 + ($14 * $14 + $17 * $17)));
 do if (!($26 == 0.0)) {
  $28 = $14 / $26;
  $29 = $17 / $26;
  $30 = $20 / $26;
  $35 = $1 * $7 + $3 * $9 + $5 * $11;
  $$0473 = $35 < 0.0 ? -$35 : $35;
  $43 = (+Math_sqrt(+($$0473 + 1.0)) + +Math_sqrt(+(1.0 - $$0473))) * .5;
  $44 = $1 * $29;
  $45 = $3 * $28;
  $46 = $44 - $45;
  if ($46 != 0.0) {
   $$0 = 0;
   $$pre$phi15Z2D = $45;
   $$pre$phi17Z2D = $46;
   $$pre$phiZ2D = $44;
   $$sroa$0$0 = $28;
   $$sroa$0370$0 = $1;
   $$sroa$18384$0 = $3;
   $$sroa$33$0 = $29;
   $$sroa$33397$0 = $5;
   $$sroa$62$0 = $30;
  } else {
   $51 = $1 * $30 - $5 * $28 != 0.0;
   $$2 = $51 ? $5 : $3;
   $$3 = $51 ? $1 : $5;
   $$5 = $51 ? $30 : $29;
   $$6 = $51 ? $28 : $30;
   $$pre = $$3 * $$5;
   $$pre14 = $$2 * $$6;
   $$0 = $51 ? 1 : 2;
   $$pre$phi15Z2D = $$pre14;
   $$pre$phi17Z2D = $$pre - $$pre14;
   $$pre$phiZ2D = $$pre;
   $$sroa$0$0 = $$6;
   $$sroa$0370$0 = $$3;
   $$sroa$18384$0 = $$2;
   $$sroa$33$0 = $$5;
   $$sroa$33397$0 = $51 ? $3 : $1;
   $$sroa$62$0 = $51 ? $29 : $28;
  }
  if (!($$pre$phi17Z2D == 0.0)) {
   $56 = ($$sroa$18384$0 * $$sroa$62$0 - $$sroa$33397$0 * $$sroa$33$0) / $$pre$phi17Z2D;
   $58 = $43 * $$sroa$33$0 / $$pre$phi17Z2D;
   $62 = $$pre$phi15Z2D - $$pre$phiZ2D;
   $63 = ($$sroa$0370$0 * $$sroa$62$0 - $$sroa$33397$0 * $$sroa$0$0) / $62;
   $65 = $43 * $$sroa$0$0 / $62;
   $69 = $56 * $56 + $63 * $63 + 1.0;
   $72 = $56 * $58 + $63 * $65;
   $79 = $72 * $72 - $69 * ($58 * $58 + $65 * $65 + -1.0);
   if (!($79 < 0.0)) {
    $82 = +Math_sqrt(+$79);
    $84 = ($82 - $72) / $69;
    $86 = $58 + $56 * $84;
    $88 = $65 + $63 * $84;
    $90 = (-$72 - $82) / $69;
    $92 = $58 + $56 * $90;
    $94 = $65 + $63 * $90;
    switch ($$0 & 3) {
    case 1:
     {
      $$0467 = $94;
      $$0468 = $90;
      $$0469 = $92;
      $$0470 = $88;
      $$0471 = $84;
      $$0472 = $86;
      $$sroa$0$1 = $$sroa$0$0;
      $$sroa$33$1 = $$sroa$62$0;
      $$sroa$62$1 = $$sroa$33$0;
      break;
     }
    case 2:
     {
      $$0467 = $92;
      $$0468 = $94;
      $$0469 = $90;
      $$0470 = $86;
      $$0471 = $88;
      $$0472 = $84;
      $$sroa$0$1 = $$sroa$62$0;
      $$sroa$33$1 = $$sroa$33$0;
      $$sroa$62$1 = $$sroa$0$0;
      break;
     }
    default:
     {
      $$0467 = $90;
      $$0468 = $94;
      $$0469 = $92;
      $$0470 = $84;
      $$0471 = $88;
      $$0472 = $86;
      $$sroa$0$1 = $$sroa$0$0;
      $$sroa$33$1 = $$sroa$33$0;
      $$sroa$62$1 = $$sroa$62$0;
     }
    }
    $95 = $7 * $$sroa$33$1;
    $96 = $9 * $$sroa$0$1;
    $97 = $95 - $96;
    if ($97 != 0.0) {
     $$1 = 0;
     $$pre$phi19Z2D = $95;
     $$pre$phi21Z2D = $96;
     $$pre$phi23Z2D = $97;
     $$sroa$0$2 = $$sroa$0$1;
     $$sroa$0333$0 = $7;
     $$sroa$18$0 = $9;
     $$sroa$33$2 = $$sroa$33$1;
     $$sroa$33359$0 = $11;
     $$sroa$62$2 = $$sroa$62$1;
    } else {
     $102 = $7 * $$sroa$62$1 - $11 * $$sroa$0$1 != 0.0;
     $$9 = $102 ? $11 : $9;
     $$10 = $102 ? $7 : $11;
     $$sroa$62$1$$sroa$33$1 = $102 ? $$sroa$62$1 : $$sroa$33$1;
     $$sroa$0$1$$sroa$62$1 = $102 ? $$sroa$0$1 : $$sroa$62$1;
     $$pre18 = $$10 * $$sroa$62$1$$sroa$33$1;
     $$pre20 = $$9 * $$sroa$0$1$$sroa$62$1;
     $$1 = $102 ? 1 : 2;
     $$pre$phi19Z2D = $$pre18;
     $$pre$phi21Z2D = $$pre20;
     $$pre$phi23Z2D = $$pre18 - $$pre20;
     $$sroa$0$2 = $$sroa$0$1$$sroa$62$1;
     $$sroa$0333$0 = $$10;
     $$sroa$18$0 = $$9;
     $$sroa$33$2 = $$sroa$62$1$$sroa$33$1;
     $$sroa$33359$0 = $102 ? $9 : $7;
     $$sroa$62$2 = $102 ? $$sroa$33$1 : $$sroa$0$1;
    }
    if (!($$pre$phi23Z2D == 0.0)) {
     $107 = ($$sroa$18$0 * $$sroa$62$2 - $$sroa$33359$0 * $$sroa$33$2) / $$pre$phi23Z2D;
     $109 = $43 * $$sroa$33$2 / $$pre$phi23Z2D;
     $113 = $$pre$phi21Z2D - $$pre$phi19Z2D;
     $114 = ($$sroa$0333$0 * $$sroa$62$2 - $$sroa$33359$0 * $$sroa$0$2) / $113;
     $116 = $43 * $$sroa$0$2 / $113;
     $120 = $107 * $107 + $114 * $114 + 1.0;
     $123 = $107 * $109 + $114 * $116;
     $130 = $123 * $123 - $120 * ($109 * $109 + $116 * $116 + -1.0);
     if (!($130 < 0.0)) {
      $133 = +Math_sqrt(+$130);
      $135 = ($133 - $123) / $120;
      $137 = $109 + $107 * $135;
      $139 = $116 + $114 * $135;
      $141 = (-$123 - $133) / $120;
      $143 = $109 + $107 * $141;
      $145 = $116 + $114 * $141;
      switch ($$1 & 3) {
      case 1:
       {
        $$0461 = $145;
        $$0462 = $141;
        $$0463 = $143;
        $$0464 = $139;
        $$0465 = $135;
        $$0466 = $137;
        break;
       }
      case 2:
       {
        $$0461 = $143;
        $$0462 = $145;
        $$0463 = $141;
        $$0464 = $137;
        $$0465 = $139;
        $$0466 = $135;
        break;
       }
      default:
       {
        $$0461 = $141;
        $$0462 = $145;
        $$0463 = $143;
        $$0464 = $135;
        $$0465 = $139;
        $$0466 = $137;
       }
      }
      $150 = $$0472 * $$0466 + $$0471 * $$0465 + $$0470 * $$0464;
      $$0460 = $150 < 0.0 ? -$150 : $150;
      $157 = $$0472 * $$0463 + $$0471 * $$0462 + $$0470 * $$0461;
      $$0459 = $157 < 0.0 ? -$157 : $157;
      $164 = $$0469 * $$0466 + $$0468 * $$0465 + $$0467 * $$0464;
      $$0458 = $164 < 0.0 ? -$164 : $164;
      $171 = $$0469 * $$0463 + $$0468 * $$0462 + $$0467 * $$0461;
      $$0457 = $171 < 0.0 ? -$171 : $171;
      if ($$0460 < $$0459) if ($$0460 < $$0458) if ($$0460 < $$0457) {
       HEAPF64[$0 >> 3] = $$0472;
       HEAPF64[$2 >> 3] = $$0471;
       HEAPF64[$4 >> 3] = $$0470;
       HEAPF64[$6 >> 3] = $$0466;
       HEAPF64[$8 >> 3] = $$0465;
       HEAPF64[$10 >> 3] = $$0464;
       break;
      } else {
       HEAPF64[$0 >> 3] = $$0469;
       HEAPF64[$2 >> 3] = $$0468;
       HEAPF64[$4 >> 3] = $$0467;
       HEAPF64[$6 >> 3] = $$0463;
       HEAPF64[$8 >> 3] = $$0462;
       HEAPF64[$10 >> 3] = $$0461;
       break;
      } else {
       HEAPF64[$0 >> 3] = $$0469;
       HEAPF64[$2 >> 3] = $$0468;
       HEAPF64[$4 >> 3] = $$0467;
       if ($$0458 < $$0457) {
        HEAPF64[$6 >> 3] = $$0466;
        HEAPF64[$8 >> 3] = $$0465;
        HEAPF64[$10 >> 3] = $$0464;
        break;
       } else {
        HEAPF64[$6 >> 3] = $$0463;
        HEAPF64[$8 >> 3] = $$0462;
        HEAPF64[$10 >> 3] = $$0461;
        break;
       }
      } else if ($$0459 < $$0458) if ($$0459 < $$0457) {
       HEAPF64[$0 >> 3] = $$0472;
       HEAPF64[$2 >> 3] = $$0471;
       HEAPF64[$4 >> 3] = $$0470;
       HEAPF64[$6 >> 3] = $$0463;
       HEAPF64[$8 >> 3] = $$0462;
       HEAPF64[$10 >> 3] = $$0461;
       break;
      } else {
       HEAPF64[$0 >> 3] = $$0469;
       HEAPF64[$2 >> 3] = $$0468;
       HEAPF64[$4 >> 3] = $$0467;
       HEAPF64[$6 >> 3] = $$0463;
       HEAPF64[$8 >> 3] = $$0462;
       HEAPF64[$10 >> 3] = $$0461;
       break;
      } else {
       HEAPF64[$0 >> 3] = $$0469;
       HEAPF64[$2 >> 3] = $$0468;
       HEAPF64[$4 >> 3] = $$0467;
       if ($$0458 < $$0457) {
        HEAPF64[$6 >> 3] = $$0466;
        HEAPF64[$8 >> 3] = $$0465;
        HEAPF64[$10 >> 3] = $$0464;
        break;
       } else {
        HEAPF64[$6 >> 3] = $$0463;
        HEAPF64[$8 >> 3] = $$0462;
        HEAPF64[$10 >> 3] = $$0461;
        break;
       }
      }
     }
    }
   }
  }
 } while (0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_vector_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i131 = 0, $$0$i$i$i135 = 0, $$0$i$i$i139 = 0, $$0$i$i$i144 = 0, $$0$i$i$idx$i = 0, $$2103 = 0, $$899$ph = 0, $$9 = 0, $104 = 0, $105 = 0, $16 = 0, $17 = 0, $19 = 0, $25 = 0, $26 = 0, $3 = 0, $30 = 0, $33 = 0, $4 = 0, $45 = 0, $46 = 0, $5 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $70 = 0, $73 = 0, $74 = 0, $77 = 0, $80 = 0, $84 = 0, $90 = 0, $92 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 40 | 0;
 $4 = sp + 12 | 0;
 $5 = sp;
 $6 = sp + 24 | 0;
 L1 : do if (($1 - $0 | 0) > 3) if ((HEAP8[$0 >> 0] | 0) == 68) if ((HEAP8[$0 + 1 >> 0] | 0) == 118) {
  $16 = $0 + 2 | 0;
  $17 = HEAP8[$16 >> 0] | 0;
  if (($17 + -49 & 255) < 9) {
   $19 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($16, $1) | 0;
   if (($19 | 0) == ($1 | 0)) {
    $$9 = $0;
    break;
   }
   if ((HEAP8[$19 >> 0] | 0) != 95) {
    $$9 = $0;
    break;
   }
   $25 = $19 - $16 | 0;
   $26 = $19 + 1 | 0;
   if (($26 | 0) == ($1 | 0)) {
    $$9 = $0;
    break;
   }
   if ((HEAP8[$26 >> 0] | 0) != 112) {
    $30 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($26, $1, $2) | 0;
    if (($30 | 0) == ($26 | 0)) {
     $$9 = $0;
     break;
    }
    $33 = $2 + 4 | 0;
    if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$33 >> 2] | 0)) {
     $$9 = $0;
     break;
    };
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($5, $16, $25);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5, 0, 15157) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15166) | 0;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    $$0$i$i$i131 = 0;
    while (1) {
     if (($$0$i$i$i131 | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i$i131 << 2) >> 2] = 0;
     $$0$i$i$i131 = $$0$i$i$i131 + 1 | 0;
    }
    $45 = HEAP8[$3 + 11 >> 0] | 0;
    $46 = $45 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$33 >> 2] | 0) + -24 | 0, $46 ? HEAP32[$3 >> 2] | 0 : $3, $46 ? HEAP32[$3 + 4 >> 2] | 0 : $45 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$9 = $30;
    break;
   }
   $53 = $19 + 2 | 0;
   HEAP32[$5 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = 0;
   HEAP32[$5 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($5, $16, $25);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5, 0, 15168) | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
   $$0$i$i$i135 = 0;
   while (1) {
    if (($$0$i$i$i135 | 0) == 3) break;
    HEAP32[$5 + ($$0$i$i$i135 << 2) >> 2] = 0;
    $$0$i$i$i135 = $$0$i$i$i135 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15166) | 0;
   HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$6 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
   HEAP32[$6 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
   $$0$i$i$i139 = 0;
   while (1) {
    if (($$0$i$i$i139 | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i$i139 << 2) >> 2] = 0;
    $$0$i$i$i139 = $$0$i$i$i139 + 1 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $6);
   $60 = $2 + 4 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   if ($61 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($61, $3);
    HEAP32[$60 >> 2] = (HEAP32[$60 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   $$9 = $53;
   break;
  };
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  $$0$i$i = 0;
  while (1) {
   if (($$0$i$i | 0) == 3) break;
   HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
   $$0$i$i = $$0$i$i + 1 | 0;
  }
  if ($17 << 24 >> 24 == 95) {
   $$2103 = $16;
   label = 44;
  } else {
   $70 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
   if (($70 | 0) == ($16 | 0)) {
    $$2103 = $16;
    label = 44;
   } else {
    $73 = $2 + 4 | 0;
    $74 = HEAP32[$73 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) != ($74 | 0)) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $74 + -24 | 0);
     $77 = $4 + 11 | 0;
     if ((HEAP8[$77 >> 0] | 0) < 0) {
      $80 = HEAP32[$4 >> 2] | 0;
      HEAP8[$3 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($80, $3);
      HEAP32[$4 + 4 >> 2] = 0;
     } else {
      HEAP8[$3 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($4, $3);
      HEAP8[$77 >> 0] = 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($4);
     HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
     $$0$i$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i$i | 0) == 3) break;
      HEAP32[$5 + ($$0$i$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     $84 = HEAP32[$73 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($84 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$73 >> 2] = $84 + -24;
     $$2103 = $70;
     label = 44;
    }
   }
  }
  do if ((label | 0) == 44) {
   if (($$2103 | 0) == ($1 | 0)) $$899$ph = $0; else if ((HEAP8[$$2103 >> 0] | 0) == 95) {
    $90 = $$2103 + 1 | 0;
    if (($90 | 0) == ($1 | 0)) $$899$ph = $0; else {
     $92 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($90, $1, $2) | 0;
     if (($92 | 0) == ($90 | 0)) $$899$ph = $0; else {
      $95 = $2 + 4 | 0;
      if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$95 >> 2] | 0)) break;
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5, 15157, $4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 15166) | 0;
      HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$3 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$3 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i144 = 0;
      while (1) {
       if (($$0$i$i$i144 | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i144 << 2) >> 2] = 0;
       $$0$i$i$i144 = $$0$i$i$i144 + 1 | 0;
      }
      $104 = HEAP8[$3 + 11 >> 0] | 0;
      $105 = $104 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$95 >> 2] | 0) + -24 | 0, $105 ? HEAP32[$3 >> 2] | 0 : $3, $105 ? HEAP32[$3 + 4 >> 2] | 0 : $104 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$899$ph = $92;
     }
    }
   } else $$899$ph = $0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   $$9 = $$899$ph;
   break L1;
  } while (0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
  $$9 = $0;
 } else $$9 = $0; else $$9 = $0; else $$9 = $0; while (0);
 STACKTOP = sp;
 return $$9 | 0;
}

function _hexfloat($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$be = 0, $$0$ph = 0, $$0133 = 0, $$0143 = 0, $$0151 = 0, $$0154 = 0.0, $$0155 = 0.0, $$0158 = 0.0, $$0163 = 0, $$0169 = 0.0, $$0170 = 0, $$0170173 = 0, $$0170174 = 0, $$1149 = 0, $$1149$ph = 0, $$1152 = 0, $$1156 = 0.0, $$1159 = 0.0, $$1164 = 0, $$2150 = 0, $$2153 = 0, $$2157 = 0.0, $$2160 = 0.0, $$2165 = 0, $$3 = 0, $$3$be = 0, $$3$lcssa = 0, $$3$ph = 0, $$3146 = 0, $$3146$ph = 0, $$3161$lcssa = 0.0, $$3161181 = 0.0, $$3166$lcssa = 0, $$3166185 = 0, $$4147 = 0, $$4162 = 0.0, $$4167$lcssa = 0, $$4167180 = 0, $$5168 = 0, $$pre = 0, $$pre$phi204Z2D = 0.0, $105 = 0, $106 = 0, $107 = 0, $117 = 0, $118 = 0, $131 = 0, $133 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $142 = 0, $144 = 0, $150 = 0, $154 = 0, $156 = 0, $162 = 0, $167 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $177 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $194 = 0.0, $195 = 0, $208 = 0.0, $21 = 0, $210 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $29 = 0, $30 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $43 = 0, $47 = 0, $5 = 0, $52 = 0, $54 = 0, $6 = 0, $66 = 0.0, $7 = 0, $73 = 0, $75 = 0, $84 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond172 = 0, label = 0, $106$looptemp = 0;
 $5 = $0 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $0 + 100 | 0;
 if ($6 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
  HEAP32[$5 >> 2] = $6 + 1;
  $$0$ph = HEAPU8[$6 >> 0] | 0;
 } else $$0$ph = ___shgetc($0) | 0;
 $$0 = $$0$ph;
 $$0143 = 0;
 L5 : while (1) {
  switch ($$0 | 0) {
  case 46:
   {
    label = 10;
    break L5;
    break;
   }
  case 48:
   break;
  default:
   {
    $$1149$ph = 0;
    $$3$ph = $$0;
    $$3146$ph = $$0143;
    $212 = 0;
    $213 = 0;
    break L5;
   }
  }
  $14 = HEAP32[$5 >> 2] | 0;
  if ($14 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $14 + 1;
   $$0$be = HEAPU8[$14 >> 0] | 0;
  } else $$0$be = ___shgetc($0) | 0;
  $$0 = $$0$be;
  $$0143 = 1;
 }
 if ((label | 0) == 10) {
  $21 = HEAP32[$5 >> 2] | 0;
  if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $21 + 1;
   $29 = HEAPU8[$21 >> 0] | 0;
  } else $29 = ___shgetc($0) | 0;
  if (($29 | 0) == 48) {
   $37 = 0;
   $38 = 0;
   while (1) {
    $30 = HEAP32[$5 >> 2] | 0;
    if ($30 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$5 >> 2] = $30 + 1;
     $42 = HEAPU8[$30 >> 0] | 0;
    } else $42 = ___shgetc($0) | 0;
    $39 = _i64Add($37 | 0, $38 | 0, -1, -1) | 0;
    $40 = tempRet0;
    if (($42 | 0) == 48) {
     $37 = $39;
     $38 = $40;
    } else {
     $$1149$ph = 1;
     $$3$ph = $42;
     $$3146$ph = 1;
     $212 = $39;
     $213 = $40;
     break;
    }
   }
  } else {
   $$1149$ph = 1;
   $$3$ph = $29;
   $$3146$ph = $$0143;
   $212 = 0;
   $213 = 0;
  }
 }
 $$0151 = 0;
 $$0155 = 1.0;
 $$0158 = 0.0;
 $$0163 = 0;
 $$1149 = $$1149$ph;
 $$3 = $$3$ph;
 $$3146 = $$3146$ph;
 $52 = 0;
 $54 = 0;
 $97 = $212;
 $99 = $213;
 while (1) {
  $43 = $$3 + -48 | 0;
  $$pre = $$3 | 32;
  if ($43 >>> 0 < 10) label = 24; else {
   $47 = ($$3 | 0) == 46;
   if (!($47 | ($$pre + -97 | 0) >>> 0 < 6)) {
    $$3$lcssa = $$3;
    break;
   }
   if ($47) if (!$$1149) {
    $$2150 = 1;
    $$2153 = $$0151;
    $$2157 = $$0155;
    $$2160 = $$0158;
    $$2165 = $$0163;
    $$4147 = $$3146;
    $214 = $54;
    $215 = $52;
    $216 = $54;
    $217 = $52;
   } else {
    $$3$lcssa = 46;
    break;
   } else label = 24;
  }
  if ((label | 0) == 24) {
   label = 0;
   $$0133 = ($$3 | 0) > 57 ? $$pre + -87 | 0 : $43;
   do if (($52 | 0) < 0 | ($52 | 0) == 0 & $54 >>> 0 < 8) {
    $$1152 = $$0151;
    $$1156 = $$0155;
    $$1159 = $$0158;
    $$1164 = $$0133 + ($$0163 << 4) | 0;
   } else if (($52 | 0) < 0 | ($52 | 0) == 0 & $54 >>> 0 < 14) {
    $66 = $$0155 * .0625;
    $$1152 = $$0151;
    $$1156 = $66;
    $$1159 = $$0158 + $66 * +($$0133 | 0);
    $$1164 = $$0163;
    break;
   } else {
    $or$cond = ($$0151 | 0) != 0 | ($$0133 | 0) == 0;
    $$1152 = $or$cond ? $$0151 : 1;
    $$1156 = $$0155;
    $$1159 = $or$cond ? $$0158 : $$0158 + $$0155 * .5;
    $$1164 = $$0163;
    break;
   } while (0);
   $73 = _i64Add($54 | 0, $52 | 0, 1, 0) | 0;
   $$2150 = $$1149;
   $$2153 = $$1152;
   $$2157 = $$1156;
   $$2160 = $$1159;
   $$2165 = $$1164;
   $$4147 = 1;
   $214 = $97;
   $215 = $99;
   $216 = $73;
   $217 = tempRet0;
  }
  $75 = HEAP32[$5 >> 2] | 0;
  if ($75 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $75 + 1;
   $$3$be = HEAPU8[$75 >> 0] | 0;
  } else $$3$be = ___shgetc($0) | 0;
  $$0151 = $$2153;
  $$0155 = $$2157;
  $$0158 = $$2160;
  $$0163 = $$2165;
  $$1149 = $$2150;
  $$3 = $$3$be;
  $$3146 = $$4147;
  $52 = $217;
  $54 = $216;
  $97 = $214;
  $99 = $215;
 }
 do if (!$$3146) {
  $84 = (HEAP32[$7 >> 2] | 0) == 0;
  if (!$84) HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
  if (!$4) ___shlim($0, 0); else if (!$84) {
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
   if (!(($$1149 | 0) == 0 | $84)) HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
  }
  $$0169 = +($3 | 0) * 0.0;
 } else {
  $95 = ($$1149 | 0) == 0;
  $96 = $95 ? $54 : $97;
  $98 = $95 ? $52 : $99;
  if (($52 | 0) < 0 | ($52 | 0) == 0 & $54 >>> 0 < 8) {
   $$3166185 = $$0163;
   $106 = $54;
   $107 = $52;
   while (1) {
    $105 = $$3166185 << 4;
    $106$looptemp = $106;
    $106 = _i64Add($106 | 0, $107 | 0, 1, 0) | 0;
    if (!(($107 | 0) < 0 | ($107 | 0) == 0 & $106$looptemp >>> 0 < 7)) {
     $$3166$lcssa = $105;
     break;
    } else {
     $$3166185 = $105;
     $107 = tempRet0;
    }
   }
  } else $$3166$lcssa = $$0163;
  if (($$3$lcssa | 32 | 0) == 112) {
   $117 = _scanexp($0, $4) | 0;
   $118 = tempRet0;
   if (($117 | 0) == 0 & ($118 | 0) == -2147483648) {
    if (!$4) {
     ___shlim($0, 0);
     $$0169 = 0.0;
     break;
    }
    if (!(HEAP32[$7 >> 2] | 0)) {
     $135 = 0;
     $136 = 0;
    } else {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
     $135 = 0;
     $136 = 0;
    }
   } else {
    $135 = $117;
    $136 = $118;
   }
  } else if (!(HEAP32[$7 >> 2] | 0)) {
   $135 = 0;
   $136 = 0;
  } else {
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
   $135 = 0;
   $136 = 0;
  }
  $131 = _bitshift64Shl($96 | 0, $98 | 0, 2) | 0;
  $133 = _i64Add($131 | 0, tempRet0 | 0, -32, -1) | 0;
  $137 = _i64Add($133 | 0, tempRet0 | 0, $135 | 0, $136 | 0) | 0;
  $138 = tempRet0;
  if (!$$3166$lcssa) {
   $$0169 = +($3 | 0) * 0.0;
   break;
  }
  $142 = 0 - $2 | 0;
  $144 = (($142 | 0) < 0) << 31 >> 31;
  if (($138 | 0) > ($144 | 0) | ($138 | 0) == ($144 | 0) & $137 >>> 0 > $142 >>> 0) {
   $150 = ___errno_location() | 0;
   HEAP32[$150 >> 2] = 34;
   $$0169 = +($3 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  $154 = $2 + -106 | 0;
  $156 = (($154 | 0) < 0) << 31 >> 31;
  if (($138 | 0) < ($156 | 0) | ($138 | 0) == ($156 | 0) & $137 >>> 0 < $154 >>> 0) {
   $162 = ___errno_location() | 0;
   HEAP32[$162 >> 2] = 34;
   $$0169 = +($3 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (($$3166$lcssa | 0) > -1) {
   $$3161181 = $$0158;
   $$4167180 = $$3166$lcssa;
   $171 = $137;
   $172 = $138;
   while (1) {
    $167 = !($$3161181 >= .5);
    $$5168 = $$4167180 << 1 | ($167 ^ 1) & 1;
    $$4162 = $$3161181 + ($167 ? $$3161181 : $$3161181 + -1.0);
    $173 = _i64Add($171 | 0, $172 | 0, -1, -1) | 0;
    $174 = tempRet0;
    if (($$5168 | 0) > -1) {
     $$3161181 = $$4162;
     $$4167180 = $$5168;
     $171 = $173;
     $172 = $174;
    } else {
     $$3161$lcssa = $$4162;
     $$4167$lcssa = $$5168;
     $182 = $173;
     $183 = $174;
     break;
    }
   }
  } else {
   $$3161$lcssa = $$0158;
   $$4167$lcssa = $$3166$lcssa;
   $182 = $137;
   $183 = $138;
  }
  $177 = (($1 | 0) < 0) << 31 >> 31;
  $180 = _i64Subtract(32, 0, $2 | 0, (($2 | 0) < 0) << 31 >> 31 | 0) | 0;
  $184 = _i64Add($180 | 0, tempRet0 | 0, $182 | 0, $183 | 0) | 0;
  $185 = tempRet0;
  if (($185 | 0) < ($177 | 0) | ($185 | 0) == ($177 | 0) & $184 >>> 0 < $1 >>> 0) if (($184 | 0) > 0) {
   $$0170 = $184;
   label = 65;
  } else {
   $$0170174 = 0;
   $195 = 84;
   label = 67;
  } else {
   $$0170 = $1;
   label = 65;
  }
  if ((label | 0) == 65) if (($$0170 | 0) < 53) {
   $$0170174 = $$0170;
   $195 = 84 - $$0170 | 0;
   label = 67;
  } else {
   $$0154 = 0.0;
   $$0170173 = $$0170;
   $$pre$phi204Z2D = +($3 | 0);
  }
  if ((label | 0) == 67) {
   $194 = +($3 | 0);
   $$0154 = +_copysignl(+_scalbn(1.0, $195), $194);
   $$0170173 = $$0170174;
   $$pre$phi204Z2D = $194;
  }
  $or$cond172 = ($$4167$lcssa & 1 | 0) == 0 & ($$3161$lcssa != 0.0 & ($$0170173 | 0) < 32);
  $208 = ($or$cond172 ? 0.0 : $$3161$lcssa) * $$pre$phi204Z2D + ($$0154 + $$pre$phi204Z2D * +(($$4167$lcssa + ($or$cond172 & 1) | 0) >>> 0)) - $$0154;
  if (!($208 != 0.0)) {
   $210 = ___errno_location() | 0;
   HEAP32[$210 >> 2] = 34;
  }
  $$0169 = +_scalbnl($208, $182);
 } while (0);
 return +$$0169;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_1200 = tempRet0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function _get_matrix_code($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0212 = 0, $$0213 = 0, $$0217 = 0, $$0225 = 0, $$0228 = 0, $$0230 = 0, $$1214 = 0, $$1218 = 0, $$2215 = 0, $$2219 = 0, $$3216 = 0, $$3220 = 0, $$4221 = 0, $$5222 = 0, $$6223 = 0, $$7224 = 0, $107 = 0, $11 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $125 = 0, $126 = 0, $132 = 0, $133 = 0, $134 = 0, $138 = 0, $14 = 0, $149 = 0, $150 = 0, $151 = 0, $154 = 0, $160 = 0, $161 = 0, $164 = 0, $173 = 0, $174 = 0, $178 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $25 = 0, $26 = 0, $30 = 0, $44 = 0, $55 = 0, $57 = 0, $58 = 0, $65 = 0, $67 = 0, $68 = 0, $7 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $93 = 0, $97 = 0, $or$cond7249 = 0, $spec$select232 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $7 = sp + 24 | 0;
 $8 = sp + 8 | 0;
 $9 = sp;
 L1 : do if (($1 + -3 | 0) >>> 0 > 5) {
  HEAP32[$2 >> 2] = -1;
  HEAP32[$3 >> 2] = 0;
  HEAPF64[$4 >> 3] = -1.0;
  $$0212 = -1;
 } else {
  HEAP32[$8 >> 2] = 0;
  $11 = $1 + -1 | 0;
  $12 = Math_imul($11, $1) | 0;
  HEAP32[$8 + 4 >> 2] = $12;
  $14 = Math_imul($1, $1) | 0;
  HEAP32[$8 + 8 >> 2] = $14 + -1;
  HEAP32[$8 + 12 >> 2] = $11;
  $$0217 = 0;
  $$0228 = 0;
  $$0230 = -1;
  while (1) {
   if (($$0217 | 0) == 4) break;
   $21 = HEAP8[$0 + (HEAP32[$8 + ($$0217 << 2) >> 2] | 0) >> 0] | 0;
   $$0217 = $$0217 + 1 | 0;
   $$0228 = ($21 & 255) > ($$0228 & 255) ? $21 : $$0228;
   $$0230 = ($21 & 255) < ($$0230 & 255) ? $21 : $$0230;
  }
  $25 = $$0228 & 255;
  $26 = $$0230 & 255;
  if (($25 - $26 | 0) < 30) {
   HEAP32[$2 >> 2] = -1;
   HEAP32[$3 >> 2] = 0;
   HEAPF64[$4 >> 3] = -1.0;
   $$0212 = -2;
   break;
  }
  $30 = ($25 + $26 | 0) >>> 1;
  $$1218 = 0;
  while (1) {
   if (($$1218 | 0) == 4) break;
   HEAP8[$7 + $$1218 >> 0] = $30 >>> 0 > (HEAPU8[$0 + (HEAP32[$8 + ($$1218 << 2) >> 2] | 0) >> 0] | 0) >>> 0 & 1;
   $$1218 = $$1218 + 1 | 0;
  }
  $$2219 = 0;
  while (1) {
   if ($$2219 >>> 0 >= 4) {
    label = 18;
    break;
   }
   $44 = $$2219 + 1 | 0;
   if ((HEAP8[$7 + $$2219 >> 0] | 0) == 1) if ((HEAP8[$7 + ($44 & 3) >> 0] | 0) == 1) if (!(HEAP8[$7 + ($$2219 + 2 & 3) >> 0] | 0)) {
    label = 17;
    break;
   }
   $$2219 = $44;
  }
  if ((label | 0) == 17) HEAP32[$3 >> 2] = $$2219; else if ((label | 0) == 18) if (($$2219 | 0) == 4) {
   HEAP32[$2 >> 2] = -1;
   HEAP32[$3 >> 2] = 0;
   HEAPF64[$4 >> 3] = -1.0;
   $$0212 = -3;
   break;
  }
  $$0225 = 255;
  $$3220 = 0;
  while (1) {
   if (($$3220 | 0) == ($14 | 0)) break;
   $55 = $0 + $$3220 | 0;
   $57 = HEAPU8[$55 >> 0] | 0;
   $58 = $57 - $30 | 0;
   $spec$select232 = ($58 | 0) < 0 ? 0 - $58 | 0 : $58;
   HEAP8[$55 >> 0] = $30 >>> 0 > $57 >>> 0 & 1;
   $$0225 = ($spec$select232 | 0) < ($$0225 | 0) ? $spec$select232 : $$0225;
   $$3220 = $$3220 + 1 | 0;
  }
  $65 = HEAP32[$3 >> 2] | 0;
  L31 : do switch ($65 | 0) {
  case 0:
   {
    $$0213 = $65;
    $194 = 0;
    $195 = 0;
    while (1) {
     if (($$0213 | 0) >= ($1 | 0)) {
      $149 = $194;
      $173 = $195;
      break L31;
     }
     $67 = ($$0213 | 0) == ($11 | 0);
     $68 = Math_imul($$0213, $1) | 0;
     $$4221 = 0;
     $73 = $194;
     $74 = $195;
     while (1) {
      if (($$4221 | 0) == ($1 | 0)) break;
      if (!($$4221 | $$0213)) {
       $196 = $73;
       $197 = $74;
      } else if ($67 & (($$4221 | 0) == 0 | ($$4221 | 0) == ($11 | 0))) {
       $196 = $73;
       $197 = $74;
      } else {
       $75 = _bitshift64Shl($73 | 0, $74 | 0, 1) | 0;
       $196 = $75 | (HEAP8[$0 + ($$4221 + $68) >> 0] | 0) != 0;
       $197 = tempRet0;
      }
      $$4221 = $$4221 + 1 | 0;
      $73 = $196;
      $74 = $197;
     }
     $$0213 = $$0213 + 1 | 0;
     $194 = $73;
     $195 = $74;
    }
    break;
   }
  case 1:
   {
    $$5222 = 0;
    $192 = 0;
    $193 = 0;
    while (1) {
     if (($$5222 | 0) >= ($1 | 0)) {
      $149 = $192;
      $173 = $193;
      break L31;
     }
     $86 = ($$5222 | 0) == 0;
     $87 = ($$5222 | 0) == ($11 | 0);
     $$1214 = $11;
     $91 = $192;
     $92 = $193;
     while (1) {
      if (($$1214 | 0) <= -1) break;
      $89 = ($$1214 | 0) == ($11 | 0);
      if ($86 & $89) {
       $198 = $91;
       $199 = $92;
      } else if ($87 & ($89 | ($$1214 | 0) == 0)) {
       $198 = $91;
       $199 = $92;
      } else {
       $93 = _bitshift64Shl($91 | 0, $92 | 0, 1) | 0;
       $97 = $0 + ((Math_imul($$1214, $1) | 0) + $$5222) | 0;
       $198 = $93 | (HEAP8[$97 >> 0] | 0) != 0;
       $199 = tempRet0;
      }
      $$1214 = $$1214 + -1 | 0;
      $91 = $198;
      $92 = $199;
     }
     $$5222 = $$5222 + 1 | 0;
     $192 = $91;
     $193 = $92;
    }
    break;
   }
  case 2:
   {
    $$2215 = $11;
    $190 = 0;
    $191 = 0;
    while (1) {
     if (($$2215 | 0) <= -1) {
      $149 = $190;
      $173 = $191;
      break L31;
     }
     $or$cond7249 = ($$2215 | 0) == ($11 | 0) | ($$2215 | 0) == 0;
     $107 = Math_imul($$2215, $1) | 0;
     $$6223 = $11;
     $112 = $190;
     $113 = $191;
     while (1) {
      if (($$6223 | 0) <= -1) break;
      if ($or$cond7249 & ($$6223 | 0) == ($11 | 0) | ($$6223 | $$2215 | 0) == 0) {
       $200 = $112;
       $201 = $113;
      } else {
       $114 = _bitshift64Shl($112 | 0, $113 | 0, 1) | 0;
       $200 = $114 | (HEAP8[$0 + ($$6223 + $107) >> 0] | 0) != 0;
       $201 = tempRet0;
      }
      $$6223 = $$6223 + -1 | 0;
      $112 = $200;
      $113 = $201;
     }
     $$2215 = $$2215 + -1 | 0;
     $190 = $112;
     $191 = $113;
    }
    break;
   }
  case 3:
   {
    $$7224 = $11;
    $188 = 0;
    $189 = 0;
    while (1) {
     if (($$7224 | 0) <= -1) {
      $149 = $188;
      $173 = $189;
      break L31;
     }
     $125 = ($$7224 | 0) == ($11 | 0);
     $126 = ($$7224 | 0) == 0;
     $$3216 = 0;
     $132 = $188;
     $133 = $189;
     while (1) {
      if (($$3216 | 0) >= ($1 | 0)) break;
      if ($125 & ($$3216 | 0) == 0 | ($$3216 | $$7224 | 0) == 0 | $126 & ($$3216 | 0) == ($11 | 0)) {
       $202 = $132;
       $203 = $133;
      } else {
       $134 = _bitshift64Shl($132 | 0, $133 | 0, 1) | 0;
       $138 = $0 + ((Math_imul($$3216, $1) | 0) + $$7224) | 0;
       $202 = $134 | (HEAP8[$138 >> 0] | 0) != 0;
       $203 = tempRet0;
      }
      $$3216 = $$3216 + 1 | 0;
      $132 = $202;
      $133 = $203;
     }
     $$7224 = $$7224 + -1 | 0;
     $188 = $132;
     $189 = $133;
    }
    break;
   }
  default:
   {
    $149 = 0;
    $173 = 0;
   }
  } while (0);
  HEAPF64[$4 >> 3] = ($$0225 | 0) > 30 ? 1.0 : +($$0225 | 0) / 30.0;
  switch ($5 | 0) {
  case 259:
   {
    $150 = HEAP8[4110 + $149 >> 0] | 0;
    $151 = $150 << 24 >> 24;
    $154 = $9;
    HEAP32[$154 >> 2] = $151;
    HEAP32[$154 + 4 >> 2] = (($151 | 0) < 0) << 31 >> 31;
    if ($150 << 24 >> 24 < 0) {
     HEAP32[$2 >> 2] = -1;
     HEAPF64[$4 >> 3] = -1.0;
     $$0212 = -4;
     break L1;
    }
    break;
   }
  case 515:
   {
    $160 = HEAP8[3982 + $149 >> 0] | 0;
    $161 = $160 << 24 >> 24;
    $164 = $9;
    HEAP32[$164 >> 2] = $161;
    HEAP32[$164 + 4 >> 2] = (($161 | 0) < 0) << 31 >> 31;
    if ($6 | 0) HEAP32[$6 >> 2] = HEAPU8[4046 + $149 >> 0];
    if ($160 << 24 >> 24 < 0) {
     HEAP32[$2 >> 2] = -1;
     HEAPF64[$4 >> 3] = -1.0;
     $$0212 = -4;
     break L1;
    }
    break;
   }
  case 772:
  case 1028:
  case 1029:
  case 1285:
   {
    $174 = _decode_bch($5, $149, $173, 0, $9) | 0;
    if (($174 | 0) < 0) {
     HEAP32[$2 >> 2] = -1;
     HEAPF64[$4 >> 3] = -1.0;
     $$0212 = -4;
     break L1;
    }
    if (($6 | 0) != 0 & ($174 | 0) != 0) HEAP32[$6 >> 2] = $174;
    break;
   }
  default:
   {
    $178 = $9;
    HEAP32[$178 >> 2] = $149;
    HEAP32[$178 + 4 >> 2] = $173;
   }
  }
  HEAP32[$2 >> 2] = HEAP32[$9 >> 2];
  $$0212 = 0;
 } while (0);
 STACKTOP = sp;
 return $$0212 | 0;
}

function _arMultiReadConfigFile($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0151 = 0, $$0152 = 0, $$0154 = 0, $$1 = 0, $$1$ph = 0, $$2 = 0, $$sink204 = 0, $$sink205 = 0, $10 = 0, $114 = 0, $12 = 0, $125 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $37 = 0, $4 = 0, $41 = 0, $5 = 0, $51 = 0, $52 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $7 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $86 = 0.0, $90 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer35 = 0, $vararg_buffer41 = 0, $vararg_buffer45 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer55 = 0, $vararg_buffer59 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2528 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2528);
 $vararg_buffer59 = sp + 208 | 0;
 $vararg_buffer55 = sp + 200 | 0;
 $vararg_buffer49 = sp + 184 | 0;
 $vararg_buffer45 = sp + 176 | 0;
 $vararg_buffer41 = sp + 168 | 0;
 $vararg_buffer35 = sp + 152 | 0;
 $vararg_buffer31 = sp + 144 | 0;
 $vararg_buffer28 = sp + 136 | 0;
 $vararg_buffer24 = sp + 128 | 0;
 $vararg_buffer21 = sp + 120 | 0;
 $vararg_buffer17 = sp + 112 | 0;
 $vararg_buffer13 = sp + 104 | 0;
 $vararg_buffer11 = sp + 96 | 0;
 $vararg_buffer8 = sp + 88 | 0;
 $vararg_buffer5 = sp + 80 | 0;
 $vararg_buffer1 = sp + 72 | 0;
 $vararg_buffer = sp + 64 | 0;
 $2 = sp;
 $3 = sp + 2272 | 0;
 $4 = sp + 224 | 0;
 $5 = sp + 220 | 0;
 $6 = sp + 216 | 0;
 $7 = sp + 212 | 0;
 $8 = _fopen($0, 4886) | 0;
 do if (!$8) {
  HEAP32[$vararg_buffer >> 2] = $0;
  _arLog(0, 3, 4888, $vararg_buffer);
  $10 = ___errno_location() | 0;
  $12 = _strerror(HEAP32[$10 >> 2] | 0) | 0;
  HEAP32[$vararg_buffer1 >> 2] = 19061;
  HEAP32[$vararg_buffer1 + 4 >> 2] = $12;
  _arLog(0, 3, 4941, $vararg_buffer1);
  $$0154 = 0;
 } else {
  _get_buff($3, $8);
  HEAP32[$vararg_buffer5 >> 2] = $6;
  if ((_sscanf($3, 4947, $vararg_buffer5) | 0) != 1) {
   HEAP32[$vararg_buffer8 >> 2] = $0;
   _arLog(0, 3, 4950, $vararg_buffer8);
   _fclose($8) | 0;
   $$0154 = 0;
   break;
  }
  $15 = HEAP32[$6 >> 2] | 0;
  $17 = _malloc($15 * 320 | 0) | 0;
  if (!$17) {
   _arLog(0, 3, 5051, $vararg_buffer11);
   _exit(1);
  }
  $19 = ($1 | 0) == 0;
  $20 = $2 + 8 | 0;
  $21 = $2 + 16 | 0;
  $22 = $2 + 24 | 0;
  $23 = $2 + 32 | 0;
  $24 = $2 + 40 | 0;
  $25 = $2 + 48 | 0;
  $26 = $2 + 56 | 0;
  $$0151 = 0;
  $$0152 = 0;
  $28 = $15;
  L10 : while (1) {
   if (($$0151 | 0) >= ($28 | 0)) {
    label = 31;
    break;
   }
   _get_buff($3, $8);
   $29 = $17 + ($$0151 * 320 | 0) | 0;
   $30 = $17 + ($$0151 * 320 | 0) + 312 | 0;
   HEAP32[$vararg_buffer13 >> 2] = $30;
   HEAP32[$vararg_buffer13 + 4 >> 2] = $5;
   if ((_sscanf($3, 5068, $vararg_buffer13) | 0) == 1) {
    $41 = HEAP32[$30 >> 2] | 0;
    HEAP32[$29 >> 2] = ($41 & -32768 | 0) == 0 & 0 == 0 ? $41 & 32767 : 0;
    $$sink204 = 2;
    $$sink205 = 1;
   } else {
    if ($19) {
     label = 11;
     break;
    }
    if (!(_arUtilGetDirectoryNameFromPath($4, $0, 2048, 1) | 0)) {
     label = 13;
     break;
    }
    _strncat($4, $3, 2047 - (_strlen($4) | 0) | 0) | 0;
    $37 = _arPattLoad($1, $4) | 0;
    HEAP32[$29 >> 2] = $37;
    if (($37 | 0) < 0) {
     label = 15;
     break;
    } else {
     $$sink204 = 1;
     $$sink205 = 0;
    }
   }
   HEAP32[$17 + ($$0151 * 320 | 0) + 4 >> 2] = $$sink205;
   $51 = $$0152 | $$sink204;
   _get_buff($3, $8);
   $52 = $17 + ($$0151 * 320 | 0) + 8 | 0;
   HEAP32[$vararg_buffer28 >> 2] = $52;
   if ((_sscanf($3, 5364, $vararg_buffer28) | 0) != 1) {
    label = 18;
    break;
   }
   _get_buff($3, $8);
   $56 = $17 + ($$0151 * 320 | 0) + 16 | 0;
   $57 = $17 + ($$0151 * 320 | 0) + 24 | 0;
   $59 = $17 + ($$0151 * 320 | 0) + 40 | 0;
   HEAP32[$vararg_buffer35 >> 2] = $56;
   HEAP32[$vararg_buffer35 + 4 >> 2] = $57;
   HEAP32[$vararg_buffer35 + 8 >> 2] = $17 + ($$0151 * 320 | 0) + 32;
   HEAP32[$vararg_buffer35 + 12 >> 2] = $59;
   if ((_sscanf($3, 5473, $vararg_buffer35) | 0) == 4) $$1$ph = 1; else {
    HEAP32[$vararg_buffer41 >> 2] = $vararg_buffer5;
    HEAP32[$vararg_buffer41 + 4 >> 2] = $7;
    if ((_sscanf($3, 5489, $vararg_buffer41) | 0) != 2) {
     label = 23;
     break;
    }
    $$1$ph = 0;
   }
   $$1 = $$1$ph;
   do {
    _get_buff($3, $8);
    HEAP32[$vararg_buffer49 >> 2] = $17 + ($$0151 * 320 | 0) + 16 + ($$1 << 5);
    HEAP32[$vararg_buffer49 + 4 >> 2] = $17 + ($$0151 * 320 | 0) + 16 + ($$1 << 5) + 8;
    HEAP32[$vararg_buffer49 + 8 >> 2] = $17 + ($$0151 * 320 | 0) + 16 + ($$1 << 5) + 16;
    HEAP32[$vararg_buffer49 + 12 >> 2] = $17 + ($$0151 * 320 | 0) + 16 + ($$1 << 5) + 24;
    if ((_sscanf($3, 5473, $vararg_buffer49) | 0) != 4) {
     label = 25;
     break L10;
    }
    $$1 = $$1 + 1 | 0;
   } while ($$1 >>> 0 < 3);
   _arUtilMatInv($56, $17 + ($$0151 * 320 | 0) + 112 | 0) | 0;
   $75 = +HEAPF64[$52 >> 3];
   $76 = $75 * -.5;
   HEAPF64[$2 >> 3] = $76;
   $77 = $75 * .5;
   HEAPF64[$20 >> 3] = $77;
   HEAPF64[$21 >> 3] = $77;
   HEAPF64[$22 >> 3] = $77;
   HEAPF64[$23 >> 3] = $77;
   HEAPF64[$24 >> 3] = $76;
   HEAPF64[$25 >> 3] = $76;
   HEAPF64[$26 >> 3] = $76;
   $78 = $17 + ($$0151 * 320 | 0) + 48 | 0;
   $79 = $17 + ($$0151 * 320 | 0) + 56 | 0;
   $80 = $17 + ($$0151 * 320 | 0) + 72 | 0;
   $81 = $17 + ($$0151 * 320 | 0) + 80 | 0;
   $82 = $17 + ($$0151 * 320 | 0) + 88 | 0;
   $83 = $17 + ($$0151 * 320 | 0) + 104 | 0;
   $$2 = 0;
   while (1) {
    if (($$2 | 0) == 4) break;
    $86 = +HEAPF64[$2 + ($$2 << 4) >> 3];
    $90 = +HEAPF64[$2 + ($$2 << 4) + 8 >> 3];
    HEAPF64[$17 + ($$0151 * 320 | 0) + 208 + ($$2 * 24 | 0) >> 3] = +HEAPF64[$59 >> 3] + (+HEAPF64[$56 >> 3] * $86 + +HEAPF64[$57 >> 3] * $90);
    HEAPF64[$17 + ($$0151 * 320 | 0) + 208 + ($$2 * 24 | 0) + 8 >> 3] = +HEAPF64[$80 >> 3] + ($86 * +HEAPF64[$78 >> 3] + $90 * +HEAPF64[$79 >> 3]);
    HEAPF64[$17 + ($$0151 * 320 | 0) + 208 + ($$2 * 24 | 0) + 16 >> 3] = +HEAPF64[$83 >> 3] + ($86 * +HEAPF64[$81 >> 3] + $90 * +HEAPF64[$82 >> 3]);
    $$2 = $$2 + 1 | 0;
   }
   $$0151 = $$0151 + 1 | 0;
   $$0152 = $51;
   $28 = HEAP32[$6 >> 2] | 0;
  }
  if ((label | 0) == 11) {
   HEAP32[$vararg_buffer17 >> 2] = $0;
   HEAP32[$vararg_buffer17 + 4 >> 2] = $3;
   _arLog(0, 3, 5075, $vararg_buffer17);
  } else if ((label | 0) == 13) {
   HEAP32[$vararg_buffer21 >> 2] = $0;
   _arLog(0, 3, 5203, $vararg_buffer21);
  } else if ((label | 0) == 15) {
   HEAP32[$vararg_buffer24 >> 2] = $0;
   HEAP32[$vararg_buffer24 + 4 >> 2] = $4;
   _arLog(0, 3, 5287, $vararg_buffer24);
  } else if ((label | 0) == 18) {
   HEAP32[$vararg_buffer31 >> 2] = $0;
   HEAP32[$vararg_buffer31 + 4 >> 2] = $$0151 + 1;
   _arLog(0, 3, 5368, $vararg_buffer31);
  } else if ((label | 0) == 23) {
   HEAP32[$vararg_buffer45 >> 2] = $0;
   HEAP32[$vararg_buffer45 + 4 >> 2] = $$0151 + 1;
   _arLog(0, 3, 5495, $vararg_buffer45);
  } else if ((label | 0) == 25) {
   HEAP32[$vararg_buffer55 >> 2] = $0;
   HEAP32[$vararg_buffer55 + 4 >> 2] = $$0151 + 1;
   _arLog(0, 3, 5495, $vararg_buffer55);
  } else if ((label | 0) == 31) {
   _fclose($8) | 0;
   $114 = _malloc(136) | 0;
   if (!$114) {
    _arLog(0, 3, 5051, $vararg_buffer59);
    _exit(1);
   }
   HEAP32[$114 >> 2] = $17;
   HEAP32[$114 + 4 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$114 + 128 >> 2] = 0;
   HEAP32[$114 + 104 >> 2] = 0;
   do if (($$0152 & 3 | 0) == 3) HEAP32[$114 + 108 >> 2] = 2; else {
    $125 = $114 + 108 | 0;
    if (!($$0152 & 1)) {
     HEAP32[$125 >> 2] = 1;
     break;
    } else {
     HEAP32[$125 >> 2] = 0;
     break;
    }
   } while (0);
   HEAPF64[$114 + 112 >> 3] = .5;
   HEAPF64[$114 + 120 >> 3] = .5;
   $$0154 = $114;
   break;
  }
  _fclose($8) | 0;
  _free($17);
  $$0154 = 0;
 } while (0);
 STACKTOP = sp;
 return $$0154 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$add$i93 = 0, $$0$i$i$i = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i92 = 0, $$067 = 0, $$069 = 0, $$083 = 0, $$3 = 0, $$pre = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$0$0$copyload$i86103 = 0, $100 = 0, $101 = 0, $109 = 0, $113 = 0, $114 = 0, $115 = 0, $127 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $36 = 0, $4 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $56 = 0, $6 = 0, $64 = 0, $65 = 0, $66 = 0, $79 = 0, $81 = 0, $82 = 0, $83 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 32 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 do if (($1 - $0 | 0) > 1) if ((HEAP8[$0 >> 0] | 0) == 73) {
  $13 = $2 + 61 | 0;
  $$pre = $2 + 36 | 0;
  if (HEAP8[$13 >> 0] | 0) {
   $16 = HEAP32[$$pre >> 2] | 0;
   $18 = HEAP32[$16 + -16 >> 2] | 0;
   $19 = $16 + -12 | 0;
   $$0$i$i$i = HEAP32[$19 >> 2] | 0;
   while (1) {
    if (($$0$i$i$i | 0) == ($18 | 0)) break;
    $22 = $$0$i$i$i + -16 | 0;
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($22);
    $$0$i$i$i = $22;
   }
   HEAP32[$19 >> 2] = $18;
  }
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($4, 15153, __ZNSt3__211char_traitsIcE6lengthEPKc(15153) | 0);
  $25 = $2 + 4 | 0;
  $$sroa$0$0$$sroa_idx$i = $2 + 12 | 0;
  $26 = $2 + 40 | 0;
  $27 = $2 + 32 | 0;
  $28 = $4 + 11 | 0;
  $29 = $4 + 4 | 0;
  $30 = $3 + 11 | 0;
  $31 = $3 + 4 | 0;
  $$083 = $0 + 1 | 0;
  while (1) {
   if ((HEAP8[$$083 >> 0] | 0) == 69) break;
   if (HEAP8[$13 >> 0] | 0) {
    HEAP32[$5 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i >> 2];
    $36 = HEAP32[$$pre >> 2] | 0;
    if ($36 >>> 0 < (HEAP32[$26 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2IS4_EERKNS1_IT_Lj4096EEE($3, $5);
     HEAP32[$36 >> 2] = 0;
     HEAP32[$36 + 4 >> 2] = 0;
     HEAP32[$36 + 8 >> 2] = 0;
     HEAP32[$36 + 12 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$$pre >> 2] = (HEAP32[$$pre >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($27, $5);
   }
   $48 = ((HEAP32[$25 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
   $49 = __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($$083, $1, $2) | 0;
   $53 = ((HEAP32[$25 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
   if (HEAP8[$13 >> 0] | 0) {
    $56 = HEAP32[$$pre >> 2] | 0;
    $$0$i$i$idx$i = 0;
    while (1) {
     if (($$0$i$i$idx$i | 0) == -1) break;
     $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
     __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($56 + ($$0$i$i$add$i << 4) | 0);
     $$0$i$i$idx$i = $$0$i$i$add$i;
    }
    HEAP32[$$pre >> 2] = $56 + -16;
   }
   if (($49 | 0) == ($$083 | 0) | ($49 | 0) == ($1 | 0)) {
    label = 53;
    break;
   }
   L29 : do if (HEAP8[$13 >> 0] | 0) {
    $64 = HEAP32[$$pre >> 2] | 0;
    $$sroa$0$0$copyload$i86103 = HEAP32[$$sroa$0$0$$sroa_idx$i >> 2] | 0;
    HEAP32[$3 >> 2] = $$sroa$0$0$copyload$i86103;
    $65 = $64 + -12 | 0;
    $66 = HEAP32[$65 >> 2] | 0;
    if ($66 >>> 0 < (HEAP32[$64 + -8 >> 2] | 0) >>> 0) {
     HEAP32[$66 >> 2] = 0;
     HEAP32[$66 + 4 >> 2] = 0;
     HEAP32[$66 + 8 >> 2] = 0;
     HEAP32[$66 + 12 >> 2] = $$sroa$0$0$copyload$i86103;
     HEAP32[$65 >> 2] = (HEAP32[$65 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($64 + -16 | 0, $3);
    $$067 = $48;
    while (1) {
     if ($$067 >>> 0 >= $53 >>> 0) break L29;
     $79 = HEAP32[(HEAP32[$$pre >> 2] | 0) + -12 >> 2] | 0;
     $81 = (HEAP32[$2 >> 2] | 0) + ($$067 * 24 | 0) | 0;
     $82 = $79 + -12 | 0;
     $83 = HEAP32[$82 >> 2] | 0;
     if (($83 | 0) == (HEAP32[$79 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($79 + -16 | 0, $81); else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($83, $81);
      HEAP32[$82 >> 2] = (HEAP32[$82 >> 2] | 0) + 24;
     }
     $$067 = $$067 + 1 | 0;
    }
   } while (0);
   $$0 = $48;
   while (1) {
    if ($$0 >>> 0 >= $53 >>> 0) break;
    $92 = HEAP8[$28 >> 0] | 0;
    if (($92 << 24 >> 24 < 0 ? HEAP32[$29 >> 2] | 0 : $92 & 255) >>> 0 > 1) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15341) | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, (HEAP32[$2 >> 2] | 0) + ($$0 * 24 | 0) | 0);
    $100 = HEAP8[$30 >> 0] | 0;
    $101 = $100 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4, $101 ? HEAP32[$3 >> 2] | 0 : $3, $101 ? HEAP32[$31 >> 2] | 0 : $100 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$0 = $$0 + 1 | 0;
   }
   $$069 = $53;
   while (1) {
    if (($$069 | 0) == ($48 | 0)) break;
    $109 = HEAP32[$25 >> 2] | 0;
    $$0$i$i$idx$i92 = 0;
    while (1) {
     if (($$0$i$i$idx$i92 | 0) == -1) break;
     $$0$i$i$add$i93 = $$0$i$i$idx$i92 + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($109 + ($$0$i$i$add$i93 * 24 | 0) | 0);
     $$0$i$i$idx$i92 = $$0$i$i$add$i93;
    }
    HEAP32[$25 >> 2] = $109 + -24;
    $$069 = $$069 + -1 | 0;
   }
   $$083 = $49;
  }
  if ((label | 0) == 53) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   $$3 = $0;
   break;
  }
  $113 = $$083 + 1 | 0;
  $114 = HEAP8[$28 >> 0] | 0;
  $115 = $114 << 24 >> 24 < 0;
  if ((HEAP8[($115 ? HEAP32[$4 >> 2] | 0 : $4) + ($115 ? HEAP32[$29 >> 2] | 0 : $114 & 255) + -1 >> 0] | 0) == 62) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 16532) | 0; else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15155) | 0;
  HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$6 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  $$0$i$i = 0;
  while (1) {
   if (($$0$i$i | 0) == 3) break;
   HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
   $$0$i$i = $$0$i$i + 1 | 0;
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $6);
  $127 = HEAP32[$25 >> 2] | 0;
  if ($127 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($127, $3);
   HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 24;
  } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
  $$3 = $113;
 } else $$3 = $0; else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function _get_global_id_code($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0177 = 0, $$0178 = 0, $$0178$off = 0, $$0182 = 0, $$0189 = 0, $$0202 = 0, $$0204 = 0, $$1 = 0, $$10 = 0, $$10199 = 0, $$11 = 0, $$11200 = 0, $$1179 = 0, $$1183 = 0, $$1190 = 0, $$12 = 0, $$2 = 0, $$2180 = 0, $$2180$off = 0, $$2191 = 0, $$3 = 0, $$3181 = 0, $$3185 = 0, $$3192 = 0, $$4 = 0, $$4186 = 0, $$4186$off = 0, $$4193 = 0, $$5 = 0, $$5187 = 0, $$5194 = 0, $$6 = 0, $$6188 = 0, $$6188$off = 0, $$6195 = 0, $$7 = 0, $$7196 = 0, $$8 = 0, $$8197 = 0, $$9 = 0, $$9198 = 0, $109 = 0, $113 = 0, $118 = 0, $119 = 0, $120 = 0, $123 = 0, $133 = 0, $137 = 0, $144 = 0.0, $145 = 0, $148 = 0, $15 = 0, $153 = 0, $154 = 0, $19 = 0, $20 = 0, $24 = 0, $38 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $6 = 0, $63 = 0, $67 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $78 = 0, $8 = 0, $85 = 0, $89 = 0, $97 = 0, $or$cond229245 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $5 = sp + 152 | 0;
 $6 = sp + 8 | 0;
 $7 = sp;
 $8 = sp + 24 | 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 182;
 HEAP32[$6 + 8 >> 2] = 195;
 HEAP32[$6 + 12 >> 2] = 13;
 $$0182 = 0;
 $$0202 = 0;
 $$0204 = -1;
 while (1) {
  if (($$0182 | 0) == 4) break;
  $15 = HEAP8[$0 + (HEAP32[$6 + ($$0182 << 2) >> 2] | 0) >> 0] | 0;
  $$0182 = $$0182 + 1 | 0;
  $$0202 = ($15 & 255) > ($$0202 & 255) ? $15 : $$0202;
  $$0204 = ($15 & 255) < ($$0204 & 255) ? $15 : $$0204;
 }
 $19 = $$0202 & 255;
 $20 = $$0204 & 255;
 L5 : do if (($19 - $20 | 0) < 30) {
  HEAP32[$2 >> 2] = 0;
  HEAPF64[$3 >> 3] = -1.0;
  $$0177 = -2;
 } else {
  $24 = ($19 + $20 | 0) >>> 1;
  $$1183 = 0;
  while (1) {
   if (($$1183 | 0) == 4) break;
   HEAP8[$5 + $$1183 >> 0] = $24 >>> 0 > (HEAPU8[$0 + (HEAP32[$6 + ($$1183 << 2) >> 2] | 0) >> 0] | 0) >>> 0 & 1;
   $$1183 = $$1183 + 1 | 0;
  }
  $trunc = 0;
  while (1) {
   if ($trunc >>> 0 >= 4) break;
   $38 = $trunc + 1 | 0;
   if ((HEAP8[$5 + $trunc >> 0] | 0) == 1) if ((HEAP8[$5 + ($38 & 3) >> 0] | 0) == 1) if (!(HEAP8[$5 + ($trunc + 2 & 3) >> 0] | 0)) break;
   $trunc = $38;
  }
  L20 : do switch ($trunc & 2147483647 | 0) {
  case 4:
   {
    HEAP32[$2 >> 2] = 0;
    HEAPF64[$3 >> 3] = -1.0;
    $$0177 = -3;
    break L5;
    break;
   }
  case 0:
   {
    $$0 = 119;
    $$0178 = 0;
    $$0189 = 255;
    while (1) {
     if (($$0178 | 0) == 14) {
      $$12 = $$0189;
      label = 57;
      break L20;
     }
     $$0178$off = $$0178 + -3 | 0;
     $49 = ($$0178 & 2147483646 | 0) == 12;
     $50 = $$0178 * 14 | 0;
     $$1 = $$0;
     $$1190 = $$0189;
     $$3185 = 0;
     while (1) {
      if (($$3185 | 0) == 14) break;
      if (($$3185 + -3 | $$0178$off) >>> 0 < 8) {
       $$2 = $$1;
       $$2191 = $$1190;
      } else {
       $53 = $$3185 & 2147483646;
       if (!(($$3185 | $$0178) & 2147483646)) {
        $$2 = $$1;
        $$2191 = $$1190;
       } else if ($49 & (($53 | 0) == 0 | ($53 | 0) == 12)) {
        $$2 = $$1;
        $$2191 = $$1190;
       } else {
        $63 = (HEAPU8[$0 + ($$3185 + $50) >> 0] | 0) - $24 | 0;
        HEAP8[$8 + $$1 >> 0] = $63 >>> 31;
        $67 = ($63 | 0) > -1 ? $63 : 0 - $63 | 0;
        $$2 = $$1 + -1 | 0;
        $$2191 = ($67 | 0) < ($$1190 | 0) ? $67 : $$1190;
       }
      }
      $$1 = $$2;
      $$1190 = $$2191;
      $$3185 = $$3185 + 1 | 0;
     }
     $$0 = $$1;
     $$0178 = $$0178 + 1 | 0;
     $$0189 = $$1190;
    }
    break;
   }
  case 1:
   {
    $$3 = 119;
    $$3192 = 255;
    $$4186 = 0;
    while (1) {
     if (($$4186 | 0) == 14) {
      $$12 = $$3192;
      label = 57;
      break L20;
     }
     $$4186$off = $$4186 + -3 | 0;
     $71 = $$4186 & 2147483646;
     $72 = ($71 | 0) == 0;
     $73 = ($71 | 0) == 12;
     $$1179 = 13;
     $$4 = $$3;
     $$4193 = $$3192;
     while (1) {
      if (($$1179 | 0) <= -1) break;
      if (($$1179 + -3 | $$4186$off) >>> 0 < 8) {
       $$5 = $$4;
       $$5194 = $$4193;
      } else {
       $78 = ($$1179 & -2 | 0) == 12;
       if ($72 & $78) {
        $$5 = $$4;
        $$5194 = $$4193;
       } else if ($73 & ($$1179 >>> 0 < 2 | $78)) {
        $$5 = $$4;
        $$5194 = $$4193;
       } else {
        $85 = (HEAPU8[$0 + (($$1179 * 14 | 0) + $$4186) >> 0] | 0) - $24 | 0;
        HEAP8[$8 + $$4 >> 0] = $85 >>> 31;
        $89 = ($85 | 0) > -1 ? $85 : 0 - $85 | 0;
        $$5 = $$4 + -1 | 0;
        $$5194 = ($89 | 0) < ($$4193 | 0) ? $89 : $$4193;
       }
      }
      $$1179 = $$1179 + -1 | 0;
      $$4 = $$5;
      $$4193 = $$5194;
     }
     $$3 = $$4;
     $$3192 = $$4193;
     $$4186 = $$4186 + 1 | 0;
    }
    break;
   }
  case 2:
   {
    $$2180 = 13;
    $$6 = 119;
    $$6195 = 255;
    while (1) {
     if (($$2180 | 0) <= -1) {
      $$12 = $$6195;
      label = 57;
      break L20;
     }
     $$2180$off = $$2180 + -3 | 0;
     $or$cond229245 = $$2180 >>> 0 < 2 | ($$2180 & -2 | 0) == 12;
     $97 = $$2180 * 14 | 0;
     $$5187 = 13;
     $$7 = $$6;
     $$7196 = $$6195;
     while (1) {
      if (($$5187 | 0) <= -1) break;
      if (($$5187 + -3 | $$2180$off) >>> 0 < 8) {
       $$8 = $$7;
       $$8197 = $$7196;
      } else if (($$5187 | $$2180) >>> 0 < 2 | $or$cond229245 & ($$5187 & -2 | 0) == 12) {
       $$8 = $$7;
       $$8197 = $$7196;
      } else {
       $109 = (HEAPU8[$0 + ($$5187 + $97) >> 0] | 0) - $24 | 0;
       HEAP8[$8 + $$7 >> 0] = $109 >>> 31;
       $113 = ($109 | 0) > -1 ? $109 : 0 - $109 | 0;
       $$8 = $$7 + -1 | 0;
       $$8197 = ($113 | 0) < ($$7196 | 0) ? $113 : $$7196;
      }
      $$5187 = $$5187 + -1 | 0;
      $$7 = $$8;
      $$7196 = $$8197;
     }
     $$2180 = $$2180 + -1 | 0;
     $$6 = $$7;
     $$6195 = $$7196;
    }
    break;
   }
  case 3:
   {
    $$6188 = 13;
    $$9 = 119;
    $$9198 = 255;
    while (1) {
     if (($$6188 | 0) <= -1) {
      $$12 = $$9198;
      label = 57;
      break L20;
     }
     $$6188$off = $$6188 + -3 | 0;
     $118 = $$6188 & -2;
     $119 = ($118 | 0) == 12;
     $120 = ($118 | 0) == 0;
     $$10 = $$9;
     $$10199 = $$9198;
     $$3181 = 0;
     while (1) {
      if (($$3181 | 0) == 14) break;
      if (($$3181 + -3 | $$6188$off) >>> 0 < 8) {
       $$11 = $$10;
       $$11200 = $$10199;
      } else {
       $123 = $$3181 & 2147483646;
       if ($119 & ($123 | 0) == 0) {
        $$11 = $$10;
        $$11200 = $$10199;
       } else if (($123 | $118 | 0) == 0 | $120 & ($123 | 0) == 12) {
        $$11 = $$10;
        $$11200 = $$10199;
       } else {
        $133 = (HEAPU8[$0 + (($$3181 * 14 | 0) + $$6188) >> 0] | 0) - $24 | 0;
        HEAP8[$8 + $$10 >> 0] = $133 >>> 31;
        $137 = ($133 | 0) > -1 ? $133 : 0 - $133 | 0;
        $$11 = $$10 + -1 | 0;
        $$11200 = ($137 | 0) < ($$10199 | 0) ? $137 : $$10199;
       }
      }
      $$10 = $$11;
      $$10199 = $$11200;
      $$3181 = $$3181 + 1 | 0;
     }
     $$6188 = $$6188 + -1 | 0;
     $$9 = $$10;
     $$9198 = $$10199;
    }
    break;
   }
  default:
   {
    HEAP32[$2 >> 2] = $trunc;
    $144 = 1.0;
   }
  } while (0);
  if ((label | 0) == 57) {
   HEAP32[$2 >> 2] = $trunc;
   $144 = ($$12 | 0) > 30 ? 1.0 : +($$12 | 0) / 30.0;
  }
  HEAPF64[$3 >> 3] = $144;
  $145 = _decode_bch(2830, 0, 0, $8, $7) | 0;
  if (($145 | 0) < 0) $$0177 = -4; else {
   if ($4 | 0) HEAP32[$4 >> 2] = $145;
   $148 = $7;
   $153 = HEAP32[$148 + 4 >> 2] | 0;
   $154 = $1;
   HEAP32[$154 >> 2] = HEAP32[$148 >> 2];
   HEAP32[$154 + 4 >> 2] = $153;
   $$0177 = 0;
  }
 } while (0);
 STACKTOP = sp;
 return $$0177 | 0;
}

function _icpGetInitXw2Xc_from_PlanarData($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0204 = 0, $$1 = 0, $101 = 0, $102 = 0, $108 = 0, $110 = 0, $112 = 0, $116 = 0, $118 = 0, $120 = 0.0, $121 = 0, $125 = 0.0, $128 = 0.0, $129 = 0.0, $130 = 0, $133 = 0.0, $137 = 0.0, $140 = 0.0, $141 = 0.0, $143 = 0.0, $144 = 0, $149 = 0.0, $150 = 0, $157 = 0.0, $158 = 0, $162 = 0.0, $164 = 0.0, $17 = 0, $170 = 0.0, $176 = 0.0, $184 = 0.0, $192 = 0.0, $193 = 0.0, $195 = 0.0, $196 = 0.0, $198 = 0.0, $200 = 0.0, $202 = 0.0, $204 = 0.0, $208 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $38 = 0, $39 = 0, $41 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $5 = 0, $61 = 0, $88 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $vararg_buffer11 = sp + 120 | 0;
 $vararg_buffer9 = sp + 112 | 0;
 $vararg_buffer7 = sp + 104 | 0;
 $vararg_buffer5 = sp + 96 | 0;
 $vararg_buffer3 = sp + 88 | 0;
 $vararg_buffer1 = sp + 80 | 0;
 $vararg_buffer = sp + 72 | 0;
 $5 = sp;
 L1 : do if (($3 | 0) < 4) $$0204 = -1; else {
  $$0 = 0;
  while (1) {
   if (($$0 | 0) >= ($3 | 0)) break;
   if (+HEAPF64[$2 + ($$0 * 24 | 0) + 16 >> 3] != 0.0) {
    $$0204 = -1;
    break L1;
   } else $$0 = $$0 + 1 | 0;
  }
  if (+HEAPF64[$0 >> 3] == 0.0) $$0204 = -1; else if (+HEAPF64[$0 + 32 >> 3] != 0.0) $$0204 = -1; else {
   $17 = $0 + 40 | 0;
   if (+HEAPF64[$17 >> 3] == 0.0) $$0204 = -1; else if (+HEAPF64[$0 + 64 >> 3] != 0.0) $$0204 = -1; else if (+HEAPF64[$0 + 72 >> 3] != 0.0) $$0204 = -1; else if (+HEAPF64[$0 + 80 >> 3] != 1.0) $$0204 = -1; else if (+HEAPF64[$0 + 24 >> 3] != 0.0) $$0204 = -1; else if (+HEAPF64[$0 + 56 >> 3] != 0.0) $$0204 = -1; else if (+HEAPF64[$0 + 88 >> 3] != 0.0) $$0204 = -1; else {
    $38 = $3 << 1;
    $39 = _arMatrixAlloc($38, 8) | 0;
    if (!$39) {
     _arLog(0, 3, 4704, $vararg_buffer);
     $$0204 = -1;
     break;
    }
    $41 = _arMatrixAlloc($38, 1) | 0;
    if (!$41) {
     _arMatrixFree($39) | 0;
     _arLog(0, 3, 4730, $vararg_buffer1);
     $$0204 = -1;
     break;
    }
    $$1 = 0;
    while (1) {
     if (($$1 | 0) == ($3 | 0)) break;
     $43 = $2 + ($$1 * 24 | 0) | 0;
     $45 = HEAP32[$39 >> 2] | 0;
     $46 = $$1 << 4;
     HEAPF64[$45 + ($46 << 3) >> 3] = +HEAPF64[$43 >> 3];
     $48 = $2 + ($$1 * 24 | 0) + 8 | 0;
     HEAPF64[$45 + (($46 | 1) << 3) >> 3] = +HEAPF64[$48 >> 3];
     HEAPF64[$45 + (($46 | 2) << 3) >> 3] = 1.0;
     HEAPF64[$45 + (($46 | 3) << 3) >> 3] = 0.0;
     HEAPF64[$45 + (($46 | 4) << 3) >> 3] = 0.0;
     HEAPF64[$45 + (($46 | 5) << 3) >> 3] = 0.0;
     $61 = $1 + ($$1 << 4) | 0;
     HEAPF64[$45 + (($46 | 6) << 3) >> 3] = -(+HEAPF64[$43 >> 3] * +HEAPF64[$61 >> 3]);
     HEAPF64[$45 + (($46 | 7) << 3) >> 3] = -(+HEAPF64[$48 >> 3] * +HEAPF64[$61 >> 3]);
     HEAPF64[$45 + (($46 | 8) << 3) >> 3] = 0.0;
     HEAPF64[$45 + (($46 | 9) << 3) >> 3] = 0.0;
     HEAPF64[$45 + (($46 | 10) << 3) >> 3] = 0.0;
     HEAPF64[$45 + (($46 | 11) << 3) >> 3] = +HEAPF64[$43 >> 3];
     HEAPF64[$45 + (($46 | 12) << 3) >> 3] = +HEAPF64[$48 >> 3];
     HEAPF64[$45 + (($46 | 13) << 3) >> 3] = 1.0;
     $88 = $1 + ($$1 << 4) + 8 | 0;
     HEAPF64[$45 + (($46 | 14) << 3) >> 3] = -(+HEAPF64[$43 >> 3] * +HEAPF64[$88 >> 3]);
     HEAPF64[$45 + (($46 | 15) << 3) >> 3] = -(+HEAPF64[$48 >> 3] * +HEAPF64[$88 >> 3]);
     $101 = HEAP32[$41 >> 2] | 0;
     $102 = $$1 << 1;
     HEAPF64[$101 + ($102 << 3) >> 3] = +HEAPF64[$61 >> 3];
     HEAPF64[$101 + (($102 | 1) << 3) >> 3] = +HEAPF64[$88 >> 3];
     $$1 = $$1 + 1 | 0;
    }
    $108 = _arMatrixAllocTrans($39) | 0;
    if (!$108) {
     _arMatrixFree($39) | 0;
     _arMatrixFree($41) | 0;
     _arLog(0, 3, 4756, $vararg_buffer3);
     $$0204 = -1;
     break;
    }
    $110 = _arMatrixAllocMul($108, $39) | 0;
    if (!$110) {
     _arMatrixFree($39) | 0;
     _arMatrixFree($41) | 0;
     _arMatrixFree($108) | 0;
     _arLog(0, 3, 4782, $vararg_buffer5);
     $$0204 = -1;
     break;
    }
    $112 = _arMatrixAllocMul($108, $41) | 0;
    if (!$112) {
     _arMatrixFree($39) | 0;
     _arMatrixFree($41) | 0;
     _arMatrixFree($108) | 0;
     _arMatrixFree($110) | 0;
     _arLog(0, 3, 4808, $vararg_buffer7);
     $$0204 = -1;
     break;
    }
    if ((_arMatrixSelfInv($110) | 0) < 0) {
     _arMatrixFree($39) | 0;
     _arMatrixFree($41) | 0;
     _arMatrixFree($108) | 0;
     _arMatrixFree($110) | 0;
     _arMatrixFree($112) | 0;
     _arLog(0, 3, 4834, $vararg_buffer9);
     $$0204 = -1;
     break;
    }
    $116 = _arMatrixAllocMul($110, $112) | 0;
    if (!$116) {
     _arMatrixFree($39) | 0;
     _arMatrixFree($41) | 0;
     _arMatrixFree($108) | 0;
     _arMatrixFree($110) | 0;
     _arMatrixFree($112) | 0;
     _arLog(0, 3, 4860, $vararg_buffer11);
     $$0204 = -1;
     break;
    } else {
     $118 = HEAP32[$116 >> 2] | 0;
     $120 = +HEAPF64[$118 + 48 >> 3];
     $121 = $5 + 16 | 0;
     $125 = +HEAPF64[$0 + 48 >> 3];
     $128 = +HEAPF64[$17 >> 3];
     $129 = (+HEAPF64[$118 + 24 >> 3] - $120 * $125) / $128;
     $130 = $5 + 8 | 0;
     $133 = +HEAPF64[$0 + 16 >> 3];
     $137 = +HEAPF64[$0 + 8 >> 3];
     $140 = +HEAPF64[$0 >> 3];
     $141 = (+HEAPF64[$118 >> 3] - $120 * $133 - $129 * $137) / $140;
     $143 = +HEAPF64[$118 + 56 >> 3];
     $144 = $5 + 40 | 0;
     $149 = (+HEAPF64[$118 + 32 >> 3] - $125 * $143) / $128;
     $150 = $5 + 32 | 0;
     $157 = (+HEAPF64[$118 + 8 >> 3] - $133 * $143 - $137 * $149) / $140;
     $158 = $5 + 24 | 0;
     $162 = (+HEAPF64[$118 + 40 >> 3] - $125) / $128;
     $164 = +HEAPF64[$118 + 16 >> 3];
     _arMatrixFree($39) | 0;
     _arMatrixFree($41) | 0;
     _arMatrixFree($108) | 0;
     _arMatrixFree($110) | 0;
     _arMatrixFree($112) | 0;
     _arMatrixFree($116) | 0;
     $170 = +Math_sqrt(+($120 * $120 + ($129 * $129 + $141 * $141)));
     $176 = +Math_sqrt(+($143 * $143 + ($149 * $149 + $157 * $157)));
     HEAPF64[$5 >> 3] = $141 / $170;
     HEAPF64[$130 >> 3] = $129 / $170;
     HEAPF64[$121 >> 3] = $120 / $170;
     HEAPF64[$158 >> 3] = $157 / $176;
     HEAPF64[$150 >> 3] = $149 / $176;
     HEAPF64[$144 >> 3] = $143 / $176;
     $184 = ($170 + $176) * .5;
     _check_rotation($5);
     $192 = +HEAPF64[$130 >> 3];
     $193 = +HEAPF64[$144 >> 3];
     $195 = +HEAPF64[$121 >> 3];
     $196 = +HEAPF64[$150 >> 3];
     $198 = $192 * $193 - $195 * $196;
     $200 = +HEAPF64[$158 >> 3];
     $202 = +HEAPF64[$5 >> 3];
     $204 = $195 * $200 - $193 * $202;
     $208 = $196 * $202 - $192 * $200;
     $215 = +Math_sqrt(+($208 * $208 + ($198 * $198 + $204 * $204)));
     $216 = $198 / $215;
     HEAPF64[$5 + 48 >> 3] = $216;
     $217 = $204 / $215;
     HEAPF64[$5 + 56 >> 3] = $217;
     $218 = $208 / $215;
     HEAPF64[$5 + 64 >> 3] = $218;
     HEAPF64[$4 >> 3] = $202;
     HEAPF64[$4 + 32 >> 3] = $192;
     HEAPF64[$4 + 64 >> 3] = $195;
     HEAPF64[$4 + 8 >> 3] = $200;
     HEAPF64[$4 + 40 >> 3] = $196;
     HEAPF64[$4 + 72 >> 3] = $193;
     HEAPF64[$4 + 16 >> 3] = $216;
     HEAPF64[$4 + 48 >> 3] = $217;
     HEAPF64[$4 + 80 >> 3] = $218;
     HEAPF64[$4 + 24 >> 3] = ($164 - $133 - $137 * $162) / $140 / $184;
     HEAPF64[$4 + 56 >> 3] = $162 / $184;
     HEAPF64[$4 + 88 >> 3] = 1.0 / $184;
     $$0204 = 0;
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0204 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i71 = 0, $$0$i$i$i = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$i57 = 0, $$0$i$i$i61 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i70 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $63 = 0, $64 = 0, $7 = 0, $78 = 0, $79 = 0, $8 = 0, $86 = 0, $87 = 0, $9 = 0, $95 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $4 = sp + 84 | 0;
 $5 = sp + 72 | 0;
 $6 = sp + 60 | 0;
 $7 = sp + 48 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 12 | 0;
 $11 = sp;
 $12 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $3) | 0;
 do if (($12 | 0) == ($0 | 0)) $$1 = $0; else {
  $14 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($12, $1, $3) | 0;
  $16 = $3 + 4 | 0;
  if (($14 | 0) == ($12 | 0)) {
   $95 = HEAP32[$16 >> 2] | 0;
   $$0$i$i$idx$i70 = 0;
   while (1) {
    if (($$0$i$i$idx$i70 | 0) == -1) break;
    $$0$i$i$add$i71 = $$0$i$i$idx$i70 + -1 | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($95 + ($$0$i$i$add$i71 * 24 | 0) | 0);
    $$0$i$i$idx$i70 = $$0$i$i$add$i71;
   }
   HEAP32[$16 >> 2] = $95 + -24;
   $$1 = $0;
   break;
  }
  $17 = HEAP32[$16 >> 2] | 0;
  if ((($17 - (HEAP32[$3 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$1 = $0; else {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $17 + -24 | 0);
   $24 = HEAP32[$16 >> 2] | 0;
   $$0$i$i$idx$i = 0;
   while (1) {
    if (($$0$i$i$idx$i | 0) == -1) break;
    $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24 + ($$0$i$i$add$i * 24 | 0) | 0);
    $$0$i$i$idx$i = $$0$i$i$add$i;
   }
   HEAP32[$16 >> 2] = $24 + -24;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $24 + -48 | 0);
   $28 = HEAP32[$16 >> 2] | 0;
   $29 = $28 + -24 | 0;
   $30 = $29 + 11 | 0;
   if ((HEAP8[$30 >> 0] | 0) < 0) {
    $33 = HEAP32[$29 >> 2] | 0;
    HEAP8[$4 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($33, $4);
    HEAP32[$28 + -20 >> 2] = 0;
   } else {
    HEAP8[$4 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($29, $4);
    HEAP8[$30 >> 0] = 0;
   }
   $35 = __ZNSt3__211char_traitsIcE6lengthEPKc(15155) | 0;
   $36 = $2 + 11 | 0;
   $37 = HEAP8[$36 >> 0] | 0;
   $39 = $2 + 4 | 0;
   if (($35 | 0) == (($37 << 24 >> 24 < 0 ? HEAP32[$39 >> 2] | 0 : $37 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($2, 15155, $35) | 0)) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($29, 40);
   __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($11, 15119, $6);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($11, 15405) | 0;
   HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   $49 = HEAP8[$36 >> 0] | 0;
   $50 = $49 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($10, $50 ? HEAP32[$2 >> 2] | 0 : $2, $50 ? HEAP32[$39 >> 2] | 0 : $49 & 255) | 0;
   HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$9 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
   HEAP32[$9 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
   $$0$i$i$i50 = 0;
   while (1) {
    if (($$0$i$i$i50 | 0) == 3) break;
    HEAP32[$10 + ($$0$i$i$i50 << 2) >> 2] = 0;
    $$0$i$i$i50 = $$0$i$i$i50 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($9, 15114) | 0;
   HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
   $$0$i$i$i53 = 0;
   while (1) {
    if (($$0$i$i$i53 | 0) == 3) break;
    HEAP32[$9 + ($$0$i$i$i53 << 2) >> 2] = 0;
    $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
   }
   $63 = HEAP8[$5 + 11 >> 0] | 0;
   $64 = $63 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($8, $64 ? HEAP32[$5 >> 2] | 0 : $5, $64 ? HEAP32[$5 + 4 >> 2] | 0 : $63 & 255) | 0;
   HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
   HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
   $$0$i$i$i57 = 0;
   while (1) {
    if (($$0$i$i$i57 | 0) == 3) break;
    HEAP32[$8 + ($$0$i$i$i57 << 2) >> 2] = 0;
    $$0$i$i$i57 = $$0$i$i$i57 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 15117) | 0;
   HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
   $$0$i$i$i61 = 0;
   while (1) {
    if (($$0$i$i$i61 | 0) == 3) break;
    HEAP32[$7 + ($$0$i$i$i61 << 2) >> 2] = 0;
    $$0$i$i$i61 = $$0$i$i$i61 + 1 | 0;
   }
   $78 = HEAP8[$4 + 11 >> 0] | 0;
   $79 = $78 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($29, $79 ? HEAP32[$4 >> 2] | 0 : $4, $79 ? HEAP32[$4 + 4 >> 2] | 0 : $78 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
   $86 = __ZNSt3__211char_traitsIcE6lengthEPKc(15155) | 0;
   $87 = HEAP8[$36 >> 0] | 0;
   if (($86 | 0) == (($87 << 24 >> 24 < 0 ? HEAP32[$39 >> 2] | 0 : $87 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($2, 15155, $86) | 0)) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($29, 41);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   $$1 = $14;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _pattern_match($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0175 = 0.0, $$0178 = 0, $$0180 = 0, $$0184 = 0, $$0186 = 0, $$0192 = 0, $$0200 = 0, $$0208 = 0, $$0210 = 0, $$1176 = 0.0, $$1179 = 0, $$1181 = 0, $$1181$in = 0, $$1185 = 0, $$1187 = 0, $$1193 = 0, $$1201 = 0, $$1209 = 0, $$1211 = 0, $$2 = 0, $$2182 = 0, $$2188 = 0, $$2202 = 0, $$2212 = 0, $$3 = 0.0, $$3183 = 0, $$3183$in = 0, $$3189 = 0, $$3195 = 0, $$3203 = 0, $$3213 = 0, $$4 = 0.0, $$4190 = 0, $$4196 = 0, $$4204 = 0, $$5 = 0.0, $$5191 = 0, $$5197 = 0, $$5205 = 0, $$6206 = 0, $$7 = 0.0, $$7199 = 0, $$7207 = 0, $10 = 0, $115 = 0.0, $116 = 0, $12 = 0, $18 = 0, $20 = 0, $25 = 0, $31 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $44 = 0, $45 = 0, $61 = 0.0, $62 = 0, $65 = 0, $67 = 0, $75 = 0, $80 = 0, $86 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $95 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 L1 : do if (($0 | 0) == 0 | ($3 | 0) < 1) {
  HEAP32[$4 >> 2] = 0;
  HEAP32[$5 >> 2] = 0;
  HEAPF64[$6 >> 3] = -1.0;
  $$2 = -1;
 } else switch ($1 | 0) {
 case 0:
  {
   $9 = Math_imul($3, $3) | 0;
   $10 = $9 * 3 | 0;
   $12 = _malloc($9 * 12 | 0) | 0;
   if (!$12) {
    _arLog(0, 3, 5051, $vararg_buffer);
    _exit(1);
   }
   $$0186 = 0;
   $$0208 = 0;
   while (1) {
    if (($$0186 | 0) == ($10 | 0)) break;
    $18 = $$0208 + (~HEAP8[$2 + $$0186 >> 0] & 255) | 0;
    $$0186 = $$0186 + 1 | 0;
    $$0208 = $18;
   }
   $20 = ($$0208 >>> 0) / ($10 >>> 0) | 0;
   $$0210 = 0;
   $$1187 = 0;
   while (1) {
    if (($$1187 | 0) == ($10 | 0)) break;
    $25 = (~HEAP8[$2 + $$1187 >> 0] & 255) - $20 | 0;
    HEAP32[$12 + ($$1187 << 2) >> 2] = $25;
    $$0210 = (Math_imul($25, $25) | 0) + $$0210 | 0;
    $$1187 = $$1187 + 1 | 0;
   }
   $31 = +Math_sqrt(+(+($$0210 | 0)));
   if ($31 / (+($3 | 0) * 1.7320508) < 15.0) {
    HEAP32[$4 >> 2] = 0;
    HEAP32[$5 >> 2] = 0;
    HEAPF64[$6 >> 3] = -1.0;
    _free($12);
    $$2 = -2;
    break L1;
   }
   $36 = HEAP32[$0 >> 2] | 0;
   $37 = $0 + 8 | 0;
   $38 = $0 + 12 | 0;
   $39 = $0 + 16 | 0;
   $$0175 = 0.0;
   $$0178 = 0;
   $$0180 = -1;
   $$0192 = -1;
   $$0200 = -1;
   while (1) {
    if (($$0178 | 0) >= ($36 | 0)) break;
    $41 = HEAP32[$37 >> 2] | 0;
    $$1181$in = $$0180;
    L23 : while (1) {
     $$1181 = $$1181$in + 1 | 0;
     switch (HEAP32[$41 + ($$1181 << 2) >> 2] | 0) {
     case 0:
      {
       $$1181$in = $$1181;
       break;
      }
     case 2:
      {
       $$3 = $$0175;
       $$3195 = $$0192;
       $$3203 = $$0200;
       break L23;
       break;
      }
     default:
      {
       label = 18;
       break L23;
      }
     }
    }
    L25 : do if ((label | 0) == 18) {
     label = 0;
     $44 = $$1181 << 2;
     $$0184 = 0;
     $$1176 = $$0175;
     $$1193 = $$0192;
     $$1201 = $$0200;
     while (1) {
      if (($$0184 | 0) == 4) {
       $$3 = $$1176;
       $$3195 = $$1193;
       $$3203 = $$1201;
       break L25;
      }
      $45 = $$0184 + $44 | 0;
      $$1211 = 0;
      $$2188 = 0;
      while (1) {
       if (($$2188 | 0) == ($10 | 0)) break;
       $$1211 = (Math_imul(HEAP32[(HEAP32[(HEAP32[$38 >> 2] | 0) + ($45 << 2) >> 2] | 0) + ($$2188 << 2) >> 2] | 0, HEAP32[$12 + ($$2188 << 2) >> 2] | 0) | 0) + $$1211 | 0;
       $$2188 = $$2188 + 1 | 0;
      }
      $61 = +($$1211 | 0) / +HEAPF64[(HEAP32[$39 >> 2] | 0) + ($45 << 3) >> 3] / $31;
      $62 = $61 > $$1176;
      $$2202 = $62 ? $$0184 : $$1201;
      $$0184 = $$0184 + 1 | 0;
      $$1176 = $62 ? $61 : $$1176;
      $$1193 = $62 ? $$1181 : $$1193;
      $$1201 = $$2202;
     }
    } while (0);
    $$0175 = $$3;
    $$0178 = $$0178 + 1 | 0;
    $$0180 = $$1181;
    $$0192 = $$3195;
    $$0200 = $$3203;
   }
   HEAP32[$5 >> 2] = $$0200;
   HEAP32[$4 >> 2] = $$0192;
   HEAPF64[$6 >> 3] = $$0175;
   _free($12);
   $$2 = 0;
   break L1;
   break;
  }
 case 1:
  {
   $65 = Math_imul($3, $3) | 0;
   $67 = _malloc($65 << 2) | 0;
   if (!$67) {
    _arLog(0, 3, 5051, $vararg_buffer1);
    _exit(1);
   }
   $$1209 = 0;
   $$3189 = 0;
   while (1) {
    if (($$3189 | 0) == ($65 | 0)) break;
    $$1209 = $$1209 + (~HEAP8[$2 + $$3189 >> 0] & 255) | 0;
    $$3189 = $$3189 + 1 | 0;
   }
   $75 = ($$1209 >>> 0) / ($65 >>> 0) | 0;
   $$2212 = 0;
   $$4190 = 0;
   while (1) {
    if (($$4190 | 0) == ($65 | 0)) break;
    $80 = (~HEAP8[$2 + $$4190 >> 0] & 255) - $75 | 0;
    HEAP32[$67 + ($$4190 << 2) >> 2] = $80;
    $$2212 = (Math_imul($80, $80) | 0) + $$2212 | 0;
    $$4190 = $$4190 + 1 | 0;
   }
   $86 = +Math_sqrt(+(+($$2212 | 0)));
   if ($86 / +($3 | 0) < 15.0) {
    HEAP32[$4 >> 2] = 0;
    HEAP32[$5 >> 2] = 0;
    HEAPF64[$6 >> 3] = -1.0;
    _free($67);
    $$2 = -2;
    break L1;
   }
   $90 = HEAP32[$0 >> 2] | 0;
   $91 = $0 + 8 | 0;
   $92 = $0 + 20 | 0;
   $93 = $0 + 24 | 0;
   $$1179 = 0;
   $$2182 = -1;
   $$4 = 0.0;
   $$4196 = -1;
   $$4204 = -1;
   while (1) {
    if (($$1179 | 0) >= ($90 | 0)) break;
    $95 = HEAP32[$91 >> 2] | 0;
    $$3183$in = $$2182;
    L54 : while (1) {
     $$3183 = $$3183$in + 1 | 0;
     switch (HEAP32[$95 + ($$3183 << 2) >> 2] | 0) {
     case 0:
      {
       $$3183$in = $$3183;
       break;
      }
     case 2:
      {
       $$7 = $$4;
       $$7199 = $$4196;
       $$7207 = $$4204;
       break L54;
       break;
      }
     default:
      {
       label = 40;
       break L54;
      }
     }
    }
    L56 : do if ((label | 0) == 40) {
     label = 0;
     $98 = $$3183 << 2;
     $$1185 = 0;
     $$5 = $$4;
     $$5197 = $$4196;
     $$5205 = $$4204;
     while (1) {
      if (($$1185 | 0) == 4) {
       $$7 = $$5;
       $$7199 = $$5197;
       $$7207 = $$5205;
       break L56;
      }
      $99 = $$1185 + $98 | 0;
      $$3213 = 0;
      $$5191 = 0;
      while (1) {
       if (($$5191 | 0) == ($65 | 0)) break;
       $$3213 = (Math_imul(HEAP32[(HEAP32[(HEAP32[$92 >> 2] | 0) + ($99 << 2) >> 2] | 0) + ($$5191 << 2) >> 2] | 0, HEAP32[$67 + ($$5191 << 2) >> 2] | 0) | 0) + $$3213 | 0;
       $$5191 = $$5191 + 1 | 0;
      }
      $115 = +($$3213 | 0) / +HEAPF64[(HEAP32[$93 >> 2] | 0) + ($99 << 3) >> 3] / $86;
      $116 = $115 > $$5;
      $$6206 = $116 ? $$1185 : $$5205;
      $$1185 = $$1185 + 1 | 0;
      $$5 = $116 ? $115 : $$5;
      $$5197 = $116 ? $$3183 : $$5197;
      $$5205 = $$6206;
     }
    } while (0);
    $$1179 = $$1179 + 1 | 0;
    $$2182 = $$3183;
    $$4 = $$7;
    $$4196 = $$7199;
    $$4204 = $$7207;
   }
   HEAP32[$5 >> 2] = $$4204;
   HEAP32[$4 >> 2] = $$4196;
   HEAPF64[$6 >> 3] = $$4;
   _free($67);
   $$2 = 0;
   break L1;
   break;
  }
 default:
  {
   $$2 = -1;
   break L1;
  }
 } while (0);
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$072 = 0, $$1 = 0, $$174 = 0, $$sroa$0102$0 = 0, $$sroa$096$0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $109 = 0, $12 = 0, $13 = 0, $14 = 0, $21 = 0, $22 = 0, $29 = 0, $3 = 0, $30 = 0, $37 = 0, $38 = 0, $45 = 0, $46 = 0, $53 = 0, $54 = 0, $62 = 0, $68 = 0, $69 = 0, $70 = 0, $73 = 0, $84 = 0, $85 = 0, $92 = 0, $96 = 0, $isdigit = 0, $isdigit81 = 0, $isdigittmp = 0, $isdigittmp80 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp;
 L1 : do if (($1 - $0 | 0) > 1) if ((HEAP8[$0 >> 0] | 0) == 83) {
  $12 = HEAP8[$0 + 1 >> 0] | 0;
  switch ($12 | 0) {
  case 97:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($3, 16445);
    $13 = $2 + 4 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    if ($14 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($14, $3);
     HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $0 + 2 | 0;
    break L1;
    break;
   }
  case 98:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($3, 16460);
    $21 = $2 + 4 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    if ($22 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($22, $3);
     HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $0 + 2 | 0;
    break L1;
    break;
   }
  case 115:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($3, 15939);
    $29 = $2 + 4 | 0;
    $30 = HEAP32[$29 >> 2] | 0;
    if ($30 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($30, $3);
     HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $0 + 2 | 0;
    break L1;
    break;
   }
  case 105:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($3, 16035);
    $37 = $2 + 4 | 0;
    $38 = HEAP32[$37 >> 2] | 0;
    if ($38 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($38, $3);
     HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $0 + 2 | 0;
    break L1;
    break;
   }
  case 111:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($3, 16112);
    $45 = $2 + 4 | 0;
    $46 = HEAP32[$45 >> 2] | 0;
    if ($46 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($46, $3);
     HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $0 + 2 | 0;
    break L1;
    break;
   }
  case 100:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($3, 16189);
    $53 = $2 + 4 | 0;
    $54 = HEAP32[$53 >> 2] | 0;
    if ($54 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($54, $3);
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $0 + 2 | 0;
    break L1;
    break;
   }
  case 95:
   {
    $62 = HEAP32[$2 + 16 >> 2] | 0;
    if (($62 | 0) == (HEAP32[$2 + 20 >> 2] | 0)) {
     $$1 = $0;
     break L1;
    }
    $68 = HEAP32[$62 + 4 >> 2] | 0;
    $69 = $2 + 4 | 0;
    $70 = $2 + 8 | 0;
    $$sroa$0102$0 = HEAP32[$62 >> 2] | 0;
    while (1) {
     if (($$sroa$0102$0 | 0) == ($68 | 0)) break;
     $73 = HEAP32[$69 >> 2] | 0;
     if (($73 | 0) == (HEAP32[$70 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2, $$sroa$0102$0); else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($73, $$sroa$0102$0);
      HEAP32[$69 >> 2] = (HEAP32[$69 >> 2] | 0) + 24;
     }
     $$sroa$0102$0 = $$sroa$0102$0 + 24 | 0;
    }
    $$1 = $0 + 2 | 0;
    break L1;
    break;
   }
  default:
   {
    $isdigittmp = $12 + -48 | 0;
    $isdigit = $isdigittmp >>> 0 < 10;
    if (!$isdigit) if (!(_isupper($12) | 0)) {
     $$1 = $0;
     break L1;
    }
    $$072 = $0 + 2 | 0;
    $$174 = $isdigit ? $isdigittmp : $12 + -55 | 0;
    while (1) {
     if (($$072 | 0) == ($1 | 0)) {
      $$1 = $0;
      break L1;
     }
     $84 = HEAP8[$$072 >> 0] | 0;
     $85 = $84 << 24 >> 24;
     $isdigittmp80 = $85 + -48 | 0;
     $isdigit81 = $isdigittmp80 >>> 0 < 10;
     if (!$isdigit81) if (!(_isupper($85) | 0)) break;
     $$072 = $$072 + 1 | 0;
     $$174 = ($isdigit81 ? $isdigittmp80 : $85 + -55 | 0) + ($$174 * 36 | 0) | 0;
    }
    if ($84 << 24 >> 24 != 95) {
     $$1 = $0;
     break L1;
    }
    $92 = $$174 + 1 | 0;
    $96 = HEAP32[$2 + 16 >> 2] | 0;
    $100 = $96;
    if ($92 >>> 0 >= (HEAP32[$2 + 20 >> 2] | 0) - $96 >> 4 >>> 0) {
     $$1 = $0;
     break L1;
    }
    $104 = HEAP32[$100 + ($92 << 4) + 4 >> 2] | 0;
    $105 = $2 + 4 | 0;
    $106 = $2 + 8 | 0;
    $$sroa$096$0 = HEAP32[$100 + ($92 << 4) >> 2] | 0;
    while (1) {
     if (($$sroa$096$0 | 0) == ($104 | 0)) break;
     $109 = HEAP32[$105 >> 2] | 0;
     if (($109 | 0) == (HEAP32[$106 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2, $$sroa$096$0); else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($109, $$sroa$096$0);
      HEAP32[$105 >> 2] = (HEAP32[$105 >> 2] | 0) + 24;
     }
     $$sroa$096$0 = $$sroa$096$0 + 24 | 0;
    }
    $$1 = $$072 + 1 | 0;
    break L1;
   }
  }
 } else $$1 = $0; else $$1 = $0; while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN46EmscriptenBindingInitializer_constant_bindingsC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(5638, 7);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5644, 3);
 __ZN10emscripten8functionIiJiNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(5653, 2);
 __ZN10emscripten8functionIiJiNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(5664, 3);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5680, 4);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5698, 4);
 __ZN10emscripten8functionIiJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(5718, 5);
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(5730, 8);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5747, 5);
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(5767, 9);
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(5785, 10);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5807, 6);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5830, 7);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5859, 6);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5872, 7);
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(5885, 11);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5904, 8);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5914, 9);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5927, 8);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5940, 9);
 __ZN10emscripten8functionIvJiEJEEEvPKcPFT_DpT0_EDpT1_(5959, 11);
 __ZN10emscripten8functionIiJEJEEEvPKcPFT_DpT0_EDpT1_(5971, 1);
 __ZN10emscripten8functionIvJidEJEEEvPKcPFT_DpT0_EDpT1_(5983, 1);
 __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_(6006, 1);
 __ZN10emscripten8functionIvJidEJEEEvPKcPFT_DpT0_EDpT1_(6029, 2);
 __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_(6051, 2);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(6073, 1);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(6090, 10);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(6107, 2);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(6120, 11);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(6133, 3);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(6157, 12);
 __ZN10emscripten8functionIvJifEJEEEvPKcPFT_DpT0_EDpT1_(6181, 3);
 __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_(6194, 3);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(6207, 4);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(6225, 13);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(6243, 5);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(6259, 14);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(6275, 6);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(6292, 15);
 __ZN10emscripten8constantIiEEvPKcRKT_(6309, 1956);
 __ZN10emscripten8constantIiEEvPKcRKT_(6338, 1960);
 __ZN10emscripten8constantIiEEvPKcRKT_(6366, 1964);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6399, $1);
 HEAP32[$1 >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6416, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6432, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6454, $1);
 HEAP32[$1 >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6479, $1);
 HEAP32[$1 >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6504, $1);
 HEAP32[$1 >> 2] = 100;
 __ZN10emscripten8constantIiEEvPKcRKT_(6529, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6556, $1);
 HEAP32[$1 >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6582, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6608, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6635, $1);
 HEAP32[$1 >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6662, $1);
 HEAP32[$1 >> 2] = 2;
 __ZN10emscripten8constantIiEEvPKcRKT_(6688, $1);
 HEAP32[$1 >> 2] = 3;
 __ZN10emscripten8constantIiEEvPKcRKT_(6713, $1);
 HEAP32[$1 >> 2] = 4;
 __ZN10emscripten8constantIiEEvPKcRKT_(6751, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6788, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6822, $1);
 HEAP32[$1 >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6846, $1);
 HEAP32[$1 >> 2] = 2;
 __ZN10emscripten8constantIiEEvPKcRKT_(6872, $1);
 HEAP32[$1 >> 2] = 2;
 __ZN10emscripten8constantIiEEvPKcRKT_(6899, $1);
 HEAP32[$1 >> 2] = 5;
 __ZN10emscripten8constantIiEEvPKcRKT_(6933, $1);
 HEAPF64[$1 >> 3] = .5;
 __ZN10emscripten8constantIdEEvPKcRKT_(6951, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6972, $1);
 HEAP32[$1 >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6991, $1);
 HEAP32[$1 >> 2] = 2;
 __ZN10emscripten8constantIiEEvPKcRKT_(7009, $1);
 HEAP32[$1 >> 2] = 3;
 __ZN10emscripten8constantIiEEvPKcRKT_(7027, $1);
 HEAP32[$1 >> 2] = 4;
 __ZN10emscripten8constantIiEEvPKcRKT_(7046, $1);
 HEAP32[$1 >> 2] = 3;
 __ZN10emscripten8constantIiEEvPKcRKT_(7068, $1);
 HEAP32[$1 >> 2] = 515;
 __ZN10emscripten8constantIiEEvPKcRKT_(7087, $1);
 HEAP32[$1 >> 2] = 259;
 __ZN10emscripten8constantIiEEvPKcRKT_(7116, $1);
 HEAP32[$1 >> 2] = 4;
 __ZN10emscripten8constantIiEEvPKcRKT_(7144, $1);
 HEAP32[$1 >> 2] = 772;
 __ZN10emscripten8constantIiEEvPKcRKT_(7163, $1);
 HEAP32[$1 >> 2] = 1028;
 __ZN10emscripten8constantIiEEvPKcRKT_(7193, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(7223, $1);
 HEAP32[$1 >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(7254, $1);
 HEAP32[$1 >> 2] = 2;
 __ZN10emscripten8constantIiEEvPKcRKT_(7290, $1);
 HEAP32[$1 >> 2] = 3;
 __ZN10emscripten8constantIiEEvPKcRKT_(7324, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(7362, $1);
 HEAP32[$1 >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(7395, $1);
 HEAP32[$1 >> 2] = 2;
 __ZN10emscripten8constantIiEEvPKcRKT_(7442, $1);
 HEAP32[$1 >> 2] = 3;
 __ZN10emscripten8constantIiEEvPKcRKT_(7484, $1);
 HEAP32[$1 >> 2] = 4;
 __ZN10emscripten8constantIiEEvPKcRKT_(7527, $1);
 HEAP32[$1 >> 2] = 5;
 __ZN10emscripten8constantIiEEvPKcRKT_(7579, $1);
 HEAP32[$1 >> 2] = 6;
 __ZN10emscripten8constantIiEEvPKcRKT_(7630, $1);
 HEAP32[$1 >> 2] = 7;
 __ZN10emscripten8constantIiEEvPKcRKT_(7675, $1);
 HEAP32[$1 >> 2] = 8;
 __ZN10emscripten8constantIiEEvPKcRKT_(7714, $1);
 HEAP32[$1 >> 2] = 9;
 __ZN10emscripten8constantIiEEvPKcRKT_(7759, $1);
 STACKTOP = sp;
 return;
}

function _icpPointRobust($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0205 = 0, $$0207 = 0, $$0209 = 0.0, $$0211 = 0.0, $$0212 = 0, $$0213 = 0.0, $$1 = 0, $$1206 = 0, $$1208 = 0, $$2 = 0, $$3 = 0, $$pn = 0.0, $$pre = 0, $100 = 0, $106 = 0.0, $107 = 0.0, $111 = 0, $115 = 0, $119 = 0, $123 = 0, $127 = 0, $131 = 0, $135 = 0, $139 = 0, $143 = 0, $147 = 0, $151 = 0, $154 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $47 = 0, $5 = 0, $51 = 0.0, $55 = 0.0, $56 = 0, $6 = 0, $62 = 0.0, $67 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $73 = 0.0, $76 = 0.0, $8 = 0, $83 = 0.0, $9 = 0, $95 = 0, $97 = 0.0, $99 = 0, $spec$store$select = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 $vararg_buffer5 = sp + 184 | 0;
 $vararg_buffer3 = sp + 176 | 0;
 $vararg_buffer1 = sp + 168 | 0;
 $vararg_buffer = sp + 160 | 0;
 $5 = sp + 144 | 0;
 $6 = sp + 48 | 0;
 $7 = sp;
 $8 = $1 + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 do if (($9 | 0) < 4) $$0212 = -1; else {
  $16 = ~~(+HEAPF64[$0 + 128 >> 3] * +($9 | 0)) + -1 | 0;
  $spec$store$select = ($16 | 0) > 3 ? $16 : 3;
  $19 = _malloc($9 * 96 | 0) | 0;
  if (!$19) {
   _arLog(0, 3, 4689, $vararg_buffer);
   $$0212 = -1;
   break;
  }
  $22 = _malloc($9 << 4) | 0;
  if (!$22) {
   _arLog(0, 3, 4689, $vararg_buffer1);
   _free($19);
   $$0212 = -1;
   break;
  }
  $24 = $9 << 3;
  $25 = _malloc($24) | 0;
  if (!$25) {
   _arLog(0, 3, 4689, $vararg_buffer3);
   _free($19);
   _free($22);
   $$0212 = -1;
   break;
  }
  $27 = _malloc($24) | 0;
  if (!$27) {
   _arLog(0, 3, 4689, $vararg_buffer5);
   _free($19);
   _free($22);
   _free($25);
   $$0212 = -1;
   break;
  }
  $$0205 = 0;
  while (1) {
   if (($$0205 | 0) == 3) break;
   $$0207 = 0;
   while (1) {
    if (($$0207 | 0) == 4) break;
    HEAPF64[$3 + ($$0205 << 5) + ($$0207 << 3) >> 3] = +HEAPF64[$2 + ($$0205 << 5) + ($$0207 << 3) >> 3];
    $$0207 = $$0207 + 1 | 0;
   }
   $$0205 = $$0205 + 1 | 0;
  }
  $34 = $1 + 4 | 0;
  $35 = $5 + 8 | 0;
  $36 = $27 + ($spec$store$select << 3) | 0;
  $37 = $0 + 104 | 0;
  $38 = $0 + 96 | 0;
  $39 = $0 + 120 | 0;
  $40 = $0 + 112 | 0;
  $$0211 = 0.0;
  $$1208 = 0;
  L23 : while (1) {
   _arUtilMatMul($0, $3, $6) | 0;
   $$1206 = 0;
   while (1) {
    $41 = HEAP32[$8 >> 2] | 0;
    if (($$1206 | 0) >= ($41 | 0)) break;
    if ((_icpGetU_from_X_by_MatX2U($5, $6, (HEAP32[$34 >> 2] | 0) + ($$1206 * 24 | 0) | 0) | 0) < 0) {
     label = 20;
     break L23;
    }
    $47 = HEAP32[$1 >> 2] | 0;
    $51 = +HEAPF64[$47 + ($$1206 << 4) >> 3] - +HEAPF64[$5 >> 3];
    $55 = +HEAPF64[$47 + ($$1206 << 4) + 8 >> 3] - +HEAPF64[$35 >> 3];
    $56 = $$1206 << 1;
    HEAPF64[$22 + ($56 << 3) >> 3] = $51;
    HEAPF64[$22 + (($56 | 1) << 3) >> 3] = $55;
    $62 = $51 * $51 + $55 * $55;
    HEAPF64[$27 + ($$1206 << 3) >> 3] = $62;
    HEAPF64[$25 + ($$1206 << 3) >> 3] = $62;
    $$1206 = $$1206 + 1 | 0;
   }
   _qsort($27, $41, 8, 1);
   $67 = +HEAPF64[$36 >> 3] * 4.0;
   $$0213 = $67 < 16.0 ? 16.0 : $67;
   $69 = HEAP32[$8 >> 2] | 0;
   $70 = $$0213 / 6.0;
   $$0209 = 0.0;
   $$2 = 0;
   while (1) {
    if (($$2 | 0) >= ($69 | 0)) break;
    $73 = +HEAPF64[$27 + ($$2 << 3) >> 3];
    if ($73 > $$0213) $$pn = $70; else {
     $76 = 1.0 - $73 / $$0213;
     $$pn = $70 * (1.0 - $76 * ($76 * $76));
    }
    $$0209 = $$0209 + $$pn;
    $$2 = $$2 + 1 | 0;
   }
   $83 = $$0209 / +($69 | 0);
   if ($83 < +HEAPF64[$37 >> 3]) {
    label = 44;
    break;
   }
   if ($$1208 | 0) if ($83 < +HEAPF64[$39 >> 3]) if ($83 / $$0211 > +HEAPF64[$40 >> 3]) {
    label = 44;
    break;
   }
   if (($$1208 | 0) == (HEAP32[$38 >> 2] | 0)) {
    label = 44;
    break;
   }
   $$0 = 0;
   $$3 = 0;
   $95 = $69;
   while (1) {
    if (($$3 | 0) >= ($95 | 0)) break;
    $97 = +HEAPF64[$25 + ($$3 << 3) >> 3];
    if (!($97 <= $$0213)) {
     $$1 = $$0;
     $$pre = $95;
    } else {
     $99 = $$0 * 6 | 0;
     $100 = $19 + ($99 << 3) | 0;
     if ((_icpGetJ_U_S($100, $0, $3, (HEAP32[$34 >> 2] | 0) + ($$3 * 24 | 0) | 0) | 0) < 0) {
      label = 36;
      break L23;
     }
     $106 = 1.0 - $97 / $$0213;
     $107 = $106 * $106;
     HEAPF64[$100 >> 3] = $107 * +HEAPF64[$100 >> 3];
     $111 = $19 + (($99 | 1) << 3) | 0;
     HEAPF64[$111 >> 3] = $107 * +HEAPF64[$111 >> 3];
     $115 = $19 + ($99 + 2 << 3) | 0;
     HEAPF64[$115 >> 3] = $107 * +HEAPF64[$115 >> 3];
     $119 = $19 + ($99 + 3 << 3) | 0;
     HEAPF64[$119 >> 3] = $107 * +HEAPF64[$119 >> 3];
     $123 = $19 + ($99 + 4 << 3) | 0;
     HEAPF64[$123 >> 3] = $107 * +HEAPF64[$123 >> 3];
     $127 = $19 + ($99 + 5 << 3) | 0;
     HEAPF64[$127 >> 3] = $107 * +HEAPF64[$127 >> 3];
     $131 = $19 + ($99 + 6 << 3) | 0;
     HEAPF64[$131 >> 3] = $107 * +HEAPF64[$131 >> 3];
     $135 = $19 + ($99 + 7 << 3) | 0;
     HEAPF64[$135 >> 3] = $107 * +HEAPF64[$135 >> 3];
     $139 = $19 + ($99 + 8 << 3) | 0;
     HEAPF64[$139 >> 3] = $107 * +HEAPF64[$139 >> 3];
     $143 = $19 + ($99 + 9 << 3) | 0;
     HEAPF64[$143 >> 3] = $107 * +HEAPF64[$143 >> 3];
     $147 = $19 + ($99 + 10 << 3) | 0;
     HEAPF64[$147 >> 3] = $107 * +HEAPF64[$147 >> 3];
     $151 = $19 + ($99 + 11 << 3) | 0;
     HEAPF64[$151 >> 3] = $107 * +HEAPF64[$151 >> 3];
     $154 = $$3 << 1;
     HEAPF64[$22 + ($$0 << 3) >> 3] = $107 * +HEAPF64[$22 + ($154 << 3) >> 3];
     HEAPF64[$22 + ($$0 + 1 << 3) >> 3] = $107 * +HEAPF64[$22 + (($154 | 1) << 3) >> 3];
     $$1 = $$0 + 2 | 0;
     $$pre = HEAP32[$8 >> 2] | 0;
    }
    $$0 = $$1;
    $$3 = $$3 + 1 | 0;
    $95 = $$pre;
   }
   if (($$0 | 0) < 6) {
    label = 40;
    break;
   }
   if ((_icpGetDeltaS($7, $22, $19, $$0) | 0) < 0) {
    label = 42;
    break;
   }
   _icpUpdateMat($3, $7) | 0;
   $$0211 = $83;
   $$1208 = $$1208 + 1 | 0;
  }
  if ((label | 0) == 20) {
   _icpGetXw2XcCleanup_221($19, $22, $25, $27);
   $$0212 = -1;
   break;
  } else if ((label | 0) == 36) {
   _icpGetXw2XcCleanup_221($19, $22, $25, $27);
   $$0212 = -1;
   break;
  } else if ((label | 0) == 40) {
   _icpGetXw2XcCleanup_221($19, $22, $25, $27);
   $$0212 = -1;
   break;
  } else if ((label | 0) == 42) {
   _icpGetXw2XcCleanup_221($19, $22, $25, $27);
   $$0212 = -1;
   break;
  } else if ((label | 0) == 44) {
   HEAPF64[$4 >> 3] = $83;
   _free($19);
   _free($22);
   _free($25);
   _free($27);
   $$0212 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$0212 | 0;
}

function _arParamObserv2Ideal($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0342 = 0.0, $$0343 = 0.0, $$0345 = 0, $$0346 = 0.0, $$0348 = 0.0, $$0350 = 0.0, $$0351 = 0.0, $$0352 = 0, $$0353 = 0.0, $$0355 = 0.0, $$0357 = 0.0, $$0358 = 0.0, $$0359 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0362 = 0.0, $$0363 = 0, $$0364 = 0.0, $$0365 = 0.0, $$0367 = 0.0, $$1 = 0.0, $$1344 = 0.0, $$1347 = 0.0, $$1349 = 0.0, $$1354 = 0.0, $$1356 = 0.0, $$1366 = 0.0, $$1368 = 0.0, $$sink = 0.0, $10 = 0.0, $105 = 0.0, $107 = 0.0, $108 = 0, $110 = 0.0, $113 = 0.0, $117 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $138 = 0.0, $14 = 0.0, $140 = 0.0, $142 = 0.0, $146 = 0.0, $149 = 0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0.0, $161 = 0.0, $164 = 0.0, $168 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $18 = 0.0, $189 = 0.0, $191 = 0.0, $193 = 0.0, $197 = 0.0, $20 = 0.0, $200 = 0, $208 = 0.0, $209 = 0.0, $210 = 0, $212 = 0.0, $215 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $229 = 0.0, $231 = 0.0, $233 = 0.0, $237 = 0.0, $24 = 0.0, $240 = 0, $26 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $35 = 0.0, $40 = 0.0, $50 = 0.0, $56 = 0.0, $6 = 0.0, $67 = 0.0, $73 = 0.0, $8 = 0.0, $92 = 0.0, label = 0;
 switch ($5 | 0) {
 case 4:
  {
   $6 = +HEAPF64[$0 >> 3];
   $8 = +HEAPF64[$0 + 8 >> 3];
   $10 = +HEAPF64[$0 + 16 >> 3];
   $12 = +HEAPF64[$0 + 24 >> 3];
   $14 = +HEAPF64[$0 + 32 >> 3];
   $16 = +HEAPF64[$0 + 40 >> 3];
   $18 = +HEAPF64[$0 + 48 >> 3];
   $20 = +HEAPF64[$0 + 56 >> 3];
   $22 = +HEAPF64[$0 + 64 >> 3];
   $24 = ($1 - $18) / $14;
   $26 = ($2 - $20) / $16;
   $29 = $10 * 2.0;
   $30 = $12 * 6.0;
   $31 = $12 * 2.0;
   $32 = $10 * 6.0;
   $$0346 = $24;
   $$0348 = $26;
   $$0357 = $24 * $24;
   $$0358 = $26 * $26;
   $$0359 = 1;
   while (1) {
    if (!($$0358 != 0.0 | $$0357 != 0.0)) {
     $$1347 = 0.0;
     $$1349 = 0.0;
     break;
    }
    $35 = $$0358 + $$0357;
    $40 = $6 * $35 + 1.0 + $35 * ($8 * $35);
    $50 = $$0357 * 3.0;
    $56 = $$0358 * $50;
    $67 = $$0346 - ($12 * ($35 + $$0357 * 2.0) + ($$0348 * ($29 * $$0346) + $$0346 * $40) - $24) / ($30 * $$0346 + ($29 * $$0348 + ($6 * ($$0358 + $50) + 1.0 + $8 * ($$0358 * $$0358 + ($$0357 * ($$0357 * 5.0) + $56)))));
    $73 = $31 * $67;
    $92 = $$0348 - ($10 * ($$0358 * 2.0 + $35) + $$0348 * $40 + $$0348 * $73 - $26) / ($32 * $$0348 + ($6 * ($$0357 + $$0358 * 3.0) + 1.0 + $8 * ($$0358 * ($$0358 * 5.0) + ($$0357 * $$0357 + $56))) + $73);
    if (($$0359 | 0) == 4) {
     $$1347 = $67;
     $$1349 = $92;
     break;
    }
    $$0346 = $67;
    $$0348 = $92;
    $$0357 = $67 * $67;
    $$0358 = $92 * $92;
    $$0359 = $$0359 + 1 | 0;
   }
   HEAPF64[$3 >> 3] = $18 + $14 * $$1347 / $22;
   $$sink = $20 + $16 * $$1349 / $22;
   label = 22;
   break;
  }
 case 3:
  {
   $105 = +HEAPF64[$0 >> 3];
   $107 = ($1 - $105) / +HEAPF64[$0 + 24 >> 3];
   $108 = $0 + 8 | 0;
   $110 = $2 - +HEAPF64[$108 >> 3];
   $113 = +HEAPF64[$0 + 32 >> 3] / 1.0e8;
   $117 = +HEAPF64[$0 + 40 >> 3] / 1.0e8 / 1.0e5;
   $120 = $107 * $107 + $110 * $110;
   $121 = +Math_sqrt(+$120);
   $122 = $113 * 3.0;
   $123 = $117 * 5.0;
   $$0360 = $120;
   $$0363 = 1;
   $$0364 = $121;
   $$0365 = $110;
   $$0367 = $107;
   while (1) {
    if (!($$0364 != 0.0)) {
     $$1366 = 0.0;
     $$1368 = 0.0;
     break;
    }
    $138 = $$0364 - ($$0364 * (1.0 - $113 * $$0360 - $$0360 * ($117 * $$0360)) - $121) / (1.0 - $122 * $$0360 - $$0360 * ($123 * $$0360));
    $140 = $$0367 * $138 / $$0364;
    $142 = $$0365 * $138 / $$0364;
    if (($$0363 | 0) == 3) {
     $$1366 = $142;
     $$1368 = $140;
     break;
    }
    $146 = $140 * $140 + $142 * $142;
    $$0360 = $146;
    $$0363 = $$0363 + 1 | 0;
    $$0364 = +Math_sqrt(+$146);
    $$0365 = $142;
    $$0367 = $140;
   }
   $149 = $0 + 16 | 0;
   HEAPF64[$3 >> 3] = $105 + $$1368 / +HEAPF64[$149 >> 3];
   $$sink = $$1366 / +HEAPF64[$149 >> 3] + +HEAPF64[$108 >> 3];
   label = 22;
   break;
  }
 case 2:
  {
   $157 = +HEAPF64[$0 >> 3];
   $158 = $1 - $157;
   $159 = $0 + 8 | 0;
   $161 = $2 - +HEAPF64[$159 >> 3];
   $164 = +HEAPF64[$0 + 24 >> 3] / 1.0e8;
   $168 = +HEAPF64[$0 + 32 >> 3] / 1.0e8 / 1.0e5;
   $171 = $158 * $158 + $161 * $161;
   $172 = +Math_sqrt(+$171);
   $173 = $164 * 3.0;
   $174 = $168 * 5.0;
   $$0352 = 1;
   $$0353 = $161;
   $$0355 = $158;
   $$0361 = $172;
   $$0362 = $171;
   while (1) {
    if (!($$0361 != 0.0)) {
     $$1354 = 0.0;
     $$1356 = 0.0;
     break;
    }
    $189 = $$0361 - ($$0361 * (1.0 - $164 * $$0362 - $$0362 * ($168 * $$0362)) - $172) / (1.0 - $173 * $$0362 - $$0362 * ($174 * $$0362));
    $191 = $$0355 * $189 / $$0361;
    $193 = $$0353 * $189 / $$0361;
    if (($$0352 | 0) == 3) {
     $$1354 = $193;
     $$1356 = $191;
     break;
    }
    $197 = $191 * $191 + $193 * $193;
    $$0352 = $$0352 + 1 | 0;
    $$0353 = $193;
    $$0355 = $191;
    $$0361 = +Math_sqrt(+$197);
    $$0362 = $197;
   }
   $200 = $0 + 16 | 0;
   HEAPF64[$3 >> 3] = $157 + $$1356 / +HEAPF64[$200 >> 3];
   $$sink = $$1354 / +HEAPF64[$200 >> 3] + +HEAPF64[$159 >> 3];
   label = 22;
   break;
  }
 case 1:
  {
   $208 = +HEAPF64[$0 >> 3];
   $209 = $1 - $208;
   $210 = $0 + 8 | 0;
   $212 = $2 - +HEAPF64[$210 >> 3];
   $215 = +HEAPF64[$0 + 24 >> 3] / 1.0e8;
   $218 = $209 * $209 + $212 * $212;
   $219 = +Math_sqrt(+$218);
   $220 = $215 * 3.0;
   $$0 = 1;
   $$0342 = $212;
   $$0343 = $209;
   $$0350 = $219;
   $$0351 = $218;
   while (1) {
    if (!($$0350 != 0.0)) {
     $$1 = 0.0;
     $$1344 = 0.0;
     break;
    }
    $229 = $$0350 - ($$0350 * (1.0 - $215 * $$0351) - $219) / (1.0 - $220 * $$0351);
    $231 = $$0343 * $229 / $$0350;
    $233 = $$0342 * $229 / $$0350;
    if (($$0 | 0) == 3) {
     $$1 = $233;
     $$1344 = $231;
     break;
    }
    $237 = $231 * $231 + $233 * $233;
    $$0 = $$0 + 1 | 0;
    $$0342 = $233;
    $$0343 = $231;
    $$0350 = +Math_sqrt(+$237);
    $$0351 = $237;
   }
   $240 = $0 + 16 | 0;
   HEAPF64[$3 >> 3] = $208 + $$1344 / +HEAPF64[$240 >> 3];
   $$sink = $$1 / +HEAPF64[$240 >> 3] + +HEAPF64[$210 >> 3];
   label = 22;
   break;
  }
 default:
  $$0345 = -1;
 }
 if ((label | 0) == 22) {
  HEAPF64[$4 >> 3] = $$sink;
  $$0345 = 0;
 }
 return $$0345 | 0;
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_function_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i$i$add$i = 0, $$0$i$i$add$i116 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i115 = 0, $$0105$ph = 0, $$0105$ph$ph = 0, $$0111 = 0, $$088 = 0, $$1112 = 0, $$1112$be = 0, $$1112$ph = 0, $$1112$ph$ph = 0, $$8 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $27 = 0, $29 = 0, $3 = 0, $33 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $49 = 0, $57 = 0, $58 = 0, $66 = 0, $71 = 0, $76 = 0, $77 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp + 12 | 0;
 $4 = sp;
 do if (($0 | 0) == ($1 | 0)) $$8 = $0; else if ((HEAP8[$0 >> 0] | 0) == 70) {
  $8 = $0 + 1 | 0;
  if (($8 | 0) == ($1 | 0)) $$8 = $0; else {
   if ((HEAP8[$8 >> 0] | 0) == 89) {
    $12 = $0 + 2 | 0;
    if (($12 | 0) == ($1 | 0)) {
     $$8 = $0;
     break;
    } else $$0111 = $12;
   } else $$0111 = $8;
   $14 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$0111, $1, $2) | 0;
   if (($14 | 0) == ($$0111 | 0)) $$8 = $0; else {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15119, __ZNSt3__211char_traitsIcE6lengthEPKc(15119) | 0);
    $17 = $2 + 4 | 0;
    $18 = $3 + 11 | 0;
    $19 = $3 + 4 | 0;
    $20 = $4 + 11 | 0;
    $21 = $4 + 4 | 0;
    $$0105$ph = 0;
    $$1112$ph = $14;
    L9 : while (1) {
     $$1112 = $$1112$ph;
     L11 : while (1) {
      if (($$1112 | 0) == ($1 | 0)) {
       label = 11;
       break L9;
      }
      switch (HEAP8[$$1112 >> 0] | 0) {
      case 69:
       {
        label = 16;
        break L9;
        break;
       }
      case 118:
       {
        $$1112$be = $$1112 + 1 | 0;
        break;
       }
      case 82:
       {
        $29 = $$1112 + 1 | 0;
        if (($29 | 0) == ($1 | 0)) label = 23; else if ((HEAP8[$29 >> 0] | 0) == 69) {
         $$0105$ph$ph = 1;
         $$1112$ph$ph = $29;
         break L11;
        } else label = 23;
        break;
       }
      case 79:
       {
        $33 = $$1112 + 1 | 0;
        if (($33 | 0) == ($1 | 0)) label = 23; else if ((HEAP8[$33 >> 0] | 0) == 69) {
         $$0105$ph$ph = 2;
         $$1112$ph$ph = $33;
         break L11;
        } else label = 23;
        break;
       }
      default:
       label = 23;
      }
      L20 : do if ((label | 0) == 23) {
       label = 0;
       $40 = ((HEAP32[$17 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
       $41 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$1112, $1, $2) | 0;
       $45 = ((HEAP32[$17 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
       if (($41 | 0) == ($$1112 | 0) | ($41 | 0) == ($1 | 0)) break L9;
       $$088 = $40;
       while (1) {
        if ($$088 >>> 0 >= $45 >>> 0) break;
        $49 = HEAP8[$18 >> 0] | 0;
        if (($49 << 24 >> 24 < 0 ? HEAP32[$19 >> 2] | 0 : $49 & 255) >>> 0 > 1) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 15341) | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$2 >> 2] | 0) + ($$088 * 24 | 0) | 0);
        $57 = HEAP8[$20 >> 0] | 0;
        $58 = $57 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3, $58 ? HEAP32[$4 >> 2] | 0 : $4, $58 ? HEAP32[$21 >> 2] | 0 : $57 & 255) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        $$088 = $$088 + 1 | 0;
       }
       $$0 = $40;
       while (1) {
        if ($$0 >>> 0 >= $45 >>> 0) {
         $$1112$be = $41;
         break L20;
        }
        $66 = HEAP32[$17 >> 2] | 0;
        $$0$i$i$idx$i115 = 0;
        while (1) {
         if (($$0$i$i$idx$i115 | 0) == -1) break;
         $$0$i$i$add$i116 = $$0$i$i$idx$i115 + -1 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($66 + ($$0$i$i$add$i116 * 24 | 0) | 0);
         $$0$i$i$idx$i115 = $$0$i$i$add$i116;
        }
        HEAP32[$17 >> 2] = $66 + -24;
        $$0 = $$0 + 1 | 0;
       }
      } while (0);
      $$1112 = $$1112$be;
     }
     $$0105$ph = $$0105$ph$ph;
     $$1112$ph = $$1112$ph$ph;
    }
    if ((label | 0) == 11) {
     $23 = HEAP32[$17 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$17 >> 2] = $23 + -24;
    } else if ((label | 0) == 16) {
     $27 = $$1112 + 1 | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 15117) | 0;
     switch ($$0105$ph & 3) {
     case 1:
      {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 16545) | 0;
       break;
      }
     case 2:
      {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 16548) | 0;
       break;
      }
     default:
      {}
     }
     $71 = HEAP32[$17 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) != ($71 | 0)) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($71 + -24 | 0, 15151) | 0;
      $76 = HEAP8[$18 >> 0] | 0;
      $77 = $76 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj((HEAP32[$17 >> 2] | 0) + -12 | 0, 0, $77 ? HEAP32[$3 >> 2] | 0 : $3, $77 ? HEAP32[$19 >> 2] | 0 : $76 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$8 = $27;
      break;
     }
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$8 = $0;
   }
  }
 } else $$8 = $0; while (0);
 STACKTOP = sp;
 return $$8 | 0;
}

function _QRM($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0213 = 0, $$0215 = 0, $$0216 = 0, $$0219 = 0, $$0220 = 0, $$0221 = 0, $$0222 = 0, $$0223 = 0.0, $$0224 = 0.0, $$0224$be = 0.0, $$0227 = 0.0, $$0227$be = 0.0, $$0232 = 0.0, $$1 = 0, $$1214 = 0, $$1217 = 0, $$1225 = 0.0, $$1228 = 0.0, $$1231 = 0.0, $$2218 = 0, $$pre = 0, $106 = 0.0, $111 = 0, $112 = 0, $113 = 0, $115 = 0, $116 = 0.0, $118 = 0, $119 = 0.0, $12 = 0, $128 = 0.0, $130 = 0, $131 = 0.0, $136 = 0.0, $138 = 0.0, $14 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $150 = 0.0, $151 = 0, $154 = 0, $159 = 0.0, $2 = 0, $20 = 0, $25 = 0.0, $26 = 0, $27 = 0, $30 = 0.0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $54 = 0.0, $65 = 0.0, $70 = 0.0, $74 = 0.0, $77 = 0.0, $81 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $91 = 0, $95 = 0.0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 do if (($4 | 0) < 2 ? 1 : ($4 | 0) != (HEAP32[$0 + 8 >> 2] | 0)) $$0220 = -1; else if ((HEAP32[$1 + 4 >> 2] | 0) == ($4 | 0)) {
  $12 = _arVecAlloc($4) | 0;
  if (!$12) $$0220 = -1; else {
   $14 = $4 + -1 | 0;
   HEAP32[$2 + 4 >> 2] = $14;
   HEAP32[$2 >> 2] = (HEAP32[$12 >> 2] | 0) + 8;
   if ((_arVecTridiagonalize($0, $1, $2) | 0) < 0) {
    _arVecFree($12) | 0;
    $$0220 = -1;
    break;
   }
   $20 = HEAP32[$12 >> 2] | 0;
   HEAPF64[$20 >> 3] = 0.0;
   $$0 = $14;
   while (1) {
    if (($$0 | 0) <= 0) break;
    $$0215 = $$0;
    while (1) {
     if (($$0215 | 0) <= 0) break;
     $25 = +Math_abs(+(+HEAPF64[$20 + ($$0215 << 3) >> 3]));
     $26 = HEAP32[$1 >> 2] | 0;
     $27 = $$0215 + -1 | 0;
     $30 = +Math_abs(+(+HEAPF64[$26 + ($27 << 3) >> 3]));
     if ($25 > ($30 + +Math_abs(+(+HEAPF64[$26 + ($$0215 << 3) >> 3]))) * 1.0e-06) $$0215 = $27; else break;
    }
    $$pre = $$0 + -1 | 0;
    L15 : do if (($$0215 | 0) != ($$0 | 0)) {
     $38 = $20 + ($$0 << 3) | 0;
     $40 = $20 + ($$0215 + 1 << 3) | 0;
     $$0219 = 0;
     do {
      if ($$0219 >>> 0 > 99) break L15;
      $$0219 = $$0219 + 1 | 0;
      $43 = HEAP32[$1 >> 2] | 0;
      $44 = $43 + ($$pre << 3) | 0;
      $46 = $43 + ($$0 << 3) | 0;
      $47 = +HEAPF64[$46 >> 3];
      $49 = (+HEAPF64[$44 >> 3] - $47) * .5;
      $50 = +HEAPF64[$38 >> 3];
      $51 = $50 * $50;
      $54 = +Math_sqrt(+($51 + $49 * $49));
      $$0213 = $$0215;
      $$0224 = +HEAPF64[$40 >> 3];
      $$0227 = +HEAPF64[$43 + ($$0215 << 3) >> 3] - $47 + $51 / ($49 + ($49 < 0.0 ? -$54 : $54));
      while (1) {
       if (($$0213 | 0) >= ($$0 | 0)) break;
       $65 = +Math_abs(+$$0227);
       if (!($65 >= +Math_abs(+$$0224))) {
        $77 = -$$0227 / $$0224;
        $81 = 1.0 / +Math_sqrt(+($77 * $77 + 1.0));
        $$0223 = $77 * $81;
        $$1231 = $81;
       } else if ($65 > 1.0e-16) {
        $70 = -$$0224 / $$0227;
        $74 = 1.0 / +Math_sqrt(+($70 * $70 + 1.0));
        $$0223 = $74;
        $$1231 = $70 * $74;
       } else {
        $$0223 = 1.0;
        $$1231 = 0.0;
       }
       $83 = $43 + ($$0213 << 3) | 0;
       $84 = +HEAPF64[$83 >> 3];
       $85 = $$0213 + 1 | 0;
       $86 = $43 + ($85 << 3) | 0;
       $87 = +HEAPF64[$86 >> 3];
       $88 = $84 - $87;
       $91 = $20 + ($85 << 3) | 0;
       $95 = $$1231 * ($$1231 * $88 + $$0223 * 2.0 * +HEAPF64[$91 >> 3]);
       HEAPF64[$83 >> 3] = $84 - $95;
       HEAPF64[$86 >> 3] = $87 + $95;
       $99 = $20 + ($$0213 << 3) | 0;
       if (($$0213 | 0) > ($$0215 | 0)) HEAPF64[$99 >> 3] = $$0223 * +HEAPF64[$99 >> 3] - $$0224 * $$1231;
       $106 = +HEAPF64[$91 >> 3];
       HEAPF64[$91 >> 3] = $106 + $$1231 * ($$0223 * $88 - $$1231 * 2.0 * $106);
       $111 = Math_imul($$0213, $4) | 0;
       $112 = Math_imul($85, $4) | 0;
       $$0216 = 0;
       $$1225 = $$0224;
       $$1228 = $$0227;
       while (1) {
        if (($$0216 | 0) == ($4 | 0)) break;
        $113 = HEAP32[$0 >> 2] | 0;
        $115 = $113 + ($$0216 + $111 << 3) | 0;
        $116 = +HEAPF64[$115 >> 3];
        $118 = $113 + ($$0216 + $112 << 3) | 0;
        $119 = +HEAPF64[$118 >> 3];
        HEAPF64[$115 >> 3] = $$0223 * $116 - $$1231 * $119;
        HEAPF64[$118 >> 3] = $$1231 * $116 + $$0223 * $119;
        $$0216 = $$0216 + 1 | 0;
        $$1225 = $119;
        $$1228 = $116;
       }
       if (($$0213 | 0) < ($$pre | 0)) {
        $128 = +HEAPF64[$91 >> 3];
        $130 = $20 + ($$0213 + 2 << 3) | 0;
        $131 = +HEAPF64[$130 >> 3];
        HEAPF64[$130 >> 3] = $$0223 * $131;
        $$0224$be = -($$1231 * $131);
        $$0227$be = $128;
       } else {
        $$0224$be = $$1225;
        $$0227$be = $$1228;
       }
       $$0213 = $85;
       $$0224 = $$0224$be;
       $$0227 = $$0227$be;
      }
      $136 = +Math_abs(+(+HEAPF64[$38 >> 3]));
      $138 = +Math_abs(+(+HEAPF64[$44 >> 3]));
     } while ($136 > ($138 + +Math_abs(+(+HEAPF64[$46 >> 3]))) * 1.0e-06);
    } while (0);
    $$0 = $$pre;
   }
   $$1214 = 0;
   while (1) {
    if (($$1214 | 0) == ($14 | 0)) break;
    $144 = HEAP32[$1 >> 2] | 0;
    $145 = $144 + ($$1214 << 3) | 0;
    $146 = +HEAPF64[$145 >> 3];
    $147 = $$1214 + 1 | 0;
    $$0232 = $146;
    $$1 = $$1214;
    $$1217 = $147;
    while (1) {
     if (($$1217 | 0) >= ($4 | 0)) break;
     $150 = +HEAPF64[$144 + ($$1217 << 3) >> 3];
     $151 = $150 > $$0232;
     $$0232 = $151 ? $150 : $$0232;
     $$1 = $151 ? $$1217 : $$1;
     $$1217 = $$1217 + 1 | 0;
    }
    HEAPF64[$144 + ($$1 << 3) >> 3] = $146;
    HEAPF64[$145 >> 3] = $$0232;
    $154 = HEAP32[$0 >> 2] | 0;
    $$0221 = $154 + ((Math_imul($$1214, $4) | 0) << 3) | 0;
    $$0222 = $154 + ((Math_imul($$1, $4) | 0) << 3) | 0;
    $$2218 = 0;
    while (1) {
     if (($$2218 | 0) == ($4 | 0)) break;
     $159 = +HEAPF64[$$0222 >> 3];
     HEAPF64[$$0222 >> 3] = +HEAPF64[$$0221 >> 3];
     HEAPF64[$$0221 >> 3] = $159;
     $$0221 = $$0221 + 8 | 0;
     $$0222 = $$0222 + 8 | 0;
     $$2218 = $$2218 + 1 | 0;
    }
    $$1214 = $147;
   }
   _arVecFree($12) | 0;
   $$0220 = 0;
  }
 } else $$0220 = -1; while (0);
 STACKTOP = sp;
 return $$0220 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_conversion_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i107 = 0, $$0$i$i$i110 = 0, $$0$i$i$i113 = 0, $$0$i$i$idx$i = 0, $$10 = 0, $$1100 = 0, $$4103 = 0, $$5104 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $41 = 0, $42 = 0, $46 = 0, $47 = 0, $5 = 0, $54 = 0, $6 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $3 = sp + 88 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 L1 : do if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 99) if ((HEAP8[$0 + 1 >> 0] | 0) == 118) {
  $19 = $2 + 63 | 0;
  $20 = HEAP8[$19 >> 0] | 0;
  HEAP8[$19 >> 0] = 0;
  $21 = $0 + 2 | 0;
  $22 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($21, $1, $2) | 0;
  HEAP8[$19 >> 0] = $20;
  if (($22 | 0) == ($21 | 0) | ($22 | 0) == ($1 | 0)) $$10 = $0; else {
   if ((HEAP8[$22 >> 0] | 0) == 95) {
    $29 = $22 + 1 | 0;
    if (($29 | 0) == ($1 | 0)) {
     $$10 = $0;
     break;
    }
    $31 = HEAP8[$29 >> 0] | 0;
    L9 : do if ($31 << 24 >> 24 == 69) {
     $33 = $2 + 4 | 0;
     $34 = HEAP32[$33 >> 2] | 0;
     if ($34 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      HEAP32[$34 >> 2] = 0;
      HEAP32[$34 + 4 >> 2] = 0;
      HEAP32[$34 + 8 >> 2] = 0;
      HEAP32[$34 + 12 >> 2] = 0;
      HEAP32[$34 + 16 >> 2] = 0;
      HEAP32[$34 + 20 >> 2] = 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($34);
      HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 24;
      $$4103 = $29;
      break;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($2);
      $$4103 = $29;
      break;
     }
    } else {
     $$1100 = $29;
     $41 = $31;
     while (1) {
      if ($41 << 24 >> 24 == 69) {
       $$4103 = $$1100;
       break L9;
      }
      $42 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$1100, $1, $2) | 0;
      if (($42 | 0) == ($$1100 | 0) | ($42 | 0) == ($1 | 0)) {
       $$10 = $0;
       break L1;
      }
      $$1100 = $42;
      $41 = HEAP8[$42 >> 0] | 0;
     }
    } while (0);
    $$5104 = $$4103 + 1 | 0;
   } else {
    $27 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($22, $1, $2) | 0;
    if (($27 | 0) == ($22 | 0)) {
     $$10 = $0;
     break;
    } else $$5104 = $27;
   }
   $46 = $2 + 4 | 0;
   $47 = HEAP32[$46 >> 2] | 0;
   if ((($47 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$10 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $47 + -24 | 0);
    $54 = HEAP32[$46 >> 2] | 0;
    $$0$i$i$idx$i = 0;
    while (1) {
     if (($$0$i$i$idx$i | 0) == -1) break;
     $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($54 + ($$0$i$i$add$i * 24 | 0) | 0);
     $$0$i$i$idx$i = $$0$i$i$add$i;
    }
    HEAP32[$46 >> 2] = $54 + -24;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $54 + -48 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9, 0, 15119) | 0;
    HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
    HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$9 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 16283) | 0;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
    $$0$i$i$i107 = 0;
    while (1) {
     if (($$0$i$i$i107 | 0) == 3) break;
     HEAP32[$8 + ($$0$i$i$i107 << 2) >> 2] = 0;
     $$0$i$i$i107 = $$0$i$i$i107 + 1 | 0;
    }
    $65 = HEAP8[$3 + 11 >> 0] | 0;
    $66 = $65 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, $66 ? HEAP32[$3 >> 2] | 0 : $3, $66 ? HEAP32[$3 + 4 >> 2] | 0 : $65 & 255) | 0;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
    $$0$i$i$i110 = 0;
    while (1) {
     if (($$0$i$i$i110 | 0) == 3) break;
     HEAP32[$7 + ($$0$i$i$i110 << 2) >> 2] = 0;
     $$0$i$i$i110 = $$0$i$i$i110 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15117) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i113 = 0;
    while (1) {
     if (($$0$i$i$i113 | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i113 << 2) >> 2] = 0;
     $$0$i$i$i113 = $$0$i$i$i113 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$46 >> 2] | 0) + -24 | 0, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$10 = $$5104;
   }
  }
 } else $$10 = $0; else $$10 = $0; else $$10 = $0; while (0);
 STACKTOP = sp;
 return $$10 | 0;
}

function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1271 = 0, $$1271$be = 0, $$1271$ph = 0, $$1274 = 0, $$1274$be = 0, $$1274$ph = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $130 = 0, $139 = 0, $144 = 0, $147 = 0, $148 = 0, $154 = 0, $165 = 0, $168 = 0, $175 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $67 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $96 = 0, $storemerge = 0, $storemerge3 = 0;
 $2 = $0 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 & -8;
 $5 = $0 + $4 | 0;
 $6 = HEAP32[4355] | 0;
 $8 = $3 & 3;
 if (!(($8 | 0) != 1 & $6 >>> 0 <= $0 >>> 0 & $5 >>> 0 > $0 >>> 0)) _abort();
 $11 = $5 + 4 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 if (!($12 & 1)) _abort();
 if (!$8) {
  if ($1 >>> 0 < 256) {
   $$2 = 0;
   return $$2 | 0;
  }
  if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) if (($4 - $1 | 0) >>> 0 <= HEAP32[4471] << 1 >>> 0) {
   $$2 = $0;
   return $$2 | 0;
  }
  $$2 = 0;
  return $$2 | 0;
 }
 if ($4 >>> 0 >= $1 >>> 0) {
  $24 = $4 - $1 | 0;
  if ($24 >>> 0 <= 15) {
   $$2 = $0;
   return $$2 | 0;
  }
  $26 = $0 + $1 | 0;
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
  HEAP32[$26 + 4 >> 2] = $24 | 3;
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 1;
  _dispose_chunk($26, $24);
  $$2 = $0;
  return $$2 | 0;
 }
 if ((HEAP32[4357] | 0) == ($5 | 0)) {
  $37 = (HEAP32[4354] | 0) + $4 | 0;
  $39 = $37 - $1 | 0;
  $40 = $0 + $1 | 0;
  if ($37 >>> 0 <= $1 >>> 0) {
   $$2 = 0;
   return $$2 | 0;
  }
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
  HEAP32[$40 + 4 >> 2] = $39 | 1;
  HEAP32[4357] = $40;
  HEAP32[4354] = $39;
  $$2 = $0;
  return $$2 | 0;
 }
 if ((HEAP32[4356] | 0) == ($5 | 0)) {
  $49 = (HEAP32[4353] | 0) + $4 | 0;
  if ($49 >>> 0 < $1 >>> 0) {
   $$2 = 0;
   return $$2 | 0;
  }
  $51 = $49 - $1 | 0;
  if ($51 >>> 0 > 15) {
   $53 = $0 + $1 | 0;
   $54 = $0 + $49 | 0;
   HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
   HEAP32[$53 + 4 >> 2] = $51 | 1;
   HEAP32[$54 >> 2] = $51;
   $60 = $54 + 4 | 0;
   HEAP32[$60 >> 2] = HEAP32[$60 >> 2] & -2;
   $storemerge = $53;
   $storemerge3 = $51;
  } else {
   HEAP32[$2 >> 2] = $3 & 1 | $49 | 2;
   $67 = $0 + $49 + 4 | 0;
   HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 1;
   $storemerge = 0;
   $storemerge3 = 0;
  }
  HEAP32[4353] = $storemerge3;
  HEAP32[4356] = $storemerge;
  $$2 = $0;
  return $$2 | 0;
 }
 if ($12 & 2 | 0) {
  $$2 = 0;
  return $$2 | 0;
 }
 $73 = ($12 & -8) + $4 | 0;
 if ($73 >>> 0 < $1 >>> 0) {
  $$2 = 0;
  return $$2 | 0;
 }
 $75 = $73 - $1 | 0;
 $76 = $12 >>> 3;
 L49 : do if ($12 >>> 0 < 256) {
  $79 = HEAP32[$5 + 8 >> 2] | 0;
  $81 = HEAP32[$5 + 12 >> 2] | 0;
  $83 = 17444 + ($76 << 1 << 2) | 0;
  if (($79 | 0) != ($83 | 0)) {
   if ($6 >>> 0 > $79 >>> 0) _abort();
   if ((HEAP32[$79 + 12 >> 2] | 0) != ($5 | 0)) _abort();
  }
  if (($81 | 0) == ($79 | 0)) {
   HEAP32[4351] = HEAP32[4351] & ~(1 << $76);
   break;
  }
  if (($81 | 0) == ($83 | 0)) $$pre$phiZ2D = $81 + 8 | 0; else {
   if ($6 >>> 0 > $81 >>> 0) _abort();
   $96 = $81 + 8 | 0;
   if ((HEAP32[$96 >> 2] | 0) == ($5 | 0)) $$pre$phiZ2D = $96; else _abort();
  }
  HEAP32[$79 + 12 >> 2] = $81;
  HEAP32[$$pre$phiZ2D >> 2] = $79;
 } else {
  $101 = HEAP32[$5 + 24 >> 2] | 0;
  $103 = HEAP32[$5 + 12 >> 2] | 0;
  do if (($103 | 0) == ($5 | 0)) {
   $114 = $5 + 16 | 0;
   $115 = $114 + 4 | 0;
   $116 = HEAP32[$115 >> 2] | 0;
   if (!$116) {
    $118 = HEAP32[$114 >> 2] | 0;
    if (!$118) {
     $$3 = 0;
     break;
    } else {
     $$1271$ph = $118;
     $$1274$ph = $114;
    }
   } else {
    $$1271$ph = $116;
    $$1274$ph = $115;
   }
   $$1271 = $$1271$ph;
   $$1274 = $$1274$ph;
   while (1) {
    $120 = $$1271 + 20 | 0;
    $121 = HEAP32[$120 >> 2] | 0;
    if (!$121) {
     $123 = $$1271 + 16 | 0;
     $124 = HEAP32[$123 >> 2] | 0;
     if (!$124) break; else {
      $$1271$be = $124;
      $$1274$be = $123;
     }
    } else {
     $$1271$be = $121;
     $$1274$be = $120;
    }
    $$1271 = $$1271$be;
    $$1274 = $$1274$be;
   }
   if ($6 >>> 0 > $$1274 >>> 0) _abort(); else {
    HEAP32[$$1274 >> 2] = 0;
    $$3 = $$1271;
    break;
   }
  } else {
   $106 = HEAP32[$5 + 8 >> 2] | 0;
   if ($6 >>> 0 > $106 >>> 0) _abort();
   $108 = $106 + 12 | 0;
   if ((HEAP32[$108 >> 2] | 0) != ($5 | 0)) _abort();
   $111 = $103 + 8 | 0;
   if ((HEAP32[$111 >> 2] | 0) == ($5 | 0)) {
    HEAP32[$108 >> 2] = $103;
    HEAP32[$111 >> 2] = $106;
    $$3 = $103;
    break;
   } else _abort();
  } while (0);
  if ($101 | 0) {
   $129 = HEAP32[$5 + 28 >> 2] | 0;
   $130 = 17708 + ($129 << 2) | 0;
   do if ((HEAP32[$130 >> 2] | 0) == ($5 | 0)) {
    HEAP32[$130 >> 2] = $$3;
    if (!$$3) {
     HEAP32[4352] = HEAP32[4352] & ~(1 << $129);
     break L49;
    }
   } else if ((HEAP32[4355] | 0) >>> 0 > $101 >>> 0) _abort(); else {
    $139 = $101 + 16 | 0;
    HEAP32[((HEAP32[$139 >> 2] | 0) == ($5 | 0) ? $139 : $101 + 20 | 0) >> 2] = $$3;
    if (!$$3) break L49; else break;
   } while (0);
   $144 = HEAP32[4355] | 0;
   if ($144 >>> 0 > $$3 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $101;
   $147 = $5 + 16 | 0;
   $148 = HEAP32[$147 >> 2] | 0;
   do if ($148 | 0) if ($144 >>> 0 > $148 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $148;
    HEAP32[$148 + 24 >> 2] = $$3;
    break;
   } while (0);
   $154 = HEAP32[$147 + 4 >> 2] | 0;
   if ($154 | 0) if ((HEAP32[4355] | 0) >>> 0 > $154 >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $154;
    HEAP32[$154 + 24 >> 2] = $$3;
    break;
   }
  }
 } while (0);
 if ($75 >>> 0 < 16) {
  HEAP32[$2 >> 2] = $3 & 1 | $73 | 2;
  $165 = $0 + $73 + 4 | 0;
  HEAP32[$165 >> 2] = HEAP32[$165 >> 2] | 1;
  $$2 = $0;
  return $$2 | 0;
 } else {
  $168 = $0 + $1 | 0;
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
  HEAP32[$168 + 4 >> 2] = $75 | 3;
  $175 = $0 + $73 + 4 | 0;
  HEAP32[$175 >> 2] = HEAP32[$175 >> 2] | 1;
  _dispose_chunk($168, $75);
  $$2 = $0;
  return $$2 | 0;
 }
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$idx$i = 0, $$067 = 0, $$1 = 0, $101 = 0, $103 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $21 = 0, $23 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $34 = 0, $36 = 0, $4 = 0, $43 = 0, $44 = 0, $46 = 0, $50 = 0, $53 = 0, $54 = 0, $59 = 0, $60 = 0, $64 = 0, $66 = 0, $71 = 0, $8 = 0, $80 = 0, $81 = 0, $84 = 0, $85 = 0, $89 = 0, $90 = 0, $91 = 0, $96 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp + 8 | 0;
 $4 = sp;
 L1 : do if (($0 | 0) == ($1 | 0)) $$1 = $0; else switch (HEAP8[$0 >> 0] | 0) {
 case 84:
  {
   $8 = $2 + 4 | 0;
   $12 = ((HEAP32[$8 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
   $13 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   $14 = HEAP32[$8 >> 2] | 0;
   $17 = ($14 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
   $21 = $14;
   if (($13 | 0) != ($0 | 0) & ($17 | 0) == ($12 + 1 | 0)) {
    HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $21 + -24 | 0, $4);
    $23 = $2 + 20 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    if ($24 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
     HEAP32[$24 >> 2] = 0;
     $29 = $24 + 4 | 0;
     HEAP32[$29 >> 2] = 0;
     $30 = $24 + 8 | 0;
     HEAP32[$30 >> 2] = 0;
     HEAP32[$24 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
     HEAP32[$24 >> 2] = HEAP32[$3 >> 2];
     $34 = $3 + 4 | 0;
     HEAP32[$29 >> 2] = HEAP32[$34 >> 2];
     $36 = $3 + 8 | 0;
     HEAP32[$30 >> 2] = HEAP32[$36 >> 2];
     HEAP32[$36 >> 2] = 0;
     HEAP32[$34 >> 2] = 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
    $$1 = $13;
    break L1;
   }
   $$067 = $17;
   $43 = $21;
   while (1) {
    if (($$067 | 0) == ($12 | 0)) {
     $$1 = $0;
     break L1;
    }
    $$0$i$i$idx$i = 0;
    while (1) {
     if (($$0$i$i$idx$i | 0) == -1) break;
     $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($43 + ($$0$i$i$add$i * 24 | 0) | 0);
     $$0$i$i$idx$i = $$0$i$i$add$i;
    }
    $44 = $43 + -24 | 0;
    HEAP32[$8 >> 2] = $44;
    $$067 = $$067 + -1 | 0;
    $43 = $44;
   }
   break;
  }
 case 68:
  {
   $46 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   if (($46 | 0) == ($0 | 0)) {
    $$1 = $0;
    break L1;
   }
   $50 = HEAP32[$2 + 4 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($50 | 0)) {
    $$1 = $0;
    break L1;
   }
   HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
   __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $50 + -24 | 0, $4);
   $53 = $2 + 20 | 0;
   $54 = HEAP32[$53 >> 2] | 0;
   if ($54 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
    HEAP32[$54 >> 2] = 0;
    $59 = $54 + 4 | 0;
    HEAP32[$59 >> 2] = 0;
    $60 = $54 + 8 | 0;
    HEAP32[$60 >> 2] = 0;
    HEAP32[$54 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
    HEAP32[$54 >> 2] = HEAP32[$3 >> 2];
    $64 = $3 + 4 | 0;
    HEAP32[$59 >> 2] = HEAP32[$64 >> 2];
    $66 = $3 + 8 | 0;
    HEAP32[$60 >> 2] = HEAP32[$66 >> 2];
    HEAP32[$66 >> 2] = 0;
    HEAP32[$64 >> 2] = 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + 16;
   } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
   __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
   $$1 = $46;
   break L1;
   break;
  }
 case 83:
  {
   $71 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   if (($71 | 0) != ($0 | 0)) {
    $$1 = $71;
    break L1;
   }
   if (($1 - $0 | 0) <= 2) {
    $$1 = $0;
    break L1;
   }
   if ((HEAP8[$0 + 1 >> 0] | 0) != 116) {
    $$1 = $0;
    break L1;
   }
   $80 = $0 + 2 | 0;
   $81 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($80, $1, $2) | 0;
   if (($81 | 0) == ($80 | 0)) {
    $$1 = $0;
    break L1;
   }
   $84 = $2 + 4 | 0;
   $85 = HEAP32[$84 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($85 | 0)) {
    $$1 = $0;
    break L1;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($85 + -24 | 0, 0, 15413) | 0;
   $89 = (HEAP32[$84 >> 2] | 0) + -24 | 0;
   HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
   __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $89, $4);
   $90 = $2 + 20 | 0;
   $91 = HEAP32[$90 >> 2] | 0;
   if ($91 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
    HEAP32[$91 >> 2] = 0;
    $96 = $91 + 4 | 0;
    HEAP32[$96 >> 2] = 0;
    $97 = $91 + 8 | 0;
    HEAP32[$97 >> 2] = 0;
    HEAP32[$91 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
    HEAP32[$91 >> 2] = HEAP32[$3 >> 2];
    $101 = $3 + 4 | 0;
    HEAP32[$96 >> 2] = HEAP32[$101 >> 2];
    $103 = $3 + 8 | 0;
    HEAP32[$97 >> 2] = HEAP32[$103 >> 2];
    HEAP32[$103 >> 2] = 0;
    HEAP32[$101 >> 2] = 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + 16;
   } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
   __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
   $$1 = $81;
   break L1;
   break;
  }
 default:
  {
   $$1 = $0;
   break L1;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function ___floatscan($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0104122 = 0, $$0110 = 0, $$0111 = 0.0, $$1$lcssa = 0, $$1105118 = 0, $$1123 = 0, $$2 = 0, $$2106120 = 0, $$3107 = 0, $$3121 = 0, $$4 = 0, $$4108 = 0, $$5 = 0, $$6 = 0, $$in = 0, $103 = 0, $106 = 0, $117 = 0, $119 = 0, $12 = 0, $127 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $64 = 0, $73 = 0, $81 = 0, $86 = 0, $94 = 0, $trunc = 0, label = 0;
 switch ($1 | 0) {
 case 0:
  {
   $$0102 = -149;
   $$0103 = 24;
   label = 4;
   break;
  }
 case 1:
  {
   $$0102 = -1074;
   $$0103 = 53;
   label = 4;
   break;
  }
 case 2:
  {
   $$0102 = -1074;
   $$0103 = 53;
   label = 4;
   break;
  }
 default:
  $$0111 = 0.0;
 }
 L4 : do if ((label | 0) == 4) {
  $3 = $0 + 4 | 0;
  $4 = $0 + 100 | 0;
  do {
   $5 = HEAP32[$3 >> 2] | 0;
   if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $5 + 1;
    $12 = HEAPU8[$5 >> 0] | 0;
   } else $12 = ___shgetc($0) | 0;
  } while ((_isspace($12) | 0) != 0);
  L13 : do switch ($12 | 0) {
  case 43:
  case 45:
   {
    $18 = 1 - ((($12 | 0) == 45 & 1) << 1) | 0;
    $19 = HEAP32[$3 >> 2] | 0;
    if ($19 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $19 + 1;
     $$0 = HEAPU8[$19 >> 0] | 0;
     $$0110 = $18;
     break L13;
    } else {
     $$0 = ___shgetc($0) | 0;
     $$0110 = $18;
     break L13;
    }
    break;
   }
  default:
   {
    $$0 = $12;
    $$0110 = 1;
   }
  } while (0);
  $$0104122 = 0;
  $$1123 = $$0;
  while (1) {
   if (($$1123 | 32 | 0) != (HEAP8[11763 + $$0104122 >> 0] | 0)) {
    $$1$lcssa = $$1123;
    $trunc = $$0104122;
    break;
   }
   do if ($$0104122 >>> 0 < 7) {
    $32 = HEAP32[$3 >> 2] | 0;
    if ($32 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $32 + 1;
     $$2 = HEAPU8[$32 >> 0] | 0;
     break;
    } else {
     $$2 = ___shgetc($0) | 0;
     break;
    }
   } else $$2 = $$1123; while (0);
   $$0104122 = $$0104122 + 1 | 0;
   if ($$0104122 >>> 0 >= 8) {
    $$1$lcssa = $$2;
    $trunc = 8;
    break;
   } else $$1123 = $$2;
  }
  L29 : do switch ($trunc & 2147483647 | 0) {
  case 8:
   break;
  case 3:
   {
    label = 23;
    break;
   }
  default:
   {
    $42 = ($2 | 0) != 0;
    if ($42 & $trunc >>> 0 > 3) if (($trunc | 0) == 8) break L29; else {
     label = 23;
     break L29;
    }
    L34 : do if (!$trunc) {
     $$2106120 = 0;
     $$3121 = $$1$lcssa;
     while (1) {
      if (($$3121 | 32 | 0) != (HEAP8[12546 + $$2106120 >> 0] | 0)) {
       $$3107 = $$2106120;
       $$5 = $$3121;
       break L34;
      }
      do if ($$2106120 >>> 0 < 2) {
       $64 = HEAP32[$3 >> 2] | 0;
       if ($64 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $64 + 1;
        $$4 = HEAPU8[$64 >> 0] | 0;
        break;
       } else {
        $$4 = ___shgetc($0) | 0;
        break;
       }
      } else $$4 = $$3121; while (0);
      $$2106120 = $$2106120 + 1 | 0;
      if ($$2106120 >>> 0 >= 3) {
       $$3107 = 3;
       $$5 = $$4;
       break;
      } else $$3121 = $$4;
     }
    } else {
     $$3107 = $trunc;
     $$5 = $$1$lcssa;
    } while (0);
    switch ($$3107 | 0) {
    case 3:
     {
      $73 = HEAP32[$3 >> 2] | 0;
      if ($73 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $73 + 1;
       $81 = HEAPU8[$73 >> 0] | 0;
      } else $81 = ___shgetc($0) | 0;
      if (($81 | 0) != 40) {
       if (!(HEAP32[$4 >> 2] | 0)) {
        $$0111 = nan;
        break L4;
       }
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
       $$0111 = nan;
       break L4;
      }
      $$4108 = 1;
      while (1) {
       $86 = HEAP32[$3 >> 2] | 0;
       if ($86 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $86 + 1;
        $94 = HEAPU8[$86 >> 0] | 0;
       } else $94 = ___shgetc($0) | 0;
       if (!(($94 + -48 | 0) >>> 0 < 10 | ($94 + -65 | 0) >>> 0 < 26)) if (!(($94 | 0) == 95 | ($94 + -97 | 0) >>> 0 < 26)) break;
       $$4108 = $$4108 + 1 | 0;
      }
      if (($94 | 0) == 41) {
       $$0111 = nan;
       break L4;
      }
      $103 = (HEAP32[$4 >> 2] | 0) == 0;
      if (!$103) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
      if (!$42) {
       $106 = ___errno_location() | 0;
       HEAP32[$106 >> 2] = 22;
       ___shlim($0, 0);
       $$0111 = 0.0;
       break L4;
      }
      if (!$$4108) {
       $$0111 = nan;
       break L4;
      }
      $$in = $$4108;
      while (1) {
       $$in = $$in + -1 | 0;
       if (!$103) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
       if (!$$in) {
        $$0111 = nan;
        break L4;
       }
      }
      break;
     }
    case 0:
     {
      if (($$5 | 0) == 48) {
       $119 = HEAP32[$3 >> 2] | 0;
       if ($119 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $119 + 1;
        $127 = HEAPU8[$119 >> 0] | 0;
       } else $127 = ___shgetc($0) | 0;
       if (($127 | 32 | 0) == 120) {
        $$0111 = +_hexfloat($0, $$0103, $$0102, $$0110, $2);
        break L4;
       }
       if (!(HEAP32[$4 >> 2] | 0)) $$6 = 48; else {
        HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
        $$6 = 48;
       }
      } else $$6 = $$5;
      $$0111 = +_decfloat($0, $$6, $$0103, $$0102, $$0110, $2);
      break L4;
      break;
     }
    default:
     {
      if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
      $117 = ___errno_location() | 0;
      HEAP32[$117 >> 2] = 22;
      ___shlim($0, 0);
      $$0111 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 23) {
   $45 = (HEAP32[$4 >> 2] | 0) == 0;
   if (!$45) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
   if (($2 | 0) != 0 & $trunc >>> 0 > 3) {
    $$1105118 = $trunc;
    do {
     if (!$45) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
     $$1105118 = $$1105118 + -1 | 0;
    } while ($$1105118 >>> 0 > 3);
   }
  }
  $$0111 = +($$0110 | 0) * inf;
 } while (0);
 return +$$0111;
}

function _fmod($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172 = 0, $$174 = 0, $$275$lcssa = 0, $$27585 = 0, $$376$lcssa = 0, $$37682 = 0, $$lcssa = 0, $101 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $124 = 0, $126 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $150 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $97 = 0, $99 = 0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $1;
 $4 = HEAP32[tempDoublePtr >> 2] | 0;
 $5 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 $8 = $6 & 2047;
 $9 = _bitshift64Lshr($4 | 0, $5 | 0, 52) | 0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = _bitshift64Shl($4 | 0, $5 | 0, 1) | 0;
 $14 = tempRet0;
 L1 : do if (($13 | 0) == 0 & ($14 | 0) == 0) label = 3; else {
  $18 = ___DOUBLE_BITS_563($1) | 0;
  $20 = tempRet0 & 2147483647;
  if (($8 | 0) == 2047 | ($20 >>> 0 > 2146435072 | ($20 | 0) == 2146435072 & $18 >>> 0 > 0)) label = 3; else {
   $29 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
   $30 = tempRet0;
   if (!($30 >>> 0 > $14 >>> 0 | ($30 | 0) == ($14 | 0) & $29 >>> 0 > $13 >>> 0)) return +(($29 | 0) == ($13 | 0) & ($30 | 0) == ($14 | 0) ? $0 * 0.0 : $0);
   if (!$8) {
    $41 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
    $42 = tempRet0;
    if (($42 | 0) > -1 | ($42 | 0) == -1 & $41 >>> 0 > 4294967295) {
     $$073100 = 0;
     $49 = $41;
     $50 = $42;
     while (1) {
      $48 = $$073100 + -1 | 0;
      $49 = _bitshift64Shl($49 | 0, $50 | 0, 1) | 0;
      $50 = tempRet0;
      if (!(($50 | 0) > -1 | ($50 | 0) == -1 & $49 >>> 0 > 4294967295)) {
       $$073$lcssa = $48;
       break;
      } else $$073100 = $48;
     }
    } else $$073$lcssa = 0;
    $59 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $$073$lcssa | 0) | 0;
    $$174 = $$073$lcssa;
    $87 = $59;
    $88 = tempRet0;
   } else {
    $$174 = $8;
    $87 = $2;
    $88 = $3 & 1048575 | 1048576;
   }
   if (!$11) {
    $64 = _bitshift64Shl($4 | 0, $5 | 0, 12) | 0;
    $65 = tempRet0;
    if (($65 | 0) > -1 | ($65 | 0) == -1 & $64 >>> 0 > 4294967295) {
     $$07194 = 0;
     $72 = $64;
     $73 = $65;
     while (1) {
      $71 = $$07194 + -1 | 0;
      $72 = _bitshift64Shl($72 | 0, $73 | 0, 1) | 0;
      $73 = tempRet0;
      if (!(($73 | 0) > -1 | ($73 | 0) == -1 & $72 >>> 0 > 4294967295)) {
       $$071$lcssa = $71;
       break;
      } else $$07194 = $71;
     }
    } else $$071$lcssa = 0;
    $82 = _bitshift64Shl($4 | 0, $5 | 0, 1 - $$071$lcssa | 0) | 0;
    $$172 = $$071$lcssa;
    $89 = $82;
    $90 = tempRet0;
   } else {
    $$172 = $11;
    $89 = $4;
    $90 = $5 & 1048575 | 1048576;
   }
   $91 = _i64Subtract($87 | 0, $88 | 0, $89 | 0, $90 | 0) | 0;
   $92 = tempRet0;
   $97 = ($92 | 0) > -1 | ($92 | 0) == -1 & $91 >>> 0 > 4294967295;
   L25 : do if (($$174 | 0) > ($$172 | 0)) {
    $$27585 = $$174;
    $101 = $92;
    $158 = $97;
    $159 = $87;
    $160 = $88;
    $99 = $91;
    while (1) {
     if ($158) if (($99 | 0) == 0 & ($101 | 0) == 0) break; else {
      $104 = $99;
      $105 = $101;
     } else {
      $104 = $159;
      $105 = $160;
     }
     $106 = _bitshift64Shl($104 | 0, $105 | 0, 1) | 0;
     $107 = tempRet0;
     $108 = $$27585 + -1 | 0;
     $110 = _i64Subtract($106 | 0, $107 | 0, $89 | 0, $90 | 0) | 0;
     $111 = tempRet0;
     $116 = ($111 | 0) > -1 | ($111 | 0) == -1 & $110 >>> 0 > 4294967295;
     if (($108 | 0) > ($$172 | 0)) {
      $$27585 = $108;
      $101 = $111;
      $158 = $116;
      $159 = $106;
      $160 = $107;
      $99 = $110;
     } else {
      $$275$lcssa = $108;
      $$lcssa = $116;
      $118 = $110;
      $120 = $111;
      $156 = $106;
      $157 = $107;
      break L25;
     }
    }
    $$070 = $0 * 0.0;
    break L1;
   } else {
    $$275$lcssa = $$174;
    $$lcssa = $97;
    $118 = $91;
    $120 = $92;
    $156 = $87;
    $157 = $88;
   } while (0);
   if ($$lcssa) if (($118 | 0) == 0 & ($120 | 0) == 0) {
    $$070 = $0 * 0.0;
    break;
   } else {
    $124 = $120;
    $126 = $118;
   } else {
    $124 = $157;
    $126 = $156;
   }
   if ($124 >>> 0 < 1048576 | ($124 | 0) == 1048576 & $126 >>> 0 < 0) {
    $$37682 = $$275$lcssa;
    $130 = $126;
    $131 = $124;
    while (1) {
     $132 = _bitshift64Shl($130 | 0, $131 | 0, 1) | 0;
     $133 = tempRet0;
     $134 = $$37682 + -1 | 0;
     if ($133 >>> 0 < 1048576 | ($133 | 0) == 1048576 & $132 >>> 0 < 0) {
      $$37682 = $134;
      $130 = $132;
      $131 = $133;
     } else {
      $$376$lcssa = $134;
      $141 = $132;
      $142 = $133;
      break;
     }
    }
   } else {
    $$376$lcssa = $$275$lcssa;
    $141 = $126;
    $142 = $124;
   }
   if (($$376$lcssa | 0) > 0) {
    $143 = _i64Add($141 | 0, $142 | 0, 0, -1048576) | 0;
    $144 = tempRet0;
    $145 = _bitshift64Shl($$376$lcssa | 0, 0, 52) | 0;
    $153 = $144 | tempRet0;
    $154 = $143 | $145;
   } else {
    $150 = _bitshift64Lshr($141 | 0, $142 | 0, 1 - $$376$lcssa | 0) | 0;
    $153 = tempRet0;
    $154 = $150;
   }
   HEAP32[tempDoublePtr >> 2] = $154;
   HEAP32[tempDoublePtr + 4 >> 2] = $153 | $12;
   $$070 = +HEAPF64[tempDoublePtr >> 3];
  }
 } while (0);
 if ((label | 0) == 3) {
  $27 = $0 * $1;
  $$070 = $27 / $27;
 }
 return +$$070;
}

function __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i$i = 0, $$032$ph = 0, $$032$ph$be = 0, $$034 = 0, $$034$ph = 0, $$1 = 0, $$2 = 0, $$2$pn = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $55 = 0, $56 = 0, $60 = 0, $66 = 0, label = 0;
 $2 = $1 + 11 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $5 = $1 + 4 | 0;
 L1 : do if (!(($3 << 24 >> 24 < 0 ? HEAP32[$5 >> 2] | 0 : $3 & 255) | 0)) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0, $1); else {
  $10 = __ZNSt3__211char_traitsIcE6lengthEPKc(15939) | 0;
  $11 = HEAP8[$2 >> 0] | 0;
  if (($10 | 0) == (($11 << 24 >> 24 < 0 ? HEAP32[$5 >> 2] | 0 : $11 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($1, 15939, $10) | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1, 15951);
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 16022, __ZNSt3__211char_traitsIcE6lengthEPKc(16022) | 0);
   break;
  }
  $20 = __ZNSt3__211char_traitsIcE6lengthEPKc(16035) | 0;
  $21 = HEAP8[$2 >> 0] | 0;
  if (($20 | 0) == (($21 << 24 >> 24 < 0 ? HEAP32[$5 >> 2] | 0 : $21 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($1, 16035, $20) | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1, 16048);
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 16098, __ZNSt3__211char_traitsIcE6lengthEPKc(16098) | 0);
   break;
  }
  $30 = __ZNSt3__211char_traitsIcE6lengthEPKc(16112) | 0;
  $31 = HEAP8[$2 >> 0] | 0;
  if (($30 | 0) == (($31 << 24 >> 24 < 0 ? HEAP32[$5 >> 2] | 0 : $31 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($1, 16112, $30) | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1, 16125);
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 16175, __ZNSt3__211char_traitsIcE6lengthEPKc(16175) | 0);
   break;
  }
  $40 = __ZNSt3__211char_traitsIcE6lengthEPKc(16189) | 0;
  $41 = HEAP8[$2 >> 0] | 0;
  $43 = HEAP32[$5 >> 2] | 0;
  $44 = $41 & 255;
  do if (($40 | 0) == (($41 << 24 >> 24 < 0 ? $43 : $44) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($1, 16189, $40) | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1, 16203);
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 16254, __ZNSt3__211char_traitsIcE6lengthEPKc(16254) | 0);
   break L1;
  } else {
   $$pre = HEAP8[$2 >> 0] | 0;
   $$pre$phiZ2D = $$pre & 255;
   $51 = $$pre;
   $55 = HEAP32[$5 >> 2] | 0;
   break;
  } else {
   $$pre$phiZ2D = $44;
   $51 = $41;
   $55 = $43;
  } while (0);
  $50 = $51 << 24 >> 24 < 0;
  $53 = $50 ? HEAP32[$1 >> 2] | 0 : $1;
  $56 = $53 + ($50 ? $55 : $$pre$phiZ2D) | 0;
  do if ((HEAP8[$56 + -1 >> 0] | 0) == 62) {
   $$032$ph = 1;
   $$034$ph = $56;
   L24 : while (1) {
    $$034 = $$034$ph;
    L26 : while (1) {
     $60 = $$034 + -1 | 0;
     if (($60 | 0) == ($53 | 0)) break L24;
     switch (HEAP8[$$034 + -2 >> 0] | 0) {
     case 60:
      {
       label = 24;
       break L26;
       break;
      }
     case 62:
      {
       label = 25;
       break L26;
       break;
      }
     default:
      $$034 = $60;
     }
    }
    if ((label | 0) == 24) {
     label = 0;
     $66 = $$032$ph + -1 | 0;
     if (!$66) {
      label = 27;
      break;
     } else $$032$ph$be = $66;
    } else if ((label | 0) == 25) {
     label = 0;
     $$032$ph$be = $$032$ph + 1 | 0;
    }
    $$032$ph = $$032$ph$be;
    $$034$ph = $60;
   }
   if ((label | 0) == 27) {
    $$2 = $$034 + -2 | 0;
    break;
   };
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   $$0$i$i = 0;
   while (1) {
    if (($$0$i$i | 0) == 3) break L1;
    HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
    $$0$i$i = $$0$i$i + 1 | 0;
   }
  } else $$2 = $56; while (0);
  $$2$pn = $$2;
  while (1) {
   $$0 = $$2$pn + -1 | 0;
   if (($$0 | 0) == ($53 | 0)) {
    $$1 = $53;
    break;
   }
   if ((HEAP8[$$0 >> 0] | 0) == 58) {
    $$1 = $$2$pn;
    break;
   } else $$2$pn = $$0;
  }
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($0, $$1, $$2);
 } while (0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_local_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i79 = 0, $$0$i$i$add$i83 = 0, $$0$i$i$add$i88 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i78 = 0, $$0$i$i$idx$i82 = 0, $$0$i$i$idx$i87 = 0, $$4 = 0, $13 = 0, $18 = 0, $21 = 0, $24 = 0, $26 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $41 = 0, $48 = 0, $49 = 0, $56 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $70 = 0, $77 = 0, $78 = 0, $8 = 0, $85 = 0, $86 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 L1 : do if (($0 | 0) == ($1 | 0)) $$4 = $0; else if ((HEAP8[$0 >> 0] | 0) == 90) {
  $7 = $0 + 1 | 0;
  $8 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($7, $1, $2) | 0;
  if (($8 | 0) == ($7 | 0) | ($8 | 0) == ($1 | 0)) $$4 = $0; else if ((HEAP8[$8 >> 0] | 0) == 69) {
   $13 = $8 + 1 | 0;
   if (($13 | 0) == ($1 | 0)) $$4 = $0; else switch (HEAP8[$13 >> 0] | 0) {
   case 115:
    {
     $18 = __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($8 + 2 | 0, $1) | 0;
     $21 = HEAP32[$2 + 4 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($21 | 0)) {
      $$4 = $18;
      break L1;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($21 + -24 | 0, 16478) | 0;
     $$4 = $18;
     break L1;
     break;
    }
   case 100:
    {
     $24 = $8 + 2 | 0;
     if (($24 | 0) == ($1 | 0)) {
      $$4 = $0;
      break L1;
     }
     $26 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($24, $1) | 0;
     if (($26 | 0) == ($1 | 0)) {
      $$4 = $0;
      break L1;
     }
     if ((HEAP8[$26 >> 0] | 0) != 95) {
      $$4 = $0;
      break L1;
     }
     $30 = $26 + 1 | 0;
     $31 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($30, $1, $2) | 0;
     $33 = $2 + 4 | 0;
     if (($31 | 0) == ($30 | 0)) {
      $56 = HEAP32[$33 >> 2] | 0;
      $$0$i$i$idx$i78 = 0;
      while (1) {
       if (($$0$i$i$idx$i78 | 0) == -1) break;
       $$0$i$i$add$i79 = $$0$i$i$idx$i78 + -1 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($56 + ($$0$i$i$add$i79 * 24 | 0) | 0);
       $$0$i$i$idx$i78 = $$0$i$i$add$i79;
      }
      HEAP32[$33 >> 2] = $56 + -24;
      $$4 = $0;
      break L1;
     }
     $34 = HEAP32[$33 >> 2] | 0;
     if ((($34 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$4 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $34 + -24 | 0);
     $41 = HEAP32[$33 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($41 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$33 >> 2] = $41 + -24;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($41 + -48 | 0, 15191) | 0;
     $48 = HEAP8[$3 + 11 >> 0] | 0;
     $49 = $48 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$33 >> 2] | 0) + -24 | 0, $49 ? HEAP32[$3 >> 2] | 0 : $3, $49 ? HEAP32[$3 + 4 >> 2] | 0 : $48 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$4 = $31;
     break L1;
     break;
    }
   default:
    {
     $59 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
     if (($59 | 0) == ($13 | 0)) {
      $85 = $2 + 4 | 0;
      $86 = HEAP32[$85 >> 2] | 0;
      $$0$i$i$idx$i87 = 0;
      while (1) {
       if (($$0$i$i$idx$i87 | 0) == -1) break;
       $$0$i$i$add$i88 = $$0$i$i$idx$i87 + -1 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($86 + ($$0$i$i$add$i88 * 24 | 0) | 0);
       $$0$i$i$idx$i87 = $$0$i$i$add$i88;
      }
      HEAP32[$85 >> 2] = $86 + -24;
      $$4 = $0;
      break L1;
     }
     $61 = __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($59, $1) | 0;
     $62 = $2 + 4 | 0;
     $63 = HEAP32[$62 >> 2] | 0;
     if ((($63 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$4 = $61;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $63 + -24 | 0);
     $70 = HEAP32[$62 >> 2] | 0;
     $$0$i$i$idx$i82 = 0;
     while (1) {
      if (($$0$i$i$idx$i82 | 0) == -1) break;
      $$0$i$i$add$i83 = $$0$i$i$idx$i82 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($70 + ($$0$i$i$add$i83 * 24 | 0) | 0);
      $$0$i$i$idx$i82 = $$0$i$i$add$i83;
     }
     HEAP32[$62 >> 2] = $70 + -24;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($70 + -48 | 0, 15191) | 0;
     $77 = HEAP8[$3 + 11 >> 0] | 0;
     $78 = $77 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$62 >> 2] | 0) + -24 | 0, $78 ? HEAP32[$3 >> 2] | 0 : $3, $78 ? HEAP32[$3 + 4 >> 2] | 0 : $77 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$4 = $61;
     break L1;
    }
   }
  } else $$4 = $0;
 } else $$4 = $0; while (0);
 STACKTOP = sp;
 return $$4 | 0;
}

function _arVecTridiagonalize($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0158 = 0, $$0160 = 0, $$0164 = 0, $$0165 = 0.0, $$1 = 0, $$1$in = 0, $$1$in$ph = 0, $$1159 = 0, $$1161 = 0, $$1161$in = 0, $$1166 = 0.0, $$2 = 0, $$2162 = 0, $$3 = 0, $$3163 = 0, $$pre$phiZ2D = 0, $$sink = 0.0, $$sink171 = 0, $106 = 0, $107 = 0, $110 = 0, $114 = 0, $117 = 0, $118 = 0, $121 = 0, $124 = 0.0, $131 = 0, $17 = 0, $18 = 0, $19 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $4 = 0, $41 = 0, $46 = 0.0, $48 = 0, $57 = 0.0, $6 = 0, $65 = 0.0, $68 = 0.0, $70 = 0, $71 = 0, $73 = 0.0, $74 = 0, $85 = 0, $90 = 0, $91 = 0, $95 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp + 8 | 0;
 $4 = sp;
 $6 = HEAP32[$0 + 8 >> 2] | 0;
 L1 : do if (($6 | 0) == (HEAP32[$0 + 4 >> 2] | 0)) if (($6 | 0) == (HEAP32[$1 + 4 >> 2] | 0)) if (($6 | 0) == ((HEAP32[$2 + 4 >> 2] | 0) + 1 | 0)) {
  $17 = $6 + -2 | 0;
  $18 = $3 + 4 | 0;
  $19 = $4 + 4 | 0;
  $$0 = 0;
  while (1) {
   if (($$0 | 0) >= ($17 | 0)) break;
   $23 = (HEAP32[$0 >> 2] | 0) + ((Math_imul($$0, $6) | 0) << 3) | 0;
   HEAPF64[(HEAP32[$1 >> 2] | 0) + ($$0 << 3) >> 3] = +HEAPF64[$23 + ($$0 << 3) >> 3];
   $29 = $6 - $$0 + -1 | 0;
   HEAP32[$18 >> 2] = $29;
   $30 = $$0 + 1 | 0;
   $31 = $23 + ($30 << 3) | 0;
   HEAP32[$3 >> 2] = $31;
   $32 = +_arVecHousehold($3);
   HEAPF64[(HEAP32[$2 >> 2] | 0) + ($$0 << 3) >> 3] = $32;
   L8 : do if (!($32 == 0.0)) {
    $$0160 = $30;
    while (1) {
     if (($$0160 | 0) >= ($6 | 0)) break;
     $$0158 = $30;
     $$0165 = 0.0;
     while (1) {
      if ($$0158 >>> 0 >= $$0160 >>> 0) break;
      $41 = (HEAP32[$0 >> 2] | 0) + ((Math_imul($$0158, $6) | 0) + $$0160 << 3) | 0;
      $46 = $$0165 + +HEAPF64[$41 >> 3] * +HEAPF64[$23 + ($$0158 << 3) >> 3];
      $$0158 = $$0158 + 1 | 0;
      $$0165 = $46;
     }
     $48 = Math_imul($$0160, $6) | 0;
     $$1159 = $$0160;
     $$1166 = $$0165;
     while (1) {
      if (($$1159 | 0) >= ($6 | 0)) break;
      $57 = $$1166 + +HEAPF64[(HEAP32[$0 >> 2] | 0) + ($$1159 + $48 << 3) >> 3] * +HEAPF64[$23 + ($$1159 << 3) >> 3];
      $$1159 = $$1159 + 1 | 0;
      $$1166 = $57;
     }
     HEAPF64[(HEAP32[$1 >> 2] | 0) + ($$0160 << 3) >> 3] = $$1166;
     $$0160 = $$0160 + 1 | 0;
    }
    HEAP32[$19 >> 2] = $29;
    HEAP32[$18 >> 2] = $29;
    HEAP32[$3 >> 2] = $31;
    HEAP32[$4 >> 2] = (HEAP32[$1 >> 2] | 0) + ($30 << 3);
    $65 = +_arVecInnerproduct($3, $4) * .5;
    $$1161$in = $6;
    while (1) {
     $$1161 = $$1161$in + -1 | 0;
     if (($$1161 | 0) <= ($$0 | 0)) break L8;
     $68 = +HEAPF64[$23 + ($$1161 << 3) >> 3];
     $70 = HEAP32[$1 >> 2] | 0;
     $71 = $70 + ($$1161 << 3) | 0;
     $73 = +HEAPF64[$71 >> 3] - $65 * $68;
     HEAPF64[$71 >> 3] = $73;
     $74 = Math_imul($$1161, $6) | 0;
     $$2 = $$1161;
     while (1) {
      if (($$2 | 0) >= ($6 | 0)) break;
      $85 = (HEAP32[$0 >> 2] | 0) + ($$2 + $74 << 3) | 0;
      HEAPF64[$85 >> 3] = +HEAPF64[$85 >> 3] - ($68 * +HEAPF64[$70 + ($$2 << 3) >> 3] + $73 * +HEAPF64[$23 + ($$2 << 3) >> 3]);
      $$2 = $$2 + 1 | 0;
     }
     $$1161$in = $$1161;
    }
   } while (0);
   $$0 = $30;
  }
  if (($6 | 0) > 1) {
   $90 = HEAP32[$0 >> 2] | 0;
   $91 = Math_imul($17, $6) | 0;
   $95 = HEAP32[$1 >> 2] | 0;
   HEAPF64[$95 + ($17 << 3) >> 3] = +HEAPF64[$90 + ($91 + $17 << 3) >> 3];
   $97 = $6 + -1 | 0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + ($17 << 3) >> 3] = +HEAPF64[$90 + ($97 + $91 << 3) >> 3];
   $$pre$phiZ2D = $97;
   $107 = $90;
   $110 = $95;
   label = 27;
  } else if (($6 | 0) == 1) {
   $$pre$phiZ2D = 0;
   $107 = HEAP32[$0 >> 2] | 0;
   $110 = HEAP32[$1 >> 2] | 0;
   label = 27;
  } else $$1$in = $6;
  if ((label | 0) == 27) {
   $106 = $107 + ((Math_imul($$pre$phiZ2D, $6) | 0) + $$pre$phiZ2D << 3) | 0;
   $$1$in$ph = $6;
   $$sink = +HEAPF64[$106 >> 3];
   $$sink171 = $110 + ($$pre$phiZ2D << 3) | 0;
   label = 28;
  }
  while (1) {
   if ((label | 0) == 28) {
    label = 0;
    HEAPF64[$$sink171 >> 3] = $$sink;
    $$1$in = $$1$in$ph;
   }
   $$1 = $$1$in + -1 | 0;
   if (($$1$in | 0) <= 0) {
    $$0164 = 0;
    break L1;
   }
   $114 = (HEAP32[$0 >> 2] | 0) + ((Math_imul($$1, $6) | 0) << 3) | 0;
   L42 : do if (($$1$in | 0) <= ($17 | 0)) {
    $117 = $6 - $$1 + -1 | 0;
    $118 = $114 + ($$1$in << 3) | 0;
    $$2162 = $$1$in;
    while (1) {
     if (($$2162 | 0) >= ($6 | 0)) break L42;
     HEAP32[$19 >> 2] = $117;
     HEAP32[$18 >> 2] = $117;
     HEAP32[$3 >> 2] = $118;
     $121 = Math_imul($$2162, $6) | 0;
     HEAP32[$4 >> 2] = (HEAP32[$0 >> 2] | 0) + ($121 + $$1$in << 3);
     $124 = +_arVecInnerproduct($3, $4);
     $$3 = $$1$in;
     while (1) {
      if (($$3 | 0) >= ($6 | 0)) break;
      $131 = (HEAP32[$0 >> 2] | 0) + ($$3 + $121 << 3) | 0;
      HEAPF64[$131 >> 3] = +HEAPF64[$131 >> 3] - $124 * +HEAPF64[$114 + ($$3 << 3) >> 3];
      $$3 = $$3 + 1 | 0;
     }
     $$2162 = $$2162 + 1 | 0;
    }
   } while (0);
   $$3163 = 0;
   while (1) {
    if (($$3163 | 0) >= ($6 | 0)) break;
    HEAPF64[$114 + ($$3163 << 3) >> 3] = 0.0;
    $$3163 = $$3163 + 1 | 0;
   }
   $$1$in$ph = $$1;
   $$sink = 1.0;
   $$sink171 = $114 + ($$1 << 3) | 0;
   label = 28;
  }
 } else $$0164 = -1; else $$0164 = -1; else $$0164 = -1; while (0);
 STACKTOP = sp;
 return $$0164 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i91 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i90 = 0, $$3 = 0, $14 = 0, $16 = 0, $18 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $34 = 0, $35 = 0, $39 = 0, $4 = 0, $41 = 0, $46 = 0, $48 = 0, $55 = 0, $60 = 0, $61 = 0, $68 = 0, $73 = 0, $75 = 0, $76 = 0, $83 = 0, $88 = 0, $89 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp + 8 | 0;
 $4 = sp;
 L1 : do if (($1 - $0 | 0) > 1) {
  $spec$select = (HEAP8[$0 >> 0] | 0) == 76 ? $0 + 1 | 0 : $0;
  switch (HEAP8[$spec$select >> 0] | 0) {
  case 78:
   {
    $14 = __ZN10__cxxabiv112_GLOBAL__N_117parse_nested_nameINS0_2DbEEEPKcS4_S4_RT_($spec$select, $1, $2) | 0;
    $$3 = ($14 | 0) == ($spec$select | 0) ? $0 : $14;
    break L1;
    break;
   }
  case 90:
   {
    $16 = __ZN10__cxxabiv112_GLOBAL__N_116parse_local_nameINS0_2DbEEEPKcS4_S4_RT_($spec$select, $1, $2) | 0;
    $$3 = ($16 | 0) == ($spec$select | 0) ? $0 : $16;
    break L1;
    break;
   }
  default:
   {
    $18 = __ZN10__cxxabiv112_GLOBAL__N_119parse_unscoped_nameINS0_2DbEEEPKcS4_S4_RT_($spec$select, $1, $2) | 0;
    if (($18 | 0) == ($spec$select | 0)) {
     $68 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($spec$select, $1, $2) | 0;
     if (($68 | 0) == ($spec$select | 0) | ($68 | 0) == ($1 | 0)) {
      $$3 = $0;
      break L1;
     }
     if ((HEAP8[$68 >> 0] | 0) != 73) {
      $$3 = $0;
      break L1;
     }
     $73 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($68, $1, $2) | 0;
     if (($73 | 0) == ($68 | 0)) {
      $$3 = $0;
      break L1;
     }
     $75 = $2 + 4 | 0;
     $76 = HEAP32[$75 >> 2] | 0;
     if ((($76 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$3 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $76 + -24 | 0);
     $83 = HEAP32[$75 >> 2] | 0;
     $$0$i$i$idx$i90 = 0;
     while (1) {
      if (($$0$i$i$idx$i90 | 0) == -1) break;
      $$0$i$i$add$i91 = $$0$i$i$idx$i90 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($83 + ($$0$i$i$add$i91 * 24 | 0) | 0);
      $$0$i$i$idx$i90 = $$0$i$i$add$i91;
     }
     HEAP32[$75 >> 2] = $83 + -24;
     $88 = HEAP8[$3 + 11 >> 0] | 0;
     $89 = $88 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($83 + -48 | 0, $89 ? HEAP32[$3 >> 2] | 0 : $3, $89 ? HEAP32[$3 + 4 >> 2] | 0 : $88 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $73;
     break L1;
    }
    if (($18 | 0) == ($1 | 0)) {
     $$3 = $1;
     break L1;
    }
    if ((HEAP8[$18 >> 0] | 0) != 73) {
     $$3 = $18;
     break L1;
    }
    $24 = $2 + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($25 | 0)) {
     $$3 = $0;
     break L1;
    }
    HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $25 + -24 | 0, $4);
    $28 = $2 + 20 | 0;
    $29 = HEAP32[$28 >> 2] | 0;
    if ($29 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
     HEAP32[$29 >> 2] = 0;
     $34 = $29 + 4 | 0;
     HEAP32[$34 >> 2] = 0;
     $35 = $29 + 8 | 0;
     HEAP32[$35 >> 2] = 0;
     HEAP32[$29 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
     HEAP32[$29 >> 2] = HEAP32[$3 >> 2];
     $39 = $3 + 4 | 0;
     HEAP32[$34 >> 2] = HEAP32[$39 >> 2];
     $41 = $3 + 8 | 0;
     HEAP32[$35 >> 2] = HEAP32[$41 >> 2];
     HEAP32[$41 >> 2] = 0;
     HEAP32[$39 >> 2] = 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
    $46 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($18, $1, $2) | 0;
    if (($46 | 0) == ($18 | 0)) {
     $$3 = $0;
     break L1;
    }
    $48 = HEAP32[$24 >> 2] | 0;
    if ((($48 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$3 = $0;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $48 + -24 | 0);
    $55 = HEAP32[$24 >> 2] | 0;
    $$0$i$i$idx$i = 0;
    while (1) {
     if (($$0$i$i$idx$i | 0) == -1) break;
     $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($55 + ($$0$i$i$add$i * 24 | 0) | 0);
     $$0$i$i$idx$i = $$0$i$i$add$i;
    }
    HEAP32[$24 >> 2] = $55 + -24;
    $60 = HEAP8[$3 + 11 >> 0] | 0;
    $61 = $60 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($55 + -48 | 0, $61 ? HEAP32[$3 >> 2] | 0 : $3, $61 ? HEAP32[$3 + 4 >> 2] | 0 : $60 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = $46;
    break L1;
   }
  }
 } else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function _arGetContour($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0137 = 0, $$0138 = 0, $$0140 = 0, $$0141 = 0, $$0143 = 0, $$1 = 0, $$1144 = 0, $$1144$in = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $10 = 0, $103 = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $39 = 0, $40 = 0, $42 = 0, $51 = 0, $53 = 0, $54 = 0, $59 = 0, $61 = 0, $62 = 0, $68 = 0, $7 = 0, $73 = 0, $74 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $91 = 0, $94 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80032 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80032);
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $7 = sp + 40024 | 0;
 $8 = sp + 24 | 0;
 $10 = HEAP32[$5 + 8 >> 2] | 0;
 $11 = Math_imul($10, $1) | 0;
 $12 = HEAP32[$5 >> 2] | 0;
 $16 = HEAP32[$5 + 4 >> 2] | 0;
 $$0137 = $12;
 $$0140 = $0 + ($11 + $12 << 1) | 0;
 while (1) {
  if (($$0137 | 0) > ($16 | 0)) {
   label = 7;
   break;
  }
  $18 = HEAP16[$$0140 >> 1] | 0;
  if ($18 << 16 >> 16 > 0) if ((HEAP32[$3 + (($18 << 16 >> 16) + -1 << 2) >> 2] | 0) == ($4 | 0)) {
   label = 6;
   break;
  }
  $$0137 = $$0137 + 1 | 0;
  $$0140 = $$0140 + 2 | 0;
 }
 do if ((label | 0) == 6) if (($$0137 | 0) == -1) label = 7; else {
  $28 = $6 + 24 | 0;
  HEAP32[$28 >> 2] = 1;
  $29 = $6 + 28 | 0;
  HEAP32[$29 >> 2] = $$0137;
  $30 = $6 + 40028 | 0;
  HEAP32[$30 >> 2] = $10;
  $$0143 = 5;
  $32 = $10;
  $34 = $$0137;
  $53 = 1;
  while (1) {
   $35 = $0 + ((Math_imul($32, $1) | 0) + $34 << 1) | 0;
   $$1 = 0;
   $$1144$in = $$0143 + 5 | 0;
   while (1) {
    $$1144 = ($$1144$in | 0) % 8 | 0;
    if ($$1 >>> 0 >= 8) {
     label = 13;
     break;
    }
    $39 = HEAP32[444 + ($$1144 << 2) >> 2] | 0;
    $40 = Math_imul($39, $1) | 0;
    $42 = HEAP32[476 + ($$1144 << 2) >> 2] | 0;
    if ((HEAP16[$35 + ($40 + $42 << 1) >> 1] | 0) > 0) {
     $51 = $42;
     $59 = $39;
     break;
    }
    $$1 = $$1 + 1 | 0;
    $$1144$in = $$1144 + 1 | 0;
   }
   if ((label | 0) == 13) {
    label = 0;
    if (($$1 | 0) == 8) {
     label = 15;
     break;
    }
    $51 = HEAP32[476 + ($$1144 << 2) >> 2] | 0;
    $59 = HEAP32[444 + ($$1144 << 2) >> 2] | 0;
   }
   HEAP32[$6 + 28 + ($53 << 2) >> 2] = $51 + $34;
   $54 = HEAP32[$28 >> 2] | 0;
   HEAP32[$6 + 40028 + ($54 << 2) >> 2] = $59 + (HEAP32[$6 + 40028 + ($54 + -1 << 2) >> 2] | 0);
   $61 = HEAP32[$28 >> 2] | 0;
   $62 = $6 + 28 + ($61 << 2) | 0;
   if ((HEAP32[$62 >> 2] | 0) == ($$0137 | 0)) if ((HEAP32[$6 + 40028 + ($61 << 2) >> 2] | 0) == ($10 | 0)) {
    label = 18;
    break;
   }
   $68 = $61 + 1 | 0;
   HEAP32[$28 >> 2] = $68;
   if (($68 | 0) == 9999) {
    label = 21;
    break;
   }
   $$0143 = $$1144;
   $32 = HEAP32[$6 + 40028 + ($61 << 2) >> 2] | 0;
   $34 = HEAP32[$62 >> 2] | 0;
   $53 = $68;
  }
  if ((label | 0) == 15) {
   _arLog(0, 3, 3968, $vararg_buffer1);
   $$0 = -1;
   break;
  } else if ((label | 0) == 18) {
   $$0138 = 0;
   $$0141 = 0;
   $$2 = 1;
   while (1) {
    if (($$2 | 0) >= ($61 | 0)) break;
    $73 = (HEAP32[$6 + 28 + ($$2 << 2) >> 2] | 0) - $$0137 | 0;
    $74 = Math_imul($73, $73) | 0;
    $77 = (HEAP32[$6 + 40028 + ($$2 << 2) >> 2] | 0) - $10 | 0;
    $79 = (Math_imul($77, $77) | 0) + $74 | 0;
    $80 = ($79 | 0) > ($$0141 | 0);
    $$0138 = $80 ? $$2 : $$0138;
    $$0141 = $80 ? $79 : $$0141;
    $$2 = $$2 + 1 | 0;
   }
   $$3 = 0;
   while (1) {
    if (($$3 | 0) >= ($$0138 | 0)) break;
    HEAP32[$7 + ($$3 << 2) >> 2] = HEAP32[$6 + 28 + ($$3 << 2) >> 2];
    HEAP32[$8 + ($$3 << 2) >> 2] = HEAP32[$6 + 40028 + ($$3 << 2) >> 2];
    $$3 = $$3 + 1 | 0;
   }
   $$4 = $$0138;
   $91 = $61;
   while (1) {
    if (($$4 | 0) >= ($91 | 0)) break;
    $94 = $$4 - $$0138 | 0;
    HEAP32[$6 + 28 + ($94 << 2) >> 2] = HEAP32[$6 + 28 + ($$4 << 2) >> 2];
    HEAP32[$6 + 40028 + ($94 << 2) >> 2] = HEAP32[$6 + 40028 + ($$4 << 2) >> 2];
    $$4 = $$4 + 1 | 0;
    $91 = HEAP32[$28 >> 2] | 0;
   }
   $$5 = 0;
   while (1) {
    if (($$5 | 0) >= ($$0138 | 0)) break;
    $103 = $$5 - $$0138 | 0;
    HEAP32[$6 + 28 + ((HEAP32[$28 >> 2] | 0) + $103 << 2) >> 2] = HEAP32[$7 + ($$5 << 2) >> 2];
    HEAP32[$6 + 40028 + ((HEAP32[$28 >> 2] | 0) + $103 << 2) >> 2] = HEAP32[$8 + ($$5 << 2) >> 2];
    $$5 = $$5 + 1 | 0;
   }
   HEAP32[$6 + 28 + (HEAP32[$28 >> 2] << 2) >> 2] = HEAP32[$29 >> 2];
   HEAP32[$6 + 40028 + (HEAP32[$28 >> 2] << 2) >> 2] = HEAP32[$30 >> 2];
   HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 1;
   $$0 = 0;
   break;
  } else if ((label | 0) == 21) {
   _arLog(0, 3, 3975, $vararg_buffer3);
   $$0 = -1;
   break;
  }
 } while (0);
 if ((label | 0) == 7) {
  _arLog(0, 3, 3961, $vararg_buffer);
  $$0 = -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}
function _arPattLoadFromBuffer($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0140 = 0, $$0141 = 0, $$0143 = 0, $$0146 = 0, $$0149 = 0, $$0150 = 0, $$0151 = 0, $$0152 = 0, $$1 = 0, $$1142 = 0, $$1144 = 0, $$1147 = 0, $$2 = 0, $$2145 = 0, $$2148 = 0, $$3 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $44 = 0, $47 = 0, $51 = 0, $57 = 0, $6 = 0, $64 = 0, $67 = 0, $69 = 0, $75 = 0, $77 = 0, $79 = 0, $82 = 0.0, $87 = 0, $92 = 0, $94 = 0, $96 = 0, $99 = 0.0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 do if (!$0) {
  _arLog(0, 3, 4208, sp);
  $$0 = -1;
 } else {
  if (!$1) {
   _arLog(0, 3, 4233, $vararg_buffer1);
   $$0 = -1;
   break;
  }
  $4 = $0 + 8 | 0;
  $6 = HEAP32[$0 + 4 >> 2] | 0;
  $$0146 = 0;
  while (1) {
   if (($$0146 | 0) >= ($6 | 0)) break;
   if (!(HEAP32[(HEAP32[$4 >> 2] | 0) + ($$0146 << 2) >> 2] | 0)) break;
   $$0146 = $$0146 + 1 | 0;
  }
  if (($$0146 | 0) == ($6 | 0)) $$0 = -1; else {
   $14 = ___strdup($1) | 0;
   if (!$14) {
    _arLog(0, 3, 4278, $vararg_buffer3);
    $$0 = -1;
    break;
   }
   $17 = $0 + 28 | 0;
   $18 = $0 + 12 | 0;
   $19 = $$0146 << 2;
   $20 = $0 + 20 | 0;
   $21 = $0 + 16 | 0;
   $22 = $0 + 24 | 0;
   $$0140 = _strtok($14, 4301) | 0;
   $$0152 = 0;
   L16 : while (1) {
    if ($$0152 >>> 0 >= 4) {
     label = 36;
     break;
    }
    $24 = $$0152 + $19 | 0;
    $$0143 = 0;
    $$0149 = 0;
    $$1 = $$0140;
    while (1) {
     if ($$0149 >>> 0 >= 3) break;
     $26 = ($$0149 | 0) == 0;
     $27 = ($$0149 | 0) == 2;
     $$0150 = 0;
     $$1144 = $$0143;
     $$2 = $$1;
     $29 = HEAP32[$17 >> 2] | 0;
     while (1) {
      if (($$0150 | 0) >= ($29 | 0)) break;
      $$0151 = 0;
      $$2145 = $$1144;
      $$3 = $$2;
      $31 = $29;
      while (1) {
       if (($$0151 | 0) >= ($31 | 0)) break;
       if (!$$3) {
        label = 21;
        break L16;
       }
       $33 = _atoi($$3) | 0;
       $34 = _strtok(0, 4301) | 0;
       $35 = 255 - $33 | 0;
       $44 = (HEAP32[(HEAP32[$18 >> 2] | 0) + ($24 << 2) >> 2] | 0) + ((((Math_imul(HEAP32[$17 >> 2] | 0, $$0150) | 0) + $$0151 | 0) * 3 | 0) + $$0149 << 2) | 0;
       HEAP32[$44 >> 2] = $35;
       $47 = HEAP32[(HEAP32[$20 >> 2] | 0) + ($24 << 2) >> 2] | 0;
       $51 = $47 + ((Math_imul(HEAP32[$17 >> 2] | 0, $$0150) | 0) + $$0151 << 2) | 0;
       if ($26) HEAP32[$51 >> 2] = $35; else {
        HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + $35;
        if ($27) {
         $57 = $47 + ((Math_imul(HEAP32[$17 >> 2] | 0, $$0150) | 0) + $$0151 << 2) | 0;
         HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) / 3 | 0;
        }
       }
       $$0151 = $$0151 + 1 | 0;
       $$2145 = $35 + $$2145 | 0;
       $$3 = $34;
       $31 = HEAP32[$17 >> 2] | 0;
      }
      $$0150 = $$0150 + 1 | 0;
      $$1144 = $$2145;
      $$2 = $$3;
      $29 = $31;
     }
     $$0143 = $$1144;
     $$0149 = $$0149 + 1 | 0;
     $$1 = $$2;
    }
    $64 = HEAP32[$17 >> 2] | 0;
    $67 = ($$0143 | 0) / (Math_imul($64 * 3 | 0, $64) | 0) | 0;
    $$0141 = 0;
    $$1147 = 0;
    $69 = $64;
    while (1) {
     if ($$1147 >>> 0 >= (Math_imul($69 * 3 | 0, $69) | 0) >>> 0) break;
     $75 = (HEAP32[(HEAP32[$18 >> 2] | 0) + ($24 << 2) >> 2] | 0) + ($$1147 << 2) | 0;
     $77 = (HEAP32[$75 >> 2] | 0) - $67 | 0;
     HEAP32[$75 >> 2] = $77;
     $79 = (Math_imul($77, $77) | 0) + $$0141 | 0;
     $$0141 = $79;
     $$1147 = $$1147 + 1 | 0;
     $69 = HEAP32[$17 >> 2] | 0;
    }
    $82 = +Math_sqrt(+(+($$0141 | 0)));
    HEAPF64[(HEAP32[$21 >> 2] | 0) + ($24 << 3) >> 3] = $82 == 0.0 ? 1.0e-07 : $82;
    $$1142 = 0;
    $$2148 = 0;
    $87 = $69;
    while (1) {
     if ($$2148 >>> 0 >= (Math_imul($87, $87) | 0) >>> 0) break;
     $92 = (HEAP32[(HEAP32[$20 >> 2] | 0) + ($24 << 2) >> 2] | 0) + ($$2148 << 2) | 0;
     $94 = (HEAP32[$92 >> 2] | 0) - $67 | 0;
     HEAP32[$92 >> 2] = $94;
     $96 = (Math_imul($94, $94) | 0) + $$1142 | 0;
     $$1142 = $96;
     $$2148 = $$2148 + 1 | 0;
     $87 = HEAP32[$17 >> 2] | 0;
    }
    $99 = +Math_sqrt(+(+($$1142 | 0)));
    HEAPF64[(HEAP32[$22 >> 2] | 0) + ($24 << 3) >> 3] = $99 == 0.0 ? 1.0e-07 : $99;
    $$0140 = $$1;
    $$0152 = $$0152 + 1 | 0;
   }
   if ((label | 0) == 21) {
    _arLog(0, 3, 4306, $vararg_buffer5);
    _free($14);
    $$0 = -1;
    break;
   } else if ((label | 0) == 36) {
    _free($14);
    HEAP32[(HEAP32[$4 >> 2] | 0) + ($$0146 << 2) >> 2] = 1;
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1;
    $$0 = $$0146;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_128parse_sizeof_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$idx$i = 0, $$045 = 0, $$045$in = 0, $$046 = 0, $$148 = 0, $16 = 0, $19 = 0, $23 = 0, $24 = 0, $28 = 0, $3 = 0, $35 = 0, $36 = 0, $4 = 0, $43 = 0, $44 = 0, $5 = 0, $51 = 0, $52 = 0, $59 = 0, $6 = 0, $65 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 48 | 0;
 $4 = sp + 24 | 0;
 $5 = sp;
 $6 = sp + 12 | 0;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 115) if ((HEAP8[$0 + 1 >> 0] | 0) == 90) {
  $16 = $0 + 2 | 0;
  if ((HEAP8[$16 >> 0] | 0) == 84) {
   $19 = $2 + 4 | 0;
   $23 = ((HEAP32[$19 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
   $24 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
   $28 = ((HEAP32[$19 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
   if (($24 | 0) == ($16 | 0)) $$148 = $0; else {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15330, __ZNSt3__211char_traitsIcE6lengthEPKc(15330) | 0);
    L7 : do if (($23 | 0) != ($28 | 0)) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$2 >> 2] | 0) + ($23 * 24 | 0) | 0);
     $35 = HEAP8[$4 + 11 >> 0] | 0;
     $36 = $35 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3, $36 ? HEAP32[$4 >> 2] | 0 : $4, $36 ? HEAP32[$4 + 4 >> 2] | 0 : $35 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $43 = $4 + 11 | 0;
     $44 = $4 + 4 | 0;
     $$045$in = $23;
     while (1) {
      $$045 = $$045$in + 1 | 0;
      if (($$045 | 0) == ($28 | 0)) break L7;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, (HEAP32[$2 >> 2] | 0) + ($$045 * 24 | 0) | 0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5, 0, 15341) | 0;
      HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i = $$0$i$i$i + 1 | 0;
      }
      $51 = HEAP8[$43 >> 0] | 0;
      $52 = $51 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3, $52 ? HEAP32[$4 >> 2] | 0 : $4, $52 ? HEAP32[$44 >> 2] | 0 : $51 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$045$in = $$045;
     }
    } while (0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 15117) | 0;
    $$046 = $28;
    while (1) {
     if (($$046 | 0) == ($23 | 0)) break;
     $59 = HEAP32[$19 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($59 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$19 >> 2] = $59 + -24;
     $$046 = $$046 + -1 | 0;
    }
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
    $$0$i$i = 0;
    while (1) {
     if (($$0$i$i | 0) == 3) break;
     HEAP32[$3 + ($$0$i$i << 2) >> 2] = 0;
     $$0$i$i = $$0$i$i + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $6);
    $65 = HEAP32[$19 >> 2] | 0;
    if ($65 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($65, $4);
     HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$148 = $24;
   }
  } else $$148 = $0;
 } else $$148 = $0; else $$148 = $0; else $$148 = $0;
 STACKTOP = sp;
 return $$148 | 0;
}

function ___cxa_demangle($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i55 = 0, $$158 = 0, $$2 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $26 = 0, $29 = 0, $30 = 0, $34 = 0, $4 = 0, $41 = 0, $42 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $55 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $66 = 0, $67 = 0, $70 = 0, $71 = 0, $79 = 0, $8 = 0, $84 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(4192);
 $4 = sp + 4176 | 0;
 $5 = sp;
 $6 = sp + 4112 | 0;
 if (!$0) label = 3; else {
  $8 = ($1 | 0) != 0;
  $9 = ($2 | 0) == 0;
  if ($8 & $9) label = 3; else {
   if ($8) $62 = HEAP32[$2 >> 2] | 0; else $62 = 0;
   __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EEC2Ev($5);
   __ZN10__cxxabiv112_GLOBAL__N_12DbC2ILj4096EEERNS0_5arenaIXT_EEE($6, $5);
   $12 = $6 + 48 | 0;
   $13 = $6 + 61 | 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$12 + 4 >> 2] = 0;
   HEAP32[$12 + 8 >> 2] = 0;
   HEAP8[$12 + 12 >> 0] = 0;
   HEAP8[$13 >> 0] = 1;
   $14 = $6 + 32 | 0;
   $15 = $6 + 36 | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   if ($16 >>> 0 < (HEAP32[$6 + 40 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($4, $5);
    HEAP32[$16 >> 2] = 0;
    HEAP32[$16 + 4 >> 2] = 0;
    HEAP32[$16 + 8 >> 2] = 0;
    HEAP32[$16 + 12 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 16;
   } else __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJRNS2_5arenaILj4096EEEEEEvDpOT_($14, $5);
   $26 = $6 + 62 | 0;
   HEAP8[$26 >> 0] = 0;
   HEAP8[$6 + 63 >> 0] = 1;
   HEAP32[$4 >> 2] = 0;
   $29 = $0 + (_strlen($0) | 0) | 0;
   __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($0, $29, $6, $4);
   $30 = HEAP32[$4 >> 2] | 0;
   do if (($30 | 0) != 0 | (HEAP8[$26 >> 0] | 0) == 0) {
    $55 = $30;
    label = 22;
   } else {
    $34 = HEAP32[$14 >> 2] | 0;
    if (($34 | 0) == (HEAP32[$15 >> 2] | 0)) label = 23; else if ((HEAP32[$34 >> 2] | 0) == (HEAP32[$34 + 4 >> 2] | 0)) label = 23; else {
     HEAP8[$26 >> 0] = 0;
     HEAP8[$13 >> 0] = 0;
     $41 = HEAP32[$6 >> 2] | 0;
     $42 = $6 + 4 | 0;
     $$0$i$i$i = HEAP32[$42 >> 2] | 0;
     while (1) {
      if (($$0$i$i$i | 0) == ($41 | 0)) break;
      $45 = $$0$i$i$i + -24 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
      $$0$i$i$i = $45;
     }
     HEAP32[$42 >> 2] = $41;
     $47 = HEAP32[$6 + 16 >> 2] | 0;
     $48 = $6 + 20 | 0;
     $$0$i$i$i55 = HEAP32[$48 >> 2] | 0;
     while (1) {
      if (($$0$i$i$i55 | 0) == ($47 | 0)) break;
      $51 = $$0$i$i$i55 + -16 | 0;
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($51);
      $$0$i$i$i55 = $51;
     }
     HEAP32[$48 >> 2] = $47;
     __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($0, $29, $6, $4);
     if (!(HEAP8[$26 >> 0] | 0)) {
      $55 = HEAP32[$4 >> 2] | 0;
      label = 22;
      break;
     } else {
      HEAP32[$4 >> 2] = -2;
      $$2 = 0;
      $87 = -2;
      break;
     }
    }
   } while (0);
   if ((label | 0) == 22) if (!$55) label = 23; else {
    $$2 = 0;
    $87 = $55;
   }
   do if ((label | 0) == 23) {
    $56 = $6 + 4 | 0;
    $59 = __ZNK10__cxxabiv112_GLOBAL__N_111string_pair4sizeEv((HEAP32[$56 >> 2] | 0) + -24 | 0) | 0;
    $60 = $59 + 1 | 0;
    if ($60 >>> 0 > $62 >>> 0) {
     $63 = _realloc($1, $60) | 0;
     if (!$63) {
      HEAP32[$4 >> 2] = -1;
      $$2 = 0;
      $87 = -1;
      break;
     }
     if ($9) $$158 = $63; else {
      HEAP32[$2 >> 2] = $60;
      $$158 = $63;
     }
    } else if (!$1) {
     $$2 = 0;
     $87 = 0;
     break;
    } else $$158 = $1;
    $66 = HEAP32[$56 >> 2] | 0;
    $67 = $66 + -12 | 0;
    $70 = HEAP8[$67 + 11 >> 0] | 0;
    $71 = $70 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($66 + -24 | 0, $71 ? HEAP32[$67 >> 2] | 0 : $67, $71 ? HEAP32[$66 + -8 >> 2] | 0 : $70 & 255) | 0;
    $79 = (HEAP32[$56 >> 2] | 0) + -24 | 0;
    if ((HEAP8[$79 + 11 >> 0] | 0) < 0) $84 = HEAP32[$79 >> 2] | 0; else $84 = $79;
    _memcpy($$158 | 0, $84 | 0, $59 | 0) | 0;
    HEAP8[$$158 + $59 >> 0] = 0;
    $$2 = $$158;
    $87 = 0;
   } while (0);
   if ($3 | 0) HEAP32[$3 >> 2] = $87;
   __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($6);
   __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EED2Ev($5);
   $$0 = $$2;
  }
 }
 if ((label | 0) == 3) if (!$3) $$0 = 0; else {
  HEAP32[$3 >> 2] = -3;
  $$0 = 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$067 = 0, $$068 = 0, $$1 = 0, $$sroa$077$0 = 0, $$sroa$083$0 = 0, $12 = 0, $17 = 0, $20 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $31 = 0, $37 = 0, $38 = 0, $4 = 0, $49 = 0, $58 = 0, $60 = 0, $64 = 0, $68 = 0, $72 = 0, $73 = 0, $74 = 0, $77 = 0, $83 = 0, $84 = 0, $85 = 0, $isdigittmp = 0, $isdigittmp71 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $3 = sp + 16 | 0;
 $4 = sp;
 L1 : do if (($1 - $0 | 0) > 1) if ((HEAP8[$0 >> 0] | 0) == 84) {
  $12 = HEAP8[$0 + 1 >> 0] | 0;
  if ($12 << 24 >> 24 == 95) {
   $17 = HEAP32[$2 + 36 >> 2] | 0;
   if ((HEAP32[$2 + 32 >> 2] | 0) == ($17 | 0)) {
    $$1 = $0;
    break;
   }
   $20 = HEAP32[$17 + -16 >> 2] | 0;
   if (($20 | 0) == (HEAP32[$17 + -12 >> 2] | 0)) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj3EEERAT__Kc($3);
    $37 = $2 + 4 | 0;
    $38 = HEAP32[$37 >> 2] | 0;
    if ($38 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($38, $3);
     HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    HEAP8[$2 + 62 >> 0] = 1;
    $$1 = $0 + 2 | 0;
    break;
   }
   $26 = HEAP32[$20 + 4 >> 2] | 0;
   $27 = $2 + 4 | 0;
   $28 = $2 + 8 | 0;
   $$sroa$083$0 = HEAP32[$20 >> 2] | 0;
   while (1) {
    if (($$sroa$083$0 | 0) == ($26 | 0)) break;
    $31 = HEAP32[$27 >> 2] | 0;
    if (($31 | 0) == (HEAP32[$28 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2, $$sroa$083$0); else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($31, $$sroa$083$0);
     HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 24;
    }
    $$sroa$083$0 = $$sroa$083$0 + 24 | 0;
   }
   $$1 = $0 + 2 | 0;
   break;
  }
  $isdigittmp = ($12 << 24 >> 24) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $$067 = $isdigittmp;
   $$068 = $0 + 2 | 0;
   while (1) {
    if (($$068 | 0) == ($1 | 0)) {
     $$1 = $0;
     break L1;
    }
    $49 = HEAP8[$$068 >> 0] | 0;
    $isdigittmp71 = ($49 << 24 >> 24) + -48 | 0;
    if ($isdigittmp71 >>> 0 >= 10) break;
    $$067 = $isdigittmp71 + ($$067 * 10 | 0) | 0;
    $$068 = $$068 + 1 | 0;
   }
   if ($49 << 24 >> 24 == 95) {
    $58 = HEAP32[$2 + 36 >> 2] | 0;
    if ((HEAP32[$2 + 32 >> 2] | 0) == ($58 | 0)) $$1 = $0; else {
     $60 = $$067 + 1 | 0;
     $64 = HEAP32[$58 + -16 >> 2] | 0;
     $68 = $64;
     if ($60 >>> 0 >= (HEAP32[$58 + -12 >> 2] | 0) - $64 >> 4 >>> 0) {
      $83 = $$068 + 1 | 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      HEAP32[$4 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($4, $0, $83);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
      $84 = $2 + 4 | 0;
      $85 = HEAP32[$84 >> 2] | 0;
      if ($85 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($85, $3);
       HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      HEAP8[$2 + 62 >> 0] = 1;
      $$1 = $83;
      break;
     }
     $72 = HEAP32[$68 + ($60 << 4) + 4 >> 2] | 0;
     $73 = $2 + 4 | 0;
     $74 = $2 + 8 | 0;
     $$sroa$077$0 = HEAP32[$68 + ($60 << 4) >> 2] | 0;
     while (1) {
      if (($$sroa$077$0 | 0) == ($72 | 0)) break;
      $77 = HEAP32[$73 >> 2] | 0;
      if (($77 | 0) == (HEAP32[$74 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2, $$sroa$077$0); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($77, $$sroa$077$0);
       HEAP32[$73 >> 2] = (HEAP32[$73 >> 2] | 0) + 24;
      }
      $$sroa$077$0 = $$sroa$077$0 + 24 | 0;
     }
     $$1 = $$068 + 1 | 0;
    }
   } else $$1 = $0;
  } else $$1 = $0;
 } else $$1 = $0; else $$1 = $0; while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_115parse_call_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$i$i = 0, $$0$i$i$idx$i = 0, $$063 = 0, $$066 = 0, $$1 = 0, $$164 = 0, $$6 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $3 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $46 = 0, $47 = 0, $50 = 0, $54 = 0, $57 = 0, $59 = 0, $60 = 0, $61 = 0, $64 = 0, $72 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp + 12 | 0;
 $4 = sp;
 L1 : do if (($1 - $0 | 0) > 3) if ((HEAP8[$0 >> 0] | 0) == 99) if ((HEAP8[$0 + 1 >> 0] | 0) == 108) {
  $14 = $0 + 2 | 0;
  $15 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0;
  if (($15 | 0) == ($14 | 0) | ($15 | 0) == ($1 | 0)) $$6 = $0; else {
   $19 = $2 + 4 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($20 | 0)) $$6 = $0; else {
    $22 = $20 + -12 | 0;
    $25 = HEAP8[$22 + 11 >> 0] | 0;
    $26 = $25 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($20 + -24 | 0, $26 ? HEAP32[$22 >> 2] | 0 : $22, $26 ? HEAP32[$20 + -8 >> 2] | 0 : $25 & 255) | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    HEAP32[$4 + 8 >> 2] = 0;
    $$0$i$i = 0;
    while (1) {
     if (($$0$i$i | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
     $$0$i$i = $$0$i$i + 1 | 0;
    }
    $35 = HEAP32[$19 >> 2] | 0;
    $36 = $35 + -12 | 0;
    $37 = $36 + 11 | 0;
    if ((HEAP8[$37 >> 0] | 0) < 0) {
     $40 = HEAP32[$36 >> 2] | 0;
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($40, $3);
     HEAP32[$35 + -8 >> 2] = 0;
    } else {
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($36, $3);
     HEAP8[$37 >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($36);
    HEAP32[$36 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$36 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$36 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    $$0$i$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i$i | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$19 >> 2] | 0) + -24 | 0, 15119) | 0;
    $46 = $3 + 11 | 0;
    $47 = $3 + 4 | 0;
    $$0 = 0;
    $$063 = $15;
    while (1) {
     if ((HEAP8[$$063 >> 0] | 0) == 69) break;
     $50 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$063, $1, $2) | 0;
     if (($50 | 0) == ($$063 | 0) | ($50 | 0) == ($1 | 0)) {
      $$6 = $0;
      break L1;
     }
     $54 = HEAP32[$19 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($54 | 0)) {
      $$6 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $54 + -24 | 0);
     $57 = HEAP32[$19 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($57 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     $59 = $57 + -24 | 0;
     HEAP32[$19 >> 2] = $59;
     $60 = HEAP8[$46 >> 0] | 0;
     $61 = $60 << 24 >> 24 < 0;
     $64 = $61 ? HEAP32[$47 >> 2] | 0 : $60 & 255;
     if (!$64) {
      $$066 = 1;
      $$1 = $$0;
      $$164 = $50;
     } else if ((HEAP32[$2 >> 2] | 0) == ($59 | 0)) {
      $$066 = 0;
      $$1 = $0;
      $$164 = $$063;
     } else {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($57 + -48 | 0, $61 ? HEAP32[$3 >> 2] | 0 : $3, $64) | 0;
      $$066 = 1;
      $$1 = $$0;
      $$164 = $50;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     if ($$066) {
      $$0 = $$1;
      $$063 = $$164;
     } else {
      $$6 = $$1;
      break L1;
     }
    }
    $72 = HEAP32[$19 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($72 | 0)) $$6 = $0; else {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($72 + -24 | 0, 15117) | 0;
     $$6 = $$063 + 1 | 0;
    }
   }
  }
 } else $$6 = $0; else $$6 = $0; else $$6 = $0; while (0);
 STACKTOP = sp;
 return $$6 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_127parse_reinterpret_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$idx$i = 0, $$341 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $3 = sp + 88 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 114) if ((HEAP8[$0 + 1 >> 0] | 0) == 99) {
  $19 = $0 + 2 | 0;
  $20 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19, $1, $2) | 0;
  if (($20 | 0) == ($19 | 0)) $$341 = $0; else {
   $22 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20, $1, $2) | 0;
   if (($22 | 0) == ($20 | 0)) $$341 = $0; else {
    $24 = $2 + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    if ((($25 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$341 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $25 + -24 | 0);
     $32 = HEAP32[$24 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$24 >> 2] = $32 + -24;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $32 + -48 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9, 0, 15369) | 0;
     HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
     HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$9 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 15366) | 0;
     HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
     HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
     $$0$i$i$i47 = 0;
     while (1) {
      if (($$0$i$i$i47 | 0) == 3) break;
      HEAP32[$8 + ($$0$i$i$i47 << 2) >> 2] = 0;
      $$0$i$i$i47 = $$0$i$i$i47 + 1 | 0;
     }
     $43 = HEAP8[$3 + 11 >> 0] | 0;
     $44 = $43 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, $44 ? HEAP32[$3 >> 2] | 0 : $3, $44 ? HEAP32[$3 + 4 >> 2] | 0 : $43 & 255) | 0;
     HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
     HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
     $$0$i$i$i50 = 0;
     while (1) {
      if (($$0$i$i$i50 | 0) == 3) break;
      HEAP32[$7 + ($$0$i$i$i50 << 2) >> 2] = 0;
      $$0$i$i$i50 = $$0$i$i$i50 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15117) | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $$0$i$i$i53 = 0;
     while (1) {
      if (($$0$i$i$i53 | 0) == 3) break;
      HEAP32[$6 + ($$0$i$i$i53 << 2) >> 2] = 0;
      $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$24 >> 2] | 0) + -24 | 0, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$341 = $22;
    }
   }
  }
 } else $$341 = $0; else $$341 = $0; else $$341 = $0;
 STACKTOP = sp;
 return $$341 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_dynamic_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$idx$i = 0, $$341 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $3 = sp + 88 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 100) if ((HEAP8[$0 + 1 >> 0] | 0) == 99) {
  $19 = $0 + 2 | 0;
  $20 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19, $1, $2) | 0;
  if (($20 | 0) == ($19 | 0)) $$341 = $0; else {
   $22 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20, $1, $2) | 0;
   if (($22 | 0) == ($20 | 0)) $$341 = $0; else {
    $24 = $2 + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    if ((($25 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$341 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $25 + -24 | 0);
     $32 = HEAP32[$24 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$24 >> 2] = $32 + -24;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $32 + -48 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9, 0, 16269) | 0;
     HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
     HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$9 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 15366) | 0;
     HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
     HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
     $$0$i$i$i47 = 0;
     while (1) {
      if (($$0$i$i$i47 | 0) == 3) break;
      HEAP32[$8 + ($$0$i$i$i47 << 2) >> 2] = 0;
      $$0$i$i$i47 = $$0$i$i$i47 + 1 | 0;
     }
     $43 = HEAP8[$3 + 11 >> 0] | 0;
     $44 = $43 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, $44 ? HEAP32[$3 >> 2] | 0 : $3, $44 ? HEAP32[$3 + 4 >> 2] | 0 : $43 & 255) | 0;
     HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
     HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
     $$0$i$i$i50 = 0;
     while (1) {
      if (($$0$i$i$i50 | 0) == 3) break;
      HEAP32[$7 + ($$0$i$i$i50 << 2) >> 2] = 0;
      $$0$i$i$i50 = $$0$i$i$i50 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15117) | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $$0$i$i$i53 = 0;
     while (1) {
      if (($$0$i$i$i53 | 0) == 3) break;
      HEAP32[$6 + ($$0$i$i$i53 << 2) >> 2] = 0;
      $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$24 >> 2] | 0) + -24 | 0, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$341 = $22;
    }
   }
  }
 } else $$341 = $0; else $$341 = $0; else $$341 = $0;
 STACKTOP = sp;
 return $$341 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_static_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$idx$i = 0, $$341 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $3 = sp + 88 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 115) if ((HEAP8[$0 + 1 >> 0] | 0) == 99) {
  $19 = $0 + 2 | 0;
  $20 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19, $1, $2) | 0;
  if (($20 | 0) == ($19 | 0)) $$341 = $0; else {
   $22 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20, $1, $2) | 0;
   if (($22 | 0) == ($20 | 0)) $$341 = $0; else {
    $24 = $2 + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    if ((($25 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$341 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $25 + -24 | 0);
     $32 = HEAP32[$24 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$24 >> 2] = $32 + -24;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $32 + -48 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9, 0, 15353) | 0;
     HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
     HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$9 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 15366) | 0;
     HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
     HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
     $$0$i$i$i47 = 0;
     while (1) {
      if (($$0$i$i$i47 | 0) == 3) break;
      HEAP32[$8 + ($$0$i$i$i47 << 2) >> 2] = 0;
      $$0$i$i$i47 = $$0$i$i$i47 + 1 | 0;
     }
     $43 = HEAP8[$3 + 11 >> 0] | 0;
     $44 = $43 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, $44 ? HEAP32[$3 >> 2] | 0 : $3, $44 ? HEAP32[$3 + 4 >> 2] | 0 : $43 & 255) | 0;
     HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
     HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
     $$0$i$i$i50 = 0;
     while (1) {
      if (($$0$i$i$i50 | 0) == 3) break;
      HEAP32[$7 + ($$0$i$i$i50 << 2) >> 2] = 0;
      $$0$i$i$i50 = $$0$i$i$i50 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15117) | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $$0$i$i$i53 = 0;
     while (1) {
      if (($$0$i$i$i53 | 0) == 3) break;
      HEAP32[$6 + ($$0$i$i$i53 << 2) >> 2] = 0;
      $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$24 >> 2] | 0) + -24 | 0, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$341 = $22;
    }
   }
  }
 } else $$341 = $0; else $$341 = $0; else $$341 = $0;
 STACKTOP = sp;
 return $$341 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_const_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$idx$i = 0, $$341 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $3 = sp + 88 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 99) if ((HEAP8[$0 + 1 >> 0] | 0) == 99) {
  $19 = $0 + 2 | 0;
  $20 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19, $1, $2) | 0;
  if (($20 | 0) == ($19 | 0)) $$341 = $0; else {
   $22 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20, $1, $2) | 0;
   if (($22 | 0) == ($20 | 0)) $$341 = $0; else {
    $24 = $2 + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    if ((($25 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$341 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $25 + -24 | 0);
     $32 = HEAP32[$24 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$24 >> 2] = $32 + -24;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $32 + -48 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9, 0, 16286) | 0;
     HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
     HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$9 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 15366) | 0;
     HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
     HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
     $$0$i$i$i47 = 0;
     while (1) {
      if (($$0$i$i$i47 | 0) == 3) break;
      HEAP32[$8 + ($$0$i$i$i47 << 2) >> 2] = 0;
      $$0$i$i$i47 = $$0$i$i$i47 + 1 | 0;
     }
     $43 = HEAP8[$3 + 11 >> 0] | 0;
     $44 = $43 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, $44 ? HEAP32[$3 >> 2] | 0 : $3, $44 ? HEAP32[$3 + 4 >> 2] | 0 : $43 & 255) | 0;
     HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
     HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
     $$0$i$i$i50 = 0;
     while (1) {
      if (($$0$i$i$i50 | 0) == 3) break;
      HEAP32[$7 + ($$0$i$i$i50 << 2) >> 2] = 0;
      $$0$i$i$i50 = $$0$i$i$i50 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15117) | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $$0$i$i$i53 = 0;
     while (1) {
      if (($$0$i$i$i53 | 0) == 3) break;
      HEAP32[$6 + ($$0$i$i$i53 << 2) >> 2] = 0;
      $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$24 >> 2] | 0) + -24 | 0, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$341 = $22;
    }
   }
  }
 } else $$341 = $0; else $$341 = $0; else $$341 = $0;
 STACKTOP = sp;
 return $$341 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i56 = 0, $$2 = 0, $$3 = 0, $17 = 0, $18 = 0, $25 = 0, $26 = 0, $3 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $3 = sp + 64 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 24 | 0;
 $7 = sp;
 L1 : do if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 102) {
  switch (HEAP8[$0 + 1 >> 0] | 0) {
  case 112:
   {
    $17 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($0 + 2 | 0, $1, $3) | 0;
    $18 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($17, $1) | 0;
    if (($18 | 0) == ($1 | 0)) $$0 = $0; else if ((HEAP8[$18 >> 0] | 0) == 95) {
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     HEAP32[$6 + 8 >> 2] = 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($6, $17, $18);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 16308) | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
     $25 = $2 + 4 | 0;
     $26 = HEAP32[$25 >> 2] | 0;
     if ($26 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($26, $4);
      HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     $$0 = $18 + 1 | 0;
    } else $$0 = $0;
    $$3 = $$0;
    break L1;
    break;
   }
  case 76:
   break;
  default:
   {
    $$3 = $0;
    break L1;
   }
  }
  $34 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($0 + 2 | 0, $1) | 0;
  if (($34 | 0) == ($1 | 0)) $$2 = $0; else if ((HEAP8[$34 >> 0] | 0) == 112) {
   $39 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($34 + 1 | 0, $1, $3) | 0;
   $40 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($39, $1) | 0;
   if (($40 | 0) == ($1 | 0)) $$2 = $0; else if ((HEAP8[$40 >> 0] | 0) == 95) {
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    HEAP32[$6 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($6, $39, $40);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 16308) | 0;
    HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$7 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i56 = 0;
    while (1) {
     if (($$0$i$i$i56 | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i56 << 2) >> 2] = 0;
     $$0$i$i$i56 = $$0$i$i$i56 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $7);
    $47 = $2 + 4 | 0;
    $48 = HEAP32[$47 >> 2] | 0;
    if ($48 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($48, $4);
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$2 = $40 + 1 | 0;
   } else $$2 = $0;
  } else $$2 = $0;
  $$3 = $$2;
 } else $$3 = $0; else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $13 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $47 = 0, $55 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $66 = 0, $69 = 0, $76 = 0, $77 = 0, $86 = 0, label = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); else {
  if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
   $58 = HEAP32[$0 + 12 >> 2] | 0;
   $59 = $0 + 16 + ($58 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4);
   $60 = $0 + 24 | 0;
   if (($58 | 0) <= 1) break;
   $63 = HEAP32[$0 + 8 >> 2] | 0;
   if (!($63 & 2)) {
    $66 = $1 + 36 | 0;
    if ((HEAP32[$66 >> 2] | 0) != 1) {
     if (!($63 & 1)) {
      $86 = $1 + 54 | 0;
      $$2 = $60;
      while (1) {
       if (HEAP8[$86 >> 0] | 0) break L1;
       if ((HEAP32[$66 >> 2] | 0) == 1) break L1;
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4);
       $$2 = $$2 + 8 | 0;
       if ($$2 >>> 0 >= $59 >>> 0) break L1;
      }
     }
     $76 = $1 + 24 | 0;
     $77 = $1 + 54 | 0;
     $$1 = $60;
     while (1) {
      if (HEAP8[$77 >> 0] | 0) break L1;
      if ((HEAP32[$66 >> 2] | 0) == 1) if ((HEAP32[$76 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4);
      $$1 = $$1 + 8 | 0;
      if ($$1 >>> 0 >= $59 >>> 0) break L1;
     }
    }
   }
   $69 = $1 + 54 | 0;
   $$0 = $60;
   while (1) {
    if (HEAP8[$69 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4);
    $$0 = $$0 + 8 | 0;
    if ($$0 >>> 0 >= $59 >>> 0) break L1;
   }
  }
  if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
   $13 = $1 + 20 | 0;
   if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
    HEAP32[$1 + 32 >> 2] = $3;
    $19 = $1 + 44 | 0;
    if ((HEAP32[$19 >> 2] | 0) == 4) break;
    $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0;
    $26 = $1 + 52 | 0;
    $27 = $1 + 53 | 0;
    $28 = $1 + 54 | 0;
    $29 = $0 + 8 | 0;
    $30 = $1 + 24 | 0;
    $$081$off0 = 0;
    $$084 = $0 + 16 | 0;
    $$085$off0 = 0;
    L32 : while (1) {
     if ($$084 >>> 0 >= $25 >>> 0) {
      $$283$off0 = $$081$off0;
      label = 18;
      break;
     }
     HEAP8[$26 >> 0] = 0;
     HEAP8[$27 >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4);
     if (HEAP8[$28 >> 0] | 0) {
      $$283$off0 = $$081$off0;
      label = 18;
      break;
     }
     do if (!(HEAP8[$27 >> 0] | 0)) {
      $$182$off0 = $$081$off0;
      $$186$off0 = $$085$off0;
     } else {
      if (!(HEAP8[$26 >> 0] | 0)) if (!(HEAP32[$29 >> 2] & 1)) {
       $$283$off0 = 1;
       label = 18;
       break L32;
      } else {
       $$182$off0 = 1;
       $$186$off0 = $$085$off0;
       break;
      }
      if ((HEAP32[$30 >> 2] | 0) == 1) {
       label = 23;
       break L32;
      }
      if (!(HEAP32[$29 >> 2] & 2)) {
       label = 23;
       break L32;
      } else {
       $$182$off0 = 1;
       $$186$off0 = 1;
      }
     } while (0);
     $$081$off0 = $$182$off0;
     $$084 = $$084 + 8 | 0;
     $$085$off0 = $$186$off0;
    }
    do if ((label | 0) == 18) {
     if (!$$085$off0) {
      HEAP32[$13 >> 2] = $2;
      $47 = $1 + 40 | 0;
      HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 1;
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) if ((HEAP32[$30 >> 2] | 0) == 2) {
       HEAP8[$28 >> 0] = 1;
       if ($$283$off0) {
        label = 23;
        break;
       } else {
        $55 = 4;
        break;
       }
      }
     }
     if ($$283$off0) label = 23; else $55 = 4;
    } while (0);
    if ((label | 0) == 23) $55 = 3;
    HEAP32[$19 >> 2] = $55;
    break;
   }
  }
  if (($3 | 0) == 1) HEAP32[$1 + 32 >> 2] = 1;
 } while (0);
 return;
}

function _arDetectMarker2($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = +$6;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0 = 0, $$0127 = 0, $$0128 = 0, $$0131 = 0, $$0132 = 0, $$0133 = 0, $$0134 = 0, $$1 = 0, $$1$in = 0, $$1129 = 0, $$2 = 0, $$2130 = 0, $$3 = 0, $$ph = 0, $$pre136 = 0, $102 = 0, $105 = 0, $108 = 0, $113 = 0, $116 = 0, $122 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $24 = 0, $52 = 0, $57 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $71 = 0.0, $76 = 0.0, $78 = 0.0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $91 = 0, $96 = 0, $99 = 0, label = 0;
 $9 = ($3 | 0) == 1;
 if ($9) {
  $$0 = ($0 | 0) / 2 | 0;
  $$0132 = ($1 | 0) / 2 | 0;
  $$0133 = ($4 | 0) / 4 | 0;
  $$0134 = ($5 | 0) / 4 | 0;
 } else {
  $$0 = $0;
  $$0132 = $1;
  $$0133 = $4;
  $$0134 = $5;
 }
 HEAP32[$8 >> 2] = 0;
 $14 = $2 + 8 | 0;
 $15 = $$0 + -2 | 0;
 $16 = $$0132 + -2 | 0;
 $17 = $2 + 1179664 | 0;
 $$0128 = 0;
 while (1) {
  if (($$0128 | 0) >= (HEAP32[$14 >> 2] | 0)) {
   label = 5;
   break;
  }
  $20 = $2 + 12 + ($$0128 << 2) | 0;
  $21 = HEAP32[$20 >> 2] | 0;
  if (!(($21 | 0) < ($$0134 | 0) | ($21 | 0) > ($$0133 | 0))) {
   $24 = $2 + 131084 + ($$0128 << 4) | 0;
   if ((HEAP32[$24 >> 2] | 0) != 1) if ((HEAP32[$2 + 131084 + ($$0128 << 4) + 4 >> 2] | 0) != ($15 | 0)) if ((HEAP32[$2 + 131084 + ($$0128 << 4) + 8 >> 2] | 0) != 1) if ((HEAP32[$2 + 131084 + ($$0128 << 4) + 12 >> 2] | 0) != ($16 | 0)) if ((_arGetContour(HEAP32[$2 >> 2] | 0, $$0, 0, $17, $$0128 + 1 | 0, $24, $7 + ((HEAP32[$8 >> 2] | 0) * 80048 | 0) | 0) | 0) >= 0) if ((_check_square(HEAP32[$20 >> 2] | 0, $7 + ((HEAP32[$8 >> 2] | 0) * 80048 | 0) | 0, $6) | 0) >= 0) {
    HEAP32[$7 + ((HEAP32[$8 >> 2] | 0) * 80048 | 0) >> 2] = HEAP32[$20 >> 2];
    $52 = HEAP32[$8 >> 2] | 0;
    HEAPF64[$7 + ($52 * 80048 | 0) + 8 >> 3] = +HEAPF64[$2 + 655376 + ($$0128 << 4) >> 3];
    HEAPF64[$7 + ($52 * 80048 | 0) + 16 >> 3] = +HEAPF64[$2 + 655376 + ($$0128 << 4) + 8 >> 3];
    $57 = $52 + 1 | 0;
    HEAP32[$8 >> 2] = $57;
    if (($57 | 0) == 60) {
     $$ph = 60;
     break;
    }
   }
  }
  $$0128 = $$0128 + 1 | 0;
 }
 if ((label | 0) == 5) $$ph = HEAP32[$8 >> 2] | 0;
 $$1129 = 0;
 $61 = $$ph;
 while (1) {
  if (($$1129 | 0) >= ($61 | 0)) break;
  $62 = $$1129 + 1 | 0;
  $63 = $7 + ($$1129 * 80048 | 0) + 8 | 0;
  $64 = $7 + ($$1129 * 80048 | 0) + 16 | 0;
  $65 = $7 + ($$1129 * 80048 | 0) | 0;
  $$0127 = $62;
  $67 = $61;
  while (1) {
   if (($$0127 | 0) >= ($67 | 0)) break;
   $71 = +HEAPF64[$63 >> 3] - +HEAPF64[$7 + ($$0127 * 80048 | 0) + 8 >> 3];
   $76 = +HEAPF64[$64 >> 3] - +HEAPF64[$7 + ($$0127 * 80048 | 0) + 16 >> 3];
   $78 = $71 * $71 + $76 * $76;
   $79 = HEAP32[$65 >> 2] | 0;
   $80 = $7 + ($$0127 * 80048 | 0) | 0;
   $81 = HEAP32[$80 >> 2] | 0;
   if (($79 | 0) > ($81 | 0)) {
    if ($78 < +(($79 | 0) / 4 | 0 | 0)) HEAP32[$80 >> 2] = 0;
   } else if ($78 < +(($81 | 0) / 4 | 0 | 0)) HEAP32[$65 >> 2] = 0;
   $$0127 = $$0127 + 1 | 0;
   $67 = HEAP32[$8 >> 2] | 0;
  }
  $$1129 = $62;
  $61 = $67;
 }
 $$2130 = 0;
 $91 = $61;
 while (1) {
  if (($$2130 | 0) >= ($91 | 0)) break;
  if (!(HEAP32[$7 + ($$2130 * 80048 | 0) >> 2] | 0)) {
   $$1$in = $$2130;
   $96 = $91;
   while (1) {
    $$1 = $$1$in + 1 | 0;
    if (($$1 | 0) >= ($96 | 0)) break;
    _memcpy($7 + ($$1$in * 80048 | 0) | 0, $7 + ($$1 * 80048 | 0) | 0, 80048) | 0;
    $$1$in = $$1;
    $96 = HEAP32[$8 >> 2] | 0;
   }
   $99 = $96 + -1 | 0;
   HEAP32[$8 >> 2] = $99;
   $122 = $99;
  } else $122 = $91;
  $$2130 = $$2130 + 1 | 0;
  $91 = $122;
 }
 L44 : do if ($9) {
  $$0131 = $7;
  $$3 = 0;
  $102 = $91;
  while (1) {
   if (($$3 | 0) >= ($102 | 0)) break L44;
   HEAP32[$$0131 >> 2] = HEAP32[$$0131 >> 2] << 2;
   $105 = $$0131 + 8 | 0;
   HEAPF64[$105 >> 3] = +HEAPF64[$105 >> 3] * 2.0;
   $108 = $$0131 + 16 | 0;
   HEAPF64[$108 >> 3] = +HEAPF64[$108 >> 3] * 2.0;
   $$pre136 = HEAP32[$$0131 + 24 >> 2] | 0;
   $$2 = 0;
   while (1) {
    if (($$2 | 0) >= ($$pre136 | 0)) break;
    $113 = $$0131 + 28 + ($$2 << 2) | 0;
    HEAP32[$113 >> 2] = HEAP32[$113 >> 2] << 1;
    $116 = $$0131 + 40028 + ($$2 << 2) | 0;
    HEAP32[$116 >> 2] = HEAP32[$116 >> 2] << 1;
    $$2 = $$2 + 1 | 0;
   }
   $$0131 = $$0131 + 80048 | 0;
   $$3 = $$3 + 1 | 0;
   $102 = HEAP32[$8 >> 2] | 0;
  }
 } while (0);
 return 0;
}

function _arParamLoad($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $$05254 = 0, $$053 = 0, $$056 = 0, $$059 = 0, $$1 = 0, $$pre$phi64Z2D = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $25 = 0, $28 = 0, $3 = 0, $30 = 0, $33 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $44 = 0, $51 = 0, $52 = 0, $61 = 0.0, $8 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $vararg_buffer18 = sp + 232 | 0;
 $vararg_buffer15 = sp + 224 | 0;
 $vararg_buffer13 = sp + 216 | 0;
 $vararg_buffer9 = sp + 208 | 0;
 $vararg_buffer6 = sp + 200 | 0;
 $vararg_buffer2 = sp + 192 | 0;
 $vararg_buffer = sp + 184 | 0;
 $3 = sp + 240 | 0;
 $4 = sp;
 do if (($0 | 0) != 0 & ($1 | 0) > 0 & ($2 | 0) != 0) {
  $8 = _fopen($0, 5635) | 0;
  if (!$8) {
   $10 = ___errno_location() | 0;
   HEAP32[$vararg_buffer >> 2] = HEAP32[$10 >> 2];
   HEAP32[$vararg_buffer + 4 >> 2] = $0;
   _arLog(0, 3, 4367, $vararg_buffer);
   $12 = ___errno_location() | 0;
   $14 = _strerror(HEAP32[$12 >> 2] | 0) | 0;
   HEAP32[$vararg_buffer2 >> 2] = 19061;
   HEAP32[$vararg_buffer2 + 4 >> 2] = $14;
   _arLog(0, 3, 4941, $vararg_buffer2);
   $$056 = -1;
   break;
  }
  _fseek($8, 0, 2) | 0;
  L6 : do if (!(_ferror($8) | 0)) {
   $22 = _ftell($8) | 0;
   _rewind($8);
   $$053 = 0;
   while (1) {
    if ($$053 >>> 0 >= 4) {
     label = 9;
     break;
    }
    $25 = HEAP32[1904 + ($$053 << 3) + 4 >> 2] | 0;
    $28 = $$053 + 1 | 0;
    if (!(($22 | 0) % ($25 | 0) | 0)) {
     $$05254 = $28;
     $30 = $25;
     break;
    } else $$053 = $28;
   }
   do if ((label | 0) == 9) if (($$053 | 0) == 4) {
    _arLog(0, 3, 4481, $vararg_buffer13);
    $$059 = -1;
    break L6;
   } else {
    $$05254 = 0;
    $30 = HEAP32[1904 + (0 << 3) + 4 >> 2] | 0;
    break;
   } while (0);
   if ((_fread($4, $30, 1, $8) | 0) != 1) {
    $33 = ___errno_location() | 0;
    HEAP32[$vararg_buffer15 >> 2] = HEAP32[$33 >> 2];
    _arLog(0, 3, 4561, $vararg_buffer15);
    $35 = ___errno_location() | 0;
    $37 = _strerror(HEAP32[$35 >> 2] | 0) | 0;
    HEAP32[$vararg_buffer18 >> 2] = 19061;
    HEAP32[$vararg_buffer18 + 4 >> 2] = $37;
    _arLog(0, 3, 4941, $vararg_buffer18);
    $$059 = -1;
    break;
   }
   $38 = $4 + 176 | 0;
   HEAP32[$38 >> 2] = $$05254;
   _byteswap($4);
   $39 = ($$05254 | 0) == 1;
   $40 = $4 + 120 | 0;
   if ($39) {
    $41 = +HEAPF64[$40 >> 3];
    $42 = $4 + 128 | 0;
    HEAPF64[$40 >> 3] = +HEAPF64[$42 >> 3];
    HEAPF64[$42 >> 3] = $41;
    $$pre$phi64Z2D = $42;
   } else $$pre$phi64Z2D = $4 + 128 | 0;
   _memcpy($2 | 0, $4 | 0, 184) | 0;
   HEAP32[$3 >> 2] = $varargs;
   $44 = $2 + 176 | 0;
   $$1 = 1;
   while (1) {
    if (($$1 | 0) >= ($1 | 0)) {
     $$059 = 0;
     break L6;
    }
    $51 = (HEAP32[$3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $52 = HEAP32[$51 >> 2] | 0;
    HEAP32[$3 >> 2] = $51 + 4;
    HEAP32[$52 + 176 >> 2] = HEAP32[$44 >> 2];
    if ((_fread($4, HEAP32[1904 + ((HEAP32[$44 >> 2] | 0) + -1 << 3) + 4 >> 2] | 0, 1, $8) | 0) != 1) {
     $$059 = -1;
     break L6;
    }
    HEAP32[$38 >> 2] = $$05254;
    _byteswap($4);
    if ($39) {
     $61 = +HEAPF64[$40 >> 3];
     HEAPF64[$40 >> 3] = +HEAPF64[$$pre$phi64Z2D >> 3];
     HEAPF64[$$pre$phi64Z2D >> 3] = $61;
    }
    _memcpy($52 | 0, $4 | 0, 184) | 0;
    $$1 = $$1 + 1 | 0;
   }
  } else {
   $17 = ___errno_location() | 0;
   HEAP32[$vararg_buffer6 >> 2] = HEAP32[$17 >> 2];
   _arLog(0, 3, 4436, $vararg_buffer6);
   $19 = ___errno_location() | 0;
   $21 = _strerror(HEAP32[$19 >> 2] | 0) | 0;
   HEAP32[$vararg_buffer9 >> 2] = 19061;
   HEAP32[$vararg_buffer9 + 4 >> 2] = $21;
   _arLog(0, 3, 4941, $vararg_buffer9);
   $$059 = -1;
  } while (0);
  _fclose($8) | 0;
  $$056 = $$059;
 } else $$056 = -1; while (0);
 STACKTOP = sp;
 return $$056 | 0;
}

function _minv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0128 = 0.0, $$0129 = 0, $$0131 = 0, $$0133 = 0, $$0136 = 0, $$0140 = 0, $$0143 = 0, $$1130 = 0, $$1134 = 0, $$1137 = 0, $$1141 = 0, $$1144 = 0, $$2 = 0, $$2135 = 0, $$2138 = 0, $$2142 = 0, $$2145 = 0, $$3 = 0, $$3139 = 0, $$4 = 0, $13 = 0, $15 = 0.0, $16 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0.0, $3 = 0, $32 = 0.0, $33 = 0, $40 = 0, $41 = 0.0, $42 = 0, $56 = 0, $65 = 0.0, $indvars$iv = 0, $indvars$iv152 = 0, $scevgep = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2e3 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2e3);
 $3 = sp;
 L1 : do if (($1 | 0) > 500) $$0 = 0; else {
  switch ($1 | 0) {
  case 0:
   {
    $$0 = 0;
    break L1;
    break;
   }
  case 1:
   {
    HEAPF64[$0 >> 3] = 1.0 / +HEAPF64[$0 >> 3];
    $$0 = $0;
    break L1;
    break;
   }
  default:
   {}
  }
  $$0133 = 0;
  while (1) {
   if (($$0133 | 0) >= ($1 | 0)) break;
   HEAP32[$3 + ($$0133 << 2) >> 2] = $$0133;
   $$0133 = $$0133 + 1 | 0;
  }
  $scevgep = $0 + ($1 + -1 << 3) | 0;
  $$1134 = 0;
  $indvars$iv = $scevgep;
  while (1) {
   if (($$1134 | 0) >= ($1 | 0)) break;
   $13 = $0 + ((Math_imul($$1134, $2) | 0) << 3) | 0;
   $$0128 = 0.0;
   $$0129 = $13;
   $$0131 = -1;
   $$0140 = $$1134;
   while (1) {
    if (($$0140 | 0) == ($1 | 0)) break;
    $15 = +Math_abs(+(+HEAPF64[$$0129 >> 3]));
    $16 = $$0128 < $15;
    $$0128 = $16 ? $15 : $$0128;
    $$0129 = $$0129 + ($2 << 3) | 0;
    $$0131 = $16 ? $$0140 : $$0131;
    $$0140 = $$0140 + 1 | 0;
   }
   if (($$0131 | 0) == -1 | $$0128 <= 1.0e-10) {
    $$0 = 0;
    break L1;
   }
   $21 = $3 + ($$0131 << 2) | 0;
   $22 = HEAP32[$21 >> 2] | 0;
   $23 = $3 + ($$1134 << 2) | 0;
   HEAP32[$21 >> 2] = HEAP32[$23 >> 2];
   HEAP32[$23 >> 2] = $22;
   $$0136 = 0;
   $$0143 = $13;
   $$1130 = $0 + ((Math_imul($$0131, $2) | 0) << 3) | 0;
   while (1) {
    if (($$0136 | 0) == ($1 | 0)) break;
    $27 = +HEAPF64[$$1130 >> 3];
    HEAPF64[$$1130 >> 3] = +HEAPF64[$$0143 >> 3];
    HEAPF64[$$0143 >> 3] = $27;
    $$0136 = $$0136 + 1 | 0;
    $$0143 = $$0143 + 8 | 0;
    $$1130 = $$1130 + 8 | 0;
   }
   $32 = +HEAPF64[$13 >> 3];
   $$1137 = 1;
   $$2 = $13;
   while (1) {
    if (($$1137 | 0) == ($1 | 0)) break;
    $33 = $$2 + 8 | 0;
    HEAPF64[$$2 >> 3] = +HEAPF64[$33 >> 3] / $32;
    $$1137 = $$1137 + 1 | 0;
    $$2 = $33;
   }
   HEAPF64[$indvars$iv >> 3] = 1.0 / $32;
   $$1141 = 0;
   $indvars$iv152 = $scevgep;
   while (1) {
    if (($$1141 | 0) == ($1 | 0)) break;
    if (($$1141 | 0) != ($$1134 | 0)) {
     $40 = $0 + ((Math_imul($$1141, $2) | 0) << 3) | 0;
     $41 = +HEAPF64[$40 >> 3];
     $$1144 = $13;
     $$2138 = 1;
     $$3 = $40;
     while (1) {
      if (($$2138 | 0) == ($1 | 0)) break;
      $42 = $$3 + 8 | 0;
      HEAPF64[$$3 >> 3] = +HEAPF64[$42 >> 3] - $41 * +HEAPF64[$$1144 >> 3];
      $$1144 = $$1144 + 8 | 0;
      $$2138 = $$2138 + 1 | 0;
      $$3 = $42;
     }
     HEAPF64[$indvars$iv152 >> 3] = -($41 * +HEAPF64[$indvars$iv >> 3]);
    }
    $$1141 = $$1141 + 1 | 0;
    $indvars$iv152 = $indvars$iv152 + ($2 << 3) | 0;
   }
   $$1134 = $$1134 + 1 | 0;
   $indvars$iv = $indvars$iv + ($2 << 3) | 0;
  }
  $$2135 = 0;
  while (1) {
   if (($$2135 | 0) >= ($1 | 0)) {
    $$0 = $0;
    break L1;
   }
   $$3139 = $$2135;
   while (1) {
    $56 = $3 + ($$3139 << 2) | 0;
    if (($$3139 | 0) >= ($1 | 0)) break;
    if ((HEAP32[$56 >> 2] | 0) == ($$2135 | 0)) break;
    $$3139 = $$3139 + 1 | 0;
   }
   HEAP32[$56 >> 2] = HEAP32[$3 + ($$2135 << 2) >> 2];
   $$2142 = 0;
   $$2145 = $0 + ($$2135 << 3) | 0;
   $$4 = $0 + ($$3139 << 3) | 0;
   while (1) {
    if (($$2142 | 0) >= ($1 | 0)) break;
    $65 = +HEAPF64[$$4 >> 3];
    HEAPF64[$$4 >> 3] = +HEAPF64[$$2145 >> 3];
    HEAPF64[$$2145 >> 3] = $65;
    $$2142 = $$2142 + 1 | 0;
    $$2145 = $$2145 + ($2 << 3) | 0;
    $$4 = $$4 + ($2 << 3) | 0;
   }
   $$2135 = $$2135 + 1 | 0;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arParamDecompMat($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0117 = 0, $$1 = 0, $$1118 = 0, $$2 = 0, $$2119 = 0, $$3 = 0, $$3120 = 0, $101 = 0.0, $102 = 0.0, $113 = 0.0, $117 = 0.0, $131 = 0, $22 = 0.0, $24 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $32 = 0.0, $33 = 0, $35 = 0.0, $36 = 0, $41 = 0, $43 = 0.0, $45 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $52 = 0.0, $55 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0, $62 = 0, $65 = 0, $68 = 0, $72 = 0.0, $74 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $82 = 0.0, $83 = 0, $89 = 0.0, $95 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $3 = sp;
 L1 : do if (!(+HEAPF64[$0 + 88 >> 3] >= 0.0)) {
  $$1 = 0;
  while (1) {
   if (($$1 | 0) == 3) break L1;
   $$1118 = 0;
   while (1) {
    if (($$1118 | 0) == 4) break;
    HEAPF64[$3 + ($$1 << 5) + ($$1118 << 3) >> 3] = -+HEAPF64[$0 + ($$1 << 5) + ($$1118 << 3) >> 3];
    $$1118 = $$1118 + 1 | 0;
   }
   $$1 = $$1 + 1 | 0;
  }
 } else {
  $$0 = 0;
  while (1) {
   if (($$0 | 0) == 3) break L1;
   $$0117 = 0;
   while (1) {
    if (($$0117 | 0) == 4) break;
    HEAPF64[$3 + ($$0 << 5) + ($$0117 << 3) >> 3] = +HEAPF64[$0 + ($$0 << 5) + ($$0117 << 3) >> 3];
    $$0117 = $$0117 + 1 | 0;
   }
   $$0 = $$0 + 1 | 0;
  }
 } while (0);
 $$2 = 0;
 while (1) {
  if (($$2 | 0) == 3) break;
  $$2119 = 0;
  while (1) {
   if (($$2119 | 0) == 4) break;
   HEAPF64[$1 + ($$2 << 5) + ($$2119 << 3) >> 3] = 0.0;
   $$2119 = $$2119 + 1 | 0;
  }
  $$2 = $$2 + 1 | 0;
 }
 $22 = +HEAPF64[$3 + 64 >> 3];
 $24 = +HEAPF64[$3 + 72 >> 3];
 $26 = +HEAPF64[$3 + 80 >> 3];
 $27 = +_norm($22, $24, $26);
 $28 = $1 + 80 | 0;
 HEAPF64[$28 >> 3] = $27;
 $29 = $22 / $27;
 $30 = $2 + 64 | 0;
 HEAPF64[$30 >> 3] = $29;
 $32 = $24 / +HEAPF64[$28 >> 3];
 $33 = $2 + 72 | 0;
 HEAPF64[$33 >> 3] = $32;
 $35 = $26 / +HEAPF64[$28 >> 3];
 $36 = $2 + 80 | 0;
 HEAPF64[$36 >> 3] = $35;
 $41 = $2 + 88 | 0;
 HEAPF64[$41 >> 3] = +HEAPF64[$3 + 88 >> 3] / +HEAPF64[$28 >> 3];
 $43 = +HEAPF64[$3 + 32 >> 3];
 $45 = +HEAPF64[$3 + 40 >> 3];
 $47 = +HEAPF64[$3 + 48 >> 3];
 $48 = +_dot($29, $32, $35, $43, $45, $47);
 $49 = $1 + 48 | 0;
 HEAPF64[$49 >> 3] = $48;
 $52 = $43 - $48 * +HEAPF64[$30 >> 3];
 $55 = $45 - $48 * +HEAPF64[$33 >> 3];
 $58 = $47 - $48 * +HEAPF64[$36 >> 3];
 $59 = +_norm($52, $55, $58);
 $60 = $1 + 40 | 0;
 HEAPF64[$60 >> 3] = $59;
 $62 = $2 + 32 | 0;
 HEAPF64[$62 >> 3] = $52 / $59;
 $65 = $2 + 40 | 0;
 HEAPF64[$65 >> 3] = $55 / +HEAPF64[$60 >> 3];
 $68 = $2 + 48 | 0;
 HEAPF64[$68 >> 3] = $58 / +HEAPF64[$60 >> 3];
 $72 = +HEAPF64[$3 >> 3];
 $74 = +HEAPF64[$3 + 8 >> 3];
 $76 = +HEAPF64[$3 + 16 >> 3];
 $77 = +_dot(+HEAPF64[$30 >> 3], +HEAPF64[$33 >> 3], +HEAPF64[$36 >> 3], $72, $74, $76);
 $78 = $1 + 16 | 0;
 HEAPF64[$78 >> 3] = $77;
 $82 = +_dot(+HEAPF64[$62 >> 3], +HEAPF64[$65 >> 3], +HEAPF64[$68 >> 3], $72, $74, $76);
 $83 = $1 + 8 | 0;
 HEAPF64[$83 >> 3] = $82;
 $89 = $72 - $82 * +HEAPF64[$62 >> 3] - $77 * +HEAPF64[$30 >> 3];
 $95 = $74 - $82 * +HEAPF64[$65 >> 3] - $77 * +HEAPF64[$33 >> 3];
 $101 = $76 - $82 * +HEAPF64[$68 >> 3] - $77 * +HEAPF64[$36 >> 3];
 $102 = +_norm($89, $95, $101);
 HEAPF64[$1 >> 3] = $102;
 HEAPF64[$2 >> 3] = $89 / $102;
 HEAPF64[$2 + 8 >> 3] = $95 / +HEAPF64[$1 >> 3];
 HEAPF64[$2 + 16 >> 3] = $101 / +HEAPF64[$1 >> 3];
 $113 = +HEAPF64[$41 >> 3];
 $117 = (+HEAPF64[$3 + 56 >> 3] - +HEAPF64[$49 >> 3] * $113) / +HEAPF64[$60 >> 3];
 HEAPF64[$2 + 56 >> 3] = $117;
 HEAPF64[$2 + 24 >> 3] = (+HEAPF64[$3 + 24 >> 3] - $117 * +HEAPF64[$83 >> 3] - $113 * +HEAPF64[$78 >> 3]) / +HEAPF64[$1 >> 3];
 $$3 = 0;
 while (1) {
  if (($$3 | 0) == 3) break;
  $$3120 = 0;
  while (1) {
   if (($$3120 | 0) == 3) break;
   $131 = $1 + ($$3 << 5) + ($$3120 << 3) | 0;
   HEAPF64[$131 >> 3] = +HEAPF64[$131 >> 3] / +HEAPF64[$28 >> 3];
   $$3120 = $$3120 + 1 | 0;
  }
  $$3 = $$3 + 1 | 0;
 }
 STACKTOP = sp;
 return 0;
}

function __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$053$i = 0, $$054$i = 0, $$1$i = 0, $$155$i = 0, $$pn$i = 0, $$pre$phi$iZ2D = 0, $11 = 0, $17 = 0, $18 = 0, $2 = 0, $22 = 0, $28 = 0, $3 = 0, $32 = 0, $35 = 0.0, $38 = 0.0, $4 = 0, $48 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $62 = 0, $64 = 0, $7 = 0, $70 = 0, $71 = 0, $74 = 0, $75 = 0, $8 = 0, $83 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp + 4 | 0;
 $3 = sp;
 $4 = sp + 16 | 0;
 HEAP32[$3 >> 2] = $1;
 $5 = HEAP32[$1 >> 2] | 0;
 $6 = $0 + 4 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = ($7 | 0) == 0;
 L1 : do if ($8) {
  $$054$i = 0;
  label = 16;
 } else {
  $9 = $7 + -1 | 0;
  $11 = ($9 & $7 | 0) == 0;
  if ($11) $17 = $9 & $5; else if ($5 >>> 0 < $7 >>> 0) $17 = $5; else $17 = ($5 >>> 0) % ($7 >>> 0) | 0;
  $18 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($17 << 2) >> 2] | 0;
  if (!$18) {
   $$054$i = $17;
   label = 16;
  } else {
   $$pn$i = $18;
   while (1) {
    $$053$i = HEAP32[$$pn$i >> 2] | 0;
    if (!$$053$i) {
     $$054$i = $17;
     label = 16;
     break L1;
    }
    $22 = HEAP32[$$053$i + 4 >> 2] | 0;
    if (($22 | 0) != ($5 | 0)) {
     if ($11) $28 = $22 & $9; else if ($22 >>> 0 < $7 >>> 0) $28 = $22; else $28 = ($22 >>> 0) % ($7 >>> 0) | 0;
     if (($28 | 0) != ($17 | 0)) {
      $$054$i = $17;
      label = 16;
      break L1;
     }
    }
    if ((HEAP32[$$053$i + 8 >> 2] | 0) == ($5 | 0)) {
     $$1$i = $$053$i;
     break;
    } else $$pn$i = $$053$i;
   }
  }
 } while (0);
 if ((label | 0) == 16) {
  __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKiEEENSJ_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS3_PvEENS_22__hash_node_destructorINSC_ISR_EEEEEEjOT_DpOT0_($2, $0, $5, 18020, $3, $4);
  $32 = $0 + 12 | 0;
  $35 = +(((HEAP32[$32 >> 2] | 0) + 1 | 0) >>> 0);
  $38 = +HEAPF32[$0 + 16 >> 2];
  do if ($8 | $38 * +($7 >>> 0) < $35) {
   $48 = $7 << 1 | ($7 >>> 0 < 3 | ($7 + -1 & $7 | 0) != 0) & 1;
   $51 = ~~+Math_ceil(+($35 / $38)) >>> 0;
   __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6rehashEj($0, $48 >>> 0 < $51 >>> 0 ? $51 : $48);
   $53 = HEAP32[$6 >> 2] | 0;
   $54 = $53 + -1 | 0;
   if (!($54 & $53)) {
    $$0$i = $53;
    $$155$i = $54 & $5;
    break;
   }
   if ($5 >>> 0 < $53 >>> 0) {
    $$0$i = $53;
    $$155$i = $5;
   } else {
    $$0$i = $53;
    $$155$i = ($5 >>> 0) % ($53 >>> 0) | 0;
   }
  } else {
   $$0$i = $7;
   $$155$i = $$054$i;
  } while (0);
  $62 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($$155$i << 2) >> 2] | 0;
  if (!$62) {
   $64 = $0 + 8 | 0;
   HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[$64 >> 2];
   HEAP32[$64 >> 2] = HEAP32[$2 >> 2];
   HEAP32[(HEAP32[$0 >> 2] | 0) + ($$155$i << 2) >> 2] = $64;
   $70 = HEAP32[$2 >> 2] | 0;
   $71 = HEAP32[$70 >> 2] | 0;
   if (!$71) $$pre$phi$iZ2D = $2; else {
    $74 = HEAP32[$71 + 4 >> 2] | 0;
    $75 = $$0$i + -1 | 0;
    if (!($75 & $$0$i)) $83 = $74 & $75; else if ($74 >>> 0 < $$0$i >>> 0) $83 = $74; else $83 = ($74 >>> 0) % ($$0$i >>> 0) | 0;
    HEAP32[(HEAP32[$0 >> 2] | 0) + ($83 << 2) >> 2] = $70;
    $$pre$phi$iZ2D = $2;
   }
  } else {
   HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[$62 >> 2];
   HEAP32[$62 >> 2] = HEAP32[$2 >> 2];
   $$pre$phi$iZ2D = $2;
  }
  $87 = HEAP32[$$pre$phi$iZ2D >> 2] | 0;
  HEAP32[$32 >> 2] = (HEAP32[$32 >> 2] | 0) + 1;
  HEAP32[$$pre$phi$iZ2D >> 2] = 0;
  $$1$i = $87;
 }
 STACKTOP = sp;
 return $$1$i + 16 | 0;
}

function __ZNSt3__213unordered_mapIi7ARParamNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$053$i = 0, $$054$i = 0, $$1$i = 0, $$155$i = 0, $$pn$i = 0, $$pre$phi$iZ2D = 0, $11 = 0, $17 = 0, $18 = 0, $2 = 0, $22 = 0, $28 = 0, $3 = 0, $32 = 0, $35 = 0.0, $38 = 0.0, $4 = 0, $48 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $62 = 0, $64 = 0, $7 = 0, $70 = 0, $71 = 0, $74 = 0, $75 = 0, $8 = 0, $83 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp + 4 | 0;
 $3 = sp;
 $4 = sp + 16 | 0;
 HEAP32[$3 >> 2] = $1;
 $5 = HEAP32[$1 >> 2] | 0;
 $6 = $0 + 4 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = ($7 | 0) == 0;
 L1 : do if ($8) {
  $$054$i = 0;
  label = 16;
 } else {
  $9 = $7 + -1 | 0;
  $11 = ($9 & $7 | 0) == 0;
  if ($11) $17 = $9 & $5; else if ($5 >>> 0 < $7 >>> 0) $17 = $5; else $17 = ($5 >>> 0) % ($7 >>> 0) | 0;
  $18 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($17 << 2) >> 2] | 0;
  if (!$18) {
   $$054$i = $17;
   label = 16;
  } else {
   $$pn$i = $18;
   while (1) {
    $$053$i = HEAP32[$$pn$i >> 2] | 0;
    if (!$$053$i) {
     $$054$i = $17;
     label = 16;
     break L1;
    }
    $22 = HEAP32[$$053$i + 4 >> 2] | 0;
    if (($22 | 0) != ($5 | 0)) {
     if ($11) $28 = $22 & $9; else if ($22 >>> 0 < $7 >>> 0) $28 = $22; else $28 = ($22 >>> 0) % ($7 >>> 0) | 0;
     if (($28 | 0) != ($17 | 0)) {
      $$054$i = $17;
      label = 16;
      break L1;
     }
    }
    if ((HEAP32[$$053$i + 8 >> 2] | 0) == ($5 | 0)) {
     $$1$i = $$053$i;
     break;
    } else $$pn$i = $$053$i;
   }
  }
 } while (0);
 if ((label | 0) == 16) {
  __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKiEEENSJ_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS3_PvEENS_22__hash_node_destructorINSC_ISR_EEEEEEjOT_DpOT0_($2, $0, $5, 18020, $3, $4);
  $32 = $0 + 12 | 0;
  $35 = +(((HEAP32[$32 >> 2] | 0) + 1 | 0) >>> 0);
  $38 = +HEAPF32[$0 + 16 >> 2];
  do if ($8 | $38 * +($7 >>> 0) < $35) {
   $48 = $7 << 1 | ($7 >>> 0 < 3 | ($7 + -1 & $7 | 0) != 0) & 1;
   $51 = ~~+Math_ceil(+($35 / $38)) >>> 0;
   __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6rehashEj($0, $48 >>> 0 < $51 >>> 0 ? $51 : $48);
   $53 = HEAP32[$6 >> 2] | 0;
   $54 = $53 + -1 | 0;
   if (!($54 & $53)) {
    $$0$i = $53;
    $$155$i = $54 & $5;
    break;
   }
   if ($5 >>> 0 < $53 >>> 0) {
    $$0$i = $53;
    $$155$i = $5;
   } else {
    $$0$i = $53;
    $$155$i = ($5 >>> 0) % ($53 >>> 0) | 0;
   }
  } else {
   $$0$i = $7;
   $$155$i = $$054$i;
  } while (0);
  $62 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($$155$i << 2) >> 2] | 0;
  if (!$62) {
   $64 = $0 + 8 | 0;
   HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[$64 >> 2];
   HEAP32[$64 >> 2] = HEAP32[$2 >> 2];
   HEAP32[(HEAP32[$0 >> 2] | 0) + ($$155$i << 2) >> 2] = $64;
   $70 = HEAP32[$2 >> 2] | 0;
   $71 = HEAP32[$70 >> 2] | 0;
   if (!$71) $$pre$phi$iZ2D = $2; else {
    $74 = HEAP32[$71 + 4 >> 2] | 0;
    $75 = $$0$i + -1 | 0;
    if (!($75 & $$0$i)) $83 = $74 & $75; else if ($74 >>> 0 < $$0$i >>> 0) $83 = $74; else $83 = ($74 >>> 0) % ($$0$i >>> 0) | 0;
    HEAP32[(HEAP32[$0 >> 2] | 0) + ($83 << 2) >> 2] = $70;
    $$pre$phi$iZ2D = $2;
   }
  } else {
   HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[$62 >> 2];
   HEAP32[$62 >> 2] = HEAP32[$2 >> 2];
   $$pre$phi$iZ2D = $2;
  }
  $87 = HEAP32[$$pre$phi$iZ2D >> 2] | 0;
  HEAP32[$32 >> 2] = (HEAP32[$32 >> 2] | 0) + 1;
  HEAP32[$$pre$phi$iZ2D >> 2] = 0;
  $$1$i = $87;
 }
 STACKTOP = sp;
 return $$1$i + 16 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i69 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i68 = 0, $$2 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $39 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $55 = 0, $60 = 0, $61 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 L1 : do if (($1 - $0 | 0) > 1) {
  $8 = HEAP8[$0 >> 0] | 0;
  switch ($8 << 24 >> 24) {
  case 100:
  case 111:
   {
    if ((HEAP8[$0 + 1 >> 0] | 0) == 110) {
     $13 = $0 + 2 | 0;
     if ($8 << 24 >> 24 != 111) {
      $39 = __ZN10__cxxabiv112_GLOBAL__N_121parse_destructor_nameINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
      $$2 = ($39 | 0) == ($13 | 0) ? $0 : $39;
      break L1;
     }
     $14 = __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
     if (($14 | 0) == ($13 | 0)) {
      $$2 = $0;
      break L1;
     }
     $16 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0;
     if (($16 | 0) == ($14 | 0)) {
      $$2 = $14;
      break L1;
     }
     $18 = $2 + 4 | 0;
     $19 = HEAP32[$18 >> 2] | 0;
     if ((($19 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$2 = $16;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $19 + -24 | 0);
     $26 = HEAP32[$18 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$18 >> 2] = $26 + -24;
     $31 = HEAP8[$3 + 11 >> 0] | 0;
     $32 = $31 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($26 + -48 | 0, $32 ? HEAP32[$3 >> 2] | 0 : $3, $32 ? HEAP32[$3 + 4 >> 2] | 0 : $31 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$2 = $16;
     break L1;
    }
    break;
   }
  default:
   {}
  }
  $41 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
  if (($41 | 0) == ($0 | 0)) {
   $43 = __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   if (($43 | 0) == ($0 | 0)) $$2 = $0; else {
    $45 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($43, $1, $2) | 0;
    if (($45 | 0) == ($43 | 0)) $$2 = $43; else {
     $47 = $2 + 4 | 0;
     $48 = HEAP32[$47 >> 2] | 0;
     if ((($48 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$2 = $45; else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $48 + -24 | 0);
      $55 = HEAP32[$47 >> 2] | 0;
      $$0$i$i$idx$i68 = 0;
      while (1) {
       if (($$0$i$i$idx$i68 | 0) == -1) break;
       $$0$i$i$add$i69 = $$0$i$i$idx$i68 + -1 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($55 + ($$0$i$i$add$i69 * 24 | 0) | 0);
       $$0$i$i$idx$i68 = $$0$i$i$add$i69;
      }
      HEAP32[$47 >> 2] = $55 + -24;
      $60 = HEAP8[$3 + 11 >> 0] | 0;
      $61 = $60 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($55 + -48 | 0, $61 ? HEAP32[$3 >> 2] | 0 : $3, $61 ? HEAP32[$3 + 4 >> 2] | 0 : $60 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$2 = $45;
     }
    }
   }
  } else $$2 = $41;
 } else $$2 = $0; while (0);
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$0$i$i = 0, $$038 = 0, $$040$in = 0, $$3 = 0, $12 = 0, $20 = 0, $22 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $9 = 0, $isdigittmp = 0, $isdigittmp47 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 40 | 0;
 $4 = sp + 16 | 0;
 $5 = sp;
 L1 : do if (($0 | 0) == ($1 | 0)) $$3 = $0; else {
  $isdigittmp = (HEAP8[$0 >> 0] | 0) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $9 = $0 + 1 | 0;
   if (($9 | 0) == ($1 | 0)) $$3 = $0; else {
    $$038 = $isdigittmp;
    $$040$in = $9;
    while (1) {
     $isdigittmp47 = (HEAP8[$$040$in >> 0] | 0) + -48 | 0;
     if ($isdigittmp47 >>> 0 >= 10) break;
     $12 = $$040$in + 1 | 0;
     if (($12 | 0) == ($1 | 0)) {
      $$3 = $0;
      break L1;
     }
     $$038 = $isdigittmp47 + ($$038 * 10 | 0) | 0;
     $$040$in = $12;
    }
    if (($1 - $$040$in | 0) >>> 0 < $$038 >>> 0) $$3 = $0; else {
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     HEAP32[$3 + 8 >> 2] = 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, $$040$in, $$038);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($4, $3, 10);
     $20 = __ZNSt3__211char_traitsIcE6lengthEPKc(16499) | 0;
     $22 = HEAP8[$4 + 11 >> 0] | 0;
     if (($20 | 0) == (($22 << 24 >> 24 < 0 ? HEAP32[$4 + 4 >> 2] | 0 : $22 & 255) | 0)) $$0$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($4, 16499, $20) | 0) == 0; else $$0$i = 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     if ($$0$i) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj22EEERAT__Kc($4);
      $31 = $2 + 4 | 0;
      $32 = HEAP32[$31 >> 2] | 0;
      if ($32 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($32, $4);
       HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $4);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     } else {
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
      HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
      $$0$i$i = 0;
      while (1) {
       if (($$0$i$i | 0) == 3) break;
       HEAP32[$3 + ($$0$i$i << 2) >> 2] = 0;
       $$0$i$i = $$0$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
      $40 = $2 + 4 | 0;
      $41 = HEAP32[$40 >> 2] | 0;
      if ($41 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($41, $4);
       HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $4);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $$040$in + $$038 | 0;
    }
   }
  } else $$3 = $0;
 } while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i$i$i = 0, $$025 = 0, $$1 = 0, $12 = 0, $13 = 0, $15 = 0, $23 = 0, $24 = 0, $30 = 0, $31 = 0, $39 = 0, $4 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $4 = sp + 24 | 0;
 $5 = sp;
 $6 = sp + 12 | 0;
 $7 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($0, $1) | 0;
 if (($7 | 0) == ($0 | 0) | ($7 | 0) == ($1 | 0)) $$1 = $0; else if ((HEAP8[$7 >> 0] | 0) == 69) {
  $12 = $2 + 11 | 0;
  $13 = HEAP8[$12 >> 0] | 0;
  $15 = $2 + 4 | 0;
  do if (($13 << 24 >> 24 < 0 ? HEAP32[$15 >> 2] | 0 : $13 & 255) >>> 0 > 3) {
   __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($6, 15119, $2);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15117) | 0;
   HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
   $23 = $3 + 4 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   if ($24 >>> 0 < (HEAP32[$3 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($24, $4);
    HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($3, $4);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
  } else {
   $30 = $3 + 4 | 0;
   $31 = HEAP32[$30 >> 2] | 0;
   if ($31 >>> 0 < (HEAP32[$3 + 8 >> 2] | 0) >>> 0) {
    HEAP32[$31 >> 2] = 0;
    HEAP32[$31 + 4 >> 2] = 0;
    HEAP32[$31 + 8 >> 2] = 0;
    HEAP32[$31 + 12 >> 2] = 0;
    HEAP32[$31 + 16 >> 2] = 0;
    HEAP32[$31 + 20 >> 2] = 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($31);
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 24;
    break;
   } else {
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($3);
    break;
   }
  } while (0);
  $39 = $3 + 4 | 0;
  if ((HEAP8[$0 >> 0] | 0) == 110) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc((HEAP32[$39 >> 2] | 0) + -24 | 0, 45);
   $$025 = $0 + 1 | 0;
  } else $$025 = $0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE23__append_forward_unsafeIPKcEERS7_T_SC_((HEAP32[$39 >> 2] | 0) + -24 | 0, $$025, $7);
  $45 = HEAP8[$12 >> 0] | 0;
  $46 = $45 << 24 >> 24 < 0;
  $49 = $46 ? HEAP32[$15 >> 2] | 0 : $45 & 255;
  if ($49 >>> 0 < 4) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$39 >> 2] | 0) + -24 | 0, $46 ? HEAP32[$2 >> 2] | 0 : $2, $49) | 0;
  $$1 = $7 + 1 | 0;
 } else $$1 = $0;
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$059 = 0, $$1 = 0, $$byval_copy = 0, $$sroa$0$1 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $46 = 0, $47 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $58 = 0, $6 = 0, $69 = 0, $7 = 0, $72 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy = sp + 16 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 $6 = $0 + 11 | 0;
 $7 = HEAP8[$6 >> 0] | 0;
 $8 = $7 << 24 >> 24 < 0;
 if ($8) $11 = HEAP32[$0 >> 2] | 0; else $11 = $0;
 $12 = HEAP32[$1 >> 2] | 0;
 $13 = $12 - $11 | 0;
 $16 = $3 - $2 | 0;
 do if (!$16) {
  $69 = $7;
  label = 27;
 } else {
  if ($8) {
   $23 = HEAP32[$0 >> 2] | 0;
   $24 = HEAP32[$0 + 4 >> 2] | 0;
  } else {
   $23 = $0;
   $24 = $7 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($2, $23, $23 + $24 | 0) | 0) {
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($4, $2, $3);
   HEAP32[$5 >> 2] = $12;
   $27 = HEAP8[$4 + 11 >> 0] | 0;
   $28 = $27 << 24 >> 24 < 0;
   $33 = $28 ? HEAP32[$4 >> 2] | 0 : $4;
   $35 = $33 + ($28 ? HEAP32[$4 + 4 >> 2] | 0 : $27 & 255) | 0;
   HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2];
   $36 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($0, $$byval_copy, $33, $35) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   $$sroa$0$1 = $36;
   break;
  }
  $37 = HEAP8[$6 >> 0] | 0;
  $38 = $37 << 24 >> 24 < 0;
  if ($38) {
   $46 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
   $47 = HEAP32[$0 + 4 >> 2] | 0;
  } else {
   $46 = 10;
   $47 = $37 & 255;
  }
  if (($46 - $47 | 0) >>> 0 < $16 >>> 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($0, $46, $47 + $16 - $46 | 0, $47, $13, $16);
   $$0 = HEAP32[$0 >> 2] | 0;
  } else {
   if ($38) $53 = HEAP32[$0 >> 2] | 0; else $53 = $0;
   $50 = $47 - $13 | 0;
   if (!$50) $$0 = $53; else {
    $52 = $53 + $13 | 0;
    __ZNSt3__211char_traitsIcE4moveEPcPKcj($52 + $16 | 0, $52, $50) | 0;
    $$0 = $53;
   }
  }
  $58 = $47 + $16 | 0;
  if ((HEAP8[$6 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $58; else HEAP8[$6 >> 0] = $58;
  HEAP8[$$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + $58 | 0, $$byval_copy);
  $$059 = $2;
  $$1 = $$0 + $13 | 0;
  while (1) {
   if (($$059 | 0) == ($3 | 0)) break;
   __ZNSt3__211char_traitsIcE6assignERcRKc($$1, $$059);
   $$059 = $$059 + 1 | 0;
   $$1 = $$1 + 1 | 0;
  }
  $69 = HEAP8[$6 >> 0] | 0;
  label = 27;
 } while (0);
 if ((label | 0) == 27) {
  if ($69 << 24 >> 24 < 0) $72 = HEAP32[$0 >> 2] | 0; else $72 = $0;
  $$sroa$0$1 = $72 + $13 | 0;
 }
 STACKTOP = sp;
 return $$sroa$0$1 | 0;
}

function _icpGetJ_Xc_S($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0108 = 0, $$0109 = 0, $104 = 0.0, $11 = 0, $111 = 0.0, $118 = 0.0, $12 = 0.0, $128 = 0, $134 = 0.0, $135 = 0.0, $15 = 0, $17 = 0, $18 = 0.0, $24 = 0, $26 = 0.0, $28 = 0, $32 = 0, $4 = 0, $40 = 0, $43 = 0, $45 = 0.0, $48 = 0, $5 = 0, $56 = 0.0, $60 = 0.0, $63 = 0.0, $70 = 0.0, $80 = 0.0, $87 = 0.0, $9 = 0, $94 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(864);
 $4 = sp + 576 | 0;
 $5 = sp;
 $9 = $2 + 8 | 0;
 $11 = $3 + 8 | 0;
 $12 = +HEAPF64[$11 >> 3];
 $15 = $2 + 16 | 0;
 $17 = $3 + 16 | 0;
 $18 = +HEAPF64[$17 >> 3];
 HEAPF64[$1 >> 3] = +HEAPF64[$2 + 24 >> 3] + (+HEAPF64[$2 >> 3] * +HEAPF64[$3 >> 3] + +HEAPF64[$9 >> 3] * $12 + +HEAPF64[$15 >> 3] * $18);
 $24 = $2 + 32 | 0;
 $26 = +HEAPF64[$3 >> 3];
 $28 = $2 + 40 | 0;
 $32 = $2 + 48 | 0;
 HEAPF64[$1 + 8 >> 3] = +HEAPF64[$2 + 56 >> 3] + (+HEAPF64[$24 >> 3] * $26 + $12 * +HEAPF64[$28 >> 3] + $18 * +HEAPF64[$32 >> 3]);
 $40 = $2 + 64 | 0;
 $43 = $2 + 72 | 0;
 $45 = +HEAPF64[$11 >> 3];
 $48 = $2 + 80 | 0;
 HEAPF64[$1 + 16 >> 3] = +HEAPF64[$2 + 88 >> 3] + ($26 * +HEAPF64[$40 >> 3] + +HEAPF64[$43 >> 3] * $45 + $18 * +HEAPF64[$48 >> 3]);
 $56 = +HEAPF64[$2 >> 3];
 HEAPF64[$4 >> 3] = $26 * $56;
 HEAPF64[$4 + 8 >> 3] = $45 * $56;
 $60 = +HEAPF64[$17 >> 3];
 HEAPF64[$4 + 16 >> 3] = $56 * $60;
 $63 = +HEAPF64[$9 >> 3];
 HEAPF64[$4 + 24 >> 3] = $26 * $63;
 HEAPF64[$4 + 32 >> 3] = $45 * $63;
 HEAPF64[$4 + 40 >> 3] = $60 * $63;
 $70 = +HEAPF64[$15 >> 3];
 HEAPF64[$4 + 48 >> 3] = $26 * $70;
 HEAPF64[$4 + 56 >> 3] = $45 * $70;
 HEAPF64[$4 + 64 >> 3] = $60 * $70;
 HEAPF64[$4 + 72 >> 3] = $56;
 HEAPF64[$4 + 80 >> 3] = $63;
 HEAPF64[$4 + 88 >> 3] = $70;
 $80 = +HEAPF64[$24 >> 3];
 HEAPF64[$4 + 96 >> 3] = $26 * $80;
 HEAPF64[$4 + 104 >> 3] = $45 * $80;
 HEAPF64[$4 + 112 >> 3] = $60 * $80;
 $87 = +HEAPF64[$28 >> 3];
 HEAPF64[$4 + 120 >> 3] = $26 * $87;
 HEAPF64[$4 + 128 >> 3] = $45 * $87;
 HEAPF64[$4 + 136 >> 3] = $60 * $87;
 $94 = +HEAPF64[$32 >> 3];
 HEAPF64[$4 + 144 >> 3] = $26 * $94;
 HEAPF64[$4 + 152 >> 3] = $45 * $94;
 HEAPF64[$4 + 160 >> 3] = $60 * $94;
 HEAPF64[$4 + 168 >> 3] = $80;
 HEAPF64[$4 + 176 >> 3] = $87;
 HEAPF64[$4 + 184 >> 3] = $94;
 $104 = +HEAPF64[$40 >> 3];
 HEAPF64[$4 + 192 >> 3] = $26 * $104;
 HEAPF64[$4 + 200 >> 3] = $45 * $104;
 HEAPF64[$4 + 208 >> 3] = $60 * $104;
 $111 = +HEAPF64[$43 >> 3];
 HEAPF64[$4 + 216 >> 3] = $26 * $111;
 HEAPF64[$4 + 224 >> 3] = $45 * $111;
 HEAPF64[$4 + 232 >> 3] = $60 * $111;
 $118 = +HEAPF64[$48 >> 3];
 HEAPF64[$4 + 240 >> 3] = $26 * $118;
 HEAPF64[$4 + 248 >> 3] = $45 * $118;
 HEAPF64[$4 + 256 >> 3] = $60 * $118;
 HEAPF64[$4 + 264 >> 3] = $104;
 HEAPF64[$4 + 272 >> 3] = $111;
 HEAPF64[$4 + 280 >> 3] = $118;
 _icpGetJ_T_S($5);
 $$0108 = 0;
 while (1) {
  if (($$0108 | 0) == 3) break;
  $$0109 = 0;
  while (1) {
   if (($$0109 | 0) == 6) break;
   $128 = $0 + ($$0108 * 48 | 0) + ($$0109 << 3) | 0;
   HEAPF64[$128 >> 3] = 0.0;
   $$0 = 0;
   $135 = 0.0;
   while (1) {
    if (($$0 | 0) == 12) break;
    $134 = $135 + +HEAPF64[$4 + ($$0108 * 96 | 0) + ($$0 << 3) >> 3] * +HEAPF64[$5 + ($$0 * 48 | 0) + ($$0109 << 3) >> 3];
    HEAPF64[$128 >> 3] = $134;
    $$0 = $$0 + 1 | 0;
    $135 = $134;
   }
   $$0109 = $$0109 + 1 | 0;
  }
  $$0108 = $$0108 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_ctor_dtor_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$023 = 0, $12 = 0, $13 = 0, $21 = 0, $3 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 40 | 0;
 $4 = sp + 24 | 0;
 $5 = sp;
 $6 = sp + 12 | 0;
 L1 : do if (($1 - $0 | 0) > 1) {
  $12 = $2 + 4 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  if ((HEAP32[$2 >> 2] | 0) == ($13 | 0)) $$023 = $0; else {
   switch (HEAP8[$0 >> 0] | 0) {
   case 67:
    {
     switch (HEAP8[$0 + 1 >> 0] | 0) {
     case 53:
     case 51:
     case 50:
     case 49:
      break;
     default:
      {
       $$023 = $0;
       break L1;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($4, $13 + -24 | 0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
     $21 = HEAP32[$12 >> 2] | 0;
     if ($21 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($21, $3);
      HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     HEAP8[$2 + 60 >> 0] = 1;
     $$023 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 68:
    break;
   default:
    {
     $$023 = $0;
     break L1;
    }
   }
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 53:
   case 50:
   case 49:
   case 48:
    break;
   default:
    {
     $$023 = $0;
     break L1;
    }
   }
   __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($6, $13 + -24 | 0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 15189) | 0;
   HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $5);
   $36 = HEAP32[$12 >> 2] | 0;
   if ($36 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($36, $3);
    HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   HEAP8[$2 + 60 >> 0] = 1;
   $$023 = $0 + 2 | 0;
  }
 } else $$023 = $0; while (0);
 STACKTOP = sp;
 return $$023 | 0;
}

function _icpPoint($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$088 = 0, $$090 = 0.0, $$091 = 0.0, $$092 = 0, $$1 = 0, $$189 = 0, $$2 = 0, $12 = 0, $15 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $34 = 0, $38 = 0.0, $42 = 0.0, $47 = 0, $5 = 0, $53 = 0.0, $6 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $vararg_buffer1 = sp + 168 | 0;
 $vararg_buffer = sp + 160 | 0;
 $5 = sp + 144 | 0;
 $6 = sp + 48 | 0;
 $7 = sp;
 $8 = $1 + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 do if (($9 | 0) < 3) $$092 = -1; else {
  $12 = _malloc($9 * 96 | 0) | 0;
  if (!$12) {
   _arLog(0, 3, 4689, $vararg_buffer);
   $$092 = -1;
   break;
  }
  $15 = _malloc($9 << 4) | 0;
  if (!$15) {
   _arLog(0, 3, 4689, $vararg_buffer1);
   _free($12);
   $$092 = -1;
   break;
  }
  $$0 = 0;
  while (1) {
   if (($$0 | 0) == 3) break;
   $$088 = 0;
   while (1) {
    if (($$088 | 0) == 4) break;
    HEAPF64[$3 + ($$0 << 5) + ($$088 << 3) >> 3] = +HEAPF64[$2 + ($$0 << 5) + ($$088 << 3) >> 3];
    $$088 = $$088 + 1 | 0;
   }
   $$0 = $$0 + 1 | 0;
  }
  $22 = $1 + 4 | 0;
  $23 = $5 + 8 | 0;
  $24 = $0 + 104 | 0;
  $25 = $0 + 96 | 0;
  $26 = $0 + 120 | 0;
  $27 = $0 + 112 | 0;
  $$091 = 0.0;
  $$189 = 0;
  L17 : while (1) {
   _arUtilMatMul($0, $3, $6) | 0;
   $$090 = 0.0;
   $$1 = 0;
   while (1) {
    $28 = HEAP32[$8 >> 2] | 0;
    if (($$1 | 0) >= ($28 | 0)) break;
    if ((_icpGetU_from_X_by_MatX2U($5, $6, (HEAP32[$22 >> 2] | 0) + ($$1 * 24 | 0) | 0) | 0) < 0) {
     label = 16;
     break L17;
    }
    $34 = HEAP32[$1 >> 2] | 0;
    $38 = +HEAPF64[$34 + ($$1 << 4) >> 3] - +HEAPF64[$5 >> 3];
    $42 = +HEAPF64[$34 + ($$1 << 4) + 8 >> 3] - +HEAPF64[$23 >> 3];
    $47 = $$1 << 1;
    HEAPF64[$15 + ($47 << 3) >> 3] = $38;
    HEAPF64[$15 + (($47 | 1) << 3) >> 3] = $42;
    $$090 = $$090 + ($38 * $38 + $42 * $42);
    $$1 = $$1 + 1 | 0;
   }
   $53 = $$090 / +($28 | 0);
   if ($53 < +HEAPF64[$24 >> 3]) {
    label = 31;
    break;
   }
   if ($$189 | 0) if ($53 < +HEAPF64[$26 >> 3]) if ($53 / $$091 > +HEAPF64[$27 >> 3]) {
    label = 31;
    break;
   }
   if (($$189 | 0) == (HEAP32[$25 >> 2] | 0)) {
    label = 31;
    break;
   }
   $$2 = 0;
   $65 = $28;
   while (1) {
    if (($$2 | 0) >= ($65 | 0)) break;
    if ((_icpGetJ_U_S($12 + ($$2 * 12 << 3) | 0, $0, $3, (HEAP32[$22 >> 2] | 0) + ($$2 * 24 | 0) | 0) | 0) < 0) {
     label = 27;
     break L17;
    }
    $$2 = $$2 + 1 | 0;
    $65 = HEAP32[$8 >> 2] | 0;
   }
   if ((_icpGetDeltaS($7, $15, $12, $65 << 1) | 0) < 0) {
    label = 29;
    break;
   }
   _icpUpdateMat($3, $7) | 0;
   $$091 = $53;
   $$189 = $$189 + 1 | 0;
  }
  if ((label | 0) == 16) {
   _icpGetXw2XcCleanup($12, $15);
   $$092 = -1;
   break;
  } else if ((label | 0) == 27) {
   _icpGetXw2XcCleanup($12, $15);
   $$092 = -1;
   break;
  } else if ((label | 0) == 29) {
   _icpGetXw2XcCleanup($12, $15);
   $$092 = -1;
   break;
  } else if ((label | 0) == 31) {
   HEAPF64[$4 >> 3] = $53;
   _free($12);
   _free($15);
   $$092 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$092 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i20 = 0, $$018 = 0, $12 = 0, $18 = 0, $19 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $4 = sp + 48 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 12 | 0;
 $8 = sp;
 $9 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $3) | 0;
 if (($9 | 0) == ($0 | 0)) $$018 = $0; else {
  $12 = $3 + 4 | 0;
  if ((HEAP32[$3 >> 2] | 0) == (HEAP32[$12 >> 2] | 0)) $$018 = $0; else {
   __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($7, $2, 15119);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8, (HEAP32[$12 >> 2] | 0) + -24 | 0);
   $18 = HEAP8[$8 + 11 >> 0] | 0;
   $19 = $18 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, $19 ? HEAP32[$8 >> 2] | 0 : $8, $19 ? HEAP32[$8 + 4 >> 2] | 0 : $18 & 255) | 0;
   HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$7 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15117) | 0;
   HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
   $$0$i$i$i20 = 0;
   while (1) {
    if (($$0$i$i$i20 | 0) == 3) break;
    HEAP32[$6 + ($$0$i$i$i20 << 2) >> 2] = 0;
    $$0$i$i$i20 = $$0$i$i$i20 + 1 | 0;
   }
   $32 = HEAP32[$12 >> 2] | 0;
   $33 = $32 + -24 | 0;
   $34 = $33 + 11 | 0;
   if ((HEAP8[$34 >> 0] | 0) < 0) {
    $37 = HEAP32[$33 >> 2] | 0;
    HEAP8[$4 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($37, $4);
    HEAP32[$32 + -20 >> 2] = 0;
   } else {
    HEAP8[$4 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($33, $4);
    HEAP8[$34 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($33);
   HEAP32[$33 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$33 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
   HEAP32[$33 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
   $$0$i$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i$i | 0) == 3) break;
    HEAP32[$5 + ($$0$i$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
   $$018 = $9;
  }
 }
 STACKTOP = sp;
 return $$018 | 0;
}

function _scanexp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$04858 = 0, $$049 = 0, $$157 = 0, $$251 = 0, $$pre$phi69Z2D = 0, $100 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $36 = 0, $4 = 0, $43 = 0, $44 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $61 = 0, $68 = 0, $69 = 0, $78 = 0, $86 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $99 = 0, label = 0;
 $2 = $0 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $0 + 100 | 0;
 if ($3 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
  HEAP32[$2 >> 2] = $3 + 1;
  $11 = HEAPU8[$3 >> 0] | 0;
 } else $11 = ___shgetc($0) | 0;
 switch ($11 | 0) {
 case 43:
 case 45:
  {
   $13 = ($11 | 0) == 45 & 1;
   $14 = HEAP32[$2 >> 2] | 0;
   if ($14 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $14 + 1;
    $22 = HEAPU8[$14 >> 0] | 0;
   } else $22 = ___shgetc($0) | 0;
   $21 = $22 + -48 | 0;
   if (($1 | 0) != 0 & $21 >>> 0 > 9) if (!(HEAP32[$4 >> 2] | 0)) {
    $100 = 0;
    $99 = -2147483648;
   } else {
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
    label = 14;
   } else {
    $$0 = $13;
    $$049 = $22;
    $$pre$phi69Z2D = $21;
    label = 12;
   }
   break;
  }
 default:
  {
   $$0 = 0;
   $$049 = $11;
   $$pre$phi69Z2D = $11 + -48 | 0;
   label = 12;
  }
 }
 if ((label | 0) == 12) if ($$pre$phi69Z2D >>> 0 > 9) label = 14; else {
  $$04858 = 0;
  $$157 = $$049;
  while (1) {
   $$04858 = $$157 + -48 + ($$04858 * 10 | 0) | 0;
   $36 = HEAP32[$2 >> 2] | 0;
   if ($36 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $36 + 1;
    $44 = HEAPU8[$36 >> 0] | 0;
   } else $44 = ___shgetc($0) | 0;
   $43 = $44 + -48 | 0;
   if (!($43 >>> 0 < 10 & ($$04858 | 0) < 214748364)) break; else $$157 = $44;
  }
  $49 = (($$04858 | 0) < 0) << 31 >> 31;
  if ($43 >>> 0 < 10) {
   $$251 = $44;
   $51 = $$04858;
   $52 = $49;
   while (1) {
    $53 = ___muldi3($51 | 0, $52 | 0, 10, 0) | 0;
    $54 = tempRet0;
    $57 = _i64Add($$251 | 0, (($$251 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    $51 = _i64Add($57 | 0, tempRet0 | 0, $53 | 0, $54 | 0) | 0;
    $52 = tempRet0;
    $61 = HEAP32[$2 >> 2] | 0;
    if ($61 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $61 + 1;
     $69 = HEAPU8[$61 >> 0] | 0;
    } else $69 = ___shgetc($0) | 0;
    $68 = $69 + -48 | 0;
    if (!($68 >>> 0 < 10 & (($52 | 0) < 21474836 | ($52 | 0) == 21474836 & $51 >>> 0 < 2061584302))) break; else $$251 = $69;
   }
   if ($68 >>> 0 < 10) {
    do {
     $78 = HEAP32[$2 >> 2] | 0;
     if ($78 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$2 >> 2] = $78 + 1;
      $86 = HEAPU8[$78 >> 0] | 0;
     } else $86 = ___shgetc($0) | 0;
    } while (($86 + -48 | 0) >>> 0 < 10);
    $93 = $51;
    $94 = $52;
   } else {
    $93 = $51;
    $94 = $52;
   }
  } else {
   $93 = $$04858;
   $94 = $49;
  }
  if (HEAP32[$4 >> 2] | 0) HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
  $92 = ($$0 | 0) == 0;
  $95 = _i64Subtract(0, 0, $93 | 0, $94 | 0) | 0;
  $100 = $92 ? $93 : $95;
  $99 = $92 ? $94 : tempRet0;
 }
 if ((label | 0) == 14) if (!(HEAP32[$4 >> 2] | 0)) {
  $100 = 0;
  $99 = -2147483648;
 } else {
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
  $100 = 0;
  $99 = -2147483648;
 }
 tempRet0 = $99;
 return $100 | 0;
}

function _arParamIdeal2Observ($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $104 = 0.0, $110 = 0.0, $12 = 0.0, $122 = 0.0, $128 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $136 = 0.0, $14 = 0.0, $147 = 0.0, $16 = 0.0, $18 = 0.0, $20 = 0.0, $22 = 0.0, $25 = 0.0, $28 = 0.0, $31 = 0.0, $36 = 0.0, $61 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $69 = 0.0, $77 = 0.0, $89 = 0.0, $96 = 0.0, $99 = 0.0, $storemerge$sink = 0.0, label = 0;
 L1 : do switch ($5 | 0) {
 case 4:
  {
   $10 = +HEAPF64[$0 + 16 >> 3];
   $12 = +HEAPF64[$0 + 24 >> 3];
   $14 = +HEAPF64[$0 + 32 >> 3];
   $16 = +HEAPF64[$0 + 40 >> 3];
   $18 = +HEAPF64[$0 + 48 >> 3];
   $20 = +HEAPF64[$0 + 56 >> 3];
   $22 = +HEAPF64[$0 + 64 >> 3];
   $25 = ($1 - $18) * $22 / $14;
   $28 = ($2 - $20) * $22 / $16;
   $31 = $25 * $25 + $28 * $28;
   $36 = +HEAPF64[$0 >> 3] * $31 + 1.0 + $31 * (+HEAPF64[$0 + 8 >> 3] * $31);
   HEAPF64[$3 >> 3] = $18 + $14 * ($12 * ($31 + $25 * ($25 * 2.0)) + ($28 * ($10 * 2.0 * $25) + $25 * $36));
   $storemerge$sink = $20 + $16 * ($28 * ($12 * 2.0 * $25) + ($10 * ($31 + $28 * ($28 * 2.0)) + $28 * $36));
   label = 12;
   break;
  }
 case 3:
  {
   $61 = +HEAPF64[$0 >> 3];
   $64 = +HEAPF64[$0 + 16 >> 3];
   $65 = ($1 - $61) * $64;
   $66 = $0 + 8 | 0;
   $69 = $64 * ($2 - +HEAPF64[$66 >> 3]);
   if ($65 == 0.0 & $69 == 0.0) {
    HEAPF64[$3 >> 3] = $61;
    $storemerge$sink = +HEAPF64[$66 >> 3];
    label = 12;
    break L1;
   } else {
    $77 = $65 * $65 + $69 * $69;
    $89 = 1.0 - $77 * (+HEAPF64[$0 + 32 >> 3] / 1.0e8) - $77 * ($77 * (+HEAPF64[$0 + 40 >> 3] / 1.0e8 / 1.0e5));
    HEAPF64[$3 >> 3] = $61 + +HEAPF64[$0 + 24 >> 3] * ($65 * $89);
    $storemerge$sink = +HEAPF64[$66 >> 3] + $69 * $89;
    label = 12;
    break L1;
   }
   break;
  }
 case 2:
  {
   $96 = +HEAPF64[$0 >> 3];
   $99 = +HEAPF64[$0 + 16 >> 3];
   $100 = ($1 - $96) * $99;
   $101 = $0 + 8 | 0;
   $104 = $99 * ($2 - +HEAPF64[$101 >> 3]);
   if ($100 == 0.0 & $104 == 0.0) {
    HEAPF64[$3 >> 3] = $96;
    $storemerge$sink = +HEAPF64[$101 >> 3];
    label = 12;
    break L1;
   } else {
    $110 = $100 * $100 + $104 * $104;
    $122 = 1.0 - $110 * (+HEAPF64[$0 + 24 >> 3] / 1.0e8) - $110 * ($110 * (+HEAPF64[$0 + 32 >> 3] / 1.0e8 / 1.0e5));
    HEAPF64[$3 >> 3] = $96 + $100 * $122;
    $storemerge$sink = +HEAPF64[$101 >> 3] + $104 * $122;
    label = 12;
    break L1;
   }
   break;
  }
 case 1:
  {
   $128 = +HEAPF64[$0 >> 3];
   $131 = +HEAPF64[$0 + 16 >> 3];
   $132 = ($1 - $128) * $131;
   $133 = $0 + 8 | 0;
   $136 = $131 * ($2 - +HEAPF64[$133 >> 3]);
   if ($132 == 0.0 & $136 == 0.0) {
    HEAPF64[$3 >> 3] = $128;
    $storemerge$sink = +HEAPF64[$133 >> 3];
    label = 12;
    break L1;
   } else {
    $147 = 1.0 - ($132 * $132 + $136 * $136) * (+HEAPF64[$0 + 24 >> 3] / 1.0e8);
    HEAPF64[$3 >> 3] = $128 + $132 * $147;
    $storemerge$sink = +HEAPF64[$133 >> 3] + $136 * $147;
    label = 12;
    break L1;
   }
   break;
  }
 default:
  $$0 = -1;
 } while (0);
 if ((label | 0) == 12) {
  HEAPF64[$4 >> 3] = $storemerge$sink;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _arGetMarkerInfo($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = +$10;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 var $$0 = 0, $$0113 = 0, $$1 = 0, $$sink = 0, $$sink118 = 0, $$sink119$in = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $14 = sp + 4 | 0;
 $15 = sp;
 $16 = $8 >>> 0 < 2;
 $17 = ($8 | 0) == 2;
 $$0 = 0;
 $$0113 = 0;
 while (1) {
  if (($$0 | 0) >= ($5 | 0)) break;
  HEAP32[$11 + ($$0113 << 8) >> 2] = HEAP32[$4 + ($$0 * 80048 | 0) >> 2];
  if ((_arParamObserv2IdealLTf($9, +HEAPF64[$4 + ($$0 * 80048 | 0) + 8 >> 3], +HEAPF64[$4 + ($$0 * 80048 | 0) + 16 >> 3], $14, $15) | 0) < 0) $$1 = $$0113; else {
   HEAPF64[$11 + ($$0113 << 8) + 56 >> 3] = +HEAPF32[$14 >> 2];
   HEAPF64[$11 + ($$0113 << 8) + 64 >> 3] = +HEAPF32[$15 >> 2];
   $42 = $11 + ($$0113 << 8) + 168 | 0;
   if ((_arGetLine($4 + ($$0 * 80048 | 0) + 28 | 0, $4 + ($$0 * 80048 | 0) + 40028 | 0, HEAP32[$4 + ($$0 * 80048 | 0) + 24 >> 2] | 0, $4 + ($$0 * 80048 | 0) + 80028 | 0, $9, $11 + ($$0113 << 8) + 72 | 0, $42) | 0) < 0) $$1 = $$0113; else {
    $45 = $11 + ($$0113 << 8) + 8 | 0;
    $46 = $11 + ($$0113 << 8) + 20 | 0;
    $47 = $11 + ($$0113 << 8) + 40 | 0;
    $48 = $11 + ($$0113 << 8) + 12 | 0;
    $49 = $11 + ($$0113 << 8) + 24 | 0;
    $50 = $11 + ($$0113 << 8) + 48 | 0;
    $53 = _arPattGetIDGlobal($6, $7, $8, $0, $1, $2, $3, $9, $42, $10, $45, $46, $47, $48, $49, $50, $13, $11 + ($$0113 << 8) + 240 | 0, $11 + ($$0113 << 8) + 248 | 0) | 0;
    switch ($53 | 0) {
    case 0:
     {
      $$sink = $53;
      label = 12;
      break;
     }
    case -1:
     {
      $$sink = 2;
      label = 12;
      break;
     }
    case -2:
     {
      $$sink = 3;
      label = 12;
      break;
     }
    case -3:
     {
      $$sink = 4;
      label = 12;
      break;
     }
    case -4:
     {
      $$sink = 5;
      label = 12;
      break;
     }
    case -5:
     {
      $$sink = 9;
      label = 12;
      break;
     }
    case -6:
     {
      $$sink = 1;
      label = 12;
      break;
     }
    default:
     {}
    }
    if ((label | 0) == 12) {
     label = 0;
     HEAP32[$11 + ($$0113 << 8) + 236 >> 2] = $$sink;
    }
    if ($16) {
     HEAP32[$11 + ($$0113 << 8) + 4 >> 2] = HEAP32[$45 >> 2];
     $$sink118 = $47;
     $$sink119$in = $46;
     label = 17;
    } else if ($17) {
     HEAP32[$11 + ($$0113 << 8) + 4 >> 2] = HEAP32[$48 >> 2];
     $$sink118 = $50;
     $$sink119$in = $49;
     label = 17;
    }
    if ((label | 0) == 17) {
     label = 0;
     HEAP32[$11 + ($$0113 << 8) + 16 >> 2] = HEAP32[$$sink119$in >> 2];
     HEAPF64[$11 + ($$0113 << 8) + 32 >> 3] = +HEAPF64[$$sink118 >> 3];
    }
    $$1 = $$0113 + 1 | 0;
   }
  }
  $$0 = $$0 + 1 | 0;
  $$0113 = $$1;
 }
 HEAP32[$12 >> 2] = $$0113;
 STACKTOP = sp;
 return 0;
}

function _check_square($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 var $$0 = 0, $$092 = 0, $$093 = 0, $$094 = 0, $$sroa$12$0 = 0, $$sroa$4$0 = 0, $$sroa$8$0 = 0, $10 = 0, $11 = 0, $13 = 0, $17 = 0, $18 = 0, $21 = 0, $23 = 0, $24 = 0, $29 = 0.0, $3 = 0, $36 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $3 = sp + 56 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 8 | 0;
 $6 = sp;
 $7 = $1 + 28 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $1 + 40028 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $1 + 24 | 0;
 $13 = (HEAP32[$11 >> 2] | 0) + -1 | 0;
 $$0 = 1;
 $$093 = 0;
 $$094 = 0;
 while (1) {
  if (($$0 | 0) >= ($13 | 0)) break;
  $17 = (HEAP32[$1 + 28 + ($$0 << 2) >> 2] | 0) - $8 | 0;
  $18 = Math_imul($17, $17) | 0;
  $21 = (HEAP32[$1 + 40028 + ($$0 << 2) >> 2] | 0) - $10 | 0;
  $23 = (Math_imul($21, $21) | 0) + $18 | 0;
  $24 = ($23 | 0) > ($$093 | 0);
  $spec$select = $24 ? $$0 : $$094;
  $$0 = $$0 + 1 | 0;
  $$093 = $24 ? $23 : $$093;
  $$094 = $spec$select;
 }
 $29 = +($0 | 0) / .75 * .01 * $2;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 L5 : do if ((_get_vertex($7, $9, 0, $$094, $29, $3, $4) | 0) < 0) $$092 = -1; else if ((_get_vertex($7, $9, $$094, (HEAP32[$11 >> 2] | 0) + -1 | 0, $29, $5, $6) | 0) < 0) $$092 = -1; else {
  $36 = HEAP32[$4 >> 2] | 0;
  $38 = HEAP32[$6 >> 2] | 0;
  do if (($36 | 0) == 1 & ($38 | 0) == 1) {
   $$sroa$12$0 = HEAP32[$5 >> 2] | 0;
   $$sroa$4$0 = HEAP32[$3 >> 2] | 0;
   $$sroa$8$0 = $$094;
  } else {
   if (($36 | 0) > 1 & ($38 | 0) == 0) {
    $44 = ($$094 | 0) / 2 | 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$4 >> 2] = 0;
    if ((_get_vertex($7, $9, 0, $44, $29, $3, $4) | 0) < 0) {
     $$092 = -1;
     break L5;
    }
    if ((_get_vertex($7, $9, $44, $$094, $29, $5, $6) | 0) < 0) {
     $$092 = -1;
     break L5;
    }
    if (!((HEAP32[$4 >> 2] | 0) == 1 & (HEAP32[$6 >> 2] | 0) == 1)) {
     $$092 = -1;
     break L5;
    }
    $$sroa$12$0 = $$094;
    $$sroa$4$0 = HEAP32[$3 >> 2] | 0;
    $$sroa$8$0 = HEAP32[$5 >> 2] | 0;
    break;
   }
   if (!(($36 | 0) == 0 & ($38 | 0) > 1)) {
    $$092 = -1;
    break L5;
   }
   $60 = ($$094 + -1 + (HEAP32[$11 >> 2] | 0) | 0) / 2 | 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$4 >> 2] = 0;
   if ((_get_vertex($7, $9, $$094, $60, $29, $3, $4) | 0) < 0) {
    $$092 = -1;
    break L5;
   }
   if ((_get_vertex($7, $9, $60, (HEAP32[$11 >> 2] | 0) + -1 | 0, $29, $5, $6) | 0) < 0) {
    $$092 = -1;
    break L5;
   }
   if (!((HEAP32[$4 >> 2] | 0) == 1 & (HEAP32[$6 >> 2] | 0) == 1)) {
    $$092 = -1;
    break L5;
   }
   $$sroa$12$0 = HEAP32[$5 >> 2] | 0;
   $$sroa$4$0 = $$094;
   $$sroa$8$0 = HEAP32[$3 >> 2] | 0;
  } while (0);
  HEAP32[$1 + 80028 >> 2] = 0;
  HEAP32[$1 + 80032 >> 2] = $$sroa$4$0;
  HEAP32[$1 + 80036 >> 2] = $$sroa$8$0;
  HEAP32[$1 + 80040 >> 2] = $$sroa$12$0;
  HEAP32[$1 + 80044 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
  $$092 = 0;
 } while (0);
 STACKTOP = sp;
 return $$092 | 0;
}

function _arGetLine($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0108 = 0, $$0109 = 0, $$0110 = 0, $$1 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $22 = 0.0, $25 = 0, $29 = 0, $31 = 0, $33 = 0, $44 = 0, $45 = 0, $54 = 0, $56 = 0.0, $59 = 0.0, $61 = 0, $7 = 0, $72 = 0, $73 = 0, $76 = 0.0, $78 = 0, $8 = 0, $81 = 0.0, $83 = 0.0, $86 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $7 = sp + 4 | 0;
 $8 = sp;
 $9 = _arVecAlloc(2) | 0;
 $10 = _arVecAlloc(2) | 0;
 $11 = _arMatrixAlloc(2, 2) | 0;
 $$0109 = 0;
 L1 : while (1) {
  if ($$0109 >>> 0 >= 4) {
   label = 10;
   break;
  }
  $13 = $$0109 + 1 | 0;
  $15 = HEAP32[$3 + ($13 << 2) >> 2] | 0;
  $17 = HEAP32[$3 + ($$0109 << 2) >> 2] | 0;
  $22 = +($15 + 1 - $17 | 0) * .05 + .5;
  $25 = ~~($22 + +($17 | 0));
  $29 = ~~(+($15 | 0) - $22) - $25 | 0;
  $31 = _arMatrixAlloc($29 + 1 | 0, 2) | 0;
  $$0108 = 0;
  while (1) {
   if (($$0108 | 0) > ($29 | 0)) break;
   $33 = $$0108 + $25 | 0;
   if ((_arParamObserv2IdealLTf($4, +(HEAP32[$0 + ($33 << 2) >> 2] | 0), +(HEAP32[$1 + ($33 << 2) >> 2] | 0), $7, $8) | 0) < 0) {
    label = 6;
    break L1;
   }
   $44 = HEAP32[$31 >> 2] | 0;
   $45 = $$0108 << 1;
   HEAPF64[$44 + ($45 << 3) >> 3] = +HEAPF32[$7 >> 2];
   HEAPF64[$44 + (($45 | 1) << 3) >> 3] = +HEAPF32[$8 >> 2];
   $$0108 = $$0108 + 1 | 0;
  }
  if ((_arMatrixPCA($31, $11, $9, $10) | 0) < 0) {
   label = 14;
   break;
  }
  $54 = HEAP32[$11 >> 2] | 0;
  $56 = +HEAPF64[$54 + 8 >> 3];
  HEAPF64[$5 + ($$0109 * 24 | 0) >> 3] = $56;
  $59 = -+HEAPF64[$54 >> 3];
  HEAPF64[$5 + ($$0109 * 24 | 0) + 8 >> 3] = $59;
  $61 = HEAP32[$10 >> 2] | 0;
  HEAPF64[$5 + ($$0109 * 24 | 0) + 16 >> 3] = -($56 * +HEAPF64[$61 >> 3] + +HEAPF64[$61 + 8 >> 3] * $59);
  _arMatrixFree($31) | 0;
  $$0109 = $13;
 }
 L10 : do if ((label | 0) == 6) label = 14; else if ((label | 0) == 10) {
  _arMatrixFree($11) | 0;
  _arVecFree($10) | 0;
  _arVecFree($9) | 0;
  $$1 = 0;
  while (1) {
   if ($$1 >>> 0 >= 4) {
    $$0110 = 0;
    break L10;
   }
   $72 = $$1 + 3 & 3;
   $73 = $5 + ($72 * 24 | 0) | 0;
   $76 = +HEAPF64[$5 + ($$1 * 24 | 0) + 8 >> 3];
   $78 = $5 + ($$1 * 24 | 0) | 0;
   $81 = +HEAPF64[$5 + ($72 * 24 | 0) + 8 >> 3];
   $83 = +HEAPF64[$73 >> 3] * $76 - +HEAPF64[$78 >> 3] * $81;
   if (+Math_abs(+$83) < .0001) {
    $$0110 = -1;
    break L10;
   }
   $86 = $5 + ($$1 * 24 | 0) + 16 | 0;
   $89 = $5 + ($72 * 24 | 0) + 16 | 0;
   HEAPF64[$6 + ($$1 << 4) >> 3] = ($81 * +HEAPF64[$86 >> 3] - $76 * +HEAPF64[$89 >> 3]) / $83;
   HEAPF64[$6 + ($$1 << 4) + 8 >> 3] = (+HEAPF64[$78 >> 3] * +HEAPF64[$89 >> 3] - +HEAPF64[$73 >> 3] * +HEAPF64[$86 >> 3]) / $83;
   $$1 = $$1 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 14) {
  _arMatrixFree($31) | 0;
  _arMatrixFree($11) | 0;
  _arVecFree($10) | 0;
  _arVecFree($9) | 0;
  $$0110 = -1;
 }
 STACKTOP = sp;
 return $$0110 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i25 = 0, $$1 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $3 = sp + 36 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 97) if ((HEAP8[$0 + 1 >> 0] | 0) == 122) {
  $16 = $0 + 2 | 0;
  $17 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
  if (($17 | 0) == ($16 | 0)) $$1 = $0; else {
   $20 = $2 + 4 | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($21 | 0)) $$1 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $21 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 16298) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 15117) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i25 = 0;
    while (1) {
     if (($$0$i$i$i25 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i25 << 2) >> 2] = 0;
     $$0$i$i$i25 = $$0$i$i$i25 + 1 | 0;
    }
    $30 = HEAP32[$20 >> 2] | 0;
    $31 = $30 + -24 | 0;
    $32 = $31 + 11 | 0;
    if ((HEAP8[$32 >> 0] | 0) < 0) {
     $35 = HEAP32[$31 >> 2] | 0;
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($35, $3);
     HEAP32[$30 + -20 >> 2] = 0;
    } else {
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($31, $3);
     HEAP8[$32 >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($31);
    HEAP32[$31 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$31 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$31 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    $$0$i$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i$i | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$1 = $17;
   }
  }
 } else $$1 = $0; else $$1 = $0; else $$1 = $0;
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i25 = 0, $$1 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $3 = sp + 36 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 97) if ((HEAP8[$0 + 1 >> 0] | 0) == 116) {
  $16 = $0 + 2 | 0;
  $17 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
  if (($17 | 0) == ($16 | 0)) $$1 = $0; else {
   $20 = $2 + 4 | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($21 | 0)) $$1 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $21 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 16298) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 15117) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i25 = 0;
    while (1) {
     if (($$0$i$i$i25 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i25 << 2) >> 2] = 0;
     $$0$i$i$i25 = $$0$i$i$i25 + 1 | 0;
    }
    $30 = HEAP32[$20 >> 2] | 0;
    $31 = $30 + -24 | 0;
    $32 = $31 + 11 | 0;
    if ((HEAP8[$32 >> 0] | 0) < 0) {
     $35 = HEAP32[$31 >> 2] | 0;
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($35, $3);
     HEAP32[$30 + -20 >> 2] = 0;
    } else {
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($31, $3);
     HEAP8[$32 >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($31);
    HEAP32[$31 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$31 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$31 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    $$0$i$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i$i | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$1 = $17;
   }
  }
 } else $$1 = $0; else $$1 = $0; else $$1 = $0;
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKcj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$014 = 0, $$069 = 0, $$070 = 0, $$074 = 0, $$215 = 0, $$3 = 0, $$316 = 0, $$373 = 0, $$377 = 0, $$4 = 0, $$sroa$speculated18 = 0, $15 = 0, $17 = 0, $2 = 0, $21 = 0, $25 = 0, $3 = 0, $34 = 0, $4 = 0, $41 = 0, $5 = 0, $6 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = $0 + 11 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $4 << 24 >> 24 < 0;
 if ($5) {
  $9 = HEAP32[$0 + 4 >> 2] | 0;
  $$sroa$speculated18 = $9 >>> 0 < 11 ? $9 : 11;
  $15 = $9;
  $17 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $6 = $4 & 255;
  $$sroa$speculated18 = $6 >>> 0 < 11 ? $6 : 11;
  $15 = $6;
  $17 = 10;
 }
 if (($$sroa$speculated18 - $15 + $17 | 0) >>> 0 < $1 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $17, $1 - $$sroa$speculated18 + $15 - $17 | 0, $15, 0, $$sroa$speculated18, $1, 16538); else {
  if ($5) $25 = HEAP32[$0 >> 2] | 0; else $25 = $0;
  do if (($$sroa$speculated18 | 0) == ($1 | 0)) {
   $$215 = $1;
   $$3 = 0;
   $$373 = 16538;
   $$377 = $1;
   label = 17;
  } else {
   $21 = $15 - $$sroa$speculated18 | 0;
   if (!$21) {
    $$215 = $$sroa$speculated18;
    $$3 = 0;
    $$373 = 16538;
    $$377 = $1;
    label = 17;
   } else {
    if ($$sroa$speculated18 >>> 0 > $1 >>> 0) {
     __ZNSt3__211char_traitsIcE4moveEPcPKcj($25, 16538, $1) | 0;
     __ZNSt3__211char_traitsIcE4moveEPcPKcj($25 + $1 | 0, $25 + $$sroa$speculated18 | 0, $21) | 0;
     $$316 = $$sroa$speculated18;
     $$4 = $1;
     break;
    }
    do if ($25 >>> 0 < 16538 >>> 0 & ($25 + $15 | 0) >>> 0 > 16538 >>> 0) if (($25 + $$sroa$speculated18 | 0) >>> 0 > 16538 >>> 0) {
     __ZNSt3__211char_traitsIcE4moveEPcPKcj($25, 16538, $$sroa$speculated18) | 0;
     $$014 = 0;
     $$069 = $$sroa$speculated18;
     $$070 = 16538 + $1 | 0;
     $$074 = $1 - $$sroa$speculated18 | 0;
     break;
    } else {
     $$014 = $$sroa$speculated18;
     $$069 = 0;
     $$070 = 16538 + ($1 - $$sroa$speculated18) | 0;
     $$074 = $1;
     break;
    } else {
     $$014 = $$sroa$speculated18;
     $$069 = 0;
     $$070 = 16538;
     $$074 = $1;
    } while (0);
    $34 = $25 + $$069 | 0;
    __ZNSt3__211char_traitsIcE4moveEPcPKcj($34 + $$074 | 0, $34 + $$014 | 0, $21) | 0;
    $$215 = $$014;
    $$3 = $$069;
    $$373 = $$070;
    $$377 = $$074;
    label = 17;
   }
  } while (0);
  if ((label | 0) == 17) {
   __ZNSt3__211char_traitsIcE4moveEPcPKcj($25 + $$3 | 0, $$373, $$377) | 0;
   $$316 = $$215;
   $$4 = $$377;
  }
  $41 = $$4 - $$316 + $15 | 0;
  if ((HEAP8[$3 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $41; else HEAP8[$3 >> 0] = $41;
  HEAP8[$2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($25 + $41 | 0, $2);
 }
 STACKTOP = sp;
 return;
}

function _arglCameraFrustumRH($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3 | 0;
 var $$0 = 0, $$053 = 0, $$1 = 0, $$154 = 0, $$2 = 0, $10 = 0, $15 = 0.0, $19 = 0, $24 = 0.0, $34 = 0.0, $4 = 0, $48 = 0, $5 = 0, $6 = 0, $62 = 0, $64 = 0.0, $7 = 0, $71 = 0, $75 = 0.0, $77 = 0.0, $79 = 0.0, $8 = 0, $81 = 0.0, $82 = 0, $83 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(400);
 $4 = sp + 296 | 0;
 $5 = sp + 200 | 0;
 $6 = sp + 128 | 0;
 $7 = sp;
 $8 = HEAP32[$0 >> 2] | 0;
 $10 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if ((_arParamDecompMat($0 + 8 | 0, $4, $5) | 0) < 0) _arLog(0, 3, 4599, sp + 392 | 0); else {
  $15 = +($10 + -1 | 0);
  $$053 = 0;
  while (1) {
   if (($$053 | 0) == 4) break;
   $19 = $4 + 32 + ($$053 << 3) | 0;
   HEAPF64[$19 >> 3] = +HEAPF64[$4 + 64 + ($$053 << 3) >> 3] * $15 - +HEAPF64[$19 >> 3];
   $$053 = $$053 + 1 | 0;
  }
  $24 = +HEAPF64[$4 + 80 >> 3];
  $$154 = 0;
  while (1) {
   if (($$154 | 0) == 3) break;
   $$0 = 0;
   while (1) {
    if (($$0 | 0) == 3) break;
    HEAPF64[$6 + ($$154 * 24 | 0) + ($$0 << 3) >> 3] = +HEAPF64[$4 + ($$154 << 5) + ($$0 << 3) >> 3] / $24;
    $$0 = $$0 + 1 | 0;
   }
   $$154 = $$154 + 1 | 0;
  }
  $34 = +($8 + -1 | 0);
  HEAPF64[$7 >> 3] = +HEAPF64[$6 >> 3] * 2.0 / $34;
  HEAPF64[$7 + 8 >> 3] = +HEAPF64[$6 + 8 >> 3] * 2.0 / $34;
  HEAPF64[$7 + 16 >> 3] = -(+HEAPF64[$6 + 16 >> 3] * 2.0 / $34 + -1.0);
  $48 = $7 + 24 | 0;
  HEAP32[$48 >> 2] = 0;
  HEAP32[$48 + 4 >> 2] = 0;
  HEAP32[$48 + 8 >> 2] = 0;
  HEAP32[$48 + 12 >> 2] = 0;
  HEAPF64[$7 + 40 >> 3] = -(+HEAPF64[$6 + 32 >> 3] * 2.0 / $15);
  HEAPF64[$7 + 48 >> 3] = -(+HEAPF64[$6 + 40 >> 3] * 2.0 / $15 + -1.0);
  $62 = $7 + 56 | 0;
  $64 = $1 - $2;
  HEAP32[$62 >> 2] = 0;
  HEAP32[$62 + 4 >> 2] = 0;
  HEAP32[$62 + 8 >> 2] = 0;
  HEAP32[$62 + 12 >> 2] = 0;
  HEAP32[$62 + 16 >> 2] = 0;
  HEAP32[$62 + 20 >> 2] = 0;
  HEAPF64[$7 + 80 >> 3] = ($1 + $2) / $64;
  HEAPF64[$7 + 88 >> 3] = $2 * 2.0 * $1 / $64;
  $71 = $7 + 96 | 0;
  HEAP32[$71 >> 2] = 0;
  HEAP32[$71 + 4 >> 2] = 0;
  HEAP32[$71 + 8 >> 2] = 0;
  HEAP32[$71 + 12 >> 2] = 0;
  HEAPF64[$7 + 112 >> 3] = -1.0;
  HEAPF64[$7 + 120 >> 3] = 0.0;
  $75 = +HEAPF64[$5 + 24 >> 3];
  $77 = +HEAPF64[$5 + 56 >> 3];
  $79 = +HEAPF64[$5 + 88 >> 3];
  $$2 = 0;
  while (1) {
   if (($$2 | 0) == 4) break L1;
   $81 = +HEAPF64[$7 + ($$2 << 5) >> 3];
   $82 = $7 + ($$2 << 5) + 8 | 0;
   $83 = $7 + ($$2 << 5) + 16 | 0;
   $$1 = 0;
   while (1) {
    if (($$1 | 0) == 3) break;
    HEAPF64[$3 + (($$1 << 2) + $$2 << 3) >> 3] = $81 * +HEAPF64[$5 + ($$1 << 3) >> 3] + +HEAPF64[$82 >> 3] * +HEAPF64[$5 + 32 + ($$1 << 3) >> 3] + +HEAPF64[$83 >> 3] * +HEAPF64[$5 + 64 + ($$1 << 3) >> 3];
    $$1 = $$1 + 1 | 0;
   }
   HEAPF64[$3 + ($$2 + 12 << 3) >> 3] = +HEAPF64[$7 + ($$2 << 5) + 24 >> 3] + ($81 * $75 + +HEAPF64[$82 >> 3] * $77 + +HEAPF64[$83 >> 3] * $79);
   $$2 = $$2 + 1 | 0;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function _qsort($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$067$lcssa = 0, $$06772 = 0, $$068$lcssa = 0, $$06871 = 0, $$1 = 0, $$169 = 0, $$169$be = 0, $$2 = 0, $$2$be = 0, $$be = 0, $12 = 0, $15 = 0, $15$phi = 0, $16 = 0, $17 = 0, $22 = 0, $24 = 0, $26 = 0, $29 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $47 = 0, $49 = 0, $5 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $4 = sp + 8 | 0;
 $5 = sp;
 $6 = Math_imul($2, $1) | 0;
 $7 = $5;
 HEAP32[$7 >> 2] = 1;
 HEAP32[$7 + 4 >> 2] = 0;
 L1 : do if ($6 | 0) {
  $12 = 0 - $2 | 0;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $2;
  $$0 = 2;
  $15 = $2;
  $17 = $2;
  while (1) {
   $16 = $15 + $2 + $17 | 0;
   HEAP32[$4 + ($$0 << 2) >> 2] = $16;
   if ($16 >>> 0 < $6 >>> 0) {
    $15$phi = $17;
    $$0 = $$0 + 1 | 0;
    $17 = $16;
    $15 = $15$phi;
   } else break;
  }
  $22 = $0 + $6 + $12 | 0;
  if ($22 >>> 0 > $0 >>> 0) {
   $24 = $22;
   $$06772 = 1;
   $$06871 = $0;
   $26 = 1;
   while (1) {
    do if (($26 & 3 | 0) == 3) {
     _sift($$06871, $2, $3, $$06772, $4);
     _shr($5, 2);
     $$1 = $$06772 + 2 | 0;
    } else {
     $29 = $$06772 + -1 | 0;
     if ((HEAP32[$4 + ($29 << 2) >> 2] | 0) >>> 0 < ($24 - $$06871 | 0) >>> 0) _sift($$06871, $2, $3, $$06772, $4); else _trinkle($$06871, $2, $3, $5, $$06772, 0, $4);
     if (($$06772 | 0) == 1) {
      _shl($5, 1);
      $$1 = 0;
      break;
     } else {
      _shl($5, $29);
      $$1 = 1;
      break;
     }
    } while (0);
    $37 = HEAP32[$5 >> 2] | 1;
    HEAP32[$5 >> 2] = $37;
    $38 = $$06871 + $2 | 0;
    if ($38 >>> 0 < $22 >>> 0) {
     $$06772 = $$1;
     $$06871 = $38;
     $26 = $37;
    } else {
     $$067$lcssa = $$1;
     $$068$lcssa = $38;
     $61 = $37;
     break;
    }
   }
  } else {
   $$067$lcssa = 1;
   $$068$lcssa = $0;
   $61 = 1;
  }
  _trinkle($$068$lcssa, $2, $3, $5, $$067$lcssa, 0, $4);
  $40 = $5 + 4 | 0;
  $$169 = $$068$lcssa;
  $$2 = $$067$lcssa;
  $43 = $61;
  while (1) {
   if (($$2 | 0) == 1 & ($43 | 0) == 1) if (!(HEAP32[$40 >> 2] | 0)) break L1; else label = 19; else if (($$2 | 0) < 2) label = 19; else {
    _shl($5, 2);
    $49 = $$2 + -2 | 0;
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] ^ 7;
    _shr($5, 1);
    _trinkle($$169 + (0 - (HEAP32[$4 + ($49 << 2) >> 2] | 0)) + $12 | 0, $2, $3, $5, $$2 + -1 | 0, 1, $4);
    _shl($5, 1);
    $59 = HEAP32[$5 >> 2] | 1;
    HEAP32[$5 >> 2] = $59;
    $60 = $$169 + $12 | 0;
    _trinkle($60, $2, $3, $5, $49, 1, $4);
    $$169$be = $60;
    $$2$be = $49;
    $$be = $59;
   }
   if ((label | 0) == 19) {
    label = 0;
    $47 = _pntz($5) | 0;
    _shr($5, $47);
    $$169$be = $$169 + $12 | 0;
    $$2$be = $47 + $$2 | 0;
    $$be = HEAP32[$5 >> 2] | 0;
   }
   $$169 = $$169$be;
   $$2 = $$2$be;
   $43 = $$be;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function ___stpncpy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03754 = 0, $$038$lcssa = 0, $$03867 = 0, $$039$lcssa = 0, $$03966 = 0, $$042$lcssa = 0, $$04265 = 0, $$055 = 0, $$1$lcssa = 0, $$140 = 0, $$143 = 0, $$153 = 0, $$2 = 0, $$24147 = 0, $$24446 = 0, $$345 = 0, $$348 = 0, $$4 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $19 = 0, $22 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $37 = 0, label = 0;
 $3 = $1;
 L1 : do if (!(($3 ^ $0) & 3)) {
  $10 = ($2 | 0) != 0;
  if ($10 & ($3 & 3 | 0) != 0) {
   $$03867 = $2;
   $$03966 = $1;
   $$04265 = $0;
   while (1) {
    $11 = HEAP8[$$03966 >> 0] | 0;
    HEAP8[$$04265 >> 0] = $11;
    if (!($11 << 24 >> 24)) {
     $$345 = $$04265;
     $$4 = $$03867;
     break L1;
    }
    $13 = $$03867 + -1 | 0;
    $14 = $$03966 + 1 | 0;
    $15 = $$04265 + 1 | 0;
    $19 = ($13 | 0) != 0;
    if ($19 & ($14 & 3 | 0) != 0) {
     $$03867 = $13;
     $$03966 = $14;
     $$04265 = $15;
    } else {
     $$038$lcssa = $13;
     $$039$lcssa = $14;
     $$042$lcssa = $15;
     $$lcssa = $19;
     break;
    }
   }
  } else {
   $$038$lcssa = $2;
   $$039$lcssa = $1;
   $$042$lcssa = $0;
   $$lcssa = $10;
  }
  if ($$lcssa) if (!(HEAP8[$$039$lcssa >> 0] | 0)) {
   $$345 = $$042$lcssa;
   $$4 = $$038$lcssa;
  } else {
   L11 : do if ($$038$lcssa >>> 0 > 3) {
    $$03754 = $$042$lcssa;
    $$055 = $$039$lcssa;
    $$153 = $$038$lcssa;
    while (1) {
     $22 = HEAP32[$$055 >> 2] | 0;
     if (($22 & -2139062144 ^ -2139062144) & $22 + -16843009 | 0) {
      $$0$lcssa = $$055;
      $$037$lcssa = $$03754;
      $$1$lcssa = $$153;
      break L11;
     }
     HEAP32[$$03754 >> 2] = $22;
     $28 = $$153 + -4 | 0;
     $29 = $$055 + 4 | 0;
     $30 = $$03754 + 4 | 0;
     if ($28 >>> 0 > 3) {
      $$03754 = $30;
      $$055 = $29;
      $$153 = $28;
     } else {
      $$0$lcssa = $29;
      $$037$lcssa = $30;
      $$1$lcssa = $28;
      break;
     }
    }
   } else {
    $$0$lcssa = $$039$lcssa;
    $$037$lcssa = $$042$lcssa;
    $$1$lcssa = $$038$lcssa;
   } while (0);
   $$140 = $$0$lcssa;
   $$143 = $$037$lcssa;
   $$2 = $$1$lcssa;
   label = 13;
  } else {
   $$345 = $$042$lcssa;
   $$4 = 0;
  }
 } else {
  $$140 = $1;
  $$143 = $0;
  $$2 = $2;
  label = 13;
 } while (0);
 L17 : do if ((label | 0) == 13) if (!$$2) {
  $$345 = $$143;
  $$4 = 0;
 } else {
  $$24147 = $$140;
  $$24446 = $$143;
  $$348 = $$2;
  while (1) {
   $33 = HEAP8[$$24147 >> 0] | 0;
   HEAP8[$$24446 >> 0] = $33;
   if (!($33 << 24 >> 24)) {
    $$345 = $$24446;
    $$4 = $$348;
    break L17;
   }
   $$348 = $$348 + -1 | 0;
   $37 = $$24446 + 1 | 0;
   if (!$$348) {
    $$345 = $37;
    $$4 = 0;
    break;
   } else {
    $$24147 = $$24147 + 1 | 0;
    $$24446 = $37;
   }
  }
 } while (0);
 _memset($$345 | 0, 0, $$4 | 0) | 0;
 return $$345 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIeNS0_2DbEEEPKcS4_S4_RT0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$049$idx = 0, $$050 = 0, $$07$i$i = 0, $$247$ph = 0, $$3 = 0, $11 = 0, $12 = 0, $17 = 0, $25 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $vararg_buffer = sp + 8 | 0;
 $3 = sp;
 $4 = sp + 48 | 0;
 $5 = sp + 32 | 0;
 L1 : do if (($1 - $0 | 0) >>> 0 > 20) {
  $$049$idx = 0;
  $$050 = $3;
  while (1) {
   $11 = HEAP8[$0 + $$049$idx >> 0] | 0;
   $12 = $11 << 24 >> 24;
   if (($$049$idx | 0) == 20) {
    label = 6;
    break;
   }
   if (!(_isxdigit($12) | 0)) break;
   $17 = HEAP8[$0 + ($$049$idx | 1) >> 0] | 0;
   HEAP8[$$050 >> 0] = ((($12 + -48 | 0) >>> 0 < 10 ? 0 : 9) + $12 << 4) + $17 + (($17 + -48 | 0) >>> 0 < 10 ? 208 : 169);
   $$049$idx = $$049$idx + 2 | 0;
   $$050 = $$050 + 1 | 0;
  }
  do if ((label | 0) == 6) {
   if ($11 << 24 >> 24 == 69) {
    L11 : do if (($$050 | 0) != ($3 | 0)) {
     $$0$i$i = $$050;
     $$07$i$i = $3;
     while (1) {
      $25 = $$0$i$i + -1 | 0;
      if ($$07$i$i >>> 0 >= $25 >>> 0) break L11;
      $27 = HEAP8[$$07$i$i >> 0] | 0;
      HEAP8[$$07$i$i >> 0] = HEAP8[$25 >> 0] | 0;
      HEAP8[$25 >> 0] = $27;
      $$0$i$i = $25;
      $$07$i$i = $$07$i$i + 1 | 0;
     }
    } while (0);
    dest = $4;
    stop = dest + 40 | 0;
    do {
     HEAP8[dest >> 0] = 0;
     dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAPF64[$vararg_buffer >> 3] = +HEAPF64[$3 >> 3];
    $31 = _snprintf($4, 40, 16423, $vararg_buffer) | 0;
    if ($31 >>> 0 > 39) break;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($5, $4, $31);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($vararg_buffer, $5);
    $33 = $2 + 4 | 0;
    $34 = HEAP32[$33 >> 2] | 0;
    if ($34 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($34, $vararg_buffer);
     HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $vararg_buffer);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($vararg_buffer);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$247$ph = $0 + 21 | 0;
   } else $$247$ph = $0;
   $$3 = $$247$ph;
   break L1;
  } while (0);
  $$3 = $0;
 } else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIdNS0_2DbEEEPKcS4_S4_RT0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$049$idx = 0, $$050 = 0, $$07$i$i = 0, $$247$ph = 0, $$3 = 0, $11 = 0, $12 = 0, $17 = 0, $25 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $vararg_buffer = sp + 8 | 0;
 $3 = sp;
 $4 = sp + 48 | 0;
 $5 = sp + 32 | 0;
 L1 : do if (($1 - $0 | 0) >>> 0 > 16) {
  $$049$idx = 0;
  $$050 = $3;
  while (1) {
   $11 = HEAP8[$0 + $$049$idx >> 0] | 0;
   $12 = $11 << 24 >> 24;
   if (($$049$idx | 0) == 16) {
    label = 6;
    break;
   }
   if (!(_isxdigit($12) | 0)) break;
   $17 = HEAP8[$0 + ($$049$idx | 1) >> 0] | 0;
   HEAP8[$$050 >> 0] = ((($12 + -48 | 0) >>> 0 < 10 ? 0 : 9) + $12 << 4) + $17 + (($17 + -48 | 0) >>> 0 < 10 ? 208 : 169);
   $$049$idx = $$049$idx + 2 | 0;
   $$050 = $$050 + 1 | 0;
  }
  do if ((label | 0) == 6) {
   if ($11 << 24 >> 24 == 69) {
    L11 : do if (($$050 | 0) != ($3 | 0)) {
     $$0$i$i = $$050;
     $$07$i$i = $3;
     while (1) {
      $25 = $$0$i$i + -1 | 0;
      if ($$07$i$i >>> 0 >= $25 >>> 0) break L11;
      $27 = HEAP8[$$07$i$i >> 0] | 0;
      HEAP8[$$07$i$i >> 0] = HEAP8[$25 >> 0] | 0;
      HEAP8[$25 >> 0] = $27;
      $$0$i$i = $25;
      $$07$i$i = $$07$i$i + 1 | 0;
     }
    } while (0);
    dest = $4;
    stop = dest + 32 | 0;
    do {
     HEAP8[dest >> 0] = 0;
     dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAPF64[$vararg_buffer >> 3] = +HEAPF64[$3 >> 3];
    $31 = _snprintf($4, 32, 16428, $vararg_buffer) | 0;
    if ($31 >>> 0 > 31) break;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($5, $4, $31);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($vararg_buffer, $5);
    $33 = $2 + 4 | 0;
    $34 = HEAP32[$33 >> 2] | 0;
    if ($34 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($34, $vararg_buffer);
     HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $vararg_buffer);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($vararg_buffer);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$247$ph = $0 + 17 | 0;
   } else $$247$ph = $0;
   $$3 = $$247$ph;
   break L1;
  } while (0);
  $$3 = $0;
 } else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIfNS0_2DbEEEPKcS4_S4_RT0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$049$idx = 0, $$050 = 0, $$07$i$i = 0, $$247$ph = 0, $$3 = 0, $11 = 0, $12 = 0, $17 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $vararg_buffer = sp;
 $3 = sp + 36 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 24 | 0;
 L1 : do if (($1 - $0 | 0) >>> 0 > 8) {
  $$049$idx = 0;
  $$050 = $3;
  while (1) {
   $11 = HEAP8[$0 + $$049$idx >> 0] | 0;
   $12 = $11 << 24 >> 24;
   if (($$049$idx | 0) == 8) {
    label = 6;
    break;
   }
   if (!(_isxdigit($12) | 0)) break;
   $17 = HEAP8[$0 + ($$049$idx | 1) >> 0] | 0;
   HEAP8[$$050 >> 0] = ((($12 + -48 | 0) >>> 0 < 10 ? 0 : 9) + $12 << 4) + $17 + (($17 + -48 | 0) >>> 0 < 10 ? 208 : 169);
   $$049$idx = $$049$idx + 2 | 0;
   $$050 = $$050 + 1 | 0;
  }
  do if ((label | 0) == 6) {
   if ($11 << 24 >> 24 == 69) {
    L11 : do if (($$050 | 0) != ($3 | 0)) {
     $$0$i$i = $$050;
     $$07$i$i = $3;
     while (1) {
      $25 = $$0$i$i + -1 | 0;
      if ($$07$i$i >>> 0 >= $25 >>> 0) break L11;
      $27 = HEAP8[$$07$i$i >> 0] | 0;
      HEAP8[$$07$i$i >> 0] = HEAP8[$25 >> 0] | 0;
      HEAP8[$25 >> 0] = $27;
      $$0$i$i = $25;
      $$07$i$i = $$07$i$i + 1 | 0;
     }
    } while (0);
    dest = $4;
    stop = dest + 24 | 0;
    do {
     HEAP8[dest >> 0] = 0;
     dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAPF64[$vararg_buffer >> 3] = +HEAPF32[$3 >> 2];
    $32 = _snprintf($4, 24, 16431, $vararg_buffer) | 0;
    if ($32 >>> 0 > 23) break;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($5, $4, $32);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($vararg_buffer, $5);
    $34 = $2 + 4 | 0;
    $35 = HEAP32[$34 >> 2] | 0;
    if ($35 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($35, $vararg_buffer);
     HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $vararg_buffer);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($vararg_buffer);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$247$ph = $0 + 9 | 0;
   } else $$247$ph = $0;
   $$3 = $$247$ph;
   break L1;
  } while (0);
  $$3 = $0;
 } else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function _arPattGetIDGlobal($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = +$9;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $$0 = 0, $$091 = 0, $$092 = 0, $19 = 0, $20 = 0, $24 = 0, $26 = 0, $28 = 0, $31 = 0, $41 = 0, $45 = 0, $49 = 0, $51 = 0, $56 = 0, $57 = 0, $58 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(12304);
 $19 = sp + 8 | 0;
 $20 = sp;
 do if (($2 + -2 | 0) >>> 0 < 3) {
  if (($16 | 0) != 2830) {
   $45 = $16 & 255;
   if ((_arPattGetImage2($1, 2, $45, $45 * 3 | 0, $3, $4, $5, $6, $7, $8, $9, $19) | 0) < 0) {
    HEAP32[$13 >> 2] = -1;
    $$091 = -6;
    break;
   }
   $49 = _get_matrix_code($19, $45, $13, $14, $15, $16, $17) | 0;
   if (!$18) {
    $$091 = $49;
    break;
   }
   $51 = $18;
   HEAP32[$51 >> 2] = 0;
   HEAP32[$51 + 4 >> 2] = 0;
   $$091 = $49;
   break;
  }
  if ((_arPattGetImage2($1, 2, 14, 42, $3, $4, $5, $6, $7, $8, .875, $19) | 0) < 0) {
   HEAP32[$13 >> 2] = -1;
   $$091 = -6;
   break;
  }
  $24 = _get_global_id_code($19, $20, $14, $15, $17) | 0;
  if (($24 | 0) < 0) {
   HEAP32[$13 >> 2] = -1;
   $$091 = $24;
   break;
  }
  $26 = $20;
  $28 = HEAP32[$26 >> 2] | 0;
  $31 = HEAP32[$26 + 4 >> 2] | 0;
  if (($28 | 0) == -1 & ($31 | 0) == -1) {
   HEAP32[$13 >> 2] = -1;
   $$091 = -5;
   break;
  }
  HEAP32[$13 >> 2] = ($28 & -32768 | 0) == 0 & 0 == 0 ? $28 & 32767 : 0;
  if (!$18) $$091 = $24; else {
   $41 = $18;
   HEAP32[$41 >> 2] = $28;
   HEAP32[$41 + 4 >> 2] = $31;
   $$091 = $24;
  }
 } else $$091 = 1; while (0);
 L21 : do switch ($2 | 0) {
 case 0:
 case 1:
 case 3:
 case 4:
  {
   if (!$0) {
    HEAP32[$10 >> 2] = -1;
    $$0 = -1;
    break L21;
   }
   $56 = $0 + 28 | 0;
   $57 = HEAP32[$56 >> 2] | 0;
   $58 = $57 << 2;
   switch ($2 | 0) {
   case 0:
   case 3:
    {
     if ((_arPattGetImage2($1, 0, $57, $58, $3, $4, $5, $6, $7, $8, $9, $19) | 0) < 0) {
      HEAP32[$10 >> 2] = -1;
      $$0 = -6;
      break L21;
     } else {
      $$0 = _pattern_match($0, 0, $19, HEAP32[$56 >> 2] | 0, $10, $11, $12) | 0;
      break L21;
     }
     break;
    }
   default:
    if ((_arPattGetImage2($1, 1, $57, $58, $3, $4, $5, $6, $7, $8, $9, $19) | 0) < 0) {
     HEAP32[$10 >> 2] = -1;
     $$0 = -6;
     break L21;
    } else {
     $$0 = _pattern_match($0, 1, $19, HEAP32[$56 >> 2] | 0, $10, $11, $12) | 0;
     break L21;
    }
   }
   break;
  }
 default:
  $$0 = 1;
 } while (0);
 if (($$091 | 0) == 1) $$092 = $$0; else $$092 = ($$0 | 0) == 1 ? $$091 : ($$0 & $$091 | 0) < 0 ? $$0 : 0;
 STACKTOP = sp;
 return $$092 | 0;
}

function _setCamera($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $3 = 0, $30 = 0, $6 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $2 = sp + 32 | 0;
 $3 = sp + 28 | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $2) | 0)) $$2 = -1; else {
  $6 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $2) | 0;
  if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17376, $3) | 0)) $$2 = -1; else {
   $10 = $6 + 8 | 0;
   _memcpy($10 | 0, __ZNSt3__213unordered_mapIi7ARParamNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17376, $3) | 0, 184) | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   $12 = $6 + 208 | 0;
   $16 = HEAP32[$6 + 12 >> 2] | 0;
   $17 = $6 + 212 | 0;
   if (($11 | 0) == (HEAP32[$12 >> 2] | 0)) {
    if (($16 | 0) != (HEAP32[$17 >> 2] | 0)) label = 5;
   } else label = 5;
   if ((label | 0) == 5) {
    HEAP32[$vararg_buffer >> 2] = $11;
    HEAP32[$vararg_buffer + 4 >> 2] = $16;
    _arLog(0, 2, 10408, $vararg_buffer);
    _arParamChangeSize($10, HEAP32[$12 >> 2] | 0, HEAP32[$17 >> 2] | 0, $10) | 0;
   }
   _deleteHandle($6);
   $22 = _arParamLTCreate($10, 15) | 0;
   $23 = $6 + 192 | 0;
   HEAP32[$23 >> 2] = $22;
   if (!$22) {
    _arLog(0, 3, 10455, $vararg_buffer2);
    $$2 = -1;
    break;
   }
   $25 = _arCreateHandle($22) | 0;
   $26 = $6 + 216 | 0;
   HEAP32[$26 >> 2] = $25;
   if (!$25) {
    _arLog(0, 3, 10493, $vararg_buffer4);
    $$2 = -1;
    break;
   }
   _arSetPixelFormat($25, HEAP32[$6 + 392 >> 2] | 0) | 0;
   $30 = _ar3DCreateHandle($10) | 0;
   HEAP32[$6 + 228 >> 2] = $30;
   if (!$30) {
    _arLog(0, 3, 10530, $vararg_buffer6);
    $$2 = -1;
    break;
   } else {
    _arPattAttach(HEAP32[$26 >> 2] | 0, HEAP32[$6 + 220 >> 2] | 0) | 0;
    _arglCameraFrustumRH(HEAP32[$23 >> 2] | 0, +HEAPF64[$6 + 232 >> 3], +HEAPF64[$6 + 240 >> 3], $6 + 264 | 0);
    $$2 = 0;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_125parse_noexcept_expressionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i18 = 0, $$016 = 0, $10 = 0, $11 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $3 = sp + 36 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 $7 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
 if (($7 | 0) == ($0 | 0)) $$016 = $0; else {
  $10 = $2 + 4 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  if ((HEAP32[$2 >> 2] | 0) == ($11 | 0)) $$016 = $0; else {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $11 + -24 | 0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 15390) | 0;
   HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 15117) | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
   $$0$i$i$i18 = 0;
   while (1) {
    if (($$0$i$i$i18 | 0) == 3) break;
    HEAP32[$5 + ($$0$i$i$i18 << 2) >> 2] = 0;
    $$0$i$i$i18 = $$0$i$i$i18 + 1 | 0;
   }
   $20 = HEAP32[$10 >> 2] | 0;
   $21 = $20 + -24 | 0;
   $22 = $21 + 11 | 0;
   if ((HEAP8[$22 >> 0] | 0) < 0) {
    $25 = HEAP32[$21 >> 2] | 0;
    HEAP8[$3 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($25, $3);
    HEAP32[$20 + -20 >> 2] = 0;
   } else {
    HEAP8[$3 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($21, $3);
    HEAP8[$22 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($21);
   HEAP32[$21 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$21 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
   HEAP32[$21 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
   $$0$i$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i$i | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   $$016 = $7;
  }
 }
 STACKTOP = sp;
 return $$016 | 0;
}

function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do if ($1 >>> 0 <= 20) do switch ($1 | 0) {
 case 9:
  {
   $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $10 = HEAP32[$9 >> 2] | 0;
   HEAP32[$2 >> 2] = $9 + 4;
   HEAP32[$0 >> 2] = $10;
   break L1;
   break;
  }
 case 10:
  {
   $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $17 = HEAP32[$16 >> 2] | 0;
   HEAP32[$2 >> 2] = $16 + 4;
   $20 = $0;
   HEAP32[$20 >> 2] = $17;
   HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $30 = HEAP32[$29 >> 2] | 0;
   HEAP32[$2 >> 2] = $29 + 4;
   $31 = $0;
   HEAP32[$31 >> 2] = $30;
   HEAP32[$31 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $41 = $40;
   $43 = HEAP32[$41 >> 2] | 0;
   $46 = HEAP32[$41 + 4 >> 2] | 0;
   HEAP32[$2 >> 2] = $40 + 8;
   $47 = $0;
   HEAP32[$47 >> 2] = $43;
   HEAP32[$47 + 4 >> 2] = $46;
   break L1;
   break;
  }
 case 13:
  {
   $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $57 = HEAP32[$56 >> 2] | 0;
   HEAP32[$2 >> 2] = $56 + 4;
   $59 = ($57 & 65535) << 16 >> 16;
   $62 = $0;
   HEAP32[$62 >> 2] = $59;
   HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $72 = HEAP32[$71 >> 2] | 0;
   HEAP32[$2 >> 2] = $71 + 4;
   $73 = $0;
   HEAP32[$73 >> 2] = $72 & 65535;
   HEAP32[$73 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $83 = HEAP32[$82 >> 2] | 0;
   HEAP32[$2 >> 2] = $82 + 4;
   $85 = ($83 & 255) << 24 >> 24;
   $88 = $0;
   HEAP32[$88 >> 2] = $85;
   HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $98 = HEAP32[$97 >> 2] | 0;
   HEAP32[$2 >> 2] = $97 + 4;
   $99 = $0;
   HEAP32[$99 >> 2] = $98 & 255;
   HEAP32[$99 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $109 = +HEAPF64[$108 >> 3];
   HEAP32[$2 >> 2] = $108 + 8;
   HEAPF64[$0 >> 3] = $109;
   break L1;
   break;
  }
 case 18:
  {
   $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $116 = +HEAPF64[$115 >> 3];
   HEAP32[$2 >> 2] = $115 + 8;
   HEAPF64[$0 >> 3] = $116;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _trinkle($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0$lcssa = 0, $$045$lcssa = 0, $$04551 = 0, $$0455780 = 0, $$046$lcssa = 0, $$04653 = 0, $$0465681 = 0, $$047$lcssa = 0, $$0475582 = 0, $$049 = 0, $$05879 = 0, $$05879$phi = 0, $11 = 0, $12 = 0, $16 = 0, $20 = 0, $24 = 0, $27 = 0, $28 = 0, $35 = 0, $37 = 0, $38 = 0, $47 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $7 = sp + 232 | 0;
 $8 = sp;
 $9 = HEAP32[$3 >> 2] | 0;
 HEAP32[$7 >> 2] = $9;
 $11 = HEAP32[$3 + 4 >> 2] | 0;
 $12 = $7 + 4 | 0;
 HEAP32[$12 >> 2] = $11;
 HEAP32[$8 >> 2] = $0;
 L1 : do if (($9 | 0) != 1 | ($11 | 0) != 0) {
  $16 = 0 - $1 | 0;
  $20 = $0 + (0 - (HEAP32[$6 + ($4 << 2) >> 2] | 0)) | 0;
  if ((FUNCTION_TABLE_iii[$2 & 15]($20, $0) | 0) < 1) {
   $$0$lcssa = $0;
   $$045$lcssa = 1;
   $$046$lcssa = $4;
   $$047$lcssa = $5;
   label = 9;
  } else {
   $$0455780 = 1;
   $$0465681 = $4;
   $$0475582 = ($5 | 0) == 0;
   $$05879 = $0;
   $28 = $20;
   while (1) {
    if ($$0475582 & ($$0465681 | 0) > 1) {
     $24 = $$05879 + $16 | 0;
     $27 = HEAP32[$6 + ($$0465681 + -2 << 2) >> 2] | 0;
     if ((FUNCTION_TABLE_iii[$2 & 15]($24, $28) | 0) > -1) {
      $$04551 = $$0455780;
      $$04653 = $$0465681;
      $$049 = $$05879;
      label = 10;
      break L1;
     }
     if ((FUNCTION_TABLE_iii[$2 & 15]($24 + (0 - $27) | 0, $28) | 0) > -1) {
      $$04551 = $$0455780;
      $$04653 = $$0465681;
      $$049 = $$05879;
      label = 10;
      break L1;
     }
    }
    $35 = $$0455780 + 1 | 0;
    HEAP32[$8 + ($$0455780 << 2) >> 2] = $28;
    $37 = _pntz($7) | 0;
    _shr($7, $37);
    $38 = $37 + $$0465681 | 0;
    if (!((HEAP32[$7 >> 2] | 0) != 1 | (HEAP32[$12 >> 2] | 0) != 0)) {
     $$04551 = $35;
     $$04653 = $38;
     $$049 = $28;
     label = 10;
     break L1;
    }
    $47 = $28 + (0 - (HEAP32[$6 + ($38 << 2) >> 2] | 0)) | 0;
    if ((FUNCTION_TABLE_iii[$2 & 15]($47, HEAP32[$8 >> 2] | 0) | 0) < 1) {
     $$0$lcssa = $28;
     $$045$lcssa = $35;
     $$046$lcssa = $38;
     $$047$lcssa = 0;
     label = 9;
     break;
    } else {
     $$05879$phi = $28;
     $$0455780 = $35;
     $$0465681 = $38;
     $$0475582 = 1;
     $28 = $47;
     $$05879 = $$05879$phi;
    }
   }
  }
 } else {
  $$0$lcssa = $0;
  $$045$lcssa = 1;
  $$046$lcssa = $4;
  $$047$lcssa = $5;
  label = 9;
 } while (0);
 if ((label | 0) == 9) if (!$$047$lcssa) {
  $$04551 = $$045$lcssa;
  $$04653 = $$046$lcssa;
  $$049 = $$0$lcssa;
  label = 10;
 }
 if ((label | 0) == 10) {
  _cycle($1, $8, $$04551);
  _sift($$049, $1, $2, $$04653, $6);
 }
 STACKTOP = sp;
 return;
}

function _mbrtowc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$03952 = 0, $$03952$pn = 0, $$04051 = 0, $$04350 = 0, $$2 = 0, $$lcssa = 0, $$lcssa56 = 0, $12 = 0, $18 = 0, $22 = 0, $26 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $60 = 0, $spec$select = 0, $spec$select47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 $spec$select = ($3 | 0) == 0 ? 17980 : $3;
 $6 = HEAP32[$spec$select >> 2] | 0;
 L1 : do if (!$1) if (!$6) $$0 = 0; else label = 19; else {
  $spec$select47 = ($0 | 0) == 0 ? $4 : $0;
  if (!$2) $$0 = -2; else {
   if (!$6) {
    $12 = HEAP8[$1 >> 0] | 0;
    if ($12 << 24 >> 24 > -1) {
     HEAP32[$spec$select47 >> 2] = $12 & 255;
     $$0 = $12 << 24 >> 24 != 0 & 1;
     break;
    }
    $18 = (___pthread_self_910() | 0) + 188 | 0;
    $22 = HEAP8[$1 >> 0] | 0;
    if (!(HEAP32[HEAP32[$18 >> 2] >> 2] | 0)) {
     HEAP32[$spec$select47 >> 2] = $22 << 24 >> 24 & 57343;
     $$0 = 1;
     break;
    }
    $26 = ($22 & 255) + -194 | 0;
    if ($26 >>> 0 > 50) {
     label = 19;
     break;
    }
    $30 = HEAP32[2336 + ($26 << 2) >> 2] | 0;
    $31 = $2 + -1 | 0;
    if (!$31) $$2 = $30; else {
     $$03952 = $1 + 1 | 0;
     $$04051 = $30;
     $$04350 = $31;
     label = 11;
    }
   } else {
    $$03952 = $1;
    $$04051 = $6;
    $$04350 = $2;
    label = 11;
   }
   L14 : do if ((label | 0) == 11) {
    $34 = HEAPU8[$$03952 >> 0] | 0;
    $35 = $34 >>> 3;
    if (($35 + -16 | $35 + ($$04051 >> 26)) >>> 0 > 7) {
     label = 19;
     break L1;
    }
    $43 = $34 + -128 | $$04051 << 6;
    $44 = $$04350 + -1 | 0;
    if (($43 | 0) < 0) {
     $$03952$pn = $$03952;
     $47 = $43;
     $53 = $44;
     while (1) {
      $$03952$pn = $$03952$pn + 1 | 0;
      if (!$53) {
       $$2 = $47;
       break L14;
      }
      $49 = HEAP8[$$03952$pn >> 0] | 0;
      if (($49 & -64) << 24 >> 24 != -128) {
       label = 19;
       break L1;
      }
      $51 = ($49 & 255) + -128 | $47 << 6;
      $52 = $53 + -1 | 0;
      if (($51 | 0) >= 0) {
       $$lcssa = $52;
       $$lcssa56 = $51;
       break;
      } else {
       $47 = $51;
       $53 = $52;
      }
     }
    } else {
     $$lcssa = $44;
     $$lcssa56 = $43;
    }
    HEAP32[$spec$select >> 2] = 0;
    HEAP32[$spec$select47 >> 2] = $$lcssa56;
    $$0 = $2 - $$lcssa | 0;
    break L1;
   } while (0);
   HEAP32[$spec$select >> 2] = $$2;
   $$0 = -2;
  }
 } while (0);
 if ((label | 0) == 19) {
  HEAP32[$spec$select >> 2] = 0;
  $60 = ___errno_location() | 0;
  HEAP32[$60 >> 2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_typeid_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i30 = 0, $$025 = 0, $$127 = 0, $14 = 0, $16 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 40 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 24 | 0;
 $6 = sp;
 L1 : do if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 116) {
  $14 = HEAP8[$0 + 1 >> 0] | 0;
  switch ($14 << 24 >> 24) {
  case 105:
  case 101:
   break;
  default:
   {
    $$127 = $0;
    break L1;
   }
  }
  $16 = $0 + 2 | 0;
  if ($14 << 24 >> 24 == 101) $$025 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0; else $$025 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
  if (($$025 | 0) == ($16 | 0)) $$127 = $0; else {
   $21 = $2 + 4 | 0;
   $22 = HEAP32[$21 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($22 | 0)) $$127 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $22 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 15322) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 15117) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i30 = 0;
    while (1) {
     if (($$0$i$i$i30 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i30 << 2) >> 2] = 0;
     $$0$i$i$i30 = $$0$i$i$i30 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$21 >> 2] | 0) + -24 | 0, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$127 = $$025;
   }
  }
 } else $$127 = $0; else $$127 = $0; while (0);
 STACKTOP = sp;
 return $$127 | 0;
}

function _arImageProcLumaHistAndBoxFilterWithBias($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$073 = 0, $$074 = 0, $$075 = 0, $$076 = 0, $$078 = 0, $$082 = 0, $$1 = 0, $$177 = 0, $$179 = 0, $$2 = 0, $$280 = 0, $$3 = 0, $$381 = 0, $$pre$phi86Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $26 = 0, $28 = 0, $4 = 0, $44 = 0, $50 = 0, $53 = 0, $8 = 0;
 $4 = _arImageProcLumaHist($0, $1) | 0;
 L1 : do if (($4 | 0) < 0) $$0 = $4; else {
  if (!(HEAP32[$0 >> 2] | 0)) {
   $8 = $0 + 4 | 0;
   $10 = $0 + 8 | 0;
   $13 = _malloc(Math_imul(HEAP32[$10 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0) | 0;
   HEAP32[$0 >> 2] = $13;
   if (!$13) {
    $$0 = -1;
    break;
   } else {
    $$pre$phi86Z2D = $8;
    $$pre$phiZ2D = $10;
   }
  } else {
   $$pre$phi86Z2D = $0 + 4 | 0;
   $$pre$phiZ2D = $0 + 8 | 0;
  }
  $15 = $2 >> 1;
  $16 = 0 - $15 | 0;
  $$082 = 0;
  while (1) {
   $17 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   if (($$082 | 0) >= ($17 | 0)) break;
   $$073 = 0;
   while (1) {
    $19 = HEAP32[$$pre$phi86Z2D >> 2] | 0;
    if (($$073 | 0) >= ($19 | 0)) break;
    $$074 = $16;
    $$076 = 0;
    $$078 = 0;
    while (1) {
     if (($$074 | 0) > ($15 | 0)) break;
     $22 = $$074 + $$082 | 0;
     L16 : do if (($22 | 0) < 0) {
      $$3 = $$076;
      $$381 = $$078;
     } else if (($22 | 0) < (HEAP32[$$pre$phiZ2D >> 2] | 0)) {
      $26 = Math_imul($22, $19) | 0;
      $$075 = $16;
      $$177 = $$076;
      $$179 = $$078;
      while (1) {
       if (($$075 | 0) > ($15 | 0)) {
        $$3 = $$177;
        $$381 = $$179;
        break L16;
       }
       $28 = $$075 + $$073 | 0;
       if (($28 | 0) > -1 & ($28 | 0) < ($19 | 0)) {
        $$2 = $$177 + 1 | 0;
        $$280 = $$179 + (HEAPU8[$1 + ($28 + $26) >> 0] | 0) | 0;
       } else {
        $$2 = $$177;
        $$280 = $$179;
       }
       $$075 = $$075 + 1 | 0;
       $$177 = $$2;
       $$179 = $$280;
      }
     } else {
      $$3 = $$076;
      $$381 = $$078;
     } while (0);
     $$074 = $$074 + 1 | 0;
     $$076 = $$3;
     $$078 = $$381;
    }
    $44 = (HEAP32[$0 >> 2] | 0) + ((Math_imul($19, $$082) | 0) + $$073) | 0;
    HEAP8[$44 >> 0] = ($$078 | 0) / ($$076 | 0) | 0;
    $$073 = $$073 + 1 | 0;
   }
   $$082 = $$082 + 1 | 0;
  }
  if (!$3) $$0 = 0; else {
   $$1 = 0;
   $50 = $17;
   while (1) {
    if (($$1 | 0) >= (Math_imul($50, HEAP32[$$pre$phi86Z2D >> 2] | 0) | 0)) {
     $$0 = 0;
     break L1;
    }
    $53 = (HEAP32[$0 >> 2] | 0) + $$1 | 0;
    HEAP8[$53 >> 0] = (HEAPU8[$53 >> 0] | 0) + $3;
    $$1 = $$1 + 1 | 0;
    $50 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   }
  }
 } while (0);
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i30 = 0, $$127 = 0, $16 = 0, $17 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 40 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 24 | 0;
 $6 = sp;
 L1 : do if (($1 - $0 | 0) > 3) if ((HEAP8[$0 >> 0] | 0) == 68) {
  switch (HEAP8[$0 + 1 >> 0] | 0) {
  case 84:
  case 116:
   break;
  default:
   {
    $$127 = $0;
    break L1;
   }
  }
  $16 = $0 + 2 | 0;
  $17 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
  if (($17 | 0) == ($16 | 0) | ($17 | 0) == ($1 | 0)) $$127 = $0; else if ((HEAP8[$17 >> 0] | 0) == 69) {
   $23 = $2 + 4 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($24 | 0)) $$127 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $24 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 16435) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 15117) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i30 = 0;
    while (1) {
     if (($$0$i$i$i30 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i30 << 2) >> 2] = 0;
     $$0$i$i$i30 = $$0$i$i$i30 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$23 >> 2] | 0) + -24 | 0, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$127 = $17 + 1 | 0;
   }
  } else $$127 = $0;
 } else $$127 = $0; else $$127 = $0; while (0);
 STACKTOP = sp;
 return $$127 | 0;
}

function _arPattCreateHandle2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$043 = 0, $$044 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $vararg_buffer13 = sp + 56 | 0;
 $vararg_buffer11 = sp + 48 | 0;
 $vararg_buffer9 = sp + 40 | 0;
 $vararg_buffer7 = sp + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 L1 : do if (($0 + -16 | 0) >>> 0 > 48 | ($1 | 0) < 1) $$044 = 0; else {
  $4 = _malloc(32) | 0;
  if (!$4) {
   _arLog(0, 3, 5051, $vararg_buffer);
   _exit(1);
  }
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 28 >> 2] = $0;
  $9 = _malloc($1 << 2) | 0;
  HEAP32[$4 + 8 >> 2] = $9;
  if (!$9) {
   _arLog(0, 3, 5051, $vararg_buffer1);
   _exit(1);
  }
  $12 = $1 << 4;
  $13 = _malloc($12) | 0;
  HEAP32[$4 + 12 >> 2] = $13;
  if (!$13) {
   _arLog(0, 3, 5051, $vararg_buffer3);
   _exit(1);
  }
  $16 = _malloc($12) | 0;
  $17 = $4 + 20 | 0;
  HEAP32[$17 >> 2] = $16;
  if (!$16) {
   _arLog(0, 3, 5051, $vararg_buffer5);
   _exit(1);
  }
  $19 = $1 << 5;
  $20 = _malloc($19) | 0;
  HEAP32[$4 + 16 >> 2] = $20;
  if (!$20) {
   _arLog(0, 3, 5051, $vararg_buffer7);
   _exit(1);
  }
  $23 = _malloc($19) | 0;
  HEAP32[$4 + 24 >> 2] = $23;
  if (!$23) {
   _arLog(0, 3, 5051, $vararg_buffer9);
   _exit(1);
  }
  $26 = Math_imul($0, $0) | 0;
  $27 = $26 * 12 | 0;
  $28 = $26 << 2;
  $$043 = 0;
  L21 : while (1) {
   if (($$043 | 0) >= ($1 | 0)) {
    $$044 = $4;
    break L1;
   }
   HEAP32[$9 + ($$043 << 2) >> 2] = 0;
   $31 = $$043 << 2;
   $$0 = 0;
   while (1) {
    if ($$0 >>> 0 >= 4) break;
    $33 = _malloc($27) | 0;
    $34 = $$0 + $31 | 0;
    HEAP32[$13 + ($34 << 2) >> 2] = $33;
    if (!$33) {
     label = 19;
     break L21;
    }
    $37 = _malloc($28) | 0;
    HEAP32[(HEAP32[$17 >> 2] | 0) + ($34 << 2) >> 2] = $37;
    if (!$37) {
     label = 21;
     break L21;
    } else $$0 = $$0 + 1 | 0;
   }
   $$043 = $$043 + 1 | 0;
  }
  if ((label | 0) == 19) {
   _arLog(0, 3, 5051, $vararg_buffer11);
   _exit(1);
  } else if ((label | 0) == 21) {
   _arLog(0, 3, 5051, $vararg_buffer13);
   _exit(1);
  }
 } while (0);
 STACKTOP = sp;
 return $$044 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_137parse_sizeof_function_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i28 = 0, $$125 = 0, $16 = 0, $19 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 40 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 24 | 0;
 $6 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 115) if ((HEAP8[$0 + 1 >> 0] | 0) == 90) {
  $16 = $0 + 2 | 0;
  if ((HEAP8[$16 >> 0] | 0) == 102) {
   $19 = __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
   if (($19 | 0) == ($16 | 0)) $$125 = $0; else {
    $22 = $2 + 4 | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($23 | 0)) $$125 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $23 + -24 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 15330) | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 15117) | 0;
     HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
     $$0$i$i$i28 = 0;
     while (1) {
      if (($$0$i$i$i28 | 0) == 3) break;
      HEAP32[$5 + ($$0$i$i$i28 << 2) >> 2] = 0;
      $$0$i$i$i28 = $$0$i$i$i28 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$22 >> 2] | 0) + -24 | 0, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     $$125 = $19;
    }
   }
  } else $$125 = $0;
 } else $$125 = $0; else $$125 = $0; else $$125 = $0;
 STACKTOP = sp;
 return $$125 | 0;
}

function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $39 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255;
 $7 = ($2 | 0) != 0;
 L1 : do if ($7 & ($0 & 3 | 0) != 0) {
  $8 = $1 & 255;
  $$03555 = $0;
  $$03654 = $2;
  while (1) {
   if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
    $$035$lcssa65 = $$03555;
    $$036$lcssa64 = $$03654;
    label = 6;
    break L1;
   }
   $11 = $$03555 + 1 | 0;
   $12 = $$03654 + -1 | 0;
   $16 = ($12 | 0) != 0;
   if ($16 & ($11 & 3 | 0) != 0) {
    $$03555 = $11;
    $$03654 = $12;
   } else {
    $$035$lcssa = $11;
    $$036$lcssa = $12;
    $$lcssa = $16;
    label = 5;
    break;
   }
  }
 } else {
  $$035$lcssa = $0;
  $$036$lcssa = $2;
  $$lcssa = $7;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($$lcssa) {
  $$035$lcssa65 = $$035$lcssa;
  $$036$lcssa64 = $$036$lcssa;
  label = 6;
 } else label = 16;
 L8 : do if ((label | 0) == 6) {
  $18 = $1 & 255;
  if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) if (!$$036$lcssa64) {
   label = 16;
   break;
  } else {
   $39 = $$035$lcssa65;
   break;
  }
  $20 = Math_imul($3, 16843009) | 0;
  L13 : do if ($$036$lcssa64 >>> 0 > 3) {
   $$046 = $$035$lcssa65;
   $$13745 = $$036$lcssa64;
   while (1) {
    $23 = HEAP32[$$046 >> 2] ^ $20;
    if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
     $$137$lcssa66 = $$13745;
     $$in = $$046;
     break L13;
    }
    $29 = $$046 + 4 | 0;
    $30 = $$13745 + -4 | 0;
    if ($30 >>> 0 > 3) {
     $$046 = $29;
     $$13745 = $30;
    } else {
     $$0$lcssa = $29;
     $$137$lcssa = $30;
     label = 11;
     break;
    }
   }
  } else {
   $$0$lcssa = $$035$lcssa65;
   $$137$lcssa = $$036$lcssa64;
   label = 11;
  } while (0);
  if ((label | 0) == 11) if (!$$137$lcssa) {
   label = 16;
   break;
  } else {
   $$137$lcssa66 = $$137$lcssa;
   $$in = $$0$lcssa;
  }
  $$140 = $$in;
  $$23839 = $$137$lcssa66;
  while (1) {
   if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
    $39 = $$140;
    break L8;
   }
   $$23839 = $$23839 + -1 | 0;
   if (!$$23839) {
    label = 16;
    break;
   } else $$140 = $$140 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 16) $39 = 0;
 return $39 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$054$ph$ph = 0, $$055 = 0, $$056$ph = 0, $$056$ph$ph = 0, $$058 = 0, $10 = 0, $11 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $26 = 0, $29 = 0, $34 = 0, $36 = 0, $39 = 0, $40 = 0, $5 = 0, $54 = 0, $7 = 0, $8 = 0;
 $2 = $0 + 4 | 0;
 L1 : do if (!$1) {
  $54 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = 0;
  if ($54 | 0) __ZdlPv($54);
  HEAP32[$2 >> 2] = 0;
 } else {
  if ($1 >>> 0 > 1073741823) {
   $5 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc($5, 7822);
   HEAP32[$5 >> 2] = 3444;
   ___cxa_throw($5 | 0, 272, 6);
  }
  $7 = __Znwj($1 << 2) | 0;
  $8 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $7;
  if ($8 | 0) __ZdlPv($8);
  HEAP32[$2 >> 2] = $1;
  $$058 = 0;
  while (1) {
   if (($$058 | 0) == ($1 | 0)) break;
   HEAP32[(HEAP32[$0 >> 2] | 0) + ($$058 << 2) >> 2] = 0;
   $$058 = $$058 + 1 | 0;
  }
  $10 = $0 + 8 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  if ($11 | 0) {
   $17 = HEAP32[$11 + 4 >> 2] | 0;
   $18 = $1 + -1 | 0;
   $20 = ($18 & $1 | 0) == 0;
   if ($20) $26 = $17 & $18; else if ($17 >>> 0 < $1 >>> 0) $26 = $17; else $26 = ($17 >>> 0) % ($1 >>> 0) | 0;
   HEAP32[(HEAP32[$0 >> 2] | 0) + ($26 << 2) >> 2] = $10;
   $$054$ph$ph = $26;
   $$056$ph$ph = $11;
   while (1) {
    $$056$ph = $$056$ph$ph;
    L25 : while (1) {
     while (1) {
      $$055 = HEAP32[$$056$ph >> 2] | 0;
      if (!$$055) break L1;
      $29 = HEAP32[$$055 + 4 >> 2] | 0;
      if ($20) $34 = $29 & $18; else if ($29 >>> 0 < $1 >>> 0) $34 = $29; else $34 = ($29 >>> 0) % ($1 >>> 0) | 0;
      if (($34 | 0) == ($$054$ph$ph | 0)) break;
      $36 = (HEAP32[$0 >> 2] | 0) + ($34 << 2) | 0;
      if (!(HEAP32[$36 >> 2] | 0)) break L25;
      $39 = $$055 + 8 | 0;
      $$0 = $$055;
      while (1) {
       $40 = HEAP32[$$0 >> 2] | 0;
       if (!$40) break;
       if ((HEAP32[$39 >> 2] | 0) == (HEAP32[$40 + 8 >> 2] | 0)) $$0 = $40; else break;
      }
      HEAP32[$$056$ph >> 2] = $40;
      HEAP32[$$0 >> 2] = HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($34 << 2) >> 2] >> 2];
      HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($34 << 2) >> 2] >> 2] = $$055;
     }
     $$056$ph = $$055;
    }
    HEAP32[$36 >> 2] = $$056$ph;
    $$054$ph$ph = $34;
    $$056$ph$ph = $$055;
   }
  }
 } while (0);
 return;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$054$ph$ph = 0, $$055 = 0, $$056$ph = 0, $$056$ph$ph = 0, $$058 = 0, $10 = 0, $11 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $26 = 0, $29 = 0, $34 = 0, $36 = 0, $39 = 0, $40 = 0, $5 = 0, $54 = 0, $7 = 0, $8 = 0;
 $2 = $0 + 4 | 0;
 L1 : do if (!$1) {
  $54 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = 0;
  if ($54 | 0) __ZdlPv($54);
  HEAP32[$2 >> 2] = 0;
 } else {
  if ($1 >>> 0 > 1073741823) {
   $5 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc($5, 7822);
   HEAP32[$5 >> 2] = 3444;
   ___cxa_throw($5 | 0, 272, 6);
  }
  $7 = __Znwj($1 << 2) | 0;
  $8 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $7;
  if ($8 | 0) __ZdlPv($8);
  HEAP32[$2 >> 2] = $1;
  $$058 = 0;
  while (1) {
   if (($$058 | 0) == ($1 | 0)) break;
   HEAP32[(HEAP32[$0 >> 2] | 0) + ($$058 << 2) >> 2] = 0;
   $$058 = $$058 + 1 | 0;
  }
  $10 = $0 + 8 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  if ($11 | 0) {
   $17 = HEAP32[$11 + 4 >> 2] | 0;
   $18 = $1 + -1 | 0;
   $20 = ($18 & $1 | 0) == 0;
   if ($20) $26 = $17 & $18; else if ($17 >>> 0 < $1 >>> 0) $26 = $17; else $26 = ($17 >>> 0) % ($1 >>> 0) | 0;
   HEAP32[(HEAP32[$0 >> 2] | 0) + ($26 << 2) >> 2] = $10;
   $$054$ph$ph = $26;
   $$056$ph$ph = $11;
   while (1) {
    $$056$ph = $$056$ph$ph;
    L25 : while (1) {
     while (1) {
      $$055 = HEAP32[$$056$ph >> 2] | 0;
      if (!$$055) break L1;
      $29 = HEAP32[$$055 + 4 >> 2] | 0;
      if ($20) $34 = $29 & $18; else if ($29 >>> 0 < $1 >>> 0) $34 = $29; else $34 = ($29 >>> 0) % ($1 >>> 0) | 0;
      if (($34 | 0) == ($$054$ph$ph | 0)) break;
      $36 = (HEAP32[$0 >> 2] | 0) + ($34 << 2) | 0;
      if (!(HEAP32[$36 >> 2] | 0)) break L25;
      $39 = $$055 + 8 | 0;
      $$0 = $$055;
      while (1) {
       $40 = HEAP32[$$0 >> 2] | 0;
       if (!$40) break;
       if ((HEAP32[$39 >> 2] | 0) == (HEAP32[$40 + 8 >> 2] | 0)) $$0 = $40; else break;
      }
      HEAP32[$$056$ph >> 2] = $40;
      HEAP32[$$0 >> 2] = HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($34 << 2) >> 2] >> 2];
      HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($34 << 2) >> 2] >> 2] = $$055;
     }
     $$056$ph = $$055;
    }
    HEAP32[$36 >> 2] = $$056$ph;
    $$054$ph$ph = $34;
    $$056$ph$ph = $$055;
   }
  }
 } while (0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_expr_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i27 = 0, $$124 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 40 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 24 | 0;
 $6 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 115) if ((HEAP8[$0 + 1 >> 0] | 0) == 122) {
  $16 = $0 + 2 | 0;
  $17 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
  if (($17 | 0) == ($16 | 0)) $$124 = $0; else {
   $20 = $2 + 4 | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($21 | 0)) $$124 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $21 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 15344) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 15117) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i27 = 0;
    while (1) {
     if (($$0$i$i$i27 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i27 << 2) >> 2] = 0;
     $$0$i$i$i27 = $$0$i$i$i27 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$20 >> 2] | 0) + -24 | 0, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$124 = $17;
   }
  }
 } else $$124 = $0; else $$124 = $0; else $$124 = $0;
 STACKTOP = sp;
 return $$124 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_type_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i27 = 0, $$124 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 40 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 24 | 0;
 $6 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 115) if ((HEAP8[$0 + 1 >> 0] | 0) == 116) {
  $16 = $0 + 2 | 0;
  $17 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
  if (($17 | 0) == ($16 | 0)) $$124 = $0; else {
   $20 = $2 + 4 | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($21 | 0)) $$124 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $21 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 15344) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 15117) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i27 = 0;
    while (1) {
     if (($$0$i$i$i27 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i27 << 2) >> 2] = 0;
     $$0$i$i$i27 = $$0$i$i$i27 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$20 >> 2] | 0) + -24 | 0, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$124 = $17;
   }
  }
 } else $$124 = $0; else $$124 = $0; else $$124 = $0;
 STACKTOP = sp;
 return $$124 | 0;
}

function _arParamChangeSize($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0103 = 0, $12 = 0.0, $27 = 0, $7 = 0.0, label = 0;
 $7 = +($1 | 0) / +(HEAP32[$0 >> 2] | 0);
 $12 = +($2 | 0) / +(HEAP32[$0 + 4 >> 2] | 0);
 HEAP32[$3 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 4) break;
  HEAPF64[$3 + 8 + ($$0 << 3) >> 3] = $7 * +HEAPF64[$0 + 8 + ($$0 << 3) >> 3];
  HEAPF64[$3 + 40 + ($$0 << 3) >> 3] = $12 * +HEAPF64[$0 + 40 + ($$0 << 3) >> 3];
  HEAPF64[$3 + 72 + ($$0 << 3) >> 3] = +HEAPF64[$0 + 72 + ($$0 << 3) >> 3];
  $$0 = $$0 + 1 | 0;
 }
 $27 = HEAP32[$0 + 176 >> 2] | 0;
 switch ($27 | 0) {
 case 4:
  {
   HEAPF64[$3 + 104 >> 3] = +HEAPF64[$0 + 104 >> 3];
   HEAPF64[$3 + 112 >> 3] = +HEAPF64[$0 + 112 >> 3];
   HEAPF64[$3 + 120 >> 3] = +HEAPF64[$0 + 120 >> 3];
   HEAPF64[$3 + 128 >> 3] = +HEAPF64[$0 + 128 >> 3];
   HEAPF64[$3 + 136 >> 3] = $7 * +HEAPF64[$0 + 136 >> 3];
   HEAPF64[$3 + 144 >> 3] = $12 * +HEAPF64[$0 + 144 >> 3];
   HEAPF64[$3 + 152 >> 3] = $7 * +HEAPF64[$0 + 152 >> 3];
   HEAPF64[$3 + 160 >> 3] = $12 * +HEAPF64[$0 + 160 >> 3];
   HEAPF64[$3 + 168 >> 3] = +HEAPF64[$0 + 168 >> 3];
   label = 9;
   break;
  }
 case 3:
  {
   HEAPF64[$3 + 104 >> 3] = $7 * +HEAPF64[$0 + 104 >> 3];
   HEAPF64[$3 + 112 >> 3] = $12 * +HEAPF64[$0 + 112 >> 3];
   HEAPF64[$3 + 120 >> 3] = +HEAPF64[$0 + 120 >> 3];
   HEAPF64[$3 + 128 >> 3] = +HEAPF64[$0 + 128 >> 3];
   HEAPF64[$3 + 136 >> 3] = +HEAPF64[$0 + 136 >> 3] / ($7 * $12);
   HEAPF64[$3 + 144 >> 3] = +HEAPF64[$0 + 144 >> 3] / ($12 * ($7 * $7 * $12));
   label = 9;
   break;
  }
 case 2:
  {
   HEAPF64[$3 + 104 >> 3] = $7 * +HEAPF64[$0 + 104 >> 3];
   HEAPF64[$3 + 112 >> 3] = $12 * +HEAPF64[$0 + 112 >> 3];
   HEAPF64[$3 + 120 >> 3] = +HEAPF64[$0 + 120 >> 3];
   HEAPF64[$3 + 128 >> 3] = +HEAPF64[$0 + 128 >> 3] / ($7 * $12);
   HEAPF64[$3 + 136 >> 3] = +HEAPF64[$0 + 136 >> 3] / ($12 * ($7 * $7 * $12));
   label = 9;
   break;
  }
 case 1:
  {
   HEAPF64[$3 + 104 >> 3] = $7 * +HEAPF64[$0 + 104 >> 3];
   HEAPF64[$3 + 112 >> 3] = $12 * +HEAPF64[$0 + 112 >> 3];
   HEAPF64[$3 + 120 >> 3] = +HEAPF64[$0 + 120 >> 3];
   HEAPF64[$3 + 128 >> 3] = +HEAPF64[$0 + 128 >> 3] / ($7 * $12);
   label = 9;
   break;
  }
 default:
  $$0103 = -1;
 }
 if ((label | 0) == 9) {
  HEAP32[$3 + 176 >> 2] = $27;
  $$0103 = 0;
 }
 return $$0103 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE23__append_forward_unsafeIPKcEERS7_T_SC_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$040 = 0, $15 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $3 = 0, $35 = 0, $36 = 0, $4 = 0, $44 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $scevgep5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = $1;
 $4 = sp;
 $5 = $0 + 11 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 << 24 >> 24 < 0;
 if ($7) {
  $35 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
  $36 = HEAP32[$0 + 4 >> 2] | 0;
 } else {
  $35 = 10;
  $36 = $6 & 255;
 }
 $15 = $2 - $3 | 0;
 do if ($15 | 0) {
  if ($7) {
   $22 = HEAP32[$0 >> 2] | 0;
   $23 = HEAP32[$0 + 4 >> 2] | 0;
  } else {
   $22 = $0;
   $23 = $6 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($1, $22, $22 + $23 | 0) | 0) {
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($4, $1, $2);
   $26 = HEAP8[$4 + 11 >> 0] | 0;
   $27 = $26 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0, $27 ? HEAP32[$4 >> 2] | 0 : $4, $27 ? HEAP32[$4 + 4 >> 2] | 0 : $26 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   break;
  }
  if (($35 - $36 | 0) >>> 0 < $15 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($0, $35, $36 + $15 - $35 | 0, $36, $36, 0);
  if ((HEAP8[$5 >> 0] | 0) < 0) $44 = HEAP32[$0 >> 2] | 0; else $44 = $0;
  $scevgep5 = $2 + ($36 - $3) | 0;
  $$0 = $44 + $36 | 0;
  $$040 = $1;
  while (1) {
   if (($$040 | 0) == ($2 | 0)) break;
   __ZNSt3__211char_traitsIcE6assignERcRKc($$0, $$040);
   $$0 = $$0 + 1 | 0;
   $$040 = $$040 + 1 | 0;
  }
  HEAP8[$4 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($44 + $scevgep5 | 0, $4);
  $49 = $36 + $15 | 0;
  if ((HEAP8[$5 >> 0] | 0) < 0) {
   HEAP32[$0 + 4 >> 2] = $49;
   break;
  } else {
   HEAP8[$5 >> 0] = $49;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($0) {
 $0 = $0 | 0;
 __embind_register_void(__ZN10emscripten8internal6TypeIDIvE3getEv() | 0, 16556);
 __embind_register_bool(__ZN10emscripten8internal6TypeIDIbE3getEv() | 0, 16561, 1, 1, 0);
 __ZN12_GLOBAL__N_116register_integerIcEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIaEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIhEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIsEEvPKc();
 __ZN12_GLOBAL__N_116register_integerItEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIiEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIjEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIlEEvPKc();
 __ZN12_GLOBAL__N_116register_integerImEEvPKc();
 __ZN12_GLOBAL__N_114register_floatIfEEvPKc();
 __ZN12_GLOBAL__N_114register_floatIdEEvPKc();
 __embind_register_std_string(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() | 0, 15939);
 __embind_register_std_string(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() | 0, 10568);
 __embind_register_std_wstring(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() | 0, 4, 10601);
 __embind_register_emval(__ZN10emscripten8internal6TypeIDINS_3valEE3getEv() | 0, 10614);
 __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(10630);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(10667);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(10706);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(10737);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(10777);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(10806);
 __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(10844);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(10876);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(10909);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(10942);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(10976);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(11009);
 __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc();
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_dot_suffixINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i16 = 0, $$014 = 0, $10 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $3 = sp + 24 | 0;
 $4 = sp + 12 | 0;
 $5 = sp;
 if (($0 | 0) == ($1 | 0)) $$014 = $0; else if ((HEAP8[$0 >> 0] | 0) == 46) {
  $10 = $2 + 4 | 0;
  if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) $$014 = $0; else {
   HEAP32[$5 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = 0;
   HEAP32[$5 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($5, $0, $1);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5, 0, 15114) | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$5 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15117) | 0;
   HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
   $$0$i$i$i16 = 0;
   while (1) {
    if (($$0$i$i$i16 | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i$i16 << 2) >> 2] = 0;
    $$0$i$i$i16 = $$0$i$i$i16 + 1 | 0;
   }
   $22 = HEAP8[$3 + 11 >> 0] | 0;
   $23 = $22 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$10 >> 2] | 0) + -24 | 0, $23 ? HEAP32[$3 >> 2] | 0 : $3, $23 ? HEAP32[$3 + 4 >> 2] | 0 : $22 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   $$014 = $1;
  }
 } else $$014 = $0;
 STACKTOP = sp;
 return $$014 | 0;
}

function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $3 = sp + 32 | 0;
 $4 = $0 + 28 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 HEAP32[$3 >> 2] = $5;
 $7 = $0 + 20 | 0;
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0;
 HEAP32[$3 + 4 >> 2] = $9;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $12 = $9 + $2 | 0;
 $13 = $0 + 60 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $3;
 HEAP32[$vararg_buffer + 8 >> 2] = 2;
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0;
 L1 : do if (($12 | 0) == ($17 | 0)) label = 3; else {
  $$04756 = 2;
  $$04855 = $12;
  $$04954 = $3;
  $27 = $17;
  while (1) {
   if (($27 | 0) < 0) break;
   $$04855 = $$04855 - $27 | 0;
   $37 = HEAP32[$$04954 + 4 >> 2] | 0;
   $38 = $27 >>> 0 > $37 >>> 0;
   $$150 = $38 ? $$04954 + 8 | 0 : $$04954;
   $$1 = $$04756 + ($38 << 31 >> 31) | 0;
   $$0 = $27 - ($38 ? $37 : 0) | 0;
   HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0;
   $44 = $$150 + 4 | 0;
   HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0;
   HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$vararg_buffer3 + 4 >> 2] = $$150;
   HEAP32[$vararg_buffer3 + 8 >> 2] = $$1;
   $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0;
   if (($$04855 | 0) == ($27 | 0)) {
    label = 3;
    break L1;
   } else {
    $$04756 = $$1;
    $$04954 = $$150;
   }
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
  if (($$04756 | 0) == 2) $$051 = 0; else $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0;
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0;
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0);
  $25 = $20;
  HEAP32[$4 >> 2] = $25;
  HEAP32[$7 >> 2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;
 return $$051 | 0;
}

function _getMarkerInfo($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $2 = 0, $7 = 0, $8 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $2) | 0)) $$1 = HEAP32[489] | 0; else {
  $7 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $2) | 0) + 216 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$8 + 44 >> 2] | 0) > ($1 | 0)) {
   $spec$select = ($1 | 0) < 0 ? 17e3 : $8 + 48 + ($1 << 8) | 0;
   _emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi(2, HEAP32[$spec$select >> 2] | 0, HEAP32[$spec$select + 4 >> 2] | 0, HEAP32[$spec$select + 8 >> 2] | 0, HEAP32[$spec$select + 12 >> 2] | 0, HEAP32[$spec$select + 16 >> 2] | 0, HEAP32[$spec$select + 20 >> 2] | 0, HEAP32[$spec$select + 24 >> 2] | 0, +(+HEAPF64[$spec$select + 32 >> 3]), +(+HEAPF64[$spec$select + 40 >> 3]), +(+HEAPF64[$spec$select + 48 >> 3]), +(+HEAPF64[$spec$select + 56 >> 3]), +(+HEAPF64[$spec$select + 64 >> 3]), +(+HEAPF64[$spec$select + 72 >> 3]), +(+HEAPF64[$spec$select + 80 >> 3]), +(+HEAPF64[$spec$select + 88 >> 3]), +(+HEAPF64[$spec$select + 96 >> 3]), +(+HEAPF64[$spec$select + 104 >> 3]), +(+HEAPF64[$spec$select + 112 >> 3]), +(+HEAPF64[$spec$select + 120 >> 3]), +(+HEAPF64[$spec$select + 128 >> 3]), +(+HEAPF64[$spec$select + 136 >> 3]), +(+HEAPF64[$spec$select + 144 >> 3]), +(+HEAPF64[$spec$select + 152 >> 3]), +(+HEAPF64[$spec$select + 160 >> 3]), +(+HEAPF64[$spec$select + 168 >> 3]), +(+HEAPF64[$spec$select + 176 >> 3]), +(+HEAPF64[$spec$select + 184 >> 3]), +(+HEAPF64[$spec$select + 192 >> 3]), +(+HEAPF64[$spec$select + 200 >> 3]), +(+HEAPF64[$spec$select + 208 >> 3]), +(+HEAPF64[$spec$select + 216 >> 3]), +(+HEAPF64[$spec$select + 224 >> 3]), HEAP32[$spec$select + 240 >> 2] | 0) | 0;
   $$1 = 0;
   break;
  } else {
   $$1 = HEAP32[491] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _PCA($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$075 = 0, $$077 = 0, $$078 = 0, $$080 = 0, $$1 = 0, $$176 = 0, $$179 = 0, $$181 = 0, $$2 = 0, $$3 = 0, $20 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = HEAP32[$0 + 8 >> 2] | 0;
 $8 = ($6 | 0) < ($4 | 0) ? $6 : $4;
 L1 : do if (($4 | 0) < 2 | ($6 | 0) < 2) $$077 = -1; else if ((HEAP32[$1 + 8 >> 2] | 0) == ($6 | 0)) if ((HEAP32[$1 + 4 >> 2] | 0) == ($8 | 0)) if ((HEAP32[$2 + 4 >> 2] | 0) == ($8 | 0)) {
  $20 = _arMatrixAlloc($8, $8) | 0;
  if ((HEAP32[$20 + 4 >> 2] | 0) == ($8 | 0)) if ((HEAP32[$20 + 8 >> 2] | 0) == ($8 | 0)) {
   $27 = ($4 | 0) < ($6 | 0);
   if ($27) {
    if ((_x_by_xt($0, $20) | 0) < 0) {
     _arMatrixFree($20) | 0;
     $$077 = -1;
     break;
    }
   } else if ((_xt_by_x($0, $20) | 0) < 0) {
    _arMatrixFree($20) | 0;
    $$077 = -1;
    break;
   }
   if ((_QRM($20, $2) | 0) < 0) {
    _arMatrixFree($20) | 0;
    $$077 = -1;
    break;
   }
   L18 : do if ($27) {
    if ((_EV_create($0, $20, $1, $2) | 0) < 0) {
     _arMatrixFree($20) | 0;
     $$077 = -1;
     break L1;
    }
   } else {
    $$075 = 0;
    $$078 = HEAP32[$20 >> 2] | 0;
    $$080 = HEAP32[$1 >> 2] | 0;
    while (1) {
     if (($$075 | 0) >= ($8 | 0)) break;
     if (+HEAPF64[(HEAP32[$2 >> 2] | 0) + ($$075 << 3) >> 3] < 1.0e-16) break;
     $$0 = 0;
     $$179 = $$078;
     $$181 = $$080;
     while (1) {
      if (($$0 | 0) >= ($8 | 0)) break;
      HEAPF64[$$181 >> 3] = +HEAPF64[$$179 >> 3];
      $$0 = $$0 + 1 | 0;
      $$179 = $$179 + 8 | 0;
      $$181 = $$181 + 8 | 0;
     }
     $$075 = $$075 + 1 | 0;
     $$078 = $$179;
     $$080 = $$181;
    }
    $$176 = $$075;
    $$2 = $$080;
    while (1) {
     if (($$176 | 0) >= ($8 | 0)) break L18;
     HEAPF64[(HEAP32[$2 >> 2] | 0) + ($$176 << 3) >> 3] = 0.0;
     $$1 = 0;
     $$3 = $$2;
     while (1) {
      if (($$1 | 0) >= ($8 | 0)) break;
      HEAPF64[$$3 >> 3] = 0.0;
      $$1 = $$1 + 1 | 0;
      $$3 = $$3 + 8 | 0;
     }
     $$176 = $$176 + 1 | 0;
     $$2 = $$3;
    }
   } while (0);
   _arMatrixFree($20) | 0;
   $$077 = 0;
   break;
  }
  _arMatrixFree($20) | 0;
  $$077 = -1;
 } else $$077 = -1; else $$077 = -1; else $$077 = -1; while (0);
 return $$077 | 0;
}

function _get_cpara($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $11 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $51 = 0, $6 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0;
 $3 = _arMatrixAlloc(8, 8) | 0;
 $4 = _arMatrixAlloc(8, 1) | 0;
 $5 = _arMatrixAlloc(8, 1) | 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 4) break;
  $6 = $0 + ($$0 << 4) | 0;
  $8 = HEAP32[$3 >> 2] | 0;
  $9 = $$0 << 4;
  HEAPF64[$8 + ($9 << 3) >> 3] = +HEAPF64[$6 >> 3];
  $11 = $0 + ($$0 << 4) + 8 | 0;
  HEAPF64[$8 + (($9 | 1) << 3) >> 3] = +HEAPF64[$11 >> 3];
  HEAPF64[$8 + (($9 | 2) << 3) >> 3] = 1.0;
  HEAPF64[$8 + (($9 | 3) << 3) >> 3] = 0.0;
  HEAPF64[$8 + (($9 | 4) << 3) >> 3] = 0.0;
  HEAPF64[$8 + (($9 | 5) << 3) >> 3] = 0.0;
  $24 = $1 + ($$0 << 4) | 0;
  HEAPF64[$8 + (($9 | 6) << 3) >> 3] = -(+HEAPF64[$6 >> 3] * +HEAPF64[$24 >> 3]);
  HEAPF64[$8 + (($9 | 7) << 3) >> 3] = -(+HEAPF64[$11 >> 3] * +HEAPF64[$24 >> 3]);
  HEAPF64[$8 + (($9 | 8) << 3) >> 3] = 0.0;
  HEAPF64[$8 + (($9 | 9) << 3) >> 3] = 0.0;
  HEAPF64[$8 + (($9 | 10) << 3) >> 3] = 0.0;
  HEAPF64[$8 + (($9 | 11) << 3) >> 3] = +HEAPF64[$6 >> 3];
  HEAPF64[$8 + (($9 | 12) << 3) >> 3] = +HEAPF64[$11 >> 3];
  HEAPF64[$8 + (($9 | 13) << 3) >> 3] = 1.0;
  $51 = $1 + ($$0 << 4) + 8 | 0;
  HEAPF64[$8 + (($9 | 14) << 3) >> 3] = -(+HEAPF64[$6 >> 3] * +HEAPF64[$51 >> 3]);
  HEAPF64[$8 + (($9 | 15) << 3) >> 3] = -(+HEAPF64[$11 >> 3] * +HEAPF64[$51 >> 3]);
  $64 = HEAP32[$4 >> 2] | 0;
  $65 = $$0 << 1;
  HEAPF64[$64 + ($65 << 3) >> 3] = +HEAPF64[$24 >> 3];
  HEAPF64[$64 + (($65 | 1) << 3) >> 3] = +HEAPF64[$51 >> 3];
  $$0 = $$0 + 1 | 0;
 }
 _arMatrixSelfInv($3) | 0;
 _arMatrixMul($5, $3, $4) | 0;
 $71 = HEAP32[$5 >> 2] | 0;
 $$1 = 0;
 while (1) {
  if (($$1 | 0) == 2) break;
  $72 = $$1 * 3 | 0;
  HEAPF64[$2 + ($$1 * 24 | 0) >> 3] = +HEAPF64[$71 + ($72 << 3) >> 3];
  HEAPF64[$2 + ($$1 * 24 | 0) + 8 >> 3] = +HEAPF64[$71 + ($72 + 1 << 3) >> 3];
  HEAPF64[$2 + ($$1 * 24 | 0) + 16 >> 3] = +HEAPF64[$71 + ($72 + 2 << 3) >> 3];
  $$1 = $$1 + 1 | 0;
 }
 HEAPF64[$2 + 48 >> 3] = +HEAPF64[$71 + 48 >> 3];
 HEAPF64[$2 + 56 >> 3] = +HEAPF64[$71 + 56 >> 3];
 HEAPF64[$2 + 64 >> 3] = 1.0;
 _arMatrixFree($3) | 0;
 _arMatrixFree($4) | 0;
 _arMatrixFree($5) | 0;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($0) {
 $0 = $0 | 0;
 var $$017$off022 = 0, $$01918 = 0, $$020153134 = 0, $$02016 = 0, $$pre$phi37Z2D = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $28 = 0, $3 = 0, $spec$select$i = 0, label = 0;
 $1 = $0 + 11 | 0;
 $2 = HEAP8[$1 >> 0] | 0;
 $3 = $2 << 24 >> 24 < 0;
 if ($3) {
  $11 = HEAP32[$0 + 4 >> 2] | 0;
  $15 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $11 = $2 & 255;
  $15 = 10;
 }
 $10 = $11 >>> 0 < 11;
 $spec$select$i = $10 ? 10 : ($11 + 16 & -16) + -1 | 0;
 L5 : do if (($spec$select$i | 0) != ($15 | 0)) {
  do if ($10) {
   $23 = HEAP32[$0 >> 2] | 0;
   if ($3) {
    $$017$off022 = 0;
    $$01918 = $23;
    $$02016 = $0;
    label = 12;
   } else {
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($0, $23, ($2 & 255) + 1 | 0) | 0;
    __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($23);
    label = 15;
   }
  } else {
   $17 = $spec$select$i + 1 | 0;
   $18 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($17) | 0;
   if ($spec$select$i >>> 0 <= $15 >>> 0 & ($18 | 0) == 0) break L5;
   $20 = HEAP8[$1 >> 0] | 0;
   if ($20 << 24 >> 24 < 0) {
    $$017$off022 = 1;
    $$01918 = HEAP32[$0 >> 2] | 0;
    $$02016 = $18;
    label = 12;
    break;
   } else {
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($18, $0, ($20 & 255) + 1 | 0) | 0;
    $$020153134 = $18;
    $$pre$phi37Z2D = $17;
    $$pre$phiZ2D = $0 + 4 | 0;
    label = 14;
    break;
   }
  } while (0);
  if ((label | 0) == 12) {
   $28 = $0 + 4 | 0;
   __ZNSt3__211char_traitsIcE4copyEPcPKcj($$02016, $$01918, (HEAP32[$28 >> 2] | 0) + 1 | 0) | 0;
   __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($$01918);
   if ($$017$off022) {
    $$020153134 = $$02016;
    $$pre$phi37Z2D = $spec$select$i + 1 | 0;
    $$pre$phiZ2D = $28;
    label = 14;
   } else label = 15;
  }
  if ((label | 0) == 14) {
   HEAP32[$0 + 8 >> 2] = $$pre$phi37Z2D | -2147483648;
   HEAP32[$$pre$phiZ2D >> 2] = $11;
   HEAP32[$0 >> 2] = $$020153134;
   break;
  } else if ((label | 0) == 15) {
   HEAP8[$1 >> 0] = $11;
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6removeENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$pre$phiZ2D = 0, $10 = 0, $15 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $37 = 0, $38 = 0, $40 = 0, $42 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $5 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = HEAP32[$3 + 4 >> 2] | 0;
 $8 = $5 + -1 | 0;
 $10 = ($8 & $5 | 0) == 0;
 if ($10) $16 = $8 & $7; else if ($7 >>> 0 < $5 >>> 0) $16 = $7; else $16 = ($7 >>> 0) % ($5 >>> 0) | 0;
 $15 = (HEAP32[$1 >> 2] | 0) + ($16 << 2) | 0;
 $$0 = HEAP32[$15 >> 2] | 0;
 while (1) {
  $18 = HEAP32[$$0 >> 2] | 0;
  if (($18 | 0) == ($3 | 0)) break; else $$0 = $18;
 }
 $20 = $1 + 8 | 0;
 if (($$0 | 0) == ($20 | 0)) label = 14; else {
  $23 = HEAP32[$$0 + 4 >> 2] | 0;
  if ($10) $28 = $23 & $8; else if ($23 >>> 0 < $5 >>> 0) $28 = $23; else $28 = ($23 >>> 0) % ($5 >>> 0) | 0;
  if (($28 | 0) == ($16 | 0)) $$pre$phiZ2D = $3; else label = 14;
 }
 do if ((label | 0) == 14) {
  $29 = HEAP32[$3 >> 2] | 0;
  if ($29 | 0) {
   $32 = HEAP32[$29 + 4 >> 2] | 0;
   if ($10) $37 = $32 & $8; else if ($32 >>> 0 < $5 >>> 0) $37 = $32; else $37 = ($32 >>> 0) % ($5 >>> 0) | 0;
   if (($37 | 0) == ($16 | 0)) {
    $$pre$phiZ2D = $3;
    break;
   }
  }
  HEAP32[$15 >> 2] = 0;
  $$pre$phiZ2D = $3;
 } while (0);
 $38 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 $40 = $38;
 if (!$38) $50 = $40; else {
  $42 = HEAP32[$38 + 4 >> 2] | 0;
  if ($10) $47 = $42 & $8; else if ($42 >>> 0 < $5 >>> 0) $47 = $42; else $47 = ($42 >>> 0) % ($5 >>> 0) | 0;
  if (($47 | 0) == ($16 | 0)) $50 = $40; else {
   HEAP32[(HEAP32[$1 >> 2] | 0) + ($47 << 2) >> 2] = $$0;
   $50 = HEAP32[$3 >> 2] | 0;
  }
 }
 HEAP32[$$0 >> 2] = $50;
 HEAP32[$$pre$phiZ2D >> 2] = 0;
 $51 = $1 + 12 | 0;
 HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + -1;
 HEAP32[$0 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = $20;
 HEAP8[$0 + 8 >> 0] = 1;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_dot_star_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$idx$i = 0, $$3 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $27 = 0, $3 = 0, $33 = 0, $34 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp + 12 | 0;
 $4 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 100) if ((HEAP8[$0 + 1 >> 0] | 0) == 115) {
  $14 = $0 + 2 | 0;
  $15 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0;
  if (($15 | 0) == ($14 | 0)) $$3 = $0; else {
   $17 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
   if (($17 | 0) == ($15 | 0)) $$3 = $0; else {
    $19 = $2 + 4 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    if ((($20 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$3 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $20 + -24 | 0);
     $27 = HEAP32[$19 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$19 >> 2] = $27 + -24;
     __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($4, 15410, $3);
     $33 = HEAP8[$4 + 11 >> 0] | 0;
     $34 = $33 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$19 >> 2] | 0) + -24 | 0, $34 ? HEAP32[$4 >> 2] | 0 : $4, $34 ? HEAP32[$4 + 4 >> 2] | 0 : $33 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $17;
    }
   }
  }
 } else $$3 = $0; else $$3 = $0; else $$3 = $0;
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_dot_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$idx$i = 0, $$3 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $27 = 0, $3 = 0, $33 = 0, $34 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp + 12 | 0;
 $4 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 100) if ((HEAP8[$0 + 1 >> 0] | 0) == 116) {
  $14 = $0 + 2 | 0;
  $15 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0;
  if (($15 | 0) == ($14 | 0)) $$3 = $0; else {
   $17 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
   if (($17 | 0) == ($15 | 0)) $$3 = $0; else {
    $19 = $2 + 4 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    if ((($20 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$3 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $20 + -24 | 0);
     $27 = HEAP32[$19 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$19 >> 2] = $27 + -24;
     __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($4, 15408, $3);
     $33 = HEAP8[$4 + 11 >> 0] | 0;
     $34 = $33 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$19 >> 2] | 0) + -24 | 0, $34 ? HEAP32[$4 >> 2] | 0 : $4, $34 ? HEAP32[$4 + 4 >> 2] | 0 : $33 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $17;
    }
   }
  }
 } else $$3 = $0; else $$3 = $0; else $$3 = $0;
 STACKTOP = sp;
 return $$3 | 0;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 dest_end = dest + num | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  aligned_dest_end = dest_end & -4 | 0;
  block_aligned_dest_end = aligned_dest_end - 64 | 0;
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2];
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2];
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2];
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2];
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2];
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2];
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2];
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2];
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2];
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2];
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2];
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2];
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2];
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2];
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2];
   dest = dest + 64 | 0;
   src = src + 64 | 0;
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0;
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0;
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0;
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 }
 return ret | 0;
}

function ___fdopen($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $19 = 0, $2 = 0, $24 = 0, $29 = 0, $31 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $2 = sp + 56 | 0;
 if (!(_strchr(11759, HEAP8[$1 >> 0] | 0) | 0)) {
  $7 = ___errno_location() | 0;
  HEAP32[$7 >> 2] = 22;
  $$0 = 0;
 } else {
  $8 = _malloc(1156) | 0;
  if (!$8) $$0 = 0; else {
   _memset($8 | 0, 0, 124) | 0;
   if (!(_strchr($1, 43) | 0)) HEAP32[$8 >> 2] = (HEAP8[$1 >> 0] | 0) == 114 ? 8 : 4;
   if (_strchr($1, 101) | 0) {
    HEAP32[$vararg_buffer >> 2] = $0;
    HEAP32[$vararg_buffer + 4 >> 2] = 2;
    HEAP32[$vararg_buffer + 8 >> 2] = 1;
    ___syscall221(221, $vararg_buffer | 0) | 0;
   }
   if ((HEAP8[$1 >> 0] | 0) == 97) {
    HEAP32[$vararg_buffer3 >> 2] = $0;
    HEAP32[$vararg_buffer3 + 4 >> 2] = 3;
    $19 = ___syscall221(221, $vararg_buffer3 | 0) | 0;
    if (!($19 & 1024)) {
     HEAP32[$vararg_buffer7 >> 2] = $0;
     HEAP32[$vararg_buffer7 + 4 >> 2] = 4;
     HEAP32[$vararg_buffer7 + 8 >> 2] = $19 | 1024;
     ___syscall221(221, $vararg_buffer7 | 0) | 0;
    }
    $24 = HEAP32[$8 >> 2] | 128;
    HEAP32[$8 >> 2] = $24;
    $31 = $24;
   } else $31 = HEAP32[$8 >> 2] | 0;
   HEAP32[$8 + 60 >> 2] = $0;
   HEAP32[$8 + 44 >> 2] = $8 + 132;
   HEAP32[$8 + 48 >> 2] = 1024;
   $29 = $8 + 75 | 0;
   HEAP8[$29 >> 0] = -1;
   if (!($31 & 8)) {
    HEAP32[$vararg_buffer12 >> 2] = $0;
    HEAP32[$vararg_buffer12 + 4 >> 2] = 21523;
    HEAP32[$vararg_buffer12 + 8 >> 2] = $2;
    if (!(___syscall54(54, $vararg_buffer12 | 0) | 0)) HEAP8[$29 >> 0] = 10;
   }
   HEAP32[$8 + 32 >> 2] = 14;
   HEAP32[$8 + 36 >> 2] = 1;
   HEAP32[$8 + 40 >> 2] = 2;
   HEAP32[$8 + 12 >> 2] = 1;
   if (!(HEAP32[4476] | 0)) HEAP32[$8 + 76 >> 2] = -1;
   ___ofl_add($8) | 0;
   $$0 = $8;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _fgets($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$05963 = 0, $$06065 = 0, $$06164 = 0, $$1 = 0, $11 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $43 = 0, $50 = 0, $51 = 0, $7 = 0, $9 = 0, label = 0;
 if ((HEAP32[$2 + 76 >> 2] | 0) > -1) $16 = ___lockfile($2) | 0; else $16 = 0;
 $7 = $1 + -1 | 0;
 if (($1 | 0) < 2) {
  $9 = $2 + 74 | 0;
  $11 = HEAP8[$9 >> 0] | 0;
  HEAP8[$9 >> 0] = $11 + 255 | $11;
  if ($16 | 0) ___unlockfile($2);
  if (!$7) {
   HEAP8[$0 >> 0] = 0;
   $$0 = $0;
  } else $$0 = 0;
 } else {
  L11 : do if (!$7) {
   $$1 = $0;
   label = 17;
  } else {
   $19 = $2 + 4 | 0;
   $20 = $2 + 8 | 0;
   $$06065 = $7;
   $$06164 = $0;
   while (1) {
    $21 = HEAP32[$19 >> 2] | 0;
    $23 = $21;
    $24 = (HEAP32[$20 >> 2] | 0) - $23 | 0;
    $25 = _memchr($21, 10, $24) | 0;
    $26 = ($25 | 0) == 0;
    $30 = $26 ? $24 : 1 - $23 + $25 | 0;
    $32 = $30 >>> 0 < $$06065 >>> 0 ? $30 : $$06065;
    _memcpy($$06164 | 0, $21 | 0, $32 | 0) | 0;
    $34 = (HEAP32[$19 >> 2] | 0) + $32 | 0;
    HEAP32[$19 >> 2] = $34;
    $35 = $$06164 + $32 | 0;
    $36 = $$06065 - $32 | 0;
    if (!($26 & ($36 | 0) != 0)) {
     $$1 = $35;
     label = 17;
     break L11;
    }
    if ($34 >>> 0 < (HEAP32[$20 >> 2] | 0) >>> 0) {
     HEAP32[$19 >> 2] = $34 + 1;
     $50 = HEAPU8[$34 >> 0] | 0;
    } else {
     $43 = ___uflow($2) | 0;
     if (($43 | 0) < 0) break; else $50 = $43;
    }
    $51 = $35 + 1 | 0;
    HEAP8[$35 >> 0] = $50;
    $$06065 = $36 + -1 | 0;
    if (($50 & 255 | 0) == 10 | ($$06065 | 0) == 0) {
     $$1 = $51;
     label = 17;
     break L11;
    } else $$06164 = $51;
   }
   if (($35 | 0) == ($0 | 0)) $$05963 = 0; else if (!(HEAP32[$2 >> 2] & 16)) $$05963 = 0; else {
    $$1 = $35;
    label = 17;
   }
  } while (0);
  if ((label | 0) == 17) if (!$0) $$05963 = 0; else {
   HEAP8[$$1 >> 0] = 0;
   $$05963 = $0;
  }
  if (!$16) $$0 = $$05963; else {
   ___unlockfile($2);
   $$0 = $$05963;
  }
 }
 return $$0 | 0;
}

function _arGetTransMatSquare($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 var $$0 = 0, $$0$in = 0, $$031 = 0.0, $19 = 0, $26 = 0, $34 = 0, $4 = 0, $42 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $6 = 0, $69 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 $4 = sp + 200 | 0;
 $5 = sp + 104 | 0;
 $6 = sp + 264 | 0;
 $7 = sp + 8 | 0;
 $8 = sp;
 do if ((HEAP32[$1 + 12 >> 2] | 0) < 0) $$0$in = $1 + 20 | 0; else if ((HEAP32[$1 + 8 >> 2] | 0) < 0) {
  $$0$in = $1 + 24 | 0;
  break;
 } else {
  $$0$in = $1 + 16 | 0;
  break;
 } while (0);
 $$0 = HEAP32[$$0$in >> 2] | 0;
 $19 = (4 - $$0 | 0) % 4 | 0;
 HEAPF64[$4 >> 3] = +HEAPF64[$1 + 168 + ($19 << 4) >> 3];
 HEAPF64[$4 + 8 >> 3] = +HEAPF64[$1 + 168 + ($19 << 4) + 8 >> 3];
 $26 = (5 - $$0 | 0) % 4 | 0;
 HEAPF64[$4 + 16 >> 3] = +HEAPF64[$1 + 168 + ($26 << 4) >> 3];
 HEAPF64[$4 + 24 >> 3] = +HEAPF64[$1 + 168 + ($26 << 4) + 8 >> 3];
 $34 = (6 - $$0 | 0) % 4 | 0;
 HEAPF64[$4 + 32 >> 3] = +HEAPF64[$1 + 168 + ($34 << 4) >> 3];
 HEAPF64[$4 + 40 >> 3] = +HEAPF64[$1 + 168 + ($34 << 4) + 8 >> 3];
 $42 = (7 - $$0 | 0) % 4 | 0;
 HEAPF64[$4 + 48 >> 3] = +HEAPF64[$1 + 168 + ($42 << 4) >> 3];
 HEAPF64[$4 + 56 >> 3] = +HEAPF64[$1 + 168 + ($42 << 4) + 8 >> 3];
 $49 = $2 * -.5;
 HEAPF64[$5 >> 3] = $49;
 $50 = $2 * .5;
 HEAPF64[$5 + 8 >> 3] = $50;
 HEAPF64[$5 + 16 >> 3] = 0.0;
 HEAPF64[$5 + 24 >> 3] = $50;
 HEAPF64[$5 + 32 >> 3] = $50;
 HEAPF64[$5 + 40 >> 3] = 0.0;
 HEAPF64[$5 + 48 >> 3] = $50;
 HEAPF64[$5 + 56 >> 3] = $49;
 HEAPF64[$5 + 64 >> 3] = 0.0;
 HEAPF64[$5 + 72 >> 3] = $49;
 HEAPF64[$5 + 80 >> 3] = $49;
 HEAPF64[$5 + 88 >> 3] = 0.0;
 HEAP32[$6 >> 2] = $4;
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$6 + 8 >> 2] = 4;
 if ((_icpGetInitXw2Xc_from_PlanarData(HEAP32[$0 >> 2] | 0, $4, $5, 4, $7) | 0) < 0) $$031 = 1.0e8; else {
  $69 = (_icpPoint(HEAP32[$0 >> 2] | 0, $6, $7, $3, $8) | 0) < 0;
  $$031 = $69 ? 1.0e8 : +HEAPF64[$8 >> 3];
 }
 STACKTOP = sp;
 return +$$031;
}

function _EV_create($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$071 = 0, $$072 = 0, $$074 = 0, $$075 = 0, $$077 = 0, $$078 = 0.0, $$079 = 0, $$1 = 0, $$173 = 0, $$176 = 0, $$2 = 0, $$3 = 0, $29 = 0.0, $33 = 0.0, $34 = 0, $42 = 0.0, $5 = 0, $7 = 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $7 = HEAP32[$0 + 8 >> 2] | 0;
 L1 : do if (($5 | 0) < 1 | ($7 | 0) < 1) $$074 = -1; else if ((HEAP32[$1 + 4 >> 2] | 0) == ($5 | 0)) if ((HEAP32[$1 + 8 >> 2] | 0) == ($5 | 0)) if ((HEAP32[$2 + 4 >> 2] | 0) == ($5 | 0)) if ((HEAP32[$2 + 8 >> 2] | 0) == ($7 | 0)) if ((HEAP32[$3 + 4 >> 2] | 0) == ($5 | 0)) {
  $$072 = 0;
  $$075 = HEAP32[$2 >> 2] | 0;
  while (1) {
   if (($$072 | 0) >= ($5 | 0)) break;
   $29 = +HEAPF64[(HEAP32[$3 >> 2] | 0) + ($$072 << 3) >> 3];
   if ($29 < 1.0e-16) break;
   $33 = 1.0 / +Math_sqrt(+(+Math_abs(+$29)));
   $34 = Math_imul($$072, $5) | 0;
   $$071 = 0;
   $$176 = $$075;
   while (1) {
    if (($$071 | 0) == ($7 | 0)) break;
    $$0 = 0;
    $$077 = (HEAP32[$1 >> 2] | 0) + ($34 << 3) | 0;
    $$078 = 0.0;
    $$079 = (HEAP32[$0 >> 2] | 0) + ($$071 << 3) | 0;
    while (1) {
     if (($$0 | 0) == ($5 | 0)) break;
     $42 = $$078 + +HEAPF64[$$077 >> 3] * +HEAPF64[$$079 >> 3];
     $$0 = $$0 + 1 | 0;
     $$077 = $$077 + 8 | 0;
     $$078 = $42;
     $$079 = $$079 + ($7 << 3) | 0;
    }
    HEAPF64[$$176 >> 3] = $33 * $$078;
    $$071 = $$071 + 1 | 0;
    $$176 = $$176 + 8 | 0;
   }
   $$072 = $$072 + 1 | 0;
   $$075 = $$075 + ($7 << 3) | 0;
  }
  $$173 = $$072;
  $$2 = $$075;
  while (1) {
   if (($$173 | 0) >= ($5 | 0)) {
    $$074 = 0;
    break L1;
   }
   HEAPF64[(HEAP32[$3 >> 2] | 0) + ($$173 << 3) >> 3] = 0.0;
   $$1 = 0;
   $$3 = $$2;
   while (1) {
    if (($$1 | 0) >= ($7 | 0)) break;
    HEAPF64[$$3 >> 3] = 0.0;
    $$1 = $$1 + 1 | 0;
    $$3 = $$3 + 8 | 0;
   }
   $$173 = $$173 + 1 | 0;
   $$2 = $$3;
  }
 } else $$074 = -1; else $$074 = -1; else $$074 = -1; else $$074 = -1; else $$074 = -1; while (0);
 return $$074 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_arrow_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$idx$i = 0, $$3 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $26 = 0, $3 = 0, $33 = 0, $34 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 112) if ((HEAP8[$0 + 1 >> 0] | 0) == 116) {
  $13 = $0 + 2 | 0;
  $14 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
  if (($14 | 0) == ($13 | 0)) $$3 = $0; else {
   $16 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0;
   if (($16 | 0) == ($14 | 0)) $$3 = $0; else {
    $18 = $2 + 4 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    if ((($19 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$3 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $19 + -24 | 0);
     $26 = HEAP32[$18 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$18 >> 2] = $26 + -24;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($26 + -48 | 0, 15387) | 0;
     $33 = HEAP8[$3 + 11 >> 0] | 0;
     $34 = $33 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$18 >> 2] | 0) + -24 | 0, $34 ? HEAP32[$3 >> 2] | 0 : $3, $34 ? HEAP32[$3 + 4 >> 2] | 0 : $33 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $16;
    }
   }
  }
 } else $$3 = $0; else $$3 = $0; else $$3 = $0;
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJRNS2_5arenaILj4096EEEEEEvDpOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp + 20 | 0;
 $3 = sp;
 $4 = $0 + 4 | 0;
 $9 = ((HEAP32[$4 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 4) + 1 | 0;
 $10 = __ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE8max_sizeEv($0) | 0;
 if ($10 >>> 0 < $9 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $15 = HEAP32[$0 >> 2] | 0;
  $16 = (HEAP32[$0 + 8 >> 2] | 0) - $15 | 0;
  $20 = $16 >> 3;
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($3, $16 >> 4 >>> 0 < $10 >>> 1 >>> 0 ? ($20 >>> 0 < $9 >>> 0 ? $9 : $20) : $10, (HEAP32[$4 >> 2] | 0) - $15 >> 4, $0 + 12 | 0);
  $25 = $3 + 8 | 0;
  $26 = HEAP32[$25 >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($2, $1);
  HEAP32[$26 >> 2] = 0;
  HEAP32[$26 + 4 >> 2] = 0;
  HEAP32[$26 + 8 >> 2] = 0;
  HEAP32[$26 + 12 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$25 >> 2] = $26 + 16;
  __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($0, $3);
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($3);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $34 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = ((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 4) + 1 | 0;
 $9 = __ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $15 = (HEAP32[$0 + 8 >> 2] | 0) - $14 | 0;
  $19 = $15 >> 3;
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($2, $15 >> 4 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, (HEAP32[$3 >> 2] | 0) - $14 >> 4, $0 + 12 | 0);
  $24 = $2 + 8 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  HEAP32[$25 >> 2] = 0;
  $27 = $25 + 4 | 0;
  HEAP32[$27 >> 2] = 0;
  $28 = $25 + 8 | 0;
  HEAP32[$28 >> 2] = 0;
  HEAP32[$25 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
  HEAP32[$25 >> 2] = HEAP32[$1 >> 2];
  $32 = $1 + 4 | 0;
  HEAP32[$27 >> 2] = HEAP32[$32 >> 2];
  $34 = $1 + 8 | 0;
  HEAP32[$28 >> 2] = HEAP32[$34 >> 2];
  HEAP32[$34 >> 2] = 0;
  HEAP32[$32 >> 2] = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$24 >> 2] = $25 + 16;
  __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0, $2);
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp + 20 | 0;
 $3 = sp;
 $4 = $0 + 4 | 0;
 $9 = ((HEAP32[$4 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 4) + 1 | 0;
 $10 = __ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE8max_sizeEv($0) | 0;
 if ($10 >>> 0 < $9 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $15 = HEAP32[$0 >> 2] | 0;
  $16 = (HEAP32[$0 + 8 >> 2] | 0) - $15 | 0;
  $20 = $16 >> 3;
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($3, $16 >> 4 >>> 0 < $10 >>> 1 >>> 0 ? ($20 >>> 0 < $9 >>> 0 ? $9 : $20) : $10, (HEAP32[$4 >> 2] | 0) - $15 >> 4, $0 + 12 | 0);
  $25 = $3 + 8 | 0;
  $26 = HEAP32[$25 >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2IS4_EERKNS1_IT_Lj4096EEE($2, $1);
  HEAP32[$26 >> 2] = 0;
  HEAP32[$26 + 4 >> 2] = 0;
  HEAP32[$26 + 8 >> 2] = 0;
  HEAP32[$26 + 12 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$25 >> 2] = $26 + 16;
  __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($0, $3);
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($3);
  STACKTOP = sp;
  return;
 }
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $33 = 0, $43 = 0, $45 = 0, label = 0;
 do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); else {
  if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
   $45 = HEAP32[$0 + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$45 >> 2] | 0) + 24 >> 2] & 3]($45, $1, $2, $3, $4);
   break;
  }
  if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
   $13 = $1 + 20 | 0;
   if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
    HEAP32[$1 + 32 >> 2] = $3;
    $19 = $1 + 44 | 0;
    if ((HEAP32[$19 >> 2] | 0) == 4) break;
    $22 = $1 + 52 | 0;
    HEAP8[$22 >> 0] = 0;
    $23 = $1 + 53 | 0;
    HEAP8[$23 >> 0] = 0;
    $25 = HEAP32[$0 + 8 >> 2] | 0;
    FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] & 3]($25, $1, $2, $2, 1, $4);
    if (!(HEAP8[$23 >> 0] | 0)) {
     $$037$off038 = 0;
     label = 11;
    } else if (!(HEAP8[$22 >> 0] | 0)) {
     $$037$off038 = 1;
     label = 11;
    } else label = 15;
    do if ((label | 0) == 11) {
     HEAP32[$13 >> 2] = $2;
     $33 = $1 + 40 | 0;
     HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 1;
     if ((HEAP32[$1 + 36 >> 2] | 0) == 1) if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
      HEAP8[$1 + 54 >> 0] = 1;
      if ($$037$off038) {
       label = 15;
       break;
      } else {
       $43 = 4;
       break;
      }
     }
     if ($$037$off038) label = 15; else $43 = 4;
    } while (0);
    if ((label | 0) == 15) $43 = 3;
    HEAP32[$19 >> 2] = $43;
    break;
   }
  }
  if (($3 | 0) == 1) HEAP32[$1 + 32 >> 2] = 1;
 } while (0);
 return;
}

function _icpGetJ_T_S($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $5 = 0, $7 = 0, $9 = 0, dest = 0, stop = 0;
 $1 = $0 + 64 | 0;
 dest = $0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$1 >> 3] = -1.0;
 $2 = $0 + 72 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 28 >> 2] = 0;
 HEAPF64[$0 + 104 >> 3] = 1.0;
 $5 = $0 + 160 | 0;
 dest = $0 + 112 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$5 >> 3] = 1.0;
 $7 = $0 + 240 | 0;
 dest = $0 + 168 | 0;
 stop = dest + 72 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$7 >> 3] = -1.0;
 $9 = $0 + 296 | 0;
 dest = $0 + 248 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$9 >> 3] = -1.0;
 $10 = $0 + 304 | 0;
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 HEAP32[$10 + 12 >> 2] = 0;
 HEAP32[$10 + 16 >> 2] = 0;
 HEAP32[$10 + 20 >> 2] = 0;
 HEAP32[$10 + 24 >> 2] = 0;
 HEAP32[$10 + 28 >> 2] = 0;
 HEAPF64[$0 + 336 >> 3] = 1.0;
 $13 = $0 + 456 | 0;
 dest = $0 + 344 | 0;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$13 >> 3] = 1.0;
 $15 = $0 + 512 | 0;
 dest = $0 + 464 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$15 >> 3] = 1.0;
 $17 = $0 + 568 | 0;
 dest = $0 + 520 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$17 >> 3] = 1.0;
 return;
}

function _arGetTransMatSquareCont($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 $4 = $4 | 0;
 var $$0 = 0, $$0$in = 0, $19 = 0, $26 = 0, $34 = 0, $42 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $6 = 0, $66 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 $5 = sp + 104 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 168 | 0;
 $8 = sp;
 do if ((HEAP32[$1 + 12 >> 2] | 0) < 0) $$0$in = $1 + 20 | 0; else if ((HEAP32[$1 + 8 >> 2] | 0) < 0) {
  $$0$in = $1 + 24 | 0;
  break;
 } else {
  $$0$in = $1 + 16 | 0;
  break;
 } while (0);
 $$0 = HEAP32[$$0$in >> 2] | 0;
 $19 = (4 - $$0 | 0) % 4 | 0;
 HEAPF64[$5 >> 3] = +HEAPF64[$1 + 168 + ($19 << 4) >> 3];
 HEAPF64[$5 + 8 >> 3] = +HEAPF64[$1 + 168 + ($19 << 4) + 8 >> 3];
 $26 = (5 - $$0 | 0) % 4 | 0;
 HEAPF64[$5 + 16 >> 3] = +HEAPF64[$1 + 168 + ($26 << 4) >> 3];
 HEAPF64[$5 + 24 >> 3] = +HEAPF64[$1 + 168 + ($26 << 4) + 8 >> 3];
 $34 = (6 - $$0 | 0) % 4 | 0;
 HEAPF64[$5 + 32 >> 3] = +HEAPF64[$1 + 168 + ($34 << 4) >> 3];
 HEAPF64[$5 + 40 >> 3] = +HEAPF64[$1 + 168 + ($34 << 4) + 8 >> 3];
 $42 = (7 - $$0 | 0) % 4 | 0;
 HEAPF64[$5 + 48 >> 3] = +HEAPF64[$1 + 168 + ($42 << 4) >> 3];
 HEAPF64[$5 + 56 >> 3] = +HEAPF64[$1 + 168 + ($42 << 4) + 8 >> 3];
 $49 = $3 * -.5;
 HEAPF64[$6 >> 3] = $49;
 $50 = $3 * .5;
 HEAPF64[$6 + 8 >> 3] = $50;
 HEAPF64[$6 + 16 >> 3] = 0.0;
 HEAPF64[$6 + 24 >> 3] = $50;
 HEAPF64[$6 + 32 >> 3] = $50;
 HEAPF64[$6 + 40 >> 3] = 0.0;
 HEAPF64[$6 + 48 >> 3] = $50;
 HEAPF64[$6 + 56 >> 3] = $49;
 HEAPF64[$6 + 64 >> 3] = 0.0;
 HEAPF64[$6 + 72 >> 3] = $49;
 HEAPF64[$6 + 80 >> 3] = $49;
 HEAPF64[$6 + 88 >> 3] = 0.0;
 HEAP32[$7 >> 2] = $5;
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$7 + 8 >> 2] = 4;
 $66 = (_icpPoint(HEAP32[$0 >> 2] | 0, $7, $2, $4, $8) | 0) < 0;
 STACKTOP = sp;
 return +($66 ? 1.0e8 : +HEAPF64[$8 >> 3]);
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_throw_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$1 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $3 = sp + 24 | 0;
 $4 = sp;
 $5 = sp + 12 | 0;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 116) if ((HEAP8[$0 + 1 >> 0] | 0) == 119) {
  $15 = $0 + 2 | 0;
  $16 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
  if (($16 | 0) == ($15 | 0)) $$1 = $0; else {
   $19 = $2 + 4 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($20 | 0)) $$1 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $20 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5, 0, 15315) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$19 >> 2] | 0) + -24 | 0, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$1 = $16;
   }
  }
 } else $$1 = $0; else $$1 = $0; else $$1 = $0;
 STACKTOP = sp;
 return $$1 | 0;
}

function _arParamLTCreate($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$057 = 0, $$058 = 0, $$059 = 0, $$1 = 0, $$160 = 0, $10 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $26 = 0, $28 = 0, $3 = 0, $32 = 0.0, $36 = 0.0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp;
 $6 = _malloc(208) | 0;
 if (!$6) {
  _arLog(0, 3, 5051, sp + 32 | 0);
  _exit(1);
 }
 _memcpy($6 | 0, $0 | 0, 184) | 0;
 $9 = $1 << 1;
 $10 = (HEAP32[$0 >> 2] | 0) + $9 | 0;
 HEAP32[$6 + 192 >> 2] = $10;
 $15 = (HEAP32[$0 + 4 >> 2] | 0) + $9 | 0;
 HEAP32[$6 + 196 >> 2] = $15;
 HEAP32[$6 + 200 >> 2] = $1;
 HEAP32[$6 + 204 >> 2] = $1;
 $20 = Math_imul($10 << 3, $15) | 0;
 $21 = _malloc($20) | 0;
 HEAP32[$6 + 184 >> 2] = $21;
 if (!$21) {
  _arLog(0, 3, 5051, sp + 40 | 0);
  _exit(1);
 }
 $23 = _malloc($20) | 0;
 HEAP32[$6 + 188 >> 2] = $23;
 if (!$23) {
  _arLog(0, 3, 5051, sp + 48 | 0);
  _exit(1);
 }
 $26 = $0 + 104 | 0;
 $28 = HEAP32[$0 + 176 >> 2] | 0;
 $$0 = 0;
 $$058 = $23;
 $$059 = $21;
 while (1) {
  if (($$0 | 0) >= ($15 | 0)) break;
  $32 = +($$0 - $1 | 0);
  $$057 = 0;
  $$1 = $$058;
  $$160 = $$059;
  while (1) {
   if (($$057 | 0) >= ($10 | 0)) break;
   $36 = +($$057 - $1 | 0);
   _arParamIdeal2Observ($26, $36, $32, $4, $5, $28) | 0;
   HEAPF32[$$160 >> 2] = +HEAPF64[$4 >> 3];
   HEAPF32[$$160 + 4 >> 2] = +HEAPF64[$5 >> 3];
   _arParamObserv2Ideal($26, $36, $32, $2, $3, $28) | 0;
   HEAPF32[$$1 >> 2] = +HEAPF64[$2 >> 3];
   HEAPF32[$$1 + 4 >> 2] = +HEAPF64[$3 >> 3];
   $$057 = $$057 + 1 | 0;
   $$1 = $$1 + 8 | 0;
   $$160 = $$160 + 8 | 0;
  }
  $$0 = $$0 + 1 | 0;
  $$058 = $$1;
  $$059 = $$160;
 }
 STACKTOP = sp;
 return $6 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $27 = 0, $28 = 0, label = 0;
 L1 : do if ($0 >>> 0 < $1 >>> 0) {
  L3 : do if ((HEAP8[$0 >> 0] | 0) == 95) {
   if (($1 - $0 | 0) <= 3) {
    HEAP32[$3 >> 2] = -2;
    break L1;
   }
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 90:
    {
     $13 = $0 + 2 | 0;
     $14 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
     if (($14 | 0) == ($13 | 0) | ($14 | 0) == ($1 | 0)) $$0 = $14; else if ((HEAP8[$14 >> 0] | 0) == 46) $$0 = __ZN10__cxxabiv112_GLOBAL__N_116parse_dot_suffixINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0; else $$0 = $14;
     if (($$0 | 0) == ($1 | 0)) break L3;
     HEAP32[$3 >> 2] = -2;
     break L1;
     break;
    }
   case 95:
    {
     label = 11;
     break;
    }
   default:
    {}
   }
   if ((label | 0) == 11) if ((HEAP8[$0 + 2 >> 0] | 0) == 95) if ((HEAP8[$0 + 3 >> 0] | 0) == 90) {
    $27 = $0 + 4 | 0;
    $28 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($27, $1, $2) | 0;
    if (($28 | 0) == ($27 | 0) | ($28 | 0) == ($1 | 0)) {
     HEAP32[$3 >> 2] = -2;
     break L1;
    }
    if ((__ZN10__cxxabiv112_GLOBAL__N_118parse_block_invokeINS0_2DbEEEPKcS4_S4_RT_($28, $1, $2) | 0) == ($1 | 0)) break;
    HEAP32[$3 >> 2] = -2;
    break L1;
   }
   HEAP32[$3 >> 2] = -2;
   break L1;
  } else if ((__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0) != ($1 | 0)) {
   HEAP32[$3 >> 2] = -2;
   break L1;
  } while (0);
  if (!(HEAP32[$3 >> 2] | 0)) if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$2 + 4 >> 2] | 0)) HEAP32[$3 >> 2] = -2;
 } else HEAP32[$3 >> 2] = -2; while (0);
 return;
}

function _arMatrixPCA($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$064 = 0, $$065 = 0.0, $$1 = 0, $$2 = 0, $18 = 0, $24 = 0, $27 = 0.0, $32 = 0, $35 = 0, $39 = 0, $40 = 0, $49 = 0, $5 = 0, $7 = 0, $9 = 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $7 = HEAP32[$0 + 8 >> 2] | 0;
 $9 = ($5 | 0) < ($7 | 0) ? $5 : $7;
 L1 : do if (($5 | 0) < 2 | ($7 | 0) < 2) $$064 = -1; else if ((HEAP32[$1 + 8 >> 2] | 0) == ($7 | 0)) if ((HEAP32[$1 + 4 >> 2] | 0) == ($9 | 0)) {
  $18 = $2 + 4 | 0;
  if ((HEAP32[$18 >> 2] | 0) == ($9 | 0)) if ((HEAP32[$3 + 4 >> 2] | 0) == ($7 | 0)) {
   $24 = _arMatrixAllocDup($0) | 0;
   if (!$24) $$064 = -1; else {
    $27 = +Math_sqrt(+(+($5 | 0)));
    if ((_EX($24, $3) | 0) < 0) {
     _arMatrixFree($24) | 0;
     $$064 = -1;
     break;
    }
    if ((_CENTER($24, $3) | 0) < 0) {
     _arMatrixFree($24) | 0;
     $$064 = -1;
     break;
    }
    $32 = Math_imul($7, $5) | 0;
    $$0 = 0;
    while (1) {
     if (($$0 | 0) >= ($32 | 0)) break;
     $35 = (HEAP32[$24 >> 2] | 0) + ($$0 << 3) | 0;
     HEAPF64[$35 >> 3] = +HEAPF64[$35 >> 3] / $27;
     $$0 = $$0 + 1 | 0;
    }
    $39 = _PCA($24, $1, $2) | 0;
    _arMatrixFree($24) | 0;
    $40 = HEAP32[$18 >> 2] | 0;
    $$065 = 0.0;
    $$1 = 0;
    while (1) {
     if (($$1 | 0) >= ($40 | 0)) break;
     $$065 = $$065 + +HEAPF64[(HEAP32[$2 >> 2] | 0) + ($$1 << 3) >> 3];
     $$1 = $$1 + 1 | 0;
    }
    $$2 = 0;
    while (1) {
     if (($$2 | 0) >= ($40 | 0)) {
      $$064 = $39;
      break L1;
     }
     $49 = (HEAP32[$2 >> 2] | 0) + ($$2 << 3) | 0;
     HEAPF64[$49 >> 3] = +HEAPF64[$49 >> 3] / $$065;
     $$2 = $$2 + 1 | 0;
    }
   }
  } else $$064 = -1; else $$064 = -1;
 } else $$064 = -1; else $$064 = -1; while (0);
 return $$064 | 0;
}

function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $spec$select = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 $3 = sp + 120 | 0;
 $4 = sp + 80 | 0;
 $5 = sp;
 $6 = sp + 136 | 0;
 dest = $4;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) $$0 = -1; else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $40 = ___lockfile($0) | 0; else $40 = 0;
  $13 = HEAP32[$0 >> 2] | 0;
  $14 = $13 & 32;
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) HEAP32[$0 >> 2] = $13 & -33;
  $19 = $0 + 48 | 0;
  if (!(HEAP32[$19 >> 2] | 0)) {
   $23 = $0 + 44 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   HEAP32[$23 >> 2] = $6;
   $25 = $0 + 28 | 0;
   HEAP32[$25 >> 2] = $6;
   $26 = $0 + 20 | 0;
   HEAP32[$26 >> 2] = $6;
   HEAP32[$19 >> 2] = 80;
   $28 = $0 + 16 | 0;
   HEAP32[$28 >> 2] = $6 + 80;
   $29 = _printf_core($0, $1, $3, $5, $4) | 0;
   if (!$24) $$1 = $29; else {
    FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 15]($0, 0, 0) | 0;
    $spec$select = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29;
    HEAP32[$23 >> 2] = $24;
    HEAP32[$19 >> 2] = 0;
    HEAP32[$28 >> 2] = 0;
    HEAP32[$25 >> 2] = 0;
    HEAP32[$26 >> 2] = 0;
    $$1 = $spec$select;
   }
  } else $$1 = _printf_core($0, $1, $3, $5, $4) | 0;
  $35 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $35 | $14;
  if ($40 | 0) ___unlockfile($0);
  $$0 = ($35 & 32 | 0) == 0 ? $$1 : -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $2 = 0, $3 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = $0 + 11 | 0;
 if ((HEAP8[$3 >> 0] | 0) < 0) {
  $6 = HEAP32[$0 >> 2] | 0;
  HEAP8[$2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($6, $2);
  HEAP32[$0 + 4 >> 2] = 0;
 } else {
  HEAP8[$2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($0, $2);
  HEAP8[$3 >> 0] = 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($0);
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $$0$i$i$i$i = 0;
 while (1) {
  if (($$0$i$i$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i$i$i << 2) >> 2] = 0;
  $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
 }
 $10 = $0 + 12 | 0;
 $11 = $1 + 12 | 0;
 $12 = $10 + 11 | 0;
 if ((HEAP8[$12 >> 0] | 0) < 0) {
  $15 = HEAP32[$10 >> 2] | 0;
  HEAP8[$2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($15, $2);
  HEAP32[$0 + 16 >> 2] = 0;
 } else {
  HEAP8[$2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($10, $2);
  HEAP8[$12 >> 0] = 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($10);
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
 HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
 $$0$i$i$i$i3 = 0;
 while (1) {
  if (($$0$i$i$i$i3 | 0) == 3) break;
  HEAP32[$11 + ($$0$i$i$i$i3 << 2) >> 2] = 0;
  $$0$i$i$i$i3 = $$0$i$i$i$i3 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _setMarkerInfoVertex($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $15 = 0.0, $17 = 0.0, $19 = 0.0, $2 = 0, $21 = 0.0, $23 = 0.0, $25 = 0.0, $27 = 0.0, $29 = 0.0, $7 = 0, $8 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $2) | 0)) $$1 = HEAP32[489] | 0; else {
  $7 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $2) | 0) + 216 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$8 + 44 >> 2] | 0) > ($1 | 0)) {
   $spec$select = ($1 | 0) < 0 ? 17e3 : $8 + 48 + ($1 << 8) | 0;
   $15 = +HEAPF64[2157];
   HEAPF64[$spec$select + 168 >> 3] = $15;
   $17 = +HEAPF64[2158];
   HEAPF64[$spec$select + 176 >> 3] = $17;
   $19 = +HEAPF64[2159];
   HEAPF64[$spec$select + 184 >> 3] = $19;
   $21 = +HEAPF64[2160];
   HEAPF64[$spec$select + 192 >> 3] = $21;
   $23 = +HEAPF64[2161];
   HEAPF64[$spec$select + 200 >> 3] = $23;
   $25 = +HEAPF64[2162];
   HEAPF64[$spec$select + 208 >> 3] = $25;
   $27 = +HEAPF64[2163];
   HEAPF64[$spec$select + 216 >> 3] = $27;
   $29 = +HEAPF64[2164];
   HEAPF64[$spec$select + 224 >> 3] = $29;
   HEAPF64[$spec$select + 56 >> 3] = ($15 + $19 + $23 + $27) * .25;
   HEAPF64[$spec$select + 64 >> 3] = ($17 + $21 + $25 + $29) * .25;
   $$1 = 0;
   break;
  } else {
   $$1 = HEAP32[491] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $4 = sp;
 $5 = HEAP32[$0 >> 2] | 0;
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0;
 $10 = HEAP32[$5 + -4 >> 2] | 0;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 12 >> 2] = $3;
 $14 = $4 + 16 | 0;
 $15 = $4 + 20 | 0;
 $16 = $4 + 24 | 0;
 $17 = $4 + 28 | 0;
 $18 = $4 + 32 | 0;
 $19 = $4 + 40 | 0;
 dest = $14;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0;
 HEAP8[$14 + 38 >> 0] = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
  HEAP32[$4 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 3]($10, $4, $8, $8, 1, 0);
  $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 3]($10, $4, $8, 1, 0);
  switch (HEAP32[$4 + 36 >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0;
    break L1;
    break;
   }
  case 1:
   break;
  default:
   {
    $$0 = 0;
    break L1;
   }
  }
  if ((HEAP32[$16 >> 2] | 0) != 1) if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
   $$0 = 0;
   break;
  }
  $$0 = HEAP32[$14 >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _addMultiMarker($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $31 = 0, $36 = 0, $37 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp + 8 | 0;
 $2 = sp + 12 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $2) | 0)) $$1 = -1; else {
  $6 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $2) | 0;
  if ((HEAP8[$1 + 11 >> 0] | 0) < 0) $15 = HEAP32[$1 >> 2] | 0; else $15 = $1;
  $14 = $6 + 224 | 0;
  if (!(__ZL15loadMultiMarkerPKcP8ARHandlePP12ARPattHandlePP18ARMultiMarkerInfoT($15, HEAP32[$6 + 216 >> 2] | 0, $6 + 220 | 0, $14) | 0)) {
   _arLog(0, 3, 9892, $vararg_buffer);
   $$1 = -1;
   break;
  }
  $18 = $6 + 248 | 0;
  $19 = $6 + 252 | 0;
  $20 = HEAP32[$19 >> 2] | 0;
  HEAP32[$3 >> 2] = $20 - (HEAP32[$18 >> 2] | 0) >> 3;
  HEAP32[$3 + 4 >> 2] = HEAP32[$14 >> 2];
  if ((HEAP32[$6 + 256 >> 2] | 0) == ($20 | 0)) __ZNSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($18, $3); else {
   $31 = $3;
   $36 = HEAP32[$31 + 4 >> 2] | 0;
   $37 = $20;
   HEAP32[$37 >> 2] = HEAP32[$31 >> 2];
   HEAP32[$37 + 4 >> 2] = $36;
   HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 8;
  }
  $$1 = HEAP32[$3 >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$idx$i = 0, $$3 = 0, $10 = 0, $17 = 0, $22 = 0, $23 = 0, $3 = 0, $5 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if (($0 | 0) == ($1 | 0)) $$3 = $0; else {
  $5 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
  if (($5 | 0) == ($0 | 0)) $$3 = $0; else {
   $7 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($5, $1, $2) | 0;
   if (($7 | 0) == ($5 | 0)) $$3 = $5; else {
    $9 = $2 + 4 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    if ((($10 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$3 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $10 + -24 | 0);
     $17 = HEAP32[$9 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$9 >> 2] = $17 + -24;
     $22 = HEAP8[$3 + 11 >> 0] | 0;
     $23 = $22 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($17 + -48 | 0, $23 ? HEAP32[$3 >> 2] | 0 : $3, $23 ? HEAP32[$3 + 4 >> 2] | 0 : $22 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $7;
    }
   }
  }
 }
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051 = 0, $$4 = 0, $13 = 0, $17 = 0, $20 = 0, $24 = 0, $25 = 0, $6 = 0, $7 = 0;
 L1 : do if (($0 | 0) == ($1 | 0)) $$4 = $0; else switch (HEAP8[$0 >> 0] | 0) {
 case 88:
  {
   $6 = $0 + 1 | 0;
   $7 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($6, $1, $2) | 0;
   if (($7 | 0) == ($6 | 0) | ($7 | 0) == ($1 | 0)) {
    $$4 = $0;
    break L1;
   }
   $$4 = (HEAP8[$7 >> 0] | 0) == 69 ? $7 + 1 | 0 : $0;
   break L1;
   break;
  }
 case 74:
  {
   $13 = $0 + 1 | 0;
   if (($13 | 0) == ($1 | 0)) {
    $$4 = $0;
    break L1;
   }
   $$051 = $13;
   while (1) {
    if ((HEAP8[$$051 >> 0] | 0) == 69) break;
    $17 = __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($$051, $1, $2) | 0;
    if (($17 | 0) == ($$051 | 0)) {
     $$4 = $0;
     break L1;
    } else $$051 = $17;
   }
   $$4 = $$051 + 1 | 0;
   break L1;
   break;
  }
 case 76:
  {
   $20 = $0 + 1 | 0;
   if (($20 | 0) != ($1 | 0)) if ((HEAP8[$20 >> 0] | 0) == 90) {
    $24 = $0 + 2 | 0;
    $25 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($24, $1, $2) | 0;
    if (($25 | 0) == ($24 | 0) | ($25 | 0) == ($1 | 0)) {
     $$4 = $0;
     break L1;
    }
    $$4 = (HEAP8[$25 >> 0] | 0) == 69 ? $25 + 1 | 0 : $0;
    break L1;
   }
   $$4 = __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   break L1;
   break;
  }
 default:
  {
   $$4 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   break L1;
  }
 } while (0);
 return $$4 | 0;
}

function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0;
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0;
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0;
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0;
 L1 : do if ($7 >>> 0 < $1 >>> 2 >>> 0) {
  $17 = $1 - ($7 << 2) | 0;
  if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) if (!(($13 | $10) & 3)) {
   $23 = $10 >>> 2;
   $24 = $13 >>> 2;
   $$090 = 0;
   $$094 = $7;
   while (1) {
    $25 = $$094 >>> 1;
    $26 = $$090 + $25 | 0;
    $27 = $26 << 1;
    $28 = $27 + $23 | 0;
    $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0;
    $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0;
    if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
     $$4 = 0;
     break L1;
    }
    if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
     $$4 = 0;
     break L1;
    }
    $44 = _strcmp($2, $0 + $35 | 0) | 0;
    if (!$44) break;
    $63 = ($44 | 0) < 0;
    if (($$094 | 0) == 1) {
     $$4 = 0;
     break L1;
    }
    $$090 = $63 ? $$090 : $26;
    $$094 = $63 ? $25 : $$094 - $25 | 0;
   }
   $46 = $27 + $24 | 0;
   $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0;
   $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0;
   if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; else $$4 = 0;
  } else $$4 = 0; else $$4 = 0;
 } else $$4 = 0; while (0);
 return $$4 | 0;
}

function _confidenceCutoff($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$049 = 0, $$150 = 0, $$2 = 0, $16 = 0, $18 = 0, $28 = 0, $30 = 0, $36 = 0, $4 = 0, $6 = 0;
 L1 : do switch (HEAP32[$0 + 24 >> 2] | 0) {
 case 1:
 case 0:
  {
   $4 = HEAP32[$0 + 44 >> 2] | 0;
   $$049 = 0;
   while (1) {
    if (($$049 | 0) >= ($4 | 0)) break L1;
    $6 = $0 + 48 + ($$049 << 8) + 4 | 0;
    if ((HEAP32[$6 >> 2] | 0) > -1) if (+HEAPF64[$0 + 48 + ($$049 << 8) + 32 >> 3] < .5) {
     HEAP32[$0 + 48 + ($$049 << 8) + 8 >> 2] = -1;
     HEAP32[$6 >> 2] = -1;
     HEAP32[$0 + 48 + ($$049 << 8) + 236 >> 2] = 6;
    }
    $$049 = $$049 + 1 | 0;
   }
   break;
  }
 case 2:
  {
   $16 = HEAP32[$0 + 44 >> 2] | 0;
   $$150 = 0;
   while (1) {
    if (($$150 | 0) >= ($16 | 0)) break L1;
    $18 = $0 + 48 + ($$150 << 8) + 4 | 0;
    if ((HEAP32[$18 >> 2] | 0) > -1) if (+HEAPF64[$0 + 48 + ($$150 << 8) + 32 >> 3] < .5) {
     HEAP32[$0 + 48 + ($$150 << 8) + 12 >> 2] = -1;
     HEAP32[$18 >> 2] = -1;
     HEAP32[$0 + 48 + ($$150 << 8) + 236 >> 2] = 6;
    }
    $$150 = $$150 + 1 | 0;
   }
   break;
  }
 default:
  {
   $28 = HEAP32[$0 + 44 >> 2] | 0;
   $$2 = 0;
   while (1) {
    if (($$2 | 0) >= ($28 | 0)) break L1;
    $30 = $0 + 48 + ($$2 << 8) + 8 | 0;
    if ((HEAP32[$30 >> 2] | 0) > -1) if (+HEAPF64[$0 + 48 + ($$2 << 8) + 40 >> 3] < .5) {
     HEAP32[$30 >> 2] = -1;
     $$0 = 0;
    } else $$0 = 1; else $$0 = 1;
    $36 = $0 + 48 + ($$2 << 8) + 12 | 0;
    if ((HEAP32[$36 >> 2] | 0) > -1) if (+HEAPF64[$0 + 48 + ($$2 << 8) + 48 >> 3] < .5) {
     HEAP32[$36 >> 2] = -1;
     if (!$$0) HEAP32[$0 + 48 + ($$2 << 8) + 236 >> 2] = 6;
    }
    $$2 = $$2 + 1 | 0;
   }
  }
 } while (0);
 return;
}

function _arImageProcLumaHistAndOtsu($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$062 = 0, $$064 = 0.0, $$067 = 0.0, $$068 = 0.0, $$070 = 0.0, $$169 = 0.0, $$2 = 0, $$266 = 0.0, $$3 = 0, $$pre$phiZ2D = 0, $15 = 0.0, $17 = 0, $21 = 0.0, $25 = 0.0, $3 = 0, $30 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $indvars$iv = 0, $indvars$iv71 = 0;
 $3 = _arImageProcLumaHist($0, $1) | 0;
 if (($3 | 0) < 0) $$0 = $3; else {
  $$070 = 0.0;
  $indvars$iv71 = 1;
  do {
   $$070 = $$070 + +((Math_imul(HEAP32[$0 + 12 + ($indvars$iv71 << 2) >> 2] | 0, $indvars$iv71) | 0) >>> 0);
   $indvars$iv71 = $indvars$iv71 + 1 | 0;
  } while (($indvars$iv71 | 0) != 256);
  $15 = +(Math_imul(HEAP32[$0 + 8 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0) | 0);
  $$062 = 0;
  $$064 = 0.0;
  $$067 = 0.0;
  $$068 = 0.0;
  $indvars$iv = 0;
  while (1) {
   $17 = HEAP32[$0 + 12 + ($indvars$iv << 2) >> 2] | 0;
   $$067 = $$067 + +($17 >>> 0);
   if ($$067 != 0.0) {
    $21 = $15 - $$067;
    if ($21 == 0.0) {
     $$3 = $$062;
     break;
    }
    $25 = $$068 + +((Math_imul($17, $indvars$iv) | 0) >>> 0);
    $30 = $25 / $$067 - ($$070 - $25) / $21;
    $32 = $30 * ($$067 * $21 * $30);
    $33 = $32 > $$064;
    $34 = $indvars$iv & 255;
    $$169 = $25;
    $$2 = $33 ? $34 : $$062;
    $$266 = $33 ? $32 : $$064;
    $$pre$phiZ2D = $34;
   } else {
    $$169 = $$068;
    $$2 = $$062;
    $$266 = $$064;
    $$pre$phiZ2D = $indvars$iv & 255;
   }
   if ($$pre$phiZ2D << 24 >> 24 == -1) {
    $$3 = $$2;
    break;
   } else {
    $$062 = $$2;
    $$064 = $$266;
    $$068 = $$169;
    $indvars$iv = $indvars$iv + 1 | 0;
   }
  }
  HEAP8[$2 >> 0] = $$3;
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = ((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 4) + 1 | 0;
 $9 = __ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $15 = (HEAP32[$0 + 8 >> 2] | 0) - $14 | 0;
  $19 = $15 >> 3;
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($2, $15 >> 4 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, (HEAP32[$3 >> 2] | 0) - $14 >> 4, $0 + 12 | 0);
  $24 = $2 + 8 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  HEAP32[$25 >> 2] = 0;
  HEAP32[$25 + 4 >> 2] = 0;
  HEAP32[$25 + 8 >> 2] = 0;
  HEAP32[$25 + 12 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$24 >> 2] = $25 + 16;
  __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0, $2);
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($0) {
 $0 = $0 | 0;
 var $1 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $1 = sp;
 $2 = $0 + 4 | 0;
 $7 = (((HEAP32[$2 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 24 | 0) + 1 | 0;
 $8 = __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0) | 0;
 if ($8 >>> 0 < $7 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $13 = HEAP32[$0 >> 2] | 0;
  $15 = ((HEAP32[$0 + 8 >> 2] | 0) - $13 | 0) / 24 | 0;
  $18 = $15 << 1;
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($1, $15 >>> 0 < $8 >>> 1 >>> 0 ? ($18 >>> 0 < $7 >>> 0 ? $7 : $18) : $8, ((HEAP32[$2 >> 2] | 0) - $13 | 0) / 24 | 0, $0 + 12 | 0);
  $23 = $1 + 8 | 0;
  $24 = HEAP32[$23 >> 2] | 0;
  HEAP32[$24 >> 2] = 0;
  HEAP32[$24 + 4 >> 2] = 0;
  HEAP32[$24 + 8 >> 2] = 0;
  HEAP32[$24 + 12 >> 2] = 0;
  HEAP32[$24 + 16 >> 2] = 0;
  HEAP32[$24 + 20 >> 2] = 0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($24);
  HEAP32[$23 >> 2] = $24 + 24;
  __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0, $1);
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($1);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$sroa$speculated = 0, $16 = 0, $17 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $38 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $8 = sp;
 if ((-18 - $1 | 0) >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) $25 = HEAP32[$0 >> 2] | 0; else $25 = $0;
 if ($1 >>> 0 < 2147483623) {
  $16 = $2 + $1 | 0;
  $17 = $1 << 1;
  $$sroa$speculated = $16 >>> 0 < $17 >>> 0 ? $17 : $16;
  $22 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $22 = -17;
 $23 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($22) | 0;
 if ($4 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($23, $25, $4) | 0;
 if ($6 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($23 + $4 | 0, $7, $6) | 0;
 $28 = $3 - $5 | 0;
 $29 = $28 - $4 | 0;
 if ($29 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($23 + $4 + $6 | 0, $25 + $4 + $5 | 0, $29) | 0;
 if (($1 | 0) != 10) __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($25);
 HEAP32[$0 >> 2] = $23;
 HEAP32[$0 + 8 >> 2] = $22 | -2147483648;
 $38 = $28 + $6 | 0;
 HEAP32[$0 + 4 >> 2] = $38;
 HEAP8[$8 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($23 + $38 | 0, $8);
 STACKTOP = sp;
 return;
}

function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $3 = 0, $30 = 0, $34 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $0 = sp + 36 | 0;
 $1 = ___cxa_get_globals_fast() | 0;
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0;
  if ($3 | 0) {
   $7 = $3 + 48 | 0;
   $9 = HEAP32[$7 >> 2] | 0;
   $12 = HEAP32[$7 + 4 >> 2] | 0;
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 14598;
    _abort_message(14548, $vararg_buffer7);
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) $22 = HEAP32[$3 + 44 >> 2] | 0; else $22 = $3 + 80 | 0;
   HEAP32[$0 >> 2] = $22;
   $23 = HEAP32[$3 >> 2] | 0;
   $25 = HEAP32[$23 + 4 >> 2] | 0;
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[48] | 0) + 16 >> 2] & 15](192, $23, $0) | 0) {
    $30 = HEAP32[$0 >> 2] | 0;
    $34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 8 >> 2] & 31]($30) | 0;
    HEAP32[$vararg_buffer >> 2] = 14598;
    HEAP32[$vararg_buffer + 4 >> 2] = $25;
    HEAP32[$vararg_buffer + 8 >> 2] = $34;
    _abort_message(14462, $vararg_buffer);
   } else {
    HEAP32[$vararg_buffer3 >> 2] = 14598;
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25;
    _abort_message(14507, $vararg_buffer3);
   }
  }
 }
 _abort_message(14586, $vararg_buffer10);
}

function _teardown($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$016 = 0, $1 = 0, $11 = 0, $12 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $1) | 0)) $$016 = -1; else {
  $4 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $1) | 0;
  $5 = $4 + 196 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  if ($6 | 0) {
   _free($6);
   HEAP32[$5 >> 2] = 0;
   HEAP32[$4 + 200 >> 2] = 0;
  }
  _deleteHandle($4);
  _arPattDeleteHandle(HEAP32[$4 + 220 >> 2] | 0) | 0;
  __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE14__erase_uniqueIiEEjRKT_(17356, $1) | 0;
  $11 = $4 + 248 | 0;
  $12 = $4 + 252 | 0;
  $$0 = 0;
  while (1) {
   $14 = HEAP32[$11 >> 2] | 0;
   if ($$0 >>> 0 >= (HEAP32[$12 >> 2] | 0) - $14 >> 3 >>> 0) break;
   _arMultiFreeConfig(HEAP32[$14 + ($$0 << 3) + 4 >> 2] | 0) | 0;
   $$0 = $$0 + 1 | 0;
  }
  __ZNSt3__213__vector_baseI12multi_markerNS_9allocatorIS1_EEED2Ev($11);
  __ZdlPv($11);
  __ZN12arControllerD2Ev($4);
  __ZdlPv($4);
  $$016 = 0;
 }
 STACKTOP = sp;
 return $$016 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $9 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); else {
  $9 = $1 + 52 | 0;
  $10 = HEAP8[$9 >> 0] | 0;
  $11 = $1 + 53 | 0;
  $12 = HEAP8[$11 >> 0] | 0;
  $15 = HEAP32[$0 + 12 >> 2] | 0;
  $16 = $0 + 16 + ($15 << 3) | 0;
  HEAP8[$9 >> 0] = 0;
  HEAP8[$11 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5);
  L4 : do if (($15 | 0) > 1) {
   $19 = $1 + 24 | 0;
   $20 = $0 + 8 | 0;
   $21 = $1 + 54 | 0;
   $$0 = $0 + 24 | 0;
   do {
    if (HEAP8[$21 >> 0] | 0) break L4;
    if (!(HEAP8[$9 >> 0] | 0)) {
     if (HEAP8[$11 >> 0] | 0) if (!(HEAP32[$20 >> 2] & 1)) break L4;
    } else {
     if ((HEAP32[$19 >> 2] | 0) == 1) break L4;
     if (!(HEAP32[$20 >> 2] & 2)) break L4;
    }
    HEAP8[$9 >> 0] = 0;
    HEAP8[$11 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5);
    $$0 = $$0 + 8 | 0;
   } while ($$0 >>> 0 < $16 >>> 0);
  } while (0);
  HEAP8[$9 >> 0] = $10;
  HEAP8[$11 >> 0] = $12;
 }
 return;
}

function _strspn($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$01924 = 0, $$020 = 0, $$1$lcssa = 0, $$121 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $36 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 28 >> 2] = 0;
 $3 = HEAP8[$1 >> 0] | 0;
 do if (!($3 << 24 >> 24)) $$0 = 0; else {
  if (!(HEAP8[$1 + 1 >> 0] | 0)) {
   $$020 = $0;
   while (1) if ((HEAP8[$$020 >> 0] | 0) == $3 << 24 >> 24) $$020 = $$020 + 1 | 0; else break;
   $$0 = $$020 - $0 | 0;
   break;
  }
  $$01924 = $1;
  $15 = $3;
  do {
   $14 = $15 & 255;
   $19 = $2 + ($14 >>> 5 << 2) | 0;
   HEAP32[$19 >> 2] = HEAP32[$19 >> 2] | 1 << ($14 & 31);
   $$01924 = $$01924 + 1 | 0;
   $15 = HEAP8[$$01924 >> 0] | 0;
  } while ($15 << 24 >> 24 != 0);
  $25 = HEAP8[$0 >> 0] | 0;
  L12 : do if (!($25 << 24 >> 24)) $$1$lcssa = $0; else {
   $$121 = $0;
   $28 = $25;
   while (1) {
    $27 = $28 & 255;
    if (!(HEAP32[$2 + ($27 >>> 5 << 2) >> 2] & 1 << ($27 & 31))) {
     $$1$lcssa = $$121;
     break L12;
    }
    $36 = $$121 + 1 | 0;
    $28 = HEAP8[$36 >> 0] | 0;
    if (!($28 << 24 >> 24)) {
     $$1$lcssa = $36;
     break;
    } else $$121 = $36;
   }
  } while (0);
  $$0 = $$1$lcssa - $0 | 0;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$1 = 0, $12 = 0, $17 = 0, $21 = 0, $23 = 0, $24 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 $5 = $0 + 11 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 << 24 >> 24 < 0;
 if ($7) $12 = HEAP32[$0 + 4 >> 2] | 0; else $12 = $6 & 255;
 if ($12 >>> 0 < $1 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
 if ($7) $17 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; else $17 = 10;
 if (($17 - $12 | 0) >>> 0 < $3 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $17, $12 + $3 - $17 | 0, $12, $1, 0, $3, $2); else if ($3 | 0) {
  if ($7) $24 = HEAP32[$0 >> 2] | 0; else $24 = $0;
  $21 = $12 - $1 | 0;
  $23 = $24 + $1 | 0;
  if (!$21) $$1 = $2; else {
   __ZNSt3__211char_traitsIcE4moveEPcPKcj($23 + $3 | 0, $23, $21) | 0;
   $$1 = $23 >>> 0 <= $2 >>> 0 & ($24 + $12 | 0) >>> 0 > $2 >>> 0 ? $2 + $3 | 0 : $2;
  }
  __ZNSt3__211char_traitsIcE4moveEPcPKcj($23, $$1, $3) | 0;
  $30 = $12 + $3 | 0;
  if ((HEAP8[$5 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $30; else HEAP8[$5 >> 0] = $30;
  HEAP8[$4 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($24 + $30 | 0, $4);
 }
 STACKTOP = sp;
 return $0 | 0;
}

function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $9 = 0;
 $2 = $1 & 255;
 L1 : do if (!$2) $$0 = $0 + (_strlen($0) | 0) | 0; else {
  if (!($0 & 3)) $$030$lcssa = $0; else {
   $9 = $1 & 255;
   $$03039 = $0;
   while (1) {
    $10 = HEAP8[$$03039 >> 0] | 0;
    if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $9 << 24 >> 24) {
     $$0 = $$03039;
     break L1;
    }
    $13 = $$03039 + 1 | 0;
    if (!($13 & 3)) {
     $$030$lcssa = $13;
     break;
    } else $$03039 = $13;
   }
  }
  $17 = Math_imul($2, 16843009) | 0;
  $18 = HEAP32[$$030$lcssa >> 2] | 0;
  L10 : do if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
   $$02936 = $$030$lcssa;
   $25 = $18;
   while (1) {
    $24 = $25 ^ $17;
    if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
     $$029$lcssa = $$02936;
     break L10;
    }
    $31 = $$02936 + 4 | 0;
    $25 = HEAP32[$31 >> 2] | 0;
    if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
     $$029$lcssa = $31;
     break;
    } else $$02936 = $31;
   }
  } else $$029$lcssa = $$030$lcssa; while (0);
  $38 = $1 & 255;
  $$1 = $$029$lcssa;
  while (1) {
   $39 = HEAP8[$$1 >> 0] | 0;
   if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
    $$0 = $$1;
    break;
   } else $$1 = $$1 + 1 | 0;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $16 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = (((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 24 | 0) + 1 | 0;
 $9 = __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $16 = ((HEAP32[$0 + 8 >> 2] | 0) - $14 | 0) / 24 | 0;
  $19 = $16 << 1;
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($2, $16 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, ((HEAP32[$3 >> 2] | 0) - $14 | 0) / 24 | 0, $0 + 12 | 0);
  $24 = $2 + 8 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($25, $1);
  HEAP32[$24 >> 2] = $25 + 24;
  __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0, $2);
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $16 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = (((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 24 | 0) + 1 | 0;
 $9 = __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $16 = ((HEAP32[$0 + 8 >> 2] | 0) - $14 | 0) / 24 | 0;
  $19 = $16 << 1;
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($2, $16 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, ((HEAP32[$3 >> 2] | 0) - $14 | 0) / 24 | 0, $0 + 12 | 0);
  $24 = $2 + 8 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($25, $1);
  HEAP32[$24 >> 2] = $25 + 24;
  __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0, $2);
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function _x_by_xt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$049 = 0, $$050 = 0, $$051 = 0, $$052 = 0, $$053 = 0, $$054 = 0, $$1 = 0, $12 = 0, $14 = 0, $18 = 0, $20 = 0, $23 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $5 = 0;
 $3 = HEAP32[$0 + 4 >> 2] | 0;
 $5 = HEAP32[$0 + 8 >> 2] | 0;
 L1 : do if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) if ((HEAP32[$1 + 8 >> 2] | 0) == ($3 | 0)) {
  $12 = HEAP32[$1 >> 2] | 0;
  $$050 = 0;
  $$053 = $12;
  while (1) {
   if (($$050 | 0) >= ($3 | 0)) {
    $$051 = 0;
    break L1;
   }
   $14 = Math_imul($$050, $5) | 0;
   $$049 = 0;
   $$1 = $$053;
   while (1) {
    if (($$049 | 0) == ($3 | 0)) break;
    L10 : do if ($$049 >>> 0 < $$050 >>> 0) {
     $18 = $12 + ((Math_imul($$049, $3) | 0) + $$050 << 3) | 0;
     HEAPF64[$$1 >> 3] = +HEAPF64[$18 >> 3];
    } else {
     $20 = HEAP32[$0 >> 2] | 0;
     $23 = $20 + ((Math_imul($$049, $5) | 0) << 3) | 0;
     HEAPF64[$$1 >> 3] = 0.0;
     $$0 = 0;
     $$052 = $20 + ($14 << 3) | 0;
     $$054 = $23;
     $31 = 0.0;
     while (1) {
      if (($$0 | 0) >= ($5 | 0)) break L10;
      $30 = $31 + +HEAPF64[$$052 >> 3] * +HEAPF64[$$054 >> 3];
      HEAPF64[$$1 >> 3] = $30;
      $$0 = $$0 + 1 | 0;
      $$052 = $$052 + 8 | 0;
      $$054 = $$054 + 8 | 0;
      $31 = $30;
     }
    } while (0);
    $$049 = $$049 + 1 | 0;
    $$1 = $$1 + 8 | 0;
   }
   $$050 = $$050 + 1 | 0;
   $$053 = $$053 + ($3 << 3) | 0;
  }
 } else $$051 = -1; else $$051 = -1; while (0);
 return $$051 | 0;
}

function _fread($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$054 = 0, $$056 = 0, $$15759 = 0, $$160 = 0, $10 = 0, $12 = 0, $18 = 0, $19 = 0, $20 = 0, $29 = 0, $33 = 0, $37 = 0, $4 = 0, $40 = 0, $spec$select = 0, label = 0;
 $4 = Math_imul($2, $1) | 0;
 $spec$select = ($1 | 0) == 0 ? 0 : $2;
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) $37 = ___lockfile($3) | 0; else $37 = 0;
 $10 = $3 + 74 | 0;
 $12 = HEAP8[$10 >> 0] | 0;
 HEAP8[$10 >> 0] = $12 + 255 | $12;
 $18 = $3 + 4 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 $20 = (HEAP32[$3 + 8 >> 2] | 0) - $19 | 0;
 if (($20 | 0) > 0) {
  $$ = $20 >>> 0 < $4 >>> 0 ? $20 : $4;
  _memcpy($0 | 0, $19 | 0, $$ | 0) | 0;
  HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + $$;
  $$054 = $4 - $$ | 0;
  $$056 = $0 + $$ | 0;
 } else {
  $$054 = $4;
  $$056 = $0;
 }
 L7 : do if (!$$054) label = 13; else {
  $29 = $3 + 32 | 0;
  $$15759 = $$056;
  $$160 = $$054;
  while (1) {
   if (___toread($3) | 0) break;
   $33 = FUNCTION_TABLE_iiii[HEAP32[$29 >> 2] & 15]($3, $$15759, $$160) | 0;
   if (($33 + 1 | 0) >>> 0 < 2) break;
   $40 = $$160 - $33 | 0;
   if (!$40) {
    label = 13;
    break L7;
   } else {
    $$15759 = $$15759 + $33 | 0;
    $$160 = $40;
   }
  }
  if ($37 | 0) ___unlockfile($3);
  $$0 = (($4 - $$160 | 0) >>> 0) / ($1 >>> 0) | 0;
 } while (0);
 if ((label | 0) == 13) if (!$37) $$0 = $spec$select; else {
  ___unlockfile($3);
  $$0 = $spec$select;
 }
 return $$0 | 0;
}

function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $$0$i = HEAP32[$3 >> 2] | 0;
 while (1) {
  if (($$0$i | 0) == ($2 | 0)) break;
  $7 = HEAP32[$5 >> 2] | 0;
  $8 = $7 + -16 | 0;
  $9 = $$0$i + -16 | 0;
  HEAP32[$8 >> 2] = 0;
  $11 = $7 + -12 | 0;
  HEAP32[$11 >> 2] = 0;
  $12 = $7 + -8 | 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$7 + -4 >> 2] = HEAP32[$$0$i + -4 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  $16 = $$0$i + -12 | 0;
  HEAP32[$11 >> 2] = HEAP32[$16 >> 2];
  $18 = $$0$i + -8 | 0;
  HEAP32[$12 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$18 >> 2] = 0;
  HEAP32[$16 >> 2] = 0;
  HEAP32[$9 >> 2] = 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -16;
  $$0$i = $9;
 }
 $22 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$5 >> 2] = $22;
 $24 = $1 + 8 | 0;
 $25 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$24 >> 2] = $25;
 $27 = $0 + 8 | 0;
 $28 = $1 + 12 | 0;
 $29 = HEAP32[$27 >> 2] | 0;
 HEAP32[$27 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$28 >> 2] = $29;
 HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
 return;
}

function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $$0$i = HEAP32[$3 >> 2] | 0;
 while (1) {
  if (($$0$i | 0) == ($2 | 0)) break;
  $7 = HEAP32[$5 >> 2] | 0;
  $8 = $7 + -16 | 0;
  $9 = $$0$i + -16 | 0;
  HEAP32[$8 >> 2] = 0;
  $11 = $7 + -12 | 0;
  HEAP32[$11 >> 2] = 0;
  $12 = $7 + -8 | 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$7 + -4 >> 2] = HEAP32[$$0$i + -4 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  $16 = $$0$i + -12 | 0;
  HEAP32[$11 >> 2] = HEAP32[$16 >> 2];
  $18 = $$0$i + -8 | 0;
  HEAP32[$12 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$18 >> 2] = 0;
  HEAP32[$16 >> 2] = 0;
  HEAP32[$9 >> 2] = 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -16;
  $$0$i = $9;
 }
 $22 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$5 >> 2] = $22;
 $24 = $1 + 8 | 0;
 $25 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$24 >> 2] = $25;
 $27 = $0 + 8 | 0;
 $28 = $1 + 12 | 0;
 $29 = HEAP32[$27 >> 2] | 0;
 HEAP32[$27 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$28 >> 2] = $29;
 HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
 return;
}

function _icpGetJ_U_Xc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $12 = 0, $15 = 0.0, $20 = 0.0, $21 = 0, $24 = 0, $28 = 0, $3 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $38 = 0, $4 = 0.0, $42 = 0, $48 = 0.0, $50 = 0.0, $6 = 0, $9 = 0.0;
 $3 = +HEAPF64[$1 >> 3];
 $4 = +HEAPF64[$2 >> 3];
 $6 = $1 + 8 | 0;
 $9 = +HEAPF64[$2 + 8 >> 3];
 $12 = $1 + 16 | 0;
 $15 = +HEAPF64[$2 + 16 >> 3];
 $20 = +HEAPF64[$1 + 24 >> 3] + ($3 * $4 + +HEAPF64[$6 >> 3] * $9 + +HEAPF64[$12 >> 3] * $15);
 $21 = $1 + 32 | 0;
 $24 = $1 + 40 | 0;
 $28 = $1 + 48 | 0;
 $34 = +HEAPF64[$1 + 56 >> 3] + ($4 * +HEAPF64[$21 >> 3] + $9 * +HEAPF64[$24 >> 3] + $15 * +HEAPF64[$28 >> 3]);
 $35 = $1 + 64 | 0;
 $36 = +HEAPF64[$35 >> 3];
 $38 = $1 + 72 | 0;
 $42 = $1 + 80 | 0;
 $48 = +HEAPF64[$1 + 88 >> 3] + ($4 * $36 + $9 * +HEAPF64[$38 >> 3] + $15 * +HEAPF64[$42 >> 3]);
 if ($48 == 0.0) $$0 = -1; else {
  $50 = $48 * $48;
  HEAPF64[$0 >> 3] = ($3 * $48 - $20 * $36) / $50;
  HEAPF64[$0 + 8 >> 3] = ($48 * +HEAPF64[$6 >> 3] - $20 * +HEAPF64[$38 >> 3]) / $50;
  HEAPF64[$0 + 16 >> 3] = ($48 * +HEAPF64[$12 >> 3] - $20 * +HEAPF64[$42 >> 3]) / $50;
  HEAPF64[$0 + 24 >> 3] = ($48 * +HEAPF64[$21 >> 3] - $34 * +HEAPF64[$35 >> 3]) / $50;
  HEAPF64[$0 + 32 >> 3] = ($48 * +HEAPF64[$24 >> 3] - $34 * +HEAPF64[$38 >> 3]) / $50;
  HEAPF64[$0 + 40 >> 3] = ($48 * +HEAPF64[$28 >> 3] - $34 * +HEAPF64[$42 >> 3]) / $50;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _getMultiEachMarkerInfo($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$2 = 0, $11 = 0, $19 = 0, $25 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 HEAP32[$3 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $3) | 0)) $$2 = HEAP32[489] | 0; else {
  $7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $3) | 0;
  $11 = HEAP32[$7 + 248 >> 2] | 0;
  if (($1 | 0) < 0 ? 1 : (HEAP32[$7 + 252 >> 2] | 0) - $11 >> 3 >>> 0 <= $1 >>> 0) {
   $$2 = HEAP32[490] | 0;
   break;
  }
  $19 = HEAP32[$11 + ($1 << 3) + 4 >> 2] | 0;
  if (($2 | 0) < 0 ? 1 : (HEAP32[$19 + 4 >> 2] | 0) <= ($2 | 0)) {
   $$2 = HEAP32[491] | 0;
   break;
  } else {
   $25 = HEAP32[$19 >> 2] | 0;
   _matrixCopy($25 + ($2 * 320 | 0) + 16 | 0, 17256);
   _emscripten_asm_const_iiiid(1, HEAP32[$25 + ($2 * 320 | 0) + 304 >> 2] | 0, HEAP32[$25 + ($2 * 320 | 0) >> 2] | 0, HEAP32[$25 + ($2 * 320 | 0) + 4 >> 2] | 0, +(+HEAPF64[$25 + ($2 * 320 | 0) + 8 >> 3])) | 0;
   $$2 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$2 | 0;
}

function _arLogv($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $17 = 0, $18 = 0, $19 = 0, $28 = 0, $32 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 $4 = sp + 8 | 0;
 if (!(($2 | 0) == 0 | (HEAP32[484] | 0) > ($1 | 0))) if (HEAP8[$2 >> 0] | 0) {
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  $10 = _vsnprintf(0, 0, $2, $4) | 0;
  if ($10 | 0) {
   if ($1 >>> 0 < 4) $$0 = (_strlen(HEAP32[1940 + ($1 << 2) >> 2] | 0) | 0) + 3 | 0; else $$0 = 0;
   $17 = $$0 + $10 | 0;
   $18 = $17 + 1 | 0;
   $19 = _malloc($18) | 0;
   if ($$0 | 0) {
    HEAP32[$vararg_buffer >> 2] = HEAP32[1940 + ($1 << 2) >> 2];
    _snprintf($19, $$0 + 1 | 0, 5604, $vararg_buffer) | 0;
   }
   _vsnprintf($19 + $$0 | 0, $10 + 1 | 0, $2, $3) | 0;
   do if (!0) _fputs($19, HEAP32[520] | 0) | 0; else if (0) {
    $28 = HEAP32[4338] | 0;
    if ($28 >>> 0 < 0) {
     $32 = 0 + $28 | 0;
     if ($17 >>> 0 > (-4 - $28 + 0 | 0) >>> 0) {
      HEAP8[$32 >> 0] = 46;
      HEAP8[$32 + 1 >> 0] = 46;
      HEAP8[$32 + 2 >> 0] = 46;
      HEAP8[$32 + 3 >> 0] = 0;
      HEAP32[4338] = 0;
      break;
     } else {
      _strncpy($32, $19, $18) | 0;
      HEAP32[4338] = (HEAP32[4338] | 0) + $17;
      break;
     }
    }
   } while (0);
   _free($19);
  }
 }
 STACKTOP = sp;
 return;
}

function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$03846 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $23 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (!$4) if (!(___towrite($2) | 0)) {
  $12 = HEAP32[$3 >> 2] | 0;
  label = 5;
 } else $$1 = 0; else {
  $12 = $4;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $9 = $2 + 20 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $14 = $10;
  if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
   $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $1) | 0;
   break;
  }
  L10 : do if ((HEAP8[$2 + 75 >> 0] | 0) < 0 | ($1 | 0) == 0) {
   $$139 = 0;
   $$141 = $0;
   $$143 = $1;
   $32 = $14;
  } else {
   $$03846 = $1;
   while (1) {
    $23 = $$03846 + -1 | 0;
    if ((HEAP8[$0 + $23 >> 0] | 0) == 10) break;
    if (!$23) {
     $$139 = 0;
     $$141 = $0;
     $$143 = $1;
     $32 = $14;
     break L10;
    } else $$03846 = $23;
   }
   $29 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $$03846) | 0;
   if ($29 >>> 0 < $$03846 >>> 0) {
    $$1 = $29;
    break L5;
   }
   $$139 = $$03846;
   $$141 = $0 + $$03846 | 0;
   $$143 = $1 - $$03846 | 0;
   $32 = HEAP32[$9 >> 2] | 0;
  } while (0);
  _memcpy($32 | 0, $$141 | 0, $$143 | 0) | 0;
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143;
  $$1 = $$139 + $$143 | 0;
 } while (0);
 return $$1 | 0;
}

function _xt_by_x($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$051 = 0, $$052 = 0, $$053 = 0, $$054 = 0, $$055 = 0, $$056 = 0, $$1 = 0, $12 = 0, $17 = 0, $19 = 0, $26 = 0.0, $27 = 0.0, $3 = 0, $5 = 0;
 $3 = HEAP32[$0 + 4 >> 2] | 0;
 $5 = HEAP32[$0 + 8 >> 2] | 0;
 L1 : do if ((HEAP32[$1 + 4 >> 2] | 0) == ($5 | 0)) if ((HEAP32[$1 + 8 >> 2] | 0) == ($5 | 0)) {
  $12 = HEAP32[$1 >> 2] | 0;
  $$052 = 0;
  $$055 = $12;
  while (1) {
   if (($$052 | 0) >= ($5 | 0)) {
    $$053 = 0;
    break L1;
   }
   $$051 = 0;
   $$1 = $$055;
   while (1) {
    if (($$051 | 0) == ($5 | 0)) break;
    L10 : do if ($$051 >>> 0 < $$052 >>> 0) {
     $17 = $12 + ((Math_imul($$051, $5) | 0) + $$052 << 3) | 0;
     HEAPF64[$$1 >> 3] = +HEAPF64[$17 >> 3];
    } else {
     $19 = HEAP32[$0 >> 2] | 0;
     HEAPF64[$$1 >> 3] = 0.0;
     $$0 = 0;
     $$054 = $19 + ($$052 << 3) | 0;
     $$056 = $19 + ($$051 << 3) | 0;
     $27 = 0.0;
     while (1) {
      if (($$0 | 0) >= ($3 | 0)) break L10;
      $26 = $27 + +HEAPF64[$$054 >> 3] * +HEAPF64[$$056 >> 3];
      HEAPF64[$$1 >> 3] = $26;
      $$0 = $$0 + 1 | 0;
      $$054 = $$054 + ($5 << 3) | 0;
      $$056 = $$056 + ($5 << 3) | 0;
      $27 = $26;
     }
    } while (0);
    $$051 = $$051 + 1 | 0;
    $$1 = $$1 + 8 | 0;
   }
   $$052 = $$052 + 1 | 0;
   $$055 = $$055 + ($5 << 3) | 0;
  }
 } else $$053 = -1; else $$053 = -1; while (0);
 return $$053 | 0;
}

function ___shgetc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$phi$trans$insert28 = 0, $$pre = 0, $1 = 0, $10 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $30 = 0, $36 = 0, $37 = 0, $42 = 0, $7 = 0, label = 0;
 $1 = $0 + 104 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) label = 3; else if ((HEAP32[$0 + 108 >> 2] | 0) < ($2 | 0)) label = 3; else label = 4;
 if ((label | 0) == 3) {
  $7 = ___uflow($0) | 0;
  if (($7 | 0) < 0) label = 4; else {
   $10 = HEAP32[$1 >> 2] | 0;
   $$pre = HEAP32[$0 + 8 >> 2] | 0;
   if (!$10) {
    $42 = $$pre;
    label = 9;
   } else {
    $14 = HEAP32[$0 + 4 >> 2] | 0;
    $19 = $10 - (HEAP32[$0 + 108 >> 2] | 0) | 0;
    $21 = $$pre;
    if (($$pre - $14 | 0) < ($19 | 0)) {
     $42 = $21;
     label = 9;
    } else {
     HEAP32[$0 + 100 >> 2] = $14 + ($19 + -1);
     $27 = $21;
    }
   }
   if ((label | 0) == 9) {
    HEAP32[$0 + 100 >> 2] = $$pre;
    $27 = $42;
   }
   $$phi$trans$insert28 = $0 + 4 | 0;
   if (!$27) $37 = HEAP32[$$phi$trans$insert28 >> 2] | 0; else {
    $28 = HEAP32[$$phi$trans$insert28 >> 2] | 0;
    $30 = $0 + 108 | 0;
    HEAP32[$30 >> 2] = $27 + 1 - $28 + (HEAP32[$30 >> 2] | 0);
    $37 = $28;
   }
   $36 = $37 + -1 | 0;
   if (($7 | 0) == (HEAPU8[$36 >> 0] | 0 | 0)) $$0 = $7; else {
    HEAP8[$36 >> 0] = $7;
    $$0 = $7;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$0 + 100 >> 2] = 0;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _arMatrixMul($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$040 = 0, $$041 = 0, $$042 = 0, $$043 = 0, $$044 = 0, $$045 = 0, $$1 = 0, $14 = 0, $20 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $9 = 0;
 $4 = HEAP32[$1 + 8 >> 2] | 0;
 L1 : do if (($4 | 0) == (HEAP32[$2 + 4 >> 2] | 0)) {
  $9 = HEAP32[$0 + 4 >> 2] | 0;
  if (($9 | 0) == (HEAP32[$1 + 4 >> 2] | 0)) {
   $14 = HEAP32[$0 + 8 >> 2] | 0;
   if (($14 | 0) == (HEAP32[$2 + 8 >> 2] | 0)) {
    $$0 = HEAP32[$0 >> 2] | 0;
    $$044 = 0;
    while (1) {
     if (($$044 | 0) >= ($9 | 0)) {
      $$045 = 0;
      break L1;
     }
     $20 = Math_imul($$044, $4) | 0;
     $$043 = 0;
     $$1 = $$0;
     while (1) {
      if (($$043 | 0) >= ($14 | 0)) break;
      HEAPF64[$$1 >> 3] = 0.0;
      $$040 = (HEAP32[$2 >> 2] | 0) + ($$043 << 3) | 0;
      $$041 = (HEAP32[$1 >> 2] | 0) + ($20 << 3) | 0;
      $$042 = 0;
      $31 = 0.0;
      while (1) {
       if (($$042 | 0) >= ($4 | 0)) break;
       $30 = $31 + +HEAPF64[$$041 >> 3] * +HEAPF64[$$040 >> 3];
       HEAPF64[$$1 >> 3] = $30;
       $$040 = $$040 + ($14 << 3) | 0;
       $$041 = $$041 + 8 | 0;
       $$042 = $$042 + 1 | 0;
       $31 = $30;
      }
      $$043 = $$043 + 1 | 0;
      $$1 = $$1 + 8 | 0;
     }
     $$0 = $$1;
     $$044 = $$044 + 1 | 0;
    }
   } else $$045 = -1;
  } else $$045 = -1;
 } else $$045 = -1; while (0);
 return $$045 | 0;
}

function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $4 = 0, $5 = 0, $9 = 0, $spec$select = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $4 = sp + 124 | 0;
 $5 = sp;
 dest = $5;
 src = 2824;
 stop = dest + 124 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) if (!$1) {
  $$014 = $4;
  $$015 = 1;
  label = 4;
 } else {
  $9 = ___errno_location() | 0;
  HEAP32[$9 >> 2] = 75;
  $$0 = -1;
 } else {
  $$014 = $0;
  $$015 = $1;
  label = 4;
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0;
  $spec$select = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015;
  HEAP32[$5 + 48 >> 2] = $spec$select;
  $14 = $5 + 20 | 0;
  HEAP32[$14 >> 2] = $$014;
  HEAP32[$5 + 44 >> 2] = $$014;
  $16 = $$014 + $spec$select | 0;
  $17 = $5 + 16 | 0;
  HEAP32[$17 >> 2] = $16;
  HEAP32[$5 + 28 >> 2] = $16;
  $19 = _vfprintf($5, $2, $3) | 0;
  if (!$spec$select) $$0 = $19; else {
   $21 = HEAP32[$14 >> 2] | 0;
   HEAP8[$21 + ((($21 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _strcspn($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01823 = 0, $$019$lcssa$sink = 0, $$01920 = 0, $10 = 0, $12 = 0, $13 = 0, $17 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $3 = 0, $34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $3 = HEAP8[$1 >> 0] | 0;
 L1 : do if (!($3 << 24 >> 24)) label = 3; else if (!(HEAP8[$1 + 1 >> 0] | 0)) label = 3; else {
  _memset($2 | 0, 0, 32) | 0;
  $10 = HEAP8[$1 >> 0] | 0;
  if ($10 << 24 >> 24) {
   $$01823 = $1;
   $13 = $10;
   do {
    $12 = $13 & 255;
    $17 = $2 + ($12 >>> 5 << 2) | 0;
    HEAP32[$17 >> 2] = HEAP32[$17 >> 2] | 1 << ($12 & 31);
    $$01823 = $$01823 + 1 | 0;
    $13 = HEAP8[$$01823 >> 0] | 0;
   } while ($13 << 24 >> 24 != 0);
  }
  $23 = HEAP8[$0 >> 0] | 0;
  if (!($23 << 24 >> 24)) $$019$lcssa$sink = $0; else {
   $$01920 = $0;
   $26 = $23;
   while (1) {
    $25 = $26 & 255;
    if (HEAP32[$2 + ($25 >>> 5 << 2) >> 2] & 1 << ($25 & 31) | 0) {
     $$019$lcssa$sink = $$01920;
     break L1;
    }
    $34 = $$01920 + 1 | 0;
    $26 = HEAP8[$34 >> 0] | 0;
    if (!($26 << 24 >> 24)) {
     $$019$lcssa$sink = $34;
     break;
    } else $$01920 = $34;
   }
  }
 } while (0);
 if ((label | 0) == 3) $$019$lcssa$sink = ___strchrnul($0, $3 << 24 >> 24) | 0;
 STACKTOP = sp;
 return $$019$lcssa$sink - $0 | 0;
}

function _get_vertex($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$071 = 0, $$072 = 0, $$073 = 0.0, $10 = 0, $12 = 0.0, $14 = 0, $16 = 0, $18 = 0.0, $22 = 0.0, $23 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $45 = 0, $8 = 0, label = 0;
 $8 = HEAP32[$1 + ($3 << 2) >> 2] | 0;
 $10 = HEAP32[$1 + ($2 << 2) >> 2] | 0;
 $12 = +($8 - $10 | 0);
 $14 = HEAP32[$0 + ($2 << 2) >> 2] | 0;
 $16 = HEAP32[$0 + ($3 << 2) >> 2] | 0;
 $18 = +($14 - $16 | 0);
 $22 = +((Math_imul($16, $10) | 0) - (Math_imul($14, $8) | 0) | 0);
 $23 = $2 + 1 | 0;
 $$0 = $23;
 $$071 = $23;
 $$073 = 0.0;
 while (1) {
  if (($$071 | 0) >= ($3 | 0)) break;
  $34 = $12 * +(HEAP32[$0 + ($$071 << 2) >> 2] | 0) + $18 * +(HEAP32[$1 + ($$071 << 2) >> 2] | 0) + $22;
  $35 = $34 * $34;
  $36 = $35 > $$073;
  $$0 = $36 ? $$071 : $$0;
  $$071 = $$071 + 1 | 0;
  $$073 = $36 ? $35 : $$073;
 }
 if ($$073 / ($12 * $12 + $18 * $18) > $4) if ((_get_vertex($0, $1, $2, $$0, $4, $5, $6) | 0) < 0) $$072 = -1; else {
  $45 = HEAP32[$6 >> 2] | 0;
  if (($45 | 0) > 5) $$072 = -1; else {
   HEAP32[$5 + ($45 << 2) >> 2] = $$0;
   HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
   if ((_get_vertex($0, $1, $$0, $3, $4, $5, $6) | 0) < 0) $$072 = -1; else label = 8;
  }
 } else label = 8;
 if ((label | 0) == 8) $$072 = 0;
 return $$072 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_block_invokeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$031 = 0, $$032 = 0, $$2 = 0, $$2$ph = 0, $$236 = 0, $$3 = 0, $17 = 0, $28 = 0;
 L1 : do if (($1 - $0 | 0) > 12) {
  $$031 = 0;
  $$032 = $0;
  while (1) {
   if ($$031 >>> 0 >= 13) break;
   if ((HEAP8[$$032 >> 0] | 0) != (HEAP8[16750 + $$031 >> 0] | 0)) {
    $$236 = $0;
    break L1;
   }
   $$031 = $$031 + 1 | 0;
   $$032 = $$032 + 1 | 0;
  }
  L8 : do if (($$032 | 0) == ($1 | 0)) $$3 = $1; else {
   if ((HEAP8[$$032 >> 0] | 0) == 95) {
    $17 = $$032 + 1 | 0;
    if (($17 | 0) == ($1 | 0)) {
     $$236 = $0;
     break L1;
    }
    if (((HEAP8[$17 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
     $$236 = $0;
     break L1;
    }
    $$2$ph = $$032 + 2 | 0;
   } else $$2$ph = $$032;
   $$2 = $$2$ph;
   while (1) {
    if (($$2 | 0) == ($1 | 0)) {
     $$3 = $1;
     break L8;
    }
    if (((HEAP8[$$2 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
     $$3 = $$2;
     break L8;
    }
    $$2 = $$2 + 1 | 0;
   }
  } while (0);
  $28 = HEAP32[$2 + 4 >> 2] | 0;
  if ((HEAP32[$2 >> 2] | 0) == ($28 | 0)) $$236 = $0; else {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($28 + -24 | 0, 0, 16764) | 0;
   $$236 = $$3;
  }
 } else $$236 = $0; while (0);
 return $$236 | 0;
}

function __ZNSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = ((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 3) + 1 | 0;
 $9 = __ZNKSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $15 = (HEAP32[$0 + 8 >> 2] | 0) - $14 | 0;
  $19 = $15 >> 2;
  __ZNSt3__214__split_bufferI12multi_markerRNS_9allocatorIS1_EEEC2EjjS4_($2, $15 >> 3 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, (HEAP32[$3 >> 2] | 0) - $14 >> 3, $0 + 8 | 0);
  $24 = $2 + 8 | 0;
  $26 = $1;
  $31 = HEAP32[$26 + 4 >> 2] | 0;
  $32 = HEAP32[$24 >> 2] | 0;
  HEAP32[$32 >> 2] = HEAP32[$26 >> 2];
  HEAP32[$32 + 4 >> 2] = $31;
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 8;
  __ZNSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0, $2);
  __ZNSt3__214__split_bufferI12multi_markerRNS_9allocatorIS1_EEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6rehashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$sroa$speculated = 0, $22 = 0, $27 = 0, $30 = 0, $8 = 0;
 if (($1 | 0) == 1) $$0 = 2; else if (!($1 + -1 & $1)) $$0 = $1; else $$0 = __ZNSt3__212__next_primeEj($1) | 0;
 $8 = HEAP32[$0 + 4 >> 2] | 0;
 if ($$0 >>> 0 > $8 >>> 0) __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($0, $$0); else if ($$0 >>> 0 < $8 >>> 0) {
  $22 = ~~+Math_ceil(+(+((HEAP32[$0 + 12 >> 2] | 0) >>> 0) / +HEAPF32[$0 + 16 >> 2])) >>> 0;
  if ($8 >>> 0 > 2 & ($8 + -1 & $8 | 0) == 0) {
   $27 = 1 << 32 - (Math_clz32($22 + -1 | 0) | 0);
   $30 = $22 >>> 0 < 2 ? $22 : $27;
  } else $30 = __ZNSt3__212__next_primeEj($22) | 0;
  $$sroa$speculated = $$0 >>> 0 < $30 >>> 0 ? $30 : $$0;
  if ($$sroa$speculated >>> 0 < $8 >>> 0) __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($0, $$sroa$speculated);
 }
 return;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$028 = 0, $$pn = 0, $$sroa$0$0 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if (!$4) $$sroa$0$0 = 0; else {
  $6 = $4 + -1 | 0;
  $8 = ($6 & $4 | 0) == 0;
  if ($8) $14 = $6 & $2; else if ($2 >>> 0 < $4 >>> 0) $14 = $2; else $14 = ($2 >>> 0) % ($4 >>> 0) | 0;
  $15 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($14 << 2) >> 2] | 0;
  if (!$15) $$sroa$0$0 = 0; else {
   $$pn = $15;
   while (1) {
    $$028 = HEAP32[$$pn >> 2] | 0;
    if (!$$028) {
     $$sroa$0$0 = 0;
     break L1;
    }
    $19 = HEAP32[$$028 + 4 >> 2] | 0;
    if (($19 | 0) == ($2 | 0)) {
     if ((HEAP32[$$028 + 8 >> 2] | 0) == ($2 | 0)) {
      $$sroa$0$0 = $$028;
      break L1;
     }
    } else {
     if ($8) $25 = $19 & $6; else if ($19 >>> 0 < $4 >>> 0) $25 = $19; else $25 = ($19 >>> 0) % ($4 >>> 0) | 0;
     if (($25 | 0) != ($14 | 0)) {
      $$sroa$0$0 = 0;
      break L1;
     }
    }
    $$pn = $$028;
   }
  }
 } while (0);
 return $$sroa$0$0 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6rehashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$sroa$speculated = 0, $22 = 0, $27 = 0, $30 = 0, $8 = 0;
 if (($1 | 0) == 1) $$0 = 2; else if (!($1 + -1 & $1)) $$0 = $1; else $$0 = __ZNSt3__212__next_primeEj($1) | 0;
 $8 = HEAP32[$0 + 4 >> 2] | 0;
 if ($$0 >>> 0 > $8 >>> 0) __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($0, $$0); else if ($$0 >>> 0 < $8 >>> 0) {
  $22 = ~~+Math_ceil(+(+((HEAP32[$0 + 12 >> 2] | 0) >>> 0) / +HEAPF32[$0 + 16 >> 2])) >>> 0;
  if ($8 >>> 0 > 2 & ($8 + -1 & $8 | 0) == 0) {
   $27 = 1 << 32 - (Math_clz32($22 + -1 | 0) | 0);
   $30 = $22 >>> 0 < 2 ? $22 : $27;
  } else $30 = __ZNSt3__212__next_primeEj($22) | 0;
  $$sroa$speculated = $$0 >>> 0 < $30 >>> 0 ? $30 : $$0;
  if ($$sroa$speculated >>> 0 < $8 >>> 0) __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($0, $$sroa$speculated);
 }
 return;
}

function _setup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $6 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer1 = sp + 8 | 0;
 $3 = sp + 12 | 0;
 $4 = HEAP32[4350] | 0;
 HEAP32[4350] = $4 + 1;
 HEAP32[$3 >> 2] = $4;
 $6 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $3) | 0;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$6 + 208 >> 2] = $0;
 HEAP32[$6 + 212 >> 2] = $1;
 $11 = Math_imul($0 << 2, $1) | 0;
 $12 = $6 + 200 | 0;
 HEAP32[$12 >> 2] = $11;
 $13 = _malloc($11) | 0;
 $14 = $6 + 196 | 0;
 HEAP32[$14 >> 2] = $13;
 $17 = _malloc((HEAP32[$12 >> 2] | 0) / 4 | 0) | 0;
 $18 = $6 + 204 | 0;
 HEAP32[$18 >> 2] = $17;
 $19 = _arPattCreateHandle() | 0;
 HEAP32[$6 + 220 >> 2] = $19;
 if (!$19) _arLog(0, 3, 10064, sp);
 _setCamera(HEAP32[$3 >> 2] | 0, $2) | 0;
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[$12 >> 2];
 _arLog(0, 1, 10101, $vararg_buffer1);
 _emscripten_asm_const_iiiiiii(0, HEAP32[$6 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP32[$12 >> 2] | 0, $6 + 264 | 0, 17256, HEAP32[$18 >> 2] | 0) | 0;
 STACKTOP = sp;
 return HEAP32[$6 >> 2] | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$028 = 0, $$pn = 0, $$sroa$0$0 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if (!$4) $$sroa$0$0 = 0; else {
  $6 = $4 + -1 | 0;
  $8 = ($6 & $4 | 0) == 0;
  if ($8) $14 = $6 & $2; else if ($2 >>> 0 < $4 >>> 0) $14 = $2; else $14 = ($2 >>> 0) % ($4 >>> 0) | 0;
  $15 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($14 << 2) >> 2] | 0;
  if (!$15) $$sroa$0$0 = 0; else {
   $$pn = $15;
   while (1) {
    $$028 = HEAP32[$$pn >> 2] | 0;
    if (!$$028) {
     $$sroa$0$0 = 0;
     break L1;
    }
    $19 = HEAP32[$$028 + 4 >> 2] | 0;
    if (($19 | 0) == ($2 | 0)) {
     if ((HEAP32[$$028 + 8 >> 2] | 0) == ($2 | 0)) {
      $$sroa$0$0 = $$028;
      break L1;
     }
    } else {
     if ($8) $25 = $19 & $6; else if ($19 >>> 0 < $4 >>> 0) $25 = $19; else $25 = ($19 >>> 0) % ($4 >>> 0) | 0;
     if (($25 | 0) != ($14 | 0)) {
      $$sroa$0$0 = 0;
      break L1;
     }
    }
    $$pn = $$028;
   }
  }
 } while (0);
 return $$sroa$0$0 | 0;
}

function _sift($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$02934 = 0, $$03133 = 0, $$035 = 0, $$1 = 0, $$130 = 0, $$132 = 0, $13 = 0, $14 = 0, $21 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $5 = sp;
 HEAP32[$5 >> 2] = $0;
 L1 : do if (($3 | 0) > 1) {
  $7 = 0 - $1 | 0;
  $$02934 = $0;
  $$03133 = $3;
  $$035 = 1;
  $14 = $0;
  while (1) {
   $8 = $$02934 + $7 | 0;
   $9 = $$03133 + -2 | 0;
   $13 = $8 + (0 - (HEAP32[$4 + ($9 << 2) >> 2] | 0)) | 0;
   if ((FUNCTION_TABLE_iii[$2 & 15]($14, $13) | 0) > -1) if ((FUNCTION_TABLE_iii[$2 & 15]($14, $8) | 0) > -1) {
    $$0$lcssa = $$035;
    break L1;
   }
   $21 = $5 + ($$035 << 2) | 0;
   if ((FUNCTION_TABLE_iii[$2 & 15]($13, $8) | 0) > -1) {
    HEAP32[$21 >> 2] = $13;
    $$130 = $13;
    $$132 = $$03133 + -1 | 0;
   } else {
    HEAP32[$21 >> 2] = $8;
    $$130 = $8;
    $$132 = $9;
   }
   $$1 = $$035 + 1 | 0;
   if (($$132 | 0) <= 1) {
    $$0$lcssa = $$1;
    break L1;
   }
   $$02934 = $$130;
   $$03133 = $$132;
   $$035 = $$1;
   $14 = HEAP32[$5 >> 2] | 0;
  }
 } else $$0$lcssa = 1; while (0);
 _cycle($1, $5, $$0$lcssa);
 STACKTOP = sp;
 return;
}

function ___stdio_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$cast = 0, $11 = 0, $18 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 $3 = sp + 16 | 0;
 HEAP32[$3 >> 2] = $1;
 $4 = $3 + 4 | 0;
 $5 = $0 + 48 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 HEAP32[$4 >> 2] = $2 - (($6 | 0) != 0 & 1);
 $11 = $0 + 44 | 0;
 HEAP32[$3 + 8 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$3 + 12 >> 2] = $6;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $3;
 HEAP32[$vararg_buffer + 8 >> 2] = 2;
 $18 = ___syscall_ret(___syscall145(145, $vararg_buffer | 0) | 0) | 0;
 if (($18 | 0) < 1) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $18 & 48 ^ 16;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4 >> 2] | 0;
  if ($18 >>> 0 > $24 >>> 0) {
   $27 = HEAP32[$11 >> 2] | 0;
   $28 = $0 + 4 | 0;
   HEAP32[$28 >> 2] = $27;
   $$cast = $27;
   HEAP32[$0 + 8 >> 2] = $$cast + ($18 - $24);
   if (!(HEAP32[$5 >> 2] | 0)) $$0 = $2; else {
    HEAP32[$28 >> 2] = $$cast + 1;
    HEAP8[$1 + ($2 + -1) >> 0] = HEAP8[$$cast >> 0] | 0;
    $$0 = $2;
   }
  } else $$0 = $18;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _arSetPixelFormat($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016 = 0, $10 = 0, $11 = 0, $3 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 L1 : do if (!$0) $$016 = -1; else {
  $3 = $0 + 4 | 0;
  if ((HEAP32[$3 >> 2] | 0) == ($1 | 0)) $$016 = 0; else {
   if ($1 >>> 0 >= 15) {
    HEAP32[$vararg_buffer >> 2] = $1;
    _arLog(0, 3, 3725, $vararg_buffer);
    $$016 = -1;
    break;
   }
   HEAP32[$3 >> 2] = $1;
   $8 = _arUtilGetPixelSize($1) | 0;
   HEAP32[$0 + 8 >> 2] = $8;
   $10 = $0 + 24 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   if (!(28704 >>> ($1 & 32767) & 1)) switch ($11 | 0) {
   case 1:
    {
     HEAP32[$10 >> 2] = 4;
     $$016 = 0;
     break L1;
     break;
    }
   case 4:
    {
     HEAP32[$10 >> 2] = 3;
     $$016 = 0;
     break L1;
     break;
    }
   default:
    {
     $$016 = 0;
     break L1;
    }
   } else switch ($11 | 0) {
   case 0:
    {
     HEAP32[$10 >> 2] = 1;
     $$016 = 0;
     break L1;
     break;
    }
   case 3:
    {
     HEAP32[$10 >> 2] = 4;
     $$016 = 0;
     break L1;
     break;
    }
   default:
    {
     $$016 = 0;
     break L1;
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$016 | 0;
}

function _arSetLabelingThreshMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$018 = 0, $13 = 0, $3 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (!$0) $$018 = -1; else {
  $3 = $0 + 7062388 | 0;
  if ((HEAP32[$3 >> 2] | 0) == ($1 | 0)) $$018 = 0; else {
   $6 = $0 + 7062408 | 0;
   $7 = HEAP32[$6 >> 2] | 0;
   if ($7 | 0) {
    _arImageProcFinal($7);
    HEAP32[$6 >> 2] = 0;
   }
   switch ($1 | 0) {
   case 3:
   case 2:
   case 1:
    {
     $13 = _arImageProcInit(HEAP32[$0 + 36 >> 2] | 0, HEAP32[$0 + 40 >> 2] | 0) | 0;
     HEAP32[$6 >> 2] = $13;
     $$0 = $1;
     break;
    }
   case 4:
    {
     HEAP32[$0 + 7062404 >> 2] = 1;
     HEAP32[$0 + 7062400 >> 2] = 1;
     $$0 = 4;
     break;
    }
   case 0:
    {
     $$0 = $1;
     break;
    }
   default:
    {
     _arLog(0, 3, 3556, $vararg_buffer);
     $$0 = 0;
    }
   }
   HEAP32[$3 >> 2] = $$0;
   if ((HEAP32[$0 >> 2] | 0) == 1) {
    HEAP32[$vararg_buffer1 >> 2] = HEAP32[424 + ($$0 << 2) >> 2];
    _arLog(0, 3, 3630, $vararg_buffer1);
    $$018 = 0;
   } else $$018 = 0;
  }
 }
 STACKTOP = sp;
 return $$018 | 0;
}

function _arGetTransMatRobust($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $6 = sp + 20 | 0;
 $7 = sp;
 $9 = _malloc($4 << 4) | 0;
 HEAP32[$6 >> 2] = $9;
 if (!$9) {
  _arLog(0, 3, 5051, sp + 8 | 0);
  _exit(1);
 }
 $12 = _malloc($4 * 24 | 0) | 0;
 $13 = $6 + 4 | 0;
 HEAP32[$13 >> 2] = $12;
 if (!$12) {
  _arLog(0, 3, 5051, sp + 16 | 0);
  _exit(1);
 }
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($4 | 0)) break;
  HEAPF64[$9 + ($$0 << 4) >> 3] = +HEAPF64[$2 + ($$0 << 4) >> 3];
  HEAPF64[$9 + ($$0 << 4) + 8 >> 3] = +HEAPF64[$2 + ($$0 << 4) + 8 >> 3];
  HEAPF64[$12 + ($$0 * 24 | 0) >> 3] = +HEAPF64[$3 + ($$0 * 24 | 0) >> 3];
  HEAPF64[$12 + ($$0 * 24 | 0) + 8 >> 3] = +HEAPF64[$3 + ($$0 * 24 | 0) + 8 >> 3];
  HEAPF64[$12 + ($$0 * 24 | 0) + 16 >> 3] = +HEAPF64[$3 + ($$0 * 24 | 0) + 16 >> 3];
  $$0 = $$0 + 1 | 0;
 }
 HEAP32[$6 + 8 >> 2] = $4;
 if ((_icpPointRobust(HEAP32[$0 >> 2] | 0, $6, $1, $5, $7) | 0) < 0) HEAPF64[$7 >> 3] = 1.0e8;
 _free(HEAP32[$6 >> 2] | 0);
 _free(HEAP32[$13 >> 2] | 0);
 STACKTOP = sp;
 return +(+HEAPF64[$7 >> 3]);
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = sp + 1 | 0;
 HEAP8[$2 >> 0] = $1;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) {
  $$018 = HEAP32[$0 + 4 >> 2] | 0;
  $$019 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $$018 = $5 & 255;
  $$019 = 10;
 }
 if (($$018 | 0) == ($$019 | 0)) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($0, $$019, 1, $$019, $$019, 0);
  if ((HEAP8[$4 >> 0] | 0) < 0) label = 8; else label = 7;
 } else if ($6) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$4 >> 0] = $$018 + 1;
  $$pn = $0;
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = $$018 + 1;
  $$pn = $19;
 }
 $$0 = $$pn + $$018 | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0, $2);
 HEAP8[$3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + 1 | 0, $3);
 STACKTOP = sp;
 return;
}

function _arLabeling($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0 = 0, $10 = 0, $11 = 0;
 $10 = ($4 | 0) == 1;
 $11 = ($8 | 0) != 0;
 do if (!$3) if ($10) {
  if ($11) {
   $$0 = _arLabelingSubDBZ($0, $1, $2, $8, $7) | 0;
   break;
  }
  if (!$6) {
   $$0 = _arLabelingSubDBRC($0, $1, $2, $5, $7) | 0;
   break;
  } else {
   $$0 = _arLabelingSubDBIC($0, $1, $2, $5, $7) | 0;
   break;
  }
 } else {
  if ($11) {
   $$0 = _arLabelingSubDWZ($0, $1, $2, $8, $7) | 0;
   break;
  }
  if (!$6) {
   $$0 = _arLabelingSubDWRC($0, $1, $2, $5, $7) | 0;
   break;
  } else {
   $$0 = _arLabelingSubDWIC($0, $1, $2, $5, $7) | 0;
   break;
  }
 } else if ($10) {
  if ($11) {
   $$0 = _arLabelingSubEBZ($0, $1, $2, $8, $7) | 0;
   break;
  }
  if (!$6) {
   $$0 = _arLabelingSubEBRC($0, $1, $2, $5, $7) | 0;
   break;
  } else {
   $$0 = _arLabelingSubEBIC($0, $1, $2, $5, $7) | 0;
   break;
  }
 } else {
  if ($11) {
   $$0 = _arLabelingSubEWZ($0, $1, $2, $8, $7) | 0;
   break;
  }
  if (!$6) {
   $$0 = _arLabelingSubEWRC($0, $1, $2, $5, $7) | 0;
   break;
  } else {
   $$0 = _arLabelingSubEWIC($0, $1, $2, $5, $7) | 0;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function _arCreateHandle($0) {
 $0 = $0 | 0;
 var $1 = 0, $16 = 0, $19 = 0, $27 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = _malloc(7062432) | 0;
 if (!$1) {
  _arLog(0, 3, 5051, sp);
  _exit(1);
 }
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4834148 >> 2] = 0;
 HEAP32[$1 + 7062408 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = -1;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 1;
 HEAP32[$1 + 16 >> 2] = 100;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 24 >> 2] = 0;
 HEAP32[$1 + 28 >> 2] = 2;
 HEAPF64[$1 + 7062416 >> 3] = .5;
 HEAP32[$1 + 7062424 >> 2] = 3;
 HEAP32[$1 + 32 >> 2] = $0;
 $16 = HEAP32[$0 >> 2] | 0;
 HEAP32[$1 + 36 >> 2] = $16;
 $19 = HEAP32[$0 + 4 >> 2] | 0;
 HEAP32[$1 + 40 >> 2] = $19;
 HEAP32[$1 + 44 >> 2] = 0;
 HEAP32[$1 + 15408 >> 2] = 0;
 HEAP32[$1 + 4834152 >> 2] = 0;
 HEAP32[$1 + 4818296 >> 2] = 0;
 $27 = _malloc(Math_imul($16 << 1, $19) | 0) | 0;
 HEAP32[$1 + 4834144 >> 2] = $27;
 if (!$27) {
  _arLog(0, 3, 5051, sp + 8 | 0);
  _exit(1);
 } else {
  HEAP32[$1 + 7062384 >> 2] = 0;
  _arSetDebugMode($1, 0) | 0;
  HEAP32[$1 + 7062388 >> 2] = -1;
  _arSetLabelingThreshMode($1, 0) | 0;
  _arSetLabelingThreshModeAutoInterval($1, 7) | 0;
  STACKTOP = sp;
  return $1 | 0;
 }
 return 0;
}

function _arGetTransMat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $6 = sp + 20 | 0;
 $7 = sp;
 $9 = _malloc($4 << 4) | 0;
 HEAP32[$6 >> 2] = $9;
 if (!$9) {
  _arLog(0, 3, 5051, sp + 8 | 0);
  _exit(1);
 }
 $12 = _malloc($4 * 24 | 0) | 0;
 $13 = $6 + 4 | 0;
 HEAP32[$13 >> 2] = $12;
 if (!$12) {
  _arLog(0, 3, 5051, sp + 16 | 0);
  _exit(1);
 }
 $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($4 | 0)) break;
  HEAPF64[$9 + ($$0 << 4) >> 3] = +HEAPF64[$2 + ($$0 << 4) >> 3];
  HEAPF64[$9 + ($$0 << 4) + 8 >> 3] = +HEAPF64[$2 + ($$0 << 4) + 8 >> 3];
  HEAPF64[$12 + ($$0 * 24 | 0) >> 3] = +HEAPF64[$3 + ($$0 * 24 | 0) >> 3];
  HEAPF64[$12 + ($$0 * 24 | 0) + 8 >> 3] = +HEAPF64[$3 + ($$0 * 24 | 0) + 8 >> 3];
  HEAPF64[$12 + ($$0 * 24 | 0) + 16 >> 3] = +HEAPF64[$3 + ($$0 * 24 | 0) + 16 >> 3];
  $$0 = $$0 + 1 | 0;
 }
 HEAP32[$6 + 8 >> 2] = $4;
 if ((_icpPoint(HEAP32[$0 >> 2] | 0, $6, $1, $5, $7) | 0) < 0) HEAPF64[$7 >> 3] = 1.0e8;
 _free(HEAP32[$6 >> 2] | 0);
 _free(HEAP32[$13 >> 2] | 0);
 STACKTOP = sp;
 return +(+HEAPF64[$7 >> 3]);
}

function _icpUpdateMat($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$028 = 0, $$1 = 0, $$129 = 0, $2 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $2 = sp + 192 | 0;
 $3 = sp + 96 | 0;
 $4 = sp;
 _icpGetQ_from_S($2, $1);
 _icpGetMat_from_Q($3, $2);
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 3) break;
  $5 = $0 + ($$0 << 5) | 0;
  $6 = $0 + ($$0 << 5) + 8 | 0;
  $7 = $0 + ($$0 << 5) + 16 | 0;
  $$028 = 0;
  while (1) {
   if (($$028 | 0) == 4) break;
   HEAPF64[$4 + ($$0 << 5) + ($$028 << 3) >> 3] = +HEAPF64[$5 >> 3] * +HEAPF64[$3 + ($$028 << 3) >> 3] + +HEAPF64[$6 >> 3] * +HEAPF64[$3 + 32 + ($$028 << 3) >> 3] + +HEAPF64[$7 >> 3] * +HEAPF64[$3 + 64 + ($$028 << 3) >> 3];
   $$028 = $$028 + 1 | 0;
  }
  $26 = $4 + ($$0 << 5) + 24 | 0;
  HEAPF64[$26 >> 3] = +HEAPF64[$0 + ($$0 << 5) + 24 >> 3] + +HEAPF64[$26 >> 3];
  $$0 = $$0 + 1 | 0;
 }
 $$1 = 0;
 while (1) {
  if (($$1 | 0) == 3) break;
  $$129 = 0;
  while (1) {
   if (($$129 | 0) == 4) break;
   HEAPF64[$0 + ($$1 << 5) + ($$129 << 3) >> 3] = +HEAPF64[$4 + ($$1 << 5) + ($$129 << 3) >> 3];
   $$129 = $$129 + 1 | 0;
  }
  $$1 = $$1 + 1 | 0;
 }
 STACKTOP = sp;
 return 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0;
 value = value & 255;
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value;
   ptr = ptr + 1 | 0;
  }
  aligned_end = end & -4 | 0;
  block_aligned_end = aligned_end - 64 | 0;
  value4 = value | value << 8 | value << 16 | value << 24;
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   HEAP32[ptr + 4 >> 2] = value4;
   HEAP32[ptr + 8 >> 2] = value4;
   HEAP32[ptr + 12 >> 2] = value4;
   HEAP32[ptr + 16 >> 2] = value4;
   HEAP32[ptr + 20 >> 2] = value4;
   HEAP32[ptr + 24 >> 2] = value4;
   HEAP32[ptr + 28 >> 2] = value4;
   HEAP32[ptr + 32 >> 2] = value4;
   HEAP32[ptr + 36 >> 2] = value4;
   HEAP32[ptr + 40 >> 2] = value4;
   HEAP32[ptr + 44 >> 2] = value4;
   HEAP32[ptr + 48 >> 2] = value4;
   HEAP32[ptr + 52 >> 2] = value4;
   HEAP32[ptr + 56 >> 2] = value4;
   HEAP32[ptr + 60 >> 2] = value4;
   ptr = ptr + 64 | 0;
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return end - num | 0;
}

function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $12 = 0, $14 = 0, $30 = 0, $8 = 0, $9 = 0, $8$looptemp = 0, $9$looptemp = 0, $$012$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2;
  $8 = $0;
  $9 = $1;
  do {
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0;
   $9$looptemp = $9;
   $9 = tempRet0;
   $12 = ___muldi3($8 | 0, $9 | 0, 10, 0) | 0;
   $14 = _i64Subtract($8$looptemp | 0, $9$looptemp | 0, $12 | 0, tempRet0 | 0) | 0;
   $$0914 = $$0914 + -1 | 0;
   HEAP8[$$0914 >> 0] = $14 & 255 | 48;
  } while ($9$looptemp >>> 0 > 9 | ($9$looptemp | 0) == 9 & $8$looptemp >>> 0 > 4294967295);
  $$010$lcssa$off0 = $8;
  $$09$lcssa = $$0914;
 } else {
  $$010$lcssa$off0 = $0;
  $$09$lcssa = $2;
 }
 if (!$$010$lcssa$off0) $$1$lcssa = $$09$lcssa; else {
  $$012 = $$010$lcssa$off0;
  $$111 = $$09$lcssa;
  while (1) {
   $$012$looptemp = $$012;
   $$012 = ($$012 >>> 0) / 10 | 0;
   $30 = $$111 + -1 | 0;
   HEAP8[$30 >> 0] = $$012$looptemp - ($$012 * 10 | 0) | 48;
   if ($$012$looptemp >>> 0 < 10) {
    $$1$lcssa = $30;
    break;
   } else $$111 = $30;
  }
 }
 return $$1$lcssa | 0;
}

function _icpGetMat_from_Q($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $16 = 0, $3 = 0.0, $4 = 0.0, $40 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $72 = 0.0;
 $3 = +HEAPF64[$1 + 24 >> 3];
 $4 = +Math_cos(+$3);
 $5 = 1.0 - $4;
 $6 = +Math_sin(+$3);
 $7 = +HEAPF64[$1 >> 3];
 HEAPF64[$0 >> 3] = $4 + $7 * $7 * $5;
 $12 = $1 + 8 | 0;
 $16 = $1 + 16 | 0;
 HEAPF64[$0 + 8 >> 3] = $5 * (+HEAPF64[$1 >> 3] * +HEAPF64[$12 >> 3]) - $6 * +HEAPF64[$16 >> 3];
 HEAPF64[$0 + 16 >> 3] = $5 * (+HEAPF64[$1 >> 3] * +HEAPF64[$16 >> 3]) + $6 * +HEAPF64[$12 >> 3];
 HEAPF64[$0 + 24 >> 3] = +HEAPF64[$1 + 32 >> 3];
 HEAPF64[$0 + 32 >> 3] = $5 * (+HEAPF64[$12 >> 3] * +HEAPF64[$1 >> 3]) + $6 * +HEAPF64[$16 >> 3];
 $40 = +HEAPF64[$12 >> 3];
 HEAPF64[$0 + 40 >> 3] = $4 + $5 * ($40 * $40);
 HEAPF64[$0 + 48 >> 3] = $5 * (+HEAPF64[$12 >> 3] * +HEAPF64[$16 >> 3]) - $6 * +HEAPF64[$1 >> 3];
 HEAPF64[$0 + 56 >> 3] = +HEAPF64[$1 + 40 >> 3];
 HEAPF64[$0 + 64 >> 3] = $5 * (+HEAPF64[$16 >> 3] * +HEAPF64[$1 >> 3]) - $6 * +HEAPF64[$12 >> 3];
 HEAPF64[$0 + 72 >> 3] = $5 * (+HEAPF64[$16 >> 3] * +HEAPF64[$12 >> 3]) + $6 * +HEAPF64[$1 >> 3];
 $72 = +HEAPF64[$16 >> 3];
 HEAPF64[$0 + 80 >> 3] = $4 + $5 * ($72 * $72);
 HEAPF64[$0 + 88 >> 3] = +HEAPF64[$1 + 48 >> 3];
 return;
}

function _icpGetDeltaS($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $15 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $4 = sp + 24 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 HEAP32[$4 + 4 >> 2] = 6;
 HEAP32[$4 + 8 >> 2] = 1;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 + 4 >> 2] = $3;
 HEAP32[$5 + 8 >> 2] = 1;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 + 4 >> 2] = $3;
 HEAP32[$6 + 8 >> 2] = 6;
 HEAP32[$6 >> 2] = $2;
 $13 = _arMatrixAllocTrans($6) | 0;
 do if (!$13) $$0 = -1; else {
  $15 = _arMatrixAllocMul($13, $6) | 0;
  if (!$15) {
   _arMatrixFree($13) | 0;
   $$0 = -1;
   break;
  }
  $17 = _arMatrixAllocMul($13, $5) | 0;
  if (!$17) {
   _arMatrixFree($13) | 0;
   _arMatrixFree($15) | 0;
   $$0 = -1;
   break;
  }
  if ((_arMatrixSelfInv($15) | 0) < 0) {
   _arMatrixFree($13) | 0;
   _arMatrixFree($15) | 0;
   _arMatrixFree($17) | 0;
   $$0 = -1;
   break;
  } else {
   _arMatrixMul($4, $15, $17) | 0;
   _arMatrixFree($13) | 0;
   _arMatrixFree($15) | 0;
   _arMatrixFree($17) | 0;
   $$0 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _EX($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$039 = 0, $$040 = 0, $$041 = 0, $$043 = 0, $$1 = 0, $$142 = 0, $$2 = 0, $23 = 0.0, $25 = 0, $3 = 0, $5 = 0;
 $3 = HEAP32[$0 + 4 >> 2] | 0;
 $5 = HEAP32[$0 + 8 >> 2] | 0;
 L1 : do if (($3 | 0) < 1 | ($5 | 0) < 1) $$040 = -1; else if ((HEAP32[$1 + 4 >> 2] | 0) == ($5 | 0)) {
  $$039 = 0;
  while (1) {
   if (($$039 | 0) == ($5 | 0)) break;
   HEAPF64[(HEAP32[$1 >> 2] | 0) + ($$039 << 3) >> 3] = 0.0;
   $$039 = $$039 + 1 | 0;
  }
  $$041 = HEAP32[$0 >> 2] | 0;
  $$1 = 0;
  while (1) {
   if (($$1 | 0) == ($3 | 0)) break;
   $$0 = 0;
   $$043 = HEAP32[$1 >> 2] | 0;
   $$142 = $$041;
   while (1) {
    if (($$0 | 0) == ($5 | 0)) break;
    HEAPF64[$$043 >> 3] = +HEAPF64[$$142 >> 3] + +HEAPF64[$$043 >> 3];
    $$0 = $$0 + 1 | 0;
    $$043 = $$043 + 8 | 0;
    $$142 = $$142 + 8 | 0;
   }
   $$041 = $$041 + ($5 << 3) | 0;
   $$1 = $$1 + 1 | 0;
  }
  $23 = +($3 | 0);
  $$2 = 0;
  while (1) {
   if (($$2 | 0) == ($5 | 0)) {
    $$040 = 0;
    break L1;
   }
   $25 = (HEAP32[$1 >> 2] | 0) + ($$2 << 3) | 0;
   HEAPF64[$25 >> 3] = +HEAPF64[$25 >> 3] / $23;
   $$2 = $$2 + 1 | 0;
  }
 } else $$040 = -1; while (0);
 return $$040 | 0;
}

function _getTransMatMultiSquareRobust($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $10 = 0, $18 = 0, $2 = 0, $22 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $2) | 0)) $$1 = HEAP32[489] | 0; else {
  $6 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $2) | 0;
  $10 = HEAP32[$6 + 248 >> 2] | 0;
  if (($1 | 0) < 0 ? 1 : (HEAP32[$6 + 252 >> 2] | 0) - $10 >> 3 >>> 0 <= $1 >>> 0) {
   $$1 = HEAP32[490] | 0;
   break;
  } else {
   $18 = HEAP32[$10 + ($1 << 3) + 4 >> 2] | 0;
   $22 = HEAP32[$6 + 216 >> 2] | 0;
   +_arGetTransMatMultiSquareRobust(HEAP32[$6 + 228 >> 2] | 0, $22 + 48 | 0, HEAP32[$22 + 44 >> 2] | 0, $18);
   _matrixCopy($18 + 8 | 0, 17256);
   $$1 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _getTransMatMultiSquare($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $10 = 0, $18 = 0, $2 = 0, $22 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $2) | 0)) $$1 = HEAP32[489] | 0; else {
  $6 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $2) | 0;
  $10 = HEAP32[$6 + 248 >> 2] | 0;
  if (($1 | 0) < 0 ? 1 : (HEAP32[$6 + 252 >> 2] | 0) - $10 >> 3 >>> 0 <= $1 >>> 0) {
   $$1 = HEAP32[490] | 0;
   break;
  } else {
   $18 = HEAP32[$10 + ($1 << 3) + 4 >> 2] | 0;
   $22 = HEAP32[$6 + 216 >> 2] | 0;
   +_arGetTransMatMultiSquare(HEAP32[$6 + 228 >> 2] | 0, $22 + 48 | 0, HEAP32[$22 + 44 >> 2] | 0, $18);
   _matrixCopy($18 + 8 | 0, 17256);
   $$1 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029 = 0, $$1 = 0, $$pn = 0, $13 = 0, $3 = 0, $5 = 0, $7 = 0;
 L1 : do if (($0 | 0) == ($1 | 0)) $$1 = $0; else {
  $3 = HEAP8[$0 >> 0] | 0;
  if ($3 << 24 >> 24 != 95) {
   if ((($3 << 24 >> 24) + -48 | 0) >>> 0 >= 10) {
    $$1 = $0;
    break;
   }
   $$pn = $0;
   while (1) {
    $$0 = $$pn + 1 | 0;
    if (($$0 | 0) == ($1 | 0)) {
     $$1 = $1;
     break L1;
    }
    if (((HEAP8[$$0 >> 0] | 0) + -48 | 0) >>> 0 < 10) $$pn = $$0; else {
     $$1 = $$0;
     break L1;
    }
   }
  }
  $5 = $0 + 1 | 0;
  if (($5 | 0) == ($1 | 0)) $$1 = $0; else {
   $7 = HEAP8[$5 >> 0] | 0;
   if ((($7 << 24 >> 24) + -48 | 0) >>> 0 < 10) {
    $$1 = $0 + 2 | 0;
    break;
   }
   if ($7 << 24 >> 24 == 95) {
    $$029 = $0 + 2 | 0;
    while (1) {
     if (($$029 | 0) == ($1 | 0)) {
      $$1 = $0;
      break L1;
     }
     $13 = HEAP8[$$029 >> 0] | 0;
     if ((($13 << 24 >> 24) + -48 | 0) >>> 0 >= 10) break;
     $$029 = $$029 + 1 | 0;
    }
    return ($13 << 24 >> 24 == 95 ? $$029 + 1 | 0 : $0) | 0;
   } else $$1 = $0;
  }
 } while (0);
 return $$1 | 0;
}

function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $13 = 0, $57 = 0, $7 = 0;
 do if (!$0) $$0 = 1; else {
  if ($1 >>> 0 < 128) {
   HEAP8[$0 >> 0] = $1;
   $$0 = 1;
   break;
  }
  $7 = (___pthread_self_907() | 0) + 188 | 0;
  if (!(HEAP32[HEAP32[$7 >> 2] >> 2] | 0)) if (($1 & -128 | 0) == 57216) {
   HEAP8[$0 >> 0] = $1;
   $$0 = 1;
   break;
  } else {
   $13 = ___errno_location() | 0;
   HEAP32[$13 >> 2] = 84;
   $$0 = -1;
   break;
  }
  if ($1 >>> 0 < 2048) {
   HEAP8[$0 >> 0] = $1 >>> 6 | 192;
   HEAP8[$0 + 1 >> 0] = $1 & 63 | 128;
   $$0 = 2;
   break;
  }
  if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
   HEAP8[$0 >> 0] = $1 >>> 12 | 224;
   HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128;
   HEAP8[$0 + 2 >> 0] = $1 & 63 | 128;
   $$0 = 3;
   break;
  }
  if (($1 + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$0 >> 0] = $1 >>> 18 | 240;
   HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128;
   HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128;
   HEAP8[$0 + 3 >> 0] = $1 & 63 | 128;
   $$0 = 4;
   break;
  } else {
   $57 = ___errno_location() | 0;
   HEAP32[$57 >> 2] = 84;
   $$0 = -1;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function _fopen($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $11 = 0, $15 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer8 = sp + 32 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 if (!(_strchr(11759, HEAP8[$1 >> 0] | 0) | 0)) {
  $6 = ___errno_location() | 0;
  HEAP32[$6 >> 2] = 22;
  $$0 = 0;
 } else {
  $7 = ___fmodeflags($1) | 0;
  HEAP32[$vararg_buffer >> 2] = $0;
  HEAP32[$vararg_buffer + 4 >> 2] = $7 | 32768;
  HEAP32[$vararg_buffer + 8 >> 2] = 438;
  $11 = ___syscall_ret(___syscall5(5, $vararg_buffer | 0) | 0) | 0;
  if (($11 | 0) < 0) $$0 = 0; else {
   if ($7 & 524288 | 0) {
    HEAP32[$vararg_buffer3 >> 2] = $11;
    HEAP32[$vararg_buffer3 + 4 >> 2] = 2;
    HEAP32[$vararg_buffer3 + 8 >> 2] = 1;
    ___syscall221(221, $vararg_buffer3 | 0) | 0;
   }
   $15 = ___fdopen($11, $1) | 0;
   if (!$15) {
    HEAP32[$vararg_buffer8 >> 2] = $11;
    ___syscall6(6, $vararg_buffer8 | 0) | 0;
    $$0 = 0;
   } else $$0 = $15;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$021 = 0, $$1 = 0, $12 = 0, $13 = 0, $18 = 0, $3 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = $1;
 $4 = sp;
 $6 = $2 - $3 | 0;
 if ($6 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($6 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $6;
  $$021 = $0;
 } else {
  $12 = $6 + 16 & -16;
  $13 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($12) | 0;
  HEAP32[$0 >> 2] = $13;
  HEAP32[$0 + 8 >> 2] = $12 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $6;
  $$021 = $13;
 }
 $18 = $2 - $3 | 0;
 $$0 = $1;
 $$1 = $$021;
 while (1) {
  if (($$0 | 0) == ($2 | 0)) break;
  __ZNSt3__211char_traitsIcE6assignERcRKc($$1, $$0);
  $$0 = $$0 + 1 | 0;
  $$1 = $$1 + 1 | 0;
 }
 HEAP8[$4 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$021 + $18 | 0, $4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $15 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) {
  $14 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
  $15 = HEAP32[$0 + 4 >> 2] | 0;
 } else {
  $14 = 10;
  $15 = $5 & 255;
 }
 if (($14 - $15 | 0) >>> 0 < $2 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $14, $15 + $2 - $14 | 0, $15, $15, 0, $2, $1); else if ($2 | 0) {
  if ($6) $20 = HEAP32[$0 >> 2] | 0; else $20 = $0;
  __ZNSt3__211char_traitsIcE4copyEPcPKcj($20 + $15 | 0, $1, $2) | 0;
  $21 = $15 + $2 | 0;
  if ((HEAP8[$4 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $21; else HEAP8[$4 >> 0] = $21;
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($20 + $21 | 0, $3);
 }
 STACKTOP = sp;
 return $0 | 0;
}

function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $26 = 0, $29 = 0, $7 = 0, $phitmp = 0;
 do if (!$0) {
  if (!(HEAP32[583] | 0)) $29 = 0; else $29 = _fflush(HEAP32[583] | 0) | 0;
  $12 = ___ofl_lock() | 0;
  $$02325 = HEAP32[$12 >> 2] | 0;
  if (!$$02325) $$024$lcssa = $29; else {
   $$02327 = $$02325;
   $$02426 = $29;
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) $26 = ___lockfile($$02327) | 0; else $26 = 0;
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) $$1 = ___fflush_unlocked($$02327) | 0 | $$02426; else $$1 = $$02426;
    if ($26 | 0) ___unlockfile($$02327);
    $$02327 = HEAP32[$$02327 + 56 >> 2] | 0;
    if (!$$02327) {
     $$024$lcssa = $$1;
     break;
    } else $$02426 = $$1;
   }
  }
  ___ofl_unlock();
  $$0 = $$024$lcssa;
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
   $$0 = ___fflush_unlocked($0) | 0;
   break;
  }
  $phitmp = (___lockfile($0) | 0) == 0;
  $7 = ___fflush_unlocked($0) | 0;
  if ($phitmp) $$0 = $7; else {
   ___unlockfile($0);
   $$0 = $7;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE14__erase_uniqueIiEEjRKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$byval_copy = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $2 = sp;
 $3 = __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_($0, $1) | 0;
 if (!$3) $$0 = 0; else {
  HEAP32[$2 >> 2] = $3;
  HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
  __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEE($0, $$byval_copy) | 0;
  $$0 = 1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$sroa$speculated = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0;
 if ((-17 - $1 | 0) >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) $22 = HEAP32[$0 >> 2] | 0; else $22 = $0;
 if ($1 >>> 0 < 2147483623) {
  $13 = $2 + $1 | 0;
  $14 = $1 << 1;
  $$sroa$speculated = $13 >>> 0 < $14 >>> 0 ? $14 : $13;
  $19 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $19 = -17;
 $20 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($19) | 0;
 if ($4 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($20, $22, $4) | 0;
 $23 = $3 - $4 | 0;
 if ($23 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($20 + $4 + $5 | 0, $22 + $4 | 0, $23) | 0;
 if (($1 | 0) != 10) __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($22);
 HEAP32[$0 >> 2] = $20;
 HEAP32[$0 + 8 >> 2] = $19 | -2147483648;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $13 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) $11 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; else $11 = 10;
 do if ($11 >>> 0 < $2 >>> 0) {
  if ($6) $23 = HEAP32[$0 + 4 >> 2] | 0; else $23 = $5 & 255;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $11, $2 - $11 | 0, $23, 0, $23, $2, $1);
 } else {
  if ($6) $13 = HEAP32[$0 >> 2] | 0; else $13 = $0;
  __ZNSt3__211char_traitsIcE4moveEPcPKcj($13, $1, $2) | 0;
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($13 + $2 | 0, $3);
  if ((HEAP8[$4 >> 0] | 0) < 0) {
   HEAP32[$0 + 4 >> 2] = $2;
   break;
  } else {
   HEAP8[$4 >> 0] = $2;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy = sp + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 $4 = HEAP32[$1 >> 2] | 0;
 $6 = HEAP32[$4 >> 2] | 0;
 HEAP32[$3 >> 2] = $4;
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
 __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6removeENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEE($2, $0, $$byval_copy);
 $7 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = 0;
 if ($7 | 0) {
  if (HEAP8[$2 + 8 >> 0] | 0) __ZNSt3__24pairIKi12arControllerED2Ev($7 + 8 | 0);
  __ZdlPv($7);
 }
 STACKTOP = sp;
 return $6 | 0;
}

function _icpGetJ_U_S($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$024 = 0, $$025 = 0, $$026 = 0, $15 = 0.0, $16 = 0.0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 $4 = sp + 72 | 0;
 $5 = sp + 24 | 0;
 $6 = sp;
 _icpGetJ_Xc_S($4, $6, $2, $3);
 L1 : do if ((_icpGetJ_U_Xc($5, $1, $6) | 0) < 0) {
  _arLog(0, 3, 4669, sp + 216 | 0);
  $$026 = -1;
 } else {
  $$024 = 0;
  while (1) {
   if (($$024 | 0) == 2) {
    $$026 = 0;
    break L1;
   }
   $$025 = 0;
   while (1) {
    if (($$025 | 0) == 6) break;
    $9 = $0 + ($$024 * 48 | 0) + ($$025 << 3) | 0;
    HEAPF64[$9 >> 3] = 0.0;
    $$0 = 0;
    $16 = 0.0;
    while (1) {
     if (($$0 | 0) == 3) break;
     $15 = $16 + +HEAPF64[$5 + ($$024 * 24 | 0) + ($$0 << 3) >> 3] * +HEAPF64[$4 + ($$0 * 48 | 0) + ($$025 << 3) >> 3];
     HEAPF64[$9 >> 3] = $15;
     $$0 = $$0 + 1 | 0;
     $16 = $15;
    }
    $$025 = $$025 + 1 | 0;
   }
   $$024 = $$024 + 1 | 0;
  }
 } while (0);
 STACKTOP = sp;
 return $$026 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_12DbC2ILj4096EEERNS0_5arenaIXT_EEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EEC2ERNS0_5arenaILj4096EEE($2, $1);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($2, $1);
 __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEC2EjRKS6_RKS7_($0 + 16 | 0, $2);
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($2, $1);
 __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEEC2EjRKS8_RKS9_($0 + 32 | 0, $2);
 STACKTOP = sp;
 return;
}

function _addMarker($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $10 = 0, $12 = 0, $2 = 0, $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $2 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $2) | 0)) $$1 = -1; else {
  $5 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $2) | 0;
  if ((HEAP8[$1 + 11 >> 0] | 0) < 0) $12 = HEAP32[$1 >> 2] | 0; else $12 = $1;
  $10 = $5 + 260 | 0;
  if (!(__ZL10loadMarkerPKcPiP8ARHandlePP12ARPattHandle($12, $10, $5 + 220 | 0) | 0)) {
   _arLog(0, 3, 9968, $vararg_buffer);
   $$1 = -1;
   break;
  } else {
   $$1 = HEAP32[$10 >> 2] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_unscoped_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$026$off0 = 0, $$027 = 0, $$1 = 0, $12 = 0, $17 = 0, $18 = 0, $21 = 0;
 if (($1 - $0 | 0) > 1) {
  if ((HEAP8[$0 >> 0] | 0) == 83) if ((HEAP8[$0 + 1 >> 0] | 0) == 116) {
   $12 = $0 + 2 | 0;
   if (($12 | 0) == ($1 | 0)) {
    $$026$off0 = 0;
    $$027 = $1;
   } else {
    $$026$off0 = 0;
    $$027 = (HEAP8[$12 >> 0] | 0) == 76 ? $0 + 3 | 0 : $12;
   }
  } else {
   $$026$off0 = 1;
   $$027 = $0;
  } else {
   $$026$off0 = 1;
   $$027 = $0;
  }
  $17 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($$027, $1, $2) | 0;
  $18 = ($17 | 0) == ($$027 | 0);
  if ($$026$off0 | $18) $$1 = $18 ? $0 : $17; else {
   $21 = HEAP32[$2 + 4 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($21 | 0)) $$1 = $0; else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($21 + -24 | 0, 0, 15413) | 0;
    $$1 = $17;
   }
  }
 } else $$1 = $0;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$3 = 0, $12 = 0, $13 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0;
 L1 : do if (($0 | 0) == ($1 | 0)) $$3 = $0; else {
  switch (HEAP8[$0 >> 0] | 0) {
  case 104:
   {
    $5 = $0 + 1 | 0;
    $6 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($5, $1) | 0;
    if (($6 | 0) == ($5 | 0) | ($6 | 0) == ($1 | 0)) {
     $$3 = $0;
     break L1;
    }
    return ((HEAP8[$6 >> 0] | 0) == 95 ? $6 + 1 | 0 : $0) | 0;
   }
  case 118:
   break;
  default:
   {
    $$3 = $0;
    break L1;
   }
  }
  $12 = $0 + 1 | 0;
  $13 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($12, $1) | 0;
  if (($13 | 0) == ($12 | 0) | ($13 | 0) == ($1 | 0)) $$3 = $0; else if ((HEAP8[$13 >> 0] | 0) == 95) {
   $18 = $13 + 1 | 0;
   $19 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($18, $1) | 0;
   if (($19 | 0) == ($18 | 0) | ($19 | 0) == ($1 | 0)) $$3 = $0; else $$3 = (HEAP8[$19 >> 0] | 0) == 95 ? $19 + 1 | 0 : $0;
  } else $$3 = $0;
 } while (0);
 return $$3 | 0;
}

function _arUtilMatInv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$030 = 0, $$1 = 0, $$131 = 0, $11 = 0, $12 = 0, $14 = 0, $2 = 0, $3 = 0;
 $2 = _arMatrixAlloc(4, 4) | 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 3) break;
  $3 = $$0 << 2;
  $$030 = 0;
  while (1) {
   if (($$030 | 0) == 4) break;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + ($$030 + $3 << 3) >> 3] = +HEAPF64[$0 + ($$0 << 5) + ($$030 << 3) >> 3];
   $$030 = $$030 + 1 | 0;
  }
  $$0 = $$0 + 1 | 0;
 }
 $11 = HEAP32[$2 >> 2] | 0;
 $12 = $11 + 96 | 0;
 HEAP32[$12 >> 2] = 0;
 HEAP32[$12 + 4 >> 2] = 0;
 HEAP32[$12 + 8 >> 2] = 0;
 HEAP32[$12 + 12 >> 2] = 0;
 HEAP32[$12 + 16 >> 2] = 0;
 HEAP32[$12 + 20 >> 2] = 0;
 HEAPF64[$11 + 120 >> 3] = 1.0;
 _arMatrixSelfInv($2) | 0;
 $$1 = 0;
 while (1) {
  if (($$1 | 0) == 3) break;
  $14 = $$1 << 2;
  $$131 = 0;
  while (1) {
   if (($$131 | 0) == 4) break;
   HEAPF64[$1 + ($$1 << 5) + ($$131 << 3) >> 3] = +HEAPF64[(HEAP32[$2 >> 2] | 0) + ($$131 + $14 << 3) >> 3];
   $$131 = $$131 + 1 | 0;
  }
  $$1 = $$1 + 1 | 0;
 }
 _arMatrixFree($2) | 0;
 return 0;
}

function _detectMarker($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $6 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $1 = sp + 40 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $1) | 0)) $$0 = HEAP32[489] | 0; else {
  $6 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $1) | 0;
  dest = $2;
  stop = dest + 40 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$2 >> 2] = HEAP32[$6 + 196 >> 2];
  HEAP32[$2 + 16 >> 2] = 1;
  HEAP32[$2 + 12 >> 2] = HEAP32[$6 + 204 >> 2];
  $$0 = _arDetectMarker(HEAP32[$6 + 216 >> 2] | 0, $2) | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _getTransMatSquareCont($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $3 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 HEAP32[$3 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $3) | 0)) $$1 = HEAP32[489] | 0; else {
  $7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $3) | 0;
  $9 = HEAP32[$7 + 216 >> 2] | 0;
  if ((HEAP32[$9 + 44 >> 2] | 0) > ($1 | 0)) {
   +_arGetTransMatSquareCont(HEAP32[$7 + 228 >> 2] | 0, ($1 | 0) < 0 ? 17e3 : $9 + 48 + ($1 << 8) | 0, 17256, +($2 | 0), 17256);
   $$1 = 0;
   break;
  } else {
   $$1 = HEAP32[491] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $3 = 0, $6 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) $$2 = 1; else if (!$1) $$2 = 0; else {
  $6 = ___dynamic_cast($1, 216, 200, 0) | 0;
  if (!$6) $$2 = 0; else {
   dest = $3 + 4 | 0;
   stop = dest + 52 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP32[$3 >> 2] = $6;
   HEAP32[$3 + 8 >> 2] = $0;
   HEAP32[$3 + 12 >> 2] = -1;
   HEAP32[$3 + 48 >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 3]($6, $3, HEAP32[$2 >> 2] | 0, 1);
   if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
    HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2];
    $$0 = 1;
   } else $$0 = 0;
   $$2 = $$0;
  }
 }
 STACKTOP = sp;
 return $$2 | 0;
}

function _getTransMatSquare($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $3 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 HEAP32[$3 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $3) | 0)) $$1 = HEAP32[489] | 0; else {
  $7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $3) | 0;
  $9 = HEAP32[$7 + 216 >> 2] | 0;
  if ((HEAP32[$9 + 44 >> 2] | 0) > ($1 | 0)) {
   +_arGetTransMatSquare(HEAP32[$7 + 228 >> 2] | 0, ($1 | 0) < 0 ? 17e3 : $9 + 48 + ($1 << 8) | 0, +($2 | 0), 17256);
   $$1 = 0;
   break;
  } else {
   $$1 = HEAP32[491] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $33 = 0, $7 = 0, $8 = 0, label = 0;
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) label = 3; else if (!(___lockfile($1) | 0)) label = 3; else {
  $20 = $0 & 255;
  $21 = $0 & 255;
  if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) label = 10; else {
   $26 = $1 + 20 | 0;
   $27 = HEAP32[$26 >> 2] | 0;
   if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
    HEAP32[$26 >> 2] = $27 + 1;
    HEAP8[$27 >> 0] = $20;
    $33 = $21;
   } else label = 10;
  }
  if ((label | 0) == 10) $33 = ___overflow($1, $0) | 0;
  ___unlockfile($1);
  $$0 = $33;
 }
 do if ((label | 0) == 3) {
  $7 = $0 & 255;
  $8 = $0 & 255;
  if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
   $13 = $1 + 20 | 0;
   $14 = HEAP32[$13 >> 2] | 0;
   if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
    HEAP32[$13 >> 2] = $14 + 1;
    HEAP8[$14 >> 0] = $7;
    $$0 = $8;
    break;
   }
  }
  $$0 = ___overflow($1, $0) | 0;
 } while (0);
 return $$0 | 0;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1;
 do if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
  HEAP8[$1 + 52 >> 0] = 1;
  $10 = $1 + 16 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  if (!$11) {
   HEAP32[$10 >> 2] = $2;
   HEAP32[$1 + 24 >> 2] = $4;
   HEAP32[$1 + 36 >> 2] = 1;
   if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[$1 + 54 >> 0] = 1;
   break;
  }
  if (($11 | 0) != ($2 | 0)) {
   $30 = $1 + 36 | 0;
   HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1;
   HEAP8[$1 + 54 >> 0] = 1;
   break;
  }
  $21 = $1 + 24 | 0;
  $22 = HEAP32[$21 >> 2] | 0;
  if (($22 | 0) == 2) {
   HEAP32[$21 >> 2] = $4;
   $28 = $4;
  } else $28 = $22;
  if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) HEAP8[$1 + 54 >> 0] = 1;
 } while (0);
 return;
}

function __ZNSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $5 = 0, $7 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $7 = (HEAP32[$3 >> 2] | 0) - $2 | 0;
 $11 = (HEAP32[$5 >> 2] | 0) + (0 - ($7 >> 3) << 3) | 0;
 HEAP32[$5 >> 2] = $11;
 if (($7 | 0) > 0) {
  _memcpy($11 | 0, $2 | 0, $7 | 0) | 0;
  $$pre$phiZ2D = $5;
  $15 = HEAP32[$5 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $5;
  $15 = $11;
 }
 $14 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $15;
 HEAP32[$$pre$phiZ2D >> 2] = $14;
 $16 = $1 + 8 | 0;
 $17 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$16 >> 2] = $17;
 $19 = $0 + 8 | 0;
 $20 = $1 + 12 | 0;
 $21 = HEAP32[$19 >> 2] | 0;
 HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$20 >> 2] = $21;
 HEAP32[$1 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $$0$i = HEAP32[$3 >> 2] | 0;
 while (1) {
  if (($$0$i | 0) == ($2 | 0)) break;
  $9 = $$0$i + -24 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_((HEAP32[$5 >> 2] | 0) + -24 | 0, $9);
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -24;
  $$0$i = $9;
 }
 $12 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$5 >> 2] = $12;
 $14 = $1 + 8 | 0;
 $15 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$14 >> 2] = $15;
 $17 = $0 + 8 | 0;
 $18 = $1 + 12 | 0;
 $19 = HEAP32[$17 >> 2] | 0;
 HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$18 >> 2] = $19;
 HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
 return;
}

function _setMarkerInfoDir($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 HEAP32[$3 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $3) | 0)) $$1 = HEAP32[489] | 0; else {
  $8 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $3) | 0) + 216 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  if ((HEAP32[$9 + 44 >> 2] | 0) > ($1 | 0)) {
   HEAP32[(($1 | 0) < 0 ? 17e3 : $9 + 48 + ($1 << 8) | 0) + 16 >> 2] = $2;
   $$1 = 0;
   break;
  } else {
   $$1 = HEAP32[491] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _atoi($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$010$lcssa = 0, $$01015 = 0, $$011 = 0, $$1 = 0, $$112 = 0, $$214 = 0, $$pre$phiZ2D = 0, $14 = 0, $5 = 0, $7 = 0, label = 0;
 $$011 = $0;
 while (1) {
  $5 = $$011 + 1 | 0;
  if (!(_isspace(HEAP8[$$011 >> 0] | 0) | 0)) break; else $$011 = $5;
 }
 $7 = HEAP8[$$011 >> 0] | 0;
 switch ($7 | 0) {
 case 45:
  {
   $$0 = 1;
   label = 5;
   break;
  }
 case 43:
  {
   $$0 = 0;
   label = 5;
   break;
  }
 default:
  {
   $$1 = 0;
   $$112 = $$011;
   $$pre$phiZ2D = $7;
  }
 }
 if ((label | 0) == 5) {
  $$1 = $$0;
  $$112 = $5;
  $$pre$phiZ2D = HEAP8[$5 >> 0] | 0;
 }
 if (!(_isdigit($$pre$phiZ2D) | 0)) $$010$lcssa = 0; else {
  $$01015 = 0;
  $$214 = $$112;
  while (1) {
   $14 = ($$01015 * 10 | 0) + 48 - (HEAP8[$$214 >> 0] | 0) | 0;
   $$214 = $$214 + 1 | 0;
   if (!(_isdigit(HEAP8[$$214 >> 0] | 0) | 0)) {
    $$010$lcssa = $14;
    break;
   } else $$01015 = $14;
  }
 }
 return (($$1 | 0) == 0 ? 0 - $$010$lcssa | 0 : $$010$lcssa) | 0;
}

function _loadCamera($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $vararg_buffer1 = sp + 192 | 0;
 $vararg_buffer = sp + 184 | 0;
 $1 = sp;
 $2 = $0 + 11 | 0;
 if ((HEAP8[$2 >> 0] | 0) < 0) $6 = HEAP32[$0 >> 2] | 0; else $6 = $0;
 if ((_arParamLoad($6, 1, $1, $vararg_buffer) | 0) < 0) {
  if ((HEAP8[$2 >> 0] | 0) < 0) $12 = HEAP32[$0 >> 2] | 0; else $12 = $0;
  HEAP32[$vararg_buffer1 >> 2] = $12;
  _arLog(0, 3, 9828, $vararg_buffer1);
  $$0 = -1;
 } else {
  $13 = HEAP32[4349] | 0;
  HEAP32[4349] = $13 + 1;
  HEAP32[$vararg_buffer >> 2] = $13;
  _memcpy(__ZNSt3__213unordered_mapIi7ARParamNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17376, $vararg_buffer) | 0, $1 | 0, 184) | 0;
  $$0 = HEAP32[$vararg_buffer >> 2] | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); else if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
  if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
   $13 = $1 + 20 | 0;
   if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
    HEAP32[$1 + 32 >> 2] = $3;
    HEAP32[$13 >> 2] = $2;
    $19 = $1 + 40 | 0;
    HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
    if ((HEAP32[$1 + 36 >> 2] | 0) == 1) if ((HEAP32[$1 + 24 >> 2] | 0) == 2) HEAP8[$1 + 54 >> 0] = 1;
    HEAP32[$1 + 44 >> 2] = 4;
    break;
   }
  }
  if (($3 | 0) == 1) HEAP32[$1 + 32 >> 2] = 1;
 } while (0);
 return;
}

function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $1 = 0, $10 = 0, $19 = 0, $22 = 0, $6 = 0, label = 0;
 $1 = $0;
 L1 : do if (!($1 & 3)) {
  $$015$lcssa = $0;
  label = 5;
 } else {
  $$01518 = $0;
  $22 = $1;
  while (1) {
   if (!(HEAP8[$$01518 >> 0] | 0)) {
    $$pn = $22;
    break L1;
   }
   $6 = $$01518 + 1 | 0;
   $22 = $6;
   if (!($22 & 3)) {
    $$015$lcssa = $6;
    label = 5;
    break;
   } else $$01518 = $6;
  }
 } while (0);
 if ((label | 0) == 5) {
  $$0 = $$015$lcssa;
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0;
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) $$0 = $$0 + 4 | 0; else break;
  }
  if (!(($10 & 255) << 24 >> 24)) $$1$lcssa = $$0; else {
   $$pn29 = $$0;
   while (1) {
    $19 = $$pn29 + 1 | 0;
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19;
     break;
    } else $$pn29 = $19;
   }
  }
  $$pn = $$1$lcssa;
 }
 return $$pn - $1 | 0;
}

function _setPattRatio($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $10 = 0, $2 = 0, $5 = 0, $8 = 0.0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $2 = sp + 8 | 0;
 HEAP32[$2 >> 2] = $0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $2) | 0) {
  $5 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $2) | 0;
  if (!($1 <= 0.0 | $1 >= 1.0)) {
   $8 = $1;
   $10 = HEAP32[$5 + 216 >> 2] | 0;
   if ($10 | 0) if (!(_arSetPattRatio($10, $8) | 0)) {
    HEAPF64[$vararg_buffer >> 3] = $8;
    _arLog(0, 1, 7949, $vararg_buffer);
   }
  }
 }
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $9 = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); else {
  $9 = HEAP32[$0 + 12 >> 2] | 0;
  $10 = $0 + 16 + ($9 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3);
  if (($9 | 0) > 1) {
   $13 = $1 + 54 | 0;
   $$0 = $0 + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3);
    if (HEAP8[$13 >> 0] | 0) break L1;
    $$0 = $$0 + 8 | 0;
   } while ($$0 >>> 0 < $10 >>> 0);
  }
 } while (0);
 return;
}

function _setDebugMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $6 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $2 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $2) | 0)) $$0 = 0; else {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $2) | 0) + 216 | 0;
  $8 = ($1 | 0) != 0;
  _arSetDebugMode(HEAP32[$6 >> 2] | 0, $8 & 1) | 0;
  HEAP32[$vararg_buffer >> 2] = $8 ? 8083 : 8087;
  _arLog(0, 1, 8092, $vararg_buffer);
  $$0 = $1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _getMultiMarkerNum($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $10 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $2) | 0)) $$1 = -1; else {
  $5 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $2) | 0;
  if (($1 | 0) < 0) $$1 = -1; else {
   $10 = HEAP32[$5 + 248 >> 2] | 0;
   if ((HEAP32[$5 + 252 >> 2] | 0) - $10 >> 3 >>> 0 > $1 >>> 0) $$1 = HEAP32[(HEAP32[$10 + ($1 << 3) + 4 >> 2] | 0) + 4 >> 2] | 0; else $$1 = -1;
  }
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function _cycle($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$02527 = 0, $$026 = 0, $10 = 0, $11 = 0, $18 = 0, $3 = 0, $5 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $3 = sp;
 L1 : do if (($2 | 0) >= 2) {
  $5 = $1 + ($2 << 2) | 0;
  HEAP32[$5 >> 2] = $3;
  if ($0 | 0) {
   $$02527 = $0;
   $10 = $3;
   while (1) {
    $8 = $$02527 >>> 0 < 256 ? $$02527 : 256;
    _memcpy($10 | 0, HEAP32[$1 >> 2] | 0, $8 | 0) | 0;
    $$026 = 0;
    do {
     $11 = $1 + ($$026 << 2) | 0;
     $$026 = $$026 + 1 | 0;
     _memcpy(HEAP32[$11 >> 2] | 0, HEAP32[$1 + ($$026 << 2) >> 2] | 0, $8 | 0) | 0;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + $8;
    } while (($$026 | 0) != ($2 | 0));
    $18 = $$02527 - $8 | 0;
    if (!$18) break L1;
    $$02527 = $18;
    $10 = HEAP32[$5 >> 2] | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($0) {
 $0 = $0 | 0;
 var $$sroa$speculated = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = $0 + 11 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 if ($3 << 24 >> 24 < 0) {
  $10 = HEAP32[$0 + 4 >> 2] | 0;
  $14 = HEAP32[$0 >> 2] | 0;
 } else {
  $10 = $3 & 255;
  $14 = $0;
 }
 $$sroa$speculated = ($10 | 0) != 0 & 1;
 $11 = $10 - $$sroa$speculated | 0;
 if (!$11) $16 = $3; else {
  __ZNSt3__211char_traitsIcE4moveEPcPKcj($14, $14 + $$sroa$speculated | 0, $11) | 0;
  $16 = HEAP8[$2 >> 0] | 0;
 }
 if ($16 << 24 >> 24 < 0) HEAP32[$0 + 4 >> 2] = $11; else HEAP8[$2 >> 0] = $11;
 HEAP8[$1 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($14 + $11 | 0, $1);
 STACKTOP = sp;
 return;
}

function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = $1 & 255;
 HEAP8[$2 >> 0] = $3;
 $4 = $0 + 16 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (!$5) if (!(___towrite($0) | 0)) {
  $12 = HEAP32[$4 >> 2] | 0;
  label = 4;
 } else $$0 = -1; else {
  $12 = $5;
  label = 4;
 }
 do if ((label | 0) == 4) {
  $9 = $0 + 20 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  if ($10 >>> 0 < $12 >>> 0) {
   $13 = $1 & 255;
   if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
    HEAP32[$9 >> 2] = $10 + 1;
    HEAP8[$10 >> 0] = $3;
    $$0 = $13;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 15]($0, $2, 1) | 0) == 1) $$0 = HEAPU8[$2 >> 0] | 0; else $$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $11 = 0, $12 = 0, $5 = 0, $6 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $5 = $1 + 11 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $11 = $6 << 24 >> 24 < 0 ? HEAP32[$1 + 4 >> 2] | 0 : $6 & 255;
 $12 = __ZNSt3__211char_traitsIcE6lengthEPKc($2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($0, (HEAP8[$5 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1, $11, $11 + $12 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0, $2, $12) | 0;
 return;
}

function __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $12 = 0, $5 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $5 = __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0;
 $6 = $2 + 11 | 0;
 $7 = HEAP8[$6 >> 0] | 0;
 $12 = $7 << 24 >> 24 < 0 ? HEAP32[$2 + 4 >> 2] | 0 : $7 & 255;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($0, $1, $5, $12 + $5 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0, (HEAP8[$6 >> 0] | 0) < 0 ? HEAP32[$2 >> 2] | 0 : $2, $12) | 0;
 return;
}

function _getPattRatio($0) {
 $0 = $0 | 0;
 var $$0 = 0.0, $$1 = 0.0, $1 = 0, $10 = 0, $2 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp + 8 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $1) | 0)) $$1 = -1.0; else {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $1) | 0) + 216 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  if (!$7) $$0 = -1.0; else {
   $10 = (_arGetPattRatio($7, $2) | 0) == 0;
   $$0 = $10 ? +HEAPF64[$2 >> 3] : -1.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;
 return +$$1;
}

function _arPattDeleteHandle($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$024 = 0, $$025 = 0, $12 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 if (!$0) $$025 = -1; else {
  $2 = $0 + 4 | 0;
  $3 = $0 + 8 | 0;
  $4 = $0 + 12 | 0;
  $5 = $0 + 20 | 0;
  $$024 = 0;
  while (1) {
   if (($$024 | 0) >= (HEAP32[$2 >> 2] | 0)) break;
   if (HEAP32[(HEAP32[$3 >> 2] | 0) + ($$024 << 2) >> 2] | 0) _arPattFree($0, $$024) | 0;
   $12 = $$024 << 2;
   $$0 = 0;
   while (1) {
    if (($$0 | 0) == 4) break;
    $14 = $$0 + $12 | 0;
    _free(HEAP32[(HEAP32[$4 >> 2] | 0) + ($14 << 2) >> 2] | 0);
    _free(HEAP32[(HEAP32[$5 >> 2] | 0) + ($14 << 2) >> 2] | 0);
    $$0 = $$0 + 1 | 0;
   }
   $$024 = $$024 + 1 | 0;
  }
  _free(HEAP32[$4 >> 2] | 0);
  _free(HEAP32[$5 >> 2] | 0);
  _free(HEAP32[$3 >> 2] | 0);
  _free(HEAP32[$0 + 16 >> 2] | 0);
  _free(HEAP32[$0 + 24 >> 2] | 0);
  _free($0);
  $$025 = 0;
 }
 return $$025 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 if ($3 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($3 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $2;
  $$0 = $0;
 } else {
  $10 = $3 + 16 & -16;
  $11 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($10) | 0;
  HEAP32[$0 >> 2] = $11;
  HEAP32[$0 + 8 >> 2] = $10 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $2;
  $$0 = $11;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0, $1, $2) | 0;
 HEAP8[$4 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + $2 | 0, $4);
 STACKTOP = sp;
 return;
}

function _arImageProcLumaHistAndCDFAndPercentile($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 var $$0 = 0, $$024 = 0, $$025 = 0, $15 = 0, $16 = 0, $18 = 0, $22 = 0, $23 = 0, $6 = 0;
 if ($2 < 0.0 | $2 > 1.0) $$025 = -1; else {
  $6 = _arImageProcLumaHistAndCDF($0, $1) | 0;
  if (($6 | 0) < 0) $$025 = $6; else {
   $15 = ~~(+(Math_imul(HEAP32[$0 + 8 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0) | 0) * $2) >>> 0;
   $$024 = 0;
   while (1) {
    $16 = $$024 & 255;
    $18 = HEAP32[$0 + 1036 + ($16 << 2) >> 2] | 0;
    if ($18 >>> 0 < $15 >>> 0) $$024 = $$024 + 1 << 24 >> 24; else break;
   }
   $$0 = $$024;
   $22 = $18;
   while (1) {
    $23 = $$0 + 1 << 24 >> 24;
    if (($22 | 0) != ($15 | 0)) break;
    $$0 = $23;
    $22 = HEAP32[$0 + 1036 + (($23 & 255) << 2) >> 2] | 0;
   }
   HEAP8[$3 >> 0] = (($$0 & 255) + $16 | 0) >>> 1;
   $$025 = 0;
  }
 }
 return $$025 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0;
 L1 : do if (($0 | 0) == ($1 | 0)) $$1 = $0; else switch (HEAP8[$0 >> 0] | 0) {
 case 68:
 case 67:
  {
   $$1 = __ZN10__cxxabiv112_GLOBAL__N_120parse_ctor_dtor_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   break L1;
   break;
  }
 case 85:
  {
   $$1 = __ZN10__cxxabiv112_GLOBAL__N_123parse_unnamed_type_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   break L1;
   break;
  }
 case 57:
 case 56:
 case 55:
 case 54:
 case 53:
 case 52:
 case 51:
 case 50:
 case 49:
  {
   $$1 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   break L1;
   break;
  }
 default:
  return __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
 } while (0);
 return $$1 | 0;
}

function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $$115$ph = 0, $6 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0;
 while (1) {
  if ((HEAPU8[12570 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 4;
   break;
  }
  $6 = $$016 + 1 | 0;
  if (($6 | 0) == 87) {
   $$115$ph = 87;
   label = 5;
   break;
  } else $$016 = $6;
 }
 if ((label | 0) == 4) if (!$$016) $$012$lcssa = 12658; else {
  $$115$ph = $$016;
  label = 5;
 }
 if ((label | 0) == 5) {
  $$01214 = 12658;
  $$115 = $$115$ph;
  while (1) {
   $$113 = $$01214;
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0;
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0;
   if (!$$115) {
    $$012$lcssa = $$113;
    break;
   } else $$01214 = $$113;
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0;
}

function _setPatternDetectionMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $2 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $2) | 0) {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $2) | 0) + 216 | 0;
  if (!(_arSetPatternDetectionMode(HEAP32[$6 >> 2] | 0, $1) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $1;
   _arLog(0, 1, 7980, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function _setThreshold($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $2 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $2) | 0) {
  $5 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $2) | 0;
  if ($1 >>> 0 <= 255) if (!(_arSetLabelingThresh(HEAP32[$5 + 216 >> 2] | 0, $1) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $1;
   _arLog(0, 1, 8015, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if ($2 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($2 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $2;
  $$0 = $0;
 } else {
  $9 = $2 + 16 & -16;
  $10 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($9) | 0;
  HEAP32[$0 >> 2] = $10;
  HEAP32[$0 + 8 >> 2] = $9 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $2;
  $$0 = $10;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0, $1, $2) | 0;
 HEAP8[$3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + $2 | 0, $3);
 STACKTOP = sp;
 return;
}

function _setThresholdMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $2 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $2) | 0) {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $2) | 0) + 216 | 0;
  if (!(_arSetLabelingThreshMode(HEAP32[$6 >> 2] | 0, $1) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $1;
   _arLog(0, 1, 8041, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function _byteswap($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$020 = 0, $$1 = 0, $1 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 $1 = sp;
 _byteSwapInt($0, $1);
 _byteSwapInt($0 + 4 | 0, $1 + 4 | 0);
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 3) break;
  $$020 = 0;
  while (1) {
   if (($$020 | 0) == 4) break;
   _byteSwapDouble($0 + 8 + ($$0 << 5) + ($$020 << 3) | 0, $1 + 8 + ($$0 << 5) + ($$020 << 3) | 0);
   $$020 = $$020 + 1 | 0;
  }
  $$0 = $$0 + 1 | 0;
 }
 $8 = $0 + 176 | 0;
 $$1 = 0;
 while (1) {
  $9 = HEAP32[$8 >> 2] | 0;
  if (($$1 | 0) >= (HEAP32[1904 + ($9 + -1 << 3) >> 2] | 0)) break;
  _byteSwapDouble($0 + 104 + ($$1 << 3) | 0, $1 + 104 + ($$1 << 3) | 0);
  $$1 = $$1 + 1 | 0;
 }
 HEAP32[$1 + 176 >> 2] = $9;
 _memcpy($0 | 0, $1 | 0, 184) | 0;
 STACKTOP = sp;
 return;
}

function _setImageProcMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $2 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $2) | 0) {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $2) | 0) + 216 | 0;
  if (!(_arSetImageProcMode(HEAP32[$6 >> 2] | 0, $1) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $1;
   _arLog(0, 1, 7890, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function _setLabelingMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $2 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $2) | 0) {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $2) | 0) + 216 | 0;
  if (!(_arSetLabelingMode(HEAP32[$6 >> 2] | 0, $1) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $1;
   _arLog(0, 1, 7919, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal7InvokerIiJiNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFiiS8_EiPNS0_11BindingTypeIS8_EUt_E($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp + 12 | 0;
 $4 = sp;
 $5 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1) | 0;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($4, $2);
 $6 = FUNCTION_TABLE_iii[$0 & 15]($5, $4) | 0;
 HEAP32[$3 >> 2] = $6;
 $7 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($3) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 STACKTOP = sp;
 return $7 | 0;
}

function _scalbn($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0.0, $5 = 0, $7 = 0;
 if (($1 | 0) > 1023) {
  $3 = $0 * 8988465674311579538646525.0e283;
  $5 = ($1 | 0) > 2046;
  $7 = $1 + -2046 | 0;
  $$0 = $5 ? $3 * 8988465674311579538646525.0e283 : $3;
  $$020 = $5 ? (($7 | 0) < 1023 ? $7 : 1023) : $1 + -1023 | 0;
 } else if (($1 | 0) < -1022) {
  $10 = $0 * 2.2250738585072014e-308;
  $12 = ($1 | 0) < -2044;
  $14 = $1 + 2044 | 0;
  $$0 = $12 ? $10 * 2.2250738585072014e-308 : $10;
  $$020 = $12 ? (($14 | 0) > -1022 ? $14 : -1022) : $1 + 1022 | 0;
 } else {
  $$0 = $0;
  $$020 = $1;
 }
 $17 = _bitshift64Shl($$020 + 1023 | 0, 0, 52) | 0;
 $18 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = $17;
 HEAP32[tempDoublePtr + 4 >> 2] = $18;
 return +($$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function _getPatternDetectionMode($0) {
 $0 = $0 | 0;
 var $$1 = 0, $1 = 0, $2 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = sp + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $1) | 0)) $$1 = -1; else {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $1) | 0) + 216 | 0;
  $9 = (_arGetPatternDetectionMode(HEAP32[$6 >> 2] | 0, $2) | 0) == 0;
  $$1 = $9 ? HEAP32[$2 >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZL15loadMultiMarkerPKcP8ARHandlePP12ARPattHandlePP18ARMultiMarkerInfoT($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $5 = _arMultiReadConfigFile($0, HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$3 >> 2] = $5;
 L1 : do if (!$5) {
  _arLog(0, 3, 9941, sp);
  _arPattDeleteHandle(HEAP32[$2 >> 2] | 0) | 0;
  $$0 = 0;
 } else switch (HEAP32[$5 + 108 >> 2] | 0) {
 case 0:
  {
   _arSetPatternDetectionMode($1, 0) | 0;
   $$0 = 1;
   break L1;
   break;
  }
 case 1:
  {
   _arSetPatternDetectionMode($1, 2) | 0;
   $$0 = 1;
   break L1;
   break;
  }
 default:
  {
   _arSetPatternDetectionMode($1, 3) | 0;
   $$0 = 1;
   break L1;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709551616.0, $1);
    $$016 = $9;
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0;
   } else {
    $$016 = $0;
    $storemerge = 0;
   }
   HEAP32[$1 >> 2] = $storemerge;
   $$0 = $$016;
   break;
  }
 case 2047:
  {
   $$0 = $0;
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = $2;
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$$0;
}

function _getThresholdMode($0) {
 $0 = $0 | 0;
 var $$1 = 0, $1 = 0, $2 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = sp + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $1) | 0)) $$1 = -1; else {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $1) | 0) + 216 | 0;
  $9 = (_arGetLabelingThreshMode(HEAP32[$6 >> 2] | 0, $2) | 0) == 0;
  $$1 = $9 ? HEAP32[$2 >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__213__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0, $3 = 0, $6 = 0, $8 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  $3 = $0 + 4 | 0;
  $$0$i$i = HEAP32[$3 >> 2] | 0;
  while (1) {
   if (($$0$i$i | 0) == ($1 | 0)) break;
   $6 = $$0$i$i + -16 | 0;
   __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($6);
   $$0$i$i = $6;
  }
  HEAP32[$3 >> 2] = $1;
  $8 = HEAP32[$0 >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE10deallocateEPS8_j($0 + 12 | 0, $8, (HEAP32[$0 + 8 >> 2] | 0) - $8 >> 4);
 }
 return;
}

function _arMatrixTrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$024 = 0, $$025 = 0, $$026 = 0, $$027 = 0, $$1 = 0, $3 = 0, $8 = 0;
 $3 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if (($3 | 0) == (HEAP32[$1 + 8 >> 2] | 0)) {
  $8 = HEAP32[$0 + 8 >> 2] | 0;
  if (($8 | 0) == (HEAP32[$1 + 4 >> 2] | 0)) {
   $$0 = HEAP32[$0 >> 2] | 0;
   $$026 = 0;
   while (1) {
    if (($$026 | 0) >= ($3 | 0)) {
     $$027 = 0;
     break L1;
    }
    $$024 = (HEAP32[$1 >> 2] | 0) + ($$026 << 3) | 0;
    $$025 = 0;
    $$1 = $$0;
    while (1) {
     if (($$025 | 0) >= ($8 | 0)) break;
     HEAPF64[$$1 >> 3] = +HEAPF64[$$024 >> 3];
     $$024 = $$024 + ($3 << 3) | 0;
     $$025 = $$025 + 1 | 0;
     $$1 = $$1 + 8 | 0;
    }
    $$0 = $$1;
    $$026 = $$026 + 1 | 0;
   }
  } else $$027 = -1;
 } else $$027 = -1; while (0);
 return $$027 | 0;
}

function _getImageProcMode($0) {
 $0 = $0 | 0;
 var $$1 = 0, $1 = 0, $2 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = sp + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $1) | 0)) $$1 = -1; else {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $1) | 0) + 216 | 0;
  $9 = (_arGetImageProcMode(HEAP32[$6 >> 2] | 0, $2) | 0) == 0;
  $$1 = $9 ? HEAP32[$2 >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function _getLabelingMode($0) {
 $0 = $0 | 0;
 var $$1 = 0, $1 = 0, $2 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = sp + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $1) | 0)) $$1 = -1; else {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $1) | 0) + 216 | 0;
  $9 = (_arGetLabelingMode(HEAP32[$6 >> 2] | 0, $2) | 0) == 0;
  $$1 = $9 ? HEAP32[$2 >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function _getThreshold($0) {
 $0 = $0 | 0;
 var $$1 = 0, $1 = 0, $2 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = sp + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $1) | 0)) $$1 = -1; else {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $1) | 0) + 216 | 0;
  $9 = (_arGetLabelingThresh(HEAP32[$6 >> 2] | 0, $2) | 0) == 0;
  $$1 = $9 ? HEAP32[$2 >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0;
 HEAP32[$2 >> 2] = 0;
 if (($0 | 0) == ($1 | 0)) $$2 = $0; else {
  $4 = HEAP8[$0 >> 0] | 0;
  if ($4 << 24 >> 24 == 114) {
   HEAP32[$2 >> 2] = 4;
   $6 = $0 + 1 | 0;
   $$0 = $6;
   $10 = 4;
   $8 = HEAP8[$6 >> 0] | 0;
  } else {
   $$0 = $0;
   $10 = 0;
   $8 = $4;
  }
  if ($8 << 24 >> 24 == 86) {
   $9 = $10 | 2;
   HEAP32[$2 >> 2] = $9;
   $11 = $$0 + 1 | 0;
   $$1 = $11;
   $13 = HEAP8[$11 >> 0] | 0;
   $15 = $9;
  } else {
   $$1 = $$0;
   $13 = $8;
   $15 = $10;
  }
  if ($13 << 24 >> 24 == 75) {
   HEAP32[$2 >> 2] = $15 | 1;
   $$2 = $$1 + 1 | 0;
  } else $$2 = $$1;
 }
 return $$2 | 0;
}

function ___fseeko_unlocked($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$019 = 0, $10 = 0, $12 = 0, label = 0;
 if (($2 | 0) == 1) $$019 = $1 - (HEAP32[$0 + 8 >> 2] | 0) + (HEAP32[$0 + 4 >> 2] | 0) | 0; else $$019 = $1;
 $10 = $0 + 20 | 0;
 $12 = $0 + 28 | 0;
 if ((HEAP32[$10 >> 2] | 0) >>> 0 > (HEAP32[$12 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 15]($0, 0, 0) | 0;
  if (!(HEAP32[$10 >> 2] | 0)) $$0 = -1; else label = 5;
 } else label = 5;
 if ((label | 0) == 5) {
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$10 >> 2] = 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 40 >> 2] & 15]($0, $$019, $2) | 0) < 0) $$0 = -1; else {
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -17;
   $$0 = 0;
  }
 }
 return $$0 | 0;
}

function _icpGetQ_from_S($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink = 0.0, $$sink1 = 0.0, $11 = 0.0, $14 = 0.0, $2 = 0.0, $4 = 0, $5 = 0.0, $8 = 0, $9 = 0.0;
 $2 = +HEAPF64[$1 >> 3];
 $4 = $1 + 8 | 0;
 $5 = +HEAPF64[$4 >> 3];
 $8 = $1 + 16 | 0;
 $9 = +HEAPF64[$8 >> 3];
 $11 = $2 * $2 + $5 * $5 + $9 * $9;
 if ($11 == 0.0) {
  HEAPF64[$0 >> 3] = 1.0;
  HEAPF64[$0 + 8 >> 3] = 0.0;
  $$sink = 0.0;
  $$sink1 = 0.0;
 } else {
  $14 = +Math_sqrt(+$11);
  HEAPF64[$0 >> 3] = $2 / $14;
  HEAPF64[$0 + 8 >> 3] = +HEAPF64[$4 >> 3] / $14;
  $$sink = $14;
  $$sink1 = +HEAPF64[$8 >> 3] / $14;
 }
 HEAPF64[$0 + 16 >> 3] = $$sink1;
 HEAPF64[$0 + 24 >> 3] = $$sink;
 HEAPF64[$0 + 32 >> 3] = +HEAPF64[$1 + 24 >> 3];
 HEAPF64[$0 + 40 >> 3] = +HEAPF64[$1 + 32 >> 3];
 HEAPF64[$0 + 48 >> 3] = +HEAPF64[$1 + 40 >> 3];
 return;
}

function _fclose($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $25 = 0, $27 = 0, $30 = 0, $7 = 0, $8 = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $30 = ___lockfile($0) | 0; else $30 = 0;
 ___unlist_locked_file($0);
 $7 = (HEAP32[$0 >> 2] & 1 | 0) != 0;
 if (!$7) {
  $8 = ___ofl_lock() | 0;
  $10 = HEAP32[$0 + 52 >> 2] | 0;
  $$pre = $0 + 56 | 0;
  if ($10 | 0) HEAP32[$10 + 56 >> 2] = HEAP32[$$pre >> 2];
  $15 = HEAP32[$$pre >> 2] | 0;
  if ($15 | 0) HEAP32[$15 + 52 >> 2] = $10;
  if ((HEAP32[$8 >> 2] | 0) == ($0 | 0)) HEAP32[$8 >> 2] = $15;
  ___ofl_unlock();
 }
 $21 = _fflush($0) | 0;
 $25 = FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 31]($0) | 0 | $21;
 $27 = HEAP32[$0 + 92 >> 2] | 0;
 if ($27 | 0) _free($27);
 if ($7) {
  if ($30 | 0) ___unlockfile($0);
 } else _free($0);
 return $25 | 0;
}

function __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 while (1) {
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) == ($2 | 0)) break;
  $6 = $4 + -16 | 0;
  HEAP32[$3 >> 2] = $6;
  __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($6);
 }
 $7 = HEAP32[$0 >> 2] | 0;
 if ($7 | 0) __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE10deallocateEPS8_j(HEAP32[$0 + 16 >> 2] | 0, $7, (HEAP32[$0 + 12 >> 2] | 0) - $7 >> 4);
 return;
}

function _getMatrixCodeType($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = sp + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $1) | 0)) $$0 = -1; else {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $1) | 0) + 216 | 0;
  _arGetMatrixCodeType(HEAP32[$6 >> 2] | 0, $2) | 0;
  $$0 = HEAP32[$2 >> 2] | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$pn = 0, $$017 = 0, $$2 = 0, $7 = 0, $spec$select = 0;
 L1 : do if (($0 | 0) == ($1 | 0)) $$2 = $0; else {
  $spec$select = (HEAP8[$0 >> 0] | 0) == 110 ? $0 + 1 | 0 : $0;
  if (($spec$select | 0) == ($1 | 0)) $$2 = $0; else {
   $7 = HEAP8[$spec$select >> 0] | 0;
   if ($7 << 24 >> 24 == 48) {
    $$2 = $spec$select + 1 | 0;
    break;
   }
   if (($7 + -49 & 255) < 9) {
    $$0$pn = $spec$select;
    while (1) {
     $$017 = $$0$pn + 1 | 0;
     if (($$017 | 0) == ($1 | 0)) {
      $$2 = $1;
      break L1;
     }
     if (((HEAP8[$$017 >> 0] | 0) + -48 | 0) >>> 0 < 10) $$0$pn = $$017; else {
      $$2 = $$017;
      break;
     }
    }
   } else $$2 = $0;
  }
 } while (0);
 return $$2 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if ($2 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($2 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $2;
  $$0 = $0;
 } else {
  $9 = $2 + 16 & -16;
  $10 = __Znwj($9) | 0;
  HEAP32[$0 >> 2] = $10;
  HEAP32[$0 + 8 >> 2] = $9 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $2;
  $$0 = $10;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0, $1, $2) | 0;
 HEAP8[$3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + $2 | 0, $3);
 STACKTOP = sp;
 return;
}

function _getDebugMode($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = sp + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $1) | 0)) $$0 = 0; else {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $1) | 0) + 216 | 0;
  _arGetDebugMode(HEAP32[$6 >> 2] | 0, $2) | 0;
  $$0 = HEAP32[$2 >> 2] | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKiEEENSJ_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS3_PvEENS_22__hash_node_destructorINSC_ISR_EEEEEEjOT_DpOT0_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $13 = 0, $7 = 0;
 $7 = __Znwj(416) | 0;
 HEAP32[$0 >> 2] = $7;
 HEAP32[$0 + 4 >> 2] = $1 + 8;
 HEAP32[$7 + 8 >> 2] = HEAP32[HEAP32[$4 >> 2] >> 2];
 $13 = $7 + 16 | 0;
 _memset($13 | 0, 0, 400) | 0;
 __ZN12arControllerC2Ev($13);
 HEAP8[$0 + 8 >> 0] = 1;
 HEAP32[$7 + 4 >> 2] = $2;
 HEAP32[$7 >> 2] = 0;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_destructor_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$019 = 0, $$1 = 0, $10 = 0, $4 = 0;
 if (($0 | 0) == ($1 | 0)) $$1 = $0; else {
  $4 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
  if (($4 | 0) == ($0 | 0)) $$019 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0; else $$019 = $4;
  if (($$019 | 0) == ($0 | 0)) $$1 = $0; else {
   $10 = HEAP32[$2 + 4 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($10 | 0)) $$1 = $0; else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($10 + -24 | 0, 0, 15189) | 0;
    $$1 = $$019;
   }
  }
 }
 return $$1 | 0;
}

function __ZN10emscripten8functionIiJiNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() | 0, 12, $1 | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIiJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0, 11, $1 | 0);
 STACKTOP = sp;
 return;
}

function _cat($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0;
 do if (!$0) {
  $3 = ___errno_location() | 0;
  HEAP32[$3 >> 2] = 22;
  $$0 = 0;
 } else {
  $4 = _fopen($0, 5635) | 0;
  if (!$4) $$0 = 0; else {
   _fseek($4, 0, 2) | 0;
   $6 = _ftell($4) | 0;
   _fseek($4, 0, 0) | 0;
   $7 = $6 + 1 | 0;
   $8 = _malloc($7) | 0;
   if (!$8) {
    _fclose($4) | 0;
    $10 = ___errno_location() | 0;
    HEAP32[$10 >> 2] = 12;
    $$0 = 0;
    break;
   }
   if (!(_fread($8, $6, 1, $4) | 0)) {
    _free($8);
    _fclose($4) | 0;
    $$0 = 0;
    break;
   }
   HEAP8[$8 + $6 >> 0] = 0;
   _fclose($4) | 0;
   if (!$1) $$0 = $8; else {
    HEAP32[$1 >> 2] = $7;
    $$0 = $8;
   }
  }
 } while (0);
 return $$0 | 0;
}

function _arMatrixDup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$021 = 0, $$022 = 0, $13 = 0, $16 = 0, $3 = 0, $8 = 0;
 $3 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if (($3 | 0) == (HEAP32[$1 + 4 >> 2] | 0)) {
  $8 = HEAP32[$0 + 8 >> 2] | 0;
  if (($8 | 0) == (HEAP32[$1 + 8 >> 2] | 0)) {
   $$021 = 0;
   while (1) {
    if (($$021 | 0) >= ($3 | 0)) {
     $$022 = 0;
     break L1;
    }
    $13 = Math_imul($$021, $8) | 0;
    $$0 = 0;
    while (1) {
     if (($$0 | 0) >= ($8 | 0)) break;
     $16 = $$0 + $13 | 0;
     HEAPF64[(HEAP32[$0 >> 2] | 0) + ($16 << 3) >> 3] = +HEAPF64[(HEAP32[$1 >> 2] | 0) + ($16 << 3) >> 3];
     $$0 = $$0 + 1 | 0;
    }
    $$021 = $$021 + 1 | 0;
   }
  } else $$022 = -1;
 } else $$022 = -1; while (0);
 return $$022 | 0;
}

function _getMultiMarkerCount($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $1) | 0)) $$0 = -1; else {
  $4 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $1) | 0;
  $$0 = (HEAP32[$4 + 252 >> 2] | 0) - (HEAP32[$4 + 248 >> 2] | 0) >> 3;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _getMarkerNum($0) {
 $0 = $0 | 0;
 var $$0$in = 0, $1 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $1) | 0)) $$0$in = 1956; else {
  $5 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $1) | 0) + 216 | 0;
  $$0$in = (HEAP32[$5 >> 2] | 0) + 44 | 0;
 }
 STACKTOP = sp;
 return HEAP32[$$0$in >> 2] | 0;
}

function __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0, $3 = 0, $6 = 0, $8 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  $3 = $0 + 4 | 0;
  $$0$i$i = HEAP32[$3 >> 2] | 0;
  while (1) {
   if (($$0$i$i | 0) == ($1 | 0)) break;
   $6 = $$0$i$i + -16 | 0;
   __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($6);
   $$0$i$i = $6;
  }
  HEAP32[$3 >> 2] = $1;
  $8 = HEAP32[$0 >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE10deallocateEPS6_j($0 + 12 | 0, $8, (HEAP32[$0 + 8 >> 2] | 0) - $8 >> 4);
 }
 return;
}

function __ZN10emscripten8internal7InvokerIiJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFiS8_EPNS0_11BindingTypeIS8_EUt_E($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp + 12 | 0;
 $3 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($3, $1);
 $4 = FUNCTION_TABLE_ii[$0 & 31]($3) | 0;
 HEAP32[$2 >> 2] = $4;
 $5 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 STACKTOP = sp;
 return $5 | 0;
}

function _getProcessingImage($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $1) | 0)) $$0 = 0; else {
  $5 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $1) | 0) + 216 | 0;
  $$0 = HEAP32[(HEAP32[$5 >> 2] | 0) + 4834148 >> 2] | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, label = 0;
 $1 = $0 + 20 | 0;
 $3 = $0 + 28 | 0;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 15]($0, 0, 0) | 0;
  if (!(HEAP32[$1 >> 2] | 0)) $$0 = -1; else label = 3;
 } else label = 3;
 if ((label | 0) == 3) {
  $10 = $0 + 4 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $12 = $0 + 8 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  if ($11 >>> 0 < $13 >>> 0) FUNCTION_TABLE_iiii[HEAP32[$0 + 40 >> 2] & 15]($0, $11 - $13 | 0, 1) | 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$10 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _arPattLoad($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $2 = _cat($1, 0) | 0;
 if (!$2) {
  HEAP32[$vararg_buffer >> 2] = $1;
  _arLog(0, 3, 4333, $vararg_buffer);
  $4 = ___errno_location() | 0;
  $6 = _strerror(HEAP32[$4 >> 2] | 0) | 0;
  HEAP32[$vararg_buffer1 >> 2] = 19061;
  HEAP32[$vararg_buffer1 + 4 >> 2] = $6;
  _arLog(0, 3, 4941, $vararg_buffer1);
  $$0 = -1;
 } else {
  $7 = _arPattLoadFromBuffer($0, $2) | 0;
  _free($2);
  $$0 = $7;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _arUtilMatMul($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$023 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 3) break;
  $3 = $0 + ($$0 << 5) | 0;
  $4 = $0 + ($$0 << 5) + 8 | 0;
  $5 = $0 + ($$0 << 5) + 16 | 0;
  $$023 = 0;
  while (1) {
   if (($$023 | 0) == 4) break;
   HEAPF64[$2 + ($$0 << 5) + ($$023 << 3) >> 3] = +HEAPF64[$3 >> 3] * +HEAPF64[$1 + ($$023 << 3) >> 3] + +HEAPF64[$4 >> 3] * +HEAPF64[$1 + 32 + ($$023 << 3) >> 3] + +HEAPF64[$5 >> 3] * +HEAPF64[$1 + 64 + ($$023 << 3) >> 3];
   $$023 = $$023 + 1 | 0;
  }
  $24 = $2 + ($$0 << 5) + 24 | 0;
  HEAPF64[$24 >> 3] = +HEAPF64[$0 + ($$0 << 5) + 24 >> 3] + +HEAPF64[$24 >> 3];
  $$0 = $$0 + 1 | 0;
 }
 return 0;
}

function _setMatrixCodeType($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $2) | 0) {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $2) | 0) + 216 | 0;
  _arSetMatrixCodeType(HEAP32[$6 >> 2] | 0, $1) | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKiEEENSJ_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS3_PvEENS_22__hash_node_destructorINSC_ISR_EEEEEEjOT_DpOT0_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $7 = 0;
 $7 = __Znwj(200) | 0;
 HEAP32[$0 >> 2] = $7;
 HEAP32[$0 + 4 >> 2] = $1 + 8;
 HEAP32[$7 + 8 >> 2] = HEAP32[HEAP32[$4 >> 2] >> 2];
 _memset($7 + 16 | 0, 0, 184) | 0;
 HEAP8[$0 + 8 >> 0] = 1;
 HEAP32[$7 + 4 >> 2] = $2;
 HEAP32[$7 >> 2] = 0;
 return;
}

function _arSetDebugMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 do if (!$0) $$0 = -1; else if ((HEAP32[$0 >> 2] | 0) == ($1 | 0)) $$0 = 0; else {
  HEAP32[$0 >> 2] = $1;
  if (!$1) {
   $6 = $0 + 4834148 | 0;
   _free(HEAP32[$6 >> 2] | 0);
   HEAP32[$6 >> 2] = 0;
   $$0 = 0;
   break;
  }
  $13 = _malloc(Math_imul(HEAP32[$0 + 40 >> 2] | 0, HEAP32[$0 + 36 >> 2] | 0) | 0) | 0;
  HEAP32[$0 + 4834148 >> 2] = $13;
  if (!$13) {
   _arLog(0, 3, 5051, $vararg_buffer);
   _exit(1);
  } else $$0 = 0;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _getProjectionNearPlane($0) {
 $0 = $0 | 0;
 var $$0 = 0.0, $1 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $1) | 0)) $$0 = -1.0; else {
  $5 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $1) | 0) + 232 | 0;
  $$0 = +HEAPF64[$5 >> 3];
 }
 STACKTOP = sp;
 return +$$0;
}

function _getProjectionFarPlane($0) {
 $0 = $0 | 0;
 var $$0 = 0.0, $1 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $1) | 0)) $$0 = -1.0; else {
  $5 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $1) | 0) + 240 | 0;
  $$0 = +HEAPF64[$5 >> 3];
 }
 STACKTOP = sp;
 return +$$0;
}

function _CENTER($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$025 = 0, $$026 = 0, $$027 = 0, $$028 = 0, $$1 = 0, $3 = 0, $5 = 0;
 $3 = HEAP32[$0 + 4 >> 2] | 0;
 $5 = HEAP32[$0 + 8 >> 2] | 0;
 L1 : do if ((HEAP32[$1 + 4 >> 2] | 0) == ($5 | 0)) {
  $$025 = 0;
  $$027 = HEAP32[$0 >> 2] | 0;
  while (1) {
   if (($$025 | 0) >= ($3 | 0)) {
    $$026 = 0;
    break L1;
   }
   $$0 = 0;
   $$028 = HEAP32[$1 >> 2] | 0;
   $$1 = $$027;
   while (1) {
    if (($$0 | 0) >= ($5 | 0)) break;
    HEAPF64[$$1 >> 3] = +HEAPF64[$$1 >> 3] - +HEAPF64[$$028 >> 3];
    $$0 = $$0 + 1 | 0;
    $$028 = $$028 + 8 | 0;
    $$1 = $$1 + 8 | 0;
   }
   $$025 = $$025 + 1 | 0;
   $$027 = $$1;
  }
 } else $$026 = -1; while (0);
 return $$026 | 0;
}

function __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 while (1) {
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) == ($2 | 0)) break;
  $6 = $4 + -16 | 0;
  HEAP32[$3 >> 2] = $6;
  __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($6);
 }
 $7 = HEAP32[$0 >> 2] | 0;
 if ($7 | 0) __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE10deallocateEPS6_j(HEAP32[$0 + 16 >> 2] | 0, $7, (HEAP32[$0 + 12 >> 2] | 0) - $7 >> 4);
 return;
}

function _icpGetU_from_X_by_MatX2U($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $21 = 0.0, $3 = 0.0, $36 = 0.0, $5 = 0.0, $7 = 0.0;
 $3 = +HEAPF64[$2 >> 3];
 $5 = +HEAPF64[$2 + 8 >> 3];
 $7 = +HEAPF64[$2 + 16 >> 3];
 $21 = +HEAPF64[$1 + 88 >> 3] + ($3 * +HEAPF64[$1 + 64 >> 3] + $5 * +HEAPF64[$1 + 72 >> 3] + $7 * +HEAPF64[$1 + 80 >> 3]);
 if ($21 == 0.0) $$0 = -1; else {
  $36 = +HEAPF64[$1 + 56 >> 3] + ($3 * +HEAPF64[$1 + 32 >> 3] + $5 * +HEAPF64[$1 + 40 >> 3] + $7 * +HEAPF64[$1 + 48 >> 3]);
  HEAPF64[$0 >> 3] = (+HEAPF64[$1 + 24 >> 3] + ($3 * +HEAPF64[$1 >> 3] + $5 * +HEAPF64[$1 + 8 >> 3] + $7 * +HEAPF64[$1 + 16 >> 3])) / $21;
  HEAPF64[$0 + 8 >> 3] = $36 / $21;
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZN10emscripten8internal7InvokerIiJiiiEE6invokeEPFiiiiEiii($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 $5 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1) | 0;
 $6 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2) | 0;
 $7 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3) | 0;
 $8 = FUNCTION_TABLE_iiii[$0 & 15]($5, $6, $7) | 0;
 HEAP32[$4 >> 2] = $8;
 $9 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($4) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $5 = sp;
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0;
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0;
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0;
   $$011 = $9;
   do {
    _out_670($0, $5, 256);
    $$011 = $$011 + -256 | 0;
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255;
  } else $$0$lcssa = $9;
  _out_670($0, $5, $$0$lcssa);
 }
 STACKTOP = sp;
 return;
}

function _setProjectionNearPlane($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $2) | 0) {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $2) | 0) + 232 | 0;
  HEAPF64[$6 >> 3] = $1;
 }
 STACKTOP = sp;
 return;
}

function _setProjectionFarPlane($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17356, $2) | 0) {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17356, $2) | 0) + 240 | 0;
  HEAPF64[$6 >> 3] = $1;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$0$i$i3 = 0, $4 = 0, $5 = 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $4 = $0 + 12 | 0;
 $5 = $1 + 12 | 0;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
 $$0$i$i3 = 0;
 while (1) {
  if (($$0$i$i3 | 0) == 3) break;
  HEAP32[$5 + ($$0$i$i3 << 2) >> 2] = 0;
  $$0$i$i3 = $$0$i$i3 + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$0$i$i1 = 0, $4 = 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $$0$i$i1 = 0;
 while (1) {
  if (($$0$i$i1 | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i1 << 2) >> 2] = 0;
  $$0$i$i1 = $$0$i$i1 + 1 | 0;
 }
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $11 = 0, $14 = 0, $17 = 0, $22 = 0, $5 = 0;
 if (!$0) {
  $$1 = _malloc($1) | 0;
  return $$1 | 0;
 }
 if ($1 >>> 0 > 4294967231) {
  $5 = ___errno_location() | 0;
  HEAP32[$5 >> 2] = 12;
  $$1 = 0;
  return $$1 | 0;
 }
 $11 = _try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8) | 0;
 if ($11 | 0) {
  $$1 = $11 + 8 | 0;
  return $$1 | 0;
 }
 $14 = _malloc($1) | 0;
 if (!$14) {
  $$1 = 0;
  return $$1 | 0;
 }
 $17 = HEAP32[$0 + -4 >> 2] | 0;
 $22 = ($17 & -8) - (($17 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($14 | 0, $0 | 0, ($22 >>> 0 < $1 >>> 0 ? $22 : $1) | 0) | 0;
 _free($0);
 $$1 = $14;
 return $$1 | 0;
}

function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0;
 $4 = HEAP8[$0 + 11 >> 0] | 0;
 $5 = $4 << 24 >> 24 < 0;
 if ($5) $12 = HEAP32[$0 + 4 >> 2] | 0; else $12 = $4 & 255;
 if (($2 | 0) == -1) __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
 if ($5) $13 = HEAP32[$0 >> 2] | 0; else $13 = $0;
 $11 = $12 >>> 0 > $2 >>> 0;
 $14 = __ZNSt3__211char_traitsIcE7compareEPKcS3_j($13, $1, $11 ? $2 : $12) | 0;
 if (!$14) return ($12 >>> 0 < $2 >>> 0 ? -1 : $11 & 1) | 0; else return $14 | 0;
 return 0;
}

function ___toread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $15 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 74 | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 HEAP8[$1 >> 0] = $3 + 255 | $3;
 $7 = $0 + 20 | 0;
 $9 = $0 + 28 | 0;
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 15]($0, 0, 0) | 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$7 >> 2] = 0;
 $15 = HEAP32[$0 >> 2] | 0;
 if (!($15 & 4)) {
  $23 = (HEAP32[$0 + 44 >> 2] | 0) + (HEAP32[$0 + 48 >> 2] | 0) | 0;
  HEAP32[$0 + 8 >> 2] = $23;
  HEAP32[$0 + 4 >> 2] = $23;
  $$0 = $15 << 27 >> 31;
 } else {
  HEAP32[$0 >> 2] = $15 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $2 = 0, $4 = 0, $5 = 0;
 $2 = $1 + 12 | 0;
 $4 = HEAP8[$2 + 11 >> 0] | 0;
 $5 = $4 << 24 >> 24 < 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1, $5 ? HEAP32[$2 >> 2] | 0 : $2, $5 ? HEAP32[$1 + 16 >> 2] | 0 : $4 & 255) | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $$0$i$i$i = 0;
 while (1) {
  if (($$0$i$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i$i << 2) >> 2] = 0;
  $$0$i$i$i = $$0$i$i$i + 1 | 0;
 }
 return;
}

function _arVecHousehold($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$020 = 0.0, $$1 = 0.0, $11 = 0.0, $13 = 0, $15 = 0, $2 = 0.0, $4 = 0, $5 = 0.0, $8 = 0.0;
 $2 = +Math_sqrt(+(+_arVecInnerproduct($0, $0)));
 L1 : do if ($2 != 0.0) {
  $4 = HEAP32[$0 >> 2] | 0;
  $5 = +HEAPF64[$4 >> 3];
  $$020 = $5 < 0.0 ? -$2 : $2;
  $8 = $5 + $$020;
  HEAPF64[$4 >> 3] = $8;
  $11 = 1.0 / +Math_sqrt(+($$020 * $8));
  $13 = HEAP32[$0 + 4 >> 2] | 0;
  $$0 = 0;
  while (1) {
   if (($$0 | 0) >= ($13 | 0)) {
    $$1 = $$020;
    break L1;
   }
   $15 = $4 + ($$0 << 3) | 0;
   HEAPF64[$15 >> 3] = $11 * +HEAPF64[$15 >> 3];
   $$0 = $$0 + 1 | 0;
  }
 } else $$1 = $2; while (0);
 return +-$$1;
}

function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 $3 = sp + 20 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = 0;
 HEAP32[$vararg_buffer + 8 >> 2] = $1;
 HEAP32[$vararg_buffer + 12 >> 2] = $3;
 HEAP32[$vararg_buffer + 16 >> 2] = $2;
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1;
  $10 = -1;
 } else $10 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $8 = 0, $9 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 if (!$1) $8 = 0; else $8 = __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE8allocateEj($3, $1) | 0;
 HEAP32[$0 >> 2] = $8;
 $9 = $8 + ($2 << 4) | 0;
 HEAP32[$0 + 8 >> 2] = $9;
 HEAP32[$0 + 4 >> 2] = $9;
 HEAP32[$4 >> 2] = $8 + ($1 << 4);
 return;
}

function __ZNSt3__214__split_bufferI12multi_markerRNS_9allocatorIS1_EEEC2EjjS4_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $12 = 0, $4 = 0, $8 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 do if (!$1) $11 = 0; else if ($1 >>> 0 > 536870911) {
  $8 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($8, 7822);
  HEAP32[$8 >> 2] = 3444;
  ___cxa_throw($8 | 0, 272, 6);
 } else {
  $11 = __Znwj($1 << 3) | 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $11;
 $12 = $11 + ($2 << 3) | 0;
 HEAP32[$0 + 8 >> 2] = $12;
 HEAP32[$0 + 4 >> 2] = $12;
 HEAP32[$4 >> 2] = $11 + ($1 << 3);
 return;
}

function _arParamObserv2IdealLTf($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $28 = 0, $9 = 0;
 $9 = (HEAP32[$0 + 16 >> 2] | 0) + ~~($1 + .5) | 0;
 $14 = (HEAP32[$0 + 20 >> 2] | 0) + ~~($2 + .5) | 0;
 if (($9 | 0) < 0) $$0 = -1; else {
  $17 = HEAP32[$0 + 8 >> 2] | 0;
  if (($14 | 0) < 0 | ($9 | 0) >= ($17 | 0)) $$0 = -1; else if (($14 | 0) < (HEAP32[$0 + 12 >> 2] | 0)) {
   $28 = (HEAP32[$0 + 4 >> 2] | 0) + ((Math_imul($17, $14) | 0) + $9 << 1 << 2) | 0;
   HEAP32[$3 >> 2] = HEAP32[$28 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$28 + 4 >> 2];
   $$0 = 0;
  } else $$0 = -1;
 }
 return $$0 | 0;
}

function _strtok($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$010 = 0, $10 = 0, $3 = 0, $6 = 0, label = 0;
 if (!$0) {
  $3 = HEAP32[4496] | 0;
  if (!$3) $$0 = 0; else {
   $$010 = $3;
   label = 3;
  }
 } else {
  $$010 = $0;
  label = 3;
 }
 do if ((label | 0) == 3) {
  $6 = $$010 + (_strspn($$010, $1) | 0) | 0;
  if (!(HEAP8[$6 >> 0] | 0)) {
   HEAP32[4496] = 0;
   $$0 = 0;
   break;
  }
  $10 = $6 + (_strcspn($6, $1) | 0) | 0;
  HEAP32[4496] = $10;
  if (!(HEAP8[$10 >> 0] | 0)) {
   HEAP32[4496] = 0;
   $$0 = $6;
   break;
  } else {
   HEAP32[4496] = $10 + 1;
   HEAP8[$10 >> 0] = 0;
   $$0 = $6;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function _arParamIdeal2ObservLTf($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $27 = 0, $9 = 0;
 $9 = (HEAP32[$0 + 16 >> 2] | 0) + ~~($1 + .5) | 0;
 $14 = (HEAP32[$0 + 20 >> 2] | 0) + ~~($2 + .5) | 0;
 if (($9 | 0) < 0) $$0 = -1; else {
  $17 = HEAP32[$0 + 8 >> 2] | 0;
  if (($14 | 0) < 0 | ($9 | 0) >= ($17 | 0)) $$0 = -1; else if (($14 | 0) < (HEAP32[$0 + 12 >> 2] | 0)) {
   $27 = (HEAP32[$0 >> 2] | 0) + ((Math_imul($17, $14) | 0) + $9 << 1 << 2) | 0;
   HEAP32[$3 >> 2] = HEAP32[$27 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$27 + 4 >> 2];
   $$0 = 0;
  } else $$0 = -1;
 }
 return $$0 | 0;
}

function __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0, $3 = 0, $6 = 0, $8 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  $3 = $0 + 4 | 0;
  $$0$i$i = HEAP32[$3 >> 2] | 0;
  while (1) {
   if (($$0$i$i | 0) == ($1 | 0)) break;
   $6 = $$0$i$i + -24 | 0;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
   $$0$i$i = $6;
  }
  HEAP32[$3 >> 2] = $1;
  $8 = HEAP32[$0 >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE10deallocateEPS2_j($0 + 12 | 0, $8, ((HEAP32[$0 + 8 >> 2] | 0) - $8 | 0) / 24 | 0);
 }
 return;
}

function _strncat($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$01013 = 0, $$01112 = 0, $$014 = 0, $10 = 0, $4 = 0, $6 = 0;
 $4 = $0 + (_strlen($0) | 0) | 0;
 L1 : do if (!$2) $$0$lcssa = $4; else {
  $$01013 = $2;
  $$01112 = $1;
  $$014 = $4;
  while (1) {
   $6 = HEAP8[$$01112 >> 0] | 0;
   if (!($6 << 24 >> 24)) {
    $$0$lcssa = $$014;
    break L1;
   }
   $$01013 = $$01013 + -1 | 0;
   $10 = $$014 + 1 | 0;
   HEAP8[$$014 >> 0] = $6;
   if (!$$01013) {
    $$0$lcssa = $10;
    break;
   } else {
    $$01112 = $$01112 + 1 | 0;
    $$014 = $10;
   }
  }
 } while (0);
 HEAP8[$$0$lcssa >> 0] = 0;
 return $0 | 0;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 do if (!$5) {
  HEAP32[$4 >> 2] = $2;
  HEAP32[$1 + 24 >> 2] = $3;
  HEAP32[$1 + 36 >> 2] = 1;
 } else {
  if (($5 | 0) != ($2 | 0)) {
   $13 = $1 + 36 | 0;
   HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
   HEAP32[$1 + 24 >> 2] = 2;
   HEAP8[$1 + 54 >> 0] = 1;
   break;
  }
  $10 = $1 + 24 | 0;
  if ((HEAP32[$10 >> 2] | 0) == 2) HEAP32[$10 >> 2] = $3;
 } while (0);
 return;
}

function _icpCreateHandle($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$022 = 0, $$023 = 0, $1 = 0;
 $1 = _malloc(136) | 0;
 if (!$1) $$023 = 0; else {
  $$0 = 0;
  while (1) {
   if (($$0 | 0) == 3) break;
   $$022 = 0;
   while (1) {
    if (($$022 | 0) == 4) break;
    HEAPF64[$1 + ($$0 << 5) + ($$022 << 3) >> 3] = +HEAPF64[$0 + ($$0 << 5) + ($$022 << 3) >> 3];
    $$022 = $$022 + 1 | 0;
   }
   $$0 = $$0 + 1 | 0;
  }
  HEAP32[$1 + 96 >> 2] = 10;
  HEAPF64[$1 + 104 >> 3] = .10000000149011612;
  HEAPF64[$1 + 112 >> 3] = .9900000095367432;
  HEAPF64[$1 + 120 >> 3] = 4.0;
  HEAPF64[$1 + 128 >> 3] = .5;
  $$023 = $1;
 }
 return $$023 | 0;
}

function __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 while (1) {
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) == ($2 | 0)) break;
  $6 = $4 + -24 | 0;
  HEAP32[$3 >> 2] = $6;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
 }
 $7 = HEAP32[$0 >> 2] | 0;
 if ($7 | 0) __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE10deallocateEPS2_j(HEAP32[$0 + 16 >> 2] | 0, $7, ((HEAP32[$0 + 12 >> 2] | 0) - $7 | 0) / 24 | 0);
 return;
}
function __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $8 = 0, $9 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 if (!$1) $8 = 0; else $8 = __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE8allocateEj($3, $1) | 0;
 HEAP32[$0 >> 2] = $8;
 $9 = $8 + ($2 << 4) | 0;
 HEAP32[$0 + 8 >> 2] = $9;
 HEAP32[$0 + 4 >> 2] = $9;
 HEAP32[$4 >> 2] = $8 + ($1 << 4);
 return;
}

function __ZN10emscripten8internal7InvokerIiJiiEE6invokeEPFiiiEii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1) | 0;
 $5 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2) | 0;
 $6 = FUNCTION_TABLE_iii[$0 & 15]($4, $5) | 0;
 HEAP32[$3 >> 2] = $6;
 $7 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($3) | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3;
  $$lcssa8 = $2;
 } else {
  $$011 = $1;
  $$0710 = $0;
  do {
   $$0710 = $$0710 + 1 | 0;
   $$011 = $$011 + 1 | 0;
   $8 = HEAP8[$$0710 >> 0] | 0;
   $9 = HEAP8[$$011 >> 0] | 0;
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9;
  $$lcssa8 = $8;
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0;
}

function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 HEAP32[$0 + 36 >> 2] = 1;
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = 21523;
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16;
  if (___syscall54(54, $vararg_buffer | 0) | 0) HEAP8[$0 + 75 >> 0] = -1;
 }
 $14 = ___stdio_write($0, $1, $2) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiiEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiiEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv() | 0, 1, $1 | 0);
 STACKTOP = sp;
 return;
}

function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
 newDynamicTop = oldDynamicTop + increment | 0;
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0;
  ___setErrNo(12);
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop;
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) if (!(enlargeMemory() | 0)) {
  HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop;
  ___setErrNo(12);
  return -1;
 }
 return oldDynamicTop | 0;
}

function __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() | 0, 13, $1 | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0, 1, $1 | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIvJifEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvifEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvifEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJviifEEEPKcv() | 0, 2, $1 | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIvJidEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvidEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvidEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv() | 0, 1, $1 | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0, 10, $1 | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIvJiEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv() | 0, 7, $1 | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv() | 0, 1, $1 | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIiJEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() | 0, 16, $1 | 0);
 STACKTOP = sp;
 return;
}

function ___fmodeflags($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$2 = 0, $$4 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0, $spec$select = 0, $spec$select13 = 0;
 $2 = (_strchr($0, 43) | 0) == 0;
 $3 = HEAP8[$0 >> 0] | 0;
 $$0 = $2 ? $3 << 24 >> 24 != 114 & 1 : 2;
 $6 = (_strchr($0, 120) | 0) == 0;
 $spec$select = $6 ? $$0 : $$0 | 128;
 $9 = (_strchr($0, 101) | 0) == 0;
 $$2 = $9 ? $spec$select : $spec$select | 524288;
 $spec$select13 = $3 << 24 >> 24 == 114 ? $$2 : $$2 | 64;
 $$4 = $3 << 24 >> 24 == 119 ? $spec$select13 | 512 : $spec$select13;
 return ($3 << 24 >> 24 == 97 ? $$4 | 1024 : $$4) | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); else {
  $10 = HEAP32[$0 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 3]($10, $1, $2, $3, $4, $5);
 }
 return;
}

function __ZL10loadMarkerPKcPiP8ARHandlePP12ARPattHandle($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $4 = _arPattLoad(HEAP32[$2 >> 2] | 0, $0) | 0;
 HEAP32[$1 >> 2] = $4;
 if (($4 | 0) < 0) {
  HEAP32[$vararg_buffer >> 2] = $0;
  _arLog(0, 3, 10012, $vararg_buffer);
  _arPattDeleteHandle(HEAP32[$2 >> 2] | 0) | 0;
  $$0 = 0;
 } else $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do if (!$2) $14 = 0; else {
  $$01318 = $0;
  $$01417 = $2;
  $$019 = $1;
  while (1) {
   $4 = HEAP8[$$01318 >> 0] | 0;
   $5 = HEAP8[$$019 >> 0] | 0;
   if ($4 << 24 >> 24 != $5 << 24 >> 24) break;
   $$01417 = $$01417 + -1 | 0;
   if (!$$01417) {
    $14 = 0;
    break L1;
   } else {
    $$01318 = $$01318 + 1 | 0;
    $$019 = $$019 + 1 | 0;
   }
  }
  $14 = ($4 & 255) - ($5 & 255) | 0;
 } while (0);
 return $14 | 0;
}

function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0, $spec$select = 0;
 $4 = Math_imul($2, $1) | 0;
 $spec$select = ($1 | 0) == 0 ? 0 : $2;
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0;
  $11 = ___fwritex($0, $4, $3) | 0;
  if ($phitmp) $13 = $11; else {
   ___unlockfile($3);
   $13 = $11;
  }
 } else $13 = ___fwritex($0, $4, $3) | 0;
 if (($13 | 0) == ($4 | 0)) $15 = $spec$select; else $15 = ($13 >>> 0) / ($1 >>> 0) | 0;
 return $15 | 0;
}

function __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $8 = 0, $9 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 if (!$1) $8 = 0; else $8 = __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE8allocateEj($3, $1) | 0;
 HEAP32[$0 >> 2] = $8;
 $9 = $8 + ($2 * 24 | 0) | 0;
 HEAP32[$0 + 8 >> 2] = $9;
 HEAP32[$0 + 4 >> 2] = $9;
 HEAP32[$4 >> 2] = $8 + ($1 * 24 | 0);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $5 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $4 = HEAP8[$1 + 11 >> 0] | 0;
 $5 = $4 << 24 >> 24 < 0;
 $10 = $5 ? HEAP32[$1 + 4 >> 2] | 0 : $4 & 255;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $5 ? HEAP32[$1 >> 2] | 0 : $1, $10 >>> 0 < $2 >>> 0 ? $10 : $2);
 return;
}

function _store_int_725($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 L1 : do if ($0 | 0) switch ($1 | 0) {
 case -2:
  {
   HEAP8[$0 >> 0] = $2;
   break L1;
   break;
  }
 case -1:
  {
   HEAP16[$0 >> 1] = $2;
   break L1;
   break;
  }
 case 0:
  {
   HEAP32[$0 >> 2] = $2;
   break L1;
   break;
  }
 case 1:
  {
   HEAP32[$0 >> 2] = $2;
   break L1;
   break;
  }
 case 3:
  {
   $7 = $0;
   HEAP32[$7 >> 2] = $2;
   HEAP32[$7 + 4 >> 2] = $3;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $$0$i$i1 = 0, $3 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $3 = $0 + 12 | 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 $$0$i$i1 = 0;
 while (1) {
  if (($$0$i$i1 | 0) == 3) break;
  HEAP32[$3 + ($$0$i$i1 << 2) >> 2] = 0;
  $$0$i$i1 = $$0$i$i1 + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 17);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 14);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 13);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 12);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 11);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 10);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 if ((HEAP8[$1 + 11 >> 0] | 0) < 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0); else {
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 9);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 8);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 5);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 4);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 3);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 HEAP32[$0 >> 2] = 0;
 $3 = $0 + 4 | 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8allocateEj($0);
 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_(HEAP32[$3 >> 2] | 0, $1);
 HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 24;
 return;
}

function _vsscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $3 = sp;
 dest = $3;
 stop = dest + 124 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 + 32 >> 2] = 15;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 76 >> 2] = -1;
 HEAP32[$3 + 84 >> 2] = $0;
 $8 = _vfscanf($3, $1, $2) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _arImageProcLumaHist($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$013 = 0, $12 = 0, $8 = 0;
 L1 : do if (($0 | 0) != 0 & ($1 | 0) != 0) {
  _memset($0 + 12 | 0, 0, 1024) | 0;
  $8 = $1 + (Math_imul(HEAP32[$0 + 8 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0) | 0) | 0;
  $$0 = $1;
  while (1) {
   if ($$0 >>> 0 >= $8 >>> 0) {
    $$013 = 0;
    break L1;
   }
   $12 = $0 + 12 + ((HEAPU8[$$0 >> 0] | 0) << 2) | 0;
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
   $$0 = $$0 + 1 | 0;
  }
 } else $$013 = -1; while (0);
 return $$013 | 0;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8allocateEj($0) {
 $0 = $0 | 0;
 var $4 = 0;
 if (!(__ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0) | 0)) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $4 = __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE8allocateEj($0 + 12 | 0, 1) | 0;
  HEAP32[$0 + 4 >> 2] = $4;
  HEAP32[$0 >> 2] = $4;
  HEAP32[$0 + 8 >> 2] = $4 + 24;
  return;
 }
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $7 = 0, $8 = 0;
 $7 = HEAP32[$0 + 4 >> 2] | 0;
 $8 = $7 >> 8;
 if (!($7 & 1)) $$0 = $8; else $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0;
 $14 = HEAP32[$0 >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] & 3]($14, $1, $2, $3 + $$0 | 0, ($7 & 2 | 0) == 0 ? 2 : $4, $5);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj22EEERAT__Kc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 16510, 21);
 $1 = $0 + 12 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj19EEERAT__Kc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 16731, 18);
 $1 = $0 + 12 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj16EEERAT__Kc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 15904, 15);
 $1 = $0 + 12 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj8EEERAT__Kc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 16311, 7);
 $1 = $0 + 12 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj7EEERAT__Kc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 16724, 6);
 $1 = $0 + 12 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj3EEERAT__Kc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 16535, 2);
 $1 = $0 + 12 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $$05$lcssa = $2; else {
  $$056 = $2;
  $15 = $1;
  $8 = $0;
  while (1) {
   $14 = $$056 + -1 | 0;
   HEAP8[$14 >> 0] = HEAPU8[12554 + ($8 & 15) >> 0] | 0 | $3;
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0;
   $15 = tempRet0;
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14;
    break;
   } else $$056 = $14;
  }
 }
 return $$05$lcssa | 0;
}

function ___string_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$027 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $spec$select = 0;
 $3 = $0 + 84 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $2 + 256 | 0;
 $6 = _memchr($4, 0, $5) | 0;
 $$027 = ($6 | 0) == 0 ? $5 : $6 - $4 | 0;
 $spec$select = $$027 >>> 0 < $2 >>> 0 ? $$027 : $2;
 _memcpy($1 | 0, $4 | 0, $spec$select | 0) | 0;
 HEAP32[$0 + 4 >> 2] = $4 + $spec$select;
 $14 = $4 + $$027 | 0;
 HEAP32[$0 + 8 >> 2] = $14;
 HEAP32[$3 >> 2] = $14;
 return $spec$select | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}

function __ZN12arControllerC2Ev($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0;
 HEAP32[$0 + 192 >> 2] = 0;
 HEAP32[$0 + 196 >> 2] = 0;
 $3 = $0 + 204 | 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 + 16 >> 2] = 0;
 HEAP32[$3 + 20 >> 2] = 0;
 HEAPF64[$0 + 232 >> 3] = .0001;
 HEAPF64[$0 + 240 >> 3] = 1.0e3;
 $6 = $0 + 248 | 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = 0;
 HEAP32[$6 + 12 >> 2] = 0;
 HEAP32[$0 + 392 >> 2] = 2;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $8 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); else {
  $8 = HEAP32[$0 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 3]($8, $1, $2, $3);
 }
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $6 = 0, $7 = 0;
 $6 = HEAP32[$0 + 4 >> 2] | 0;
 $7 = $6 >> 8;
 if (!($6 & 1)) $$0 = $7; else $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0;
 $13 = HEAP32[$0 >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] & 3]($13, $1, $2 + $$0 | 0, ($6 & 2 | 0) == 0 ? 2 : $3, $4);
 return;
}

function _arUtilGetDirectoryNameFromPath($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $14 = 0, $7 = 0;
 do if (($0 | 0) != 0 & ($1 | 0) != 0 & ($2 | 0) != 0) {
  $7 = _strrchr($1, 47) | 0;
  if (!$7) {
   HEAP8[$0 >> 0] = 0;
   $$0 = $0;
   break;
  }
  $14 = $7 + (($3 | 0) != 0 & 1) - $1 | 0;
  if (($14 + 1 | 0) >>> 0 > $2 >>> 0) $$0 = 0; else {
   _strncpy($0, $1, $14) | 0;
   HEAP8[$0 + $14 >> 0] = 0;
   $$0 = $0;
  }
 } else $$0 = 0; while (0);
 return $$0 | 0;
}

function __ZN10emscripten8internal7InvokerIiJiEE6invokeEPFiiEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1) | 0;
 $4 = FUNCTION_TABLE_ii[$0 & 31]($3) | 0;
 HEAP32[$2 >> 2] = $4;
 $5 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($2) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$014 = 0, $10 = 0, $11 = 0, $13 = 0, $8 = 0;
 $8 = HEAP32[$2 >> 2] | 0;
 $$0 = $0;
 $$014 = $1 - $0 >> 2;
 while (1) {
  if (!$$014) break;
  $10 = ($$014 | 0) / 2 | 0;
  $11 = $$0 + ($10 << 2) | 0;
  $13 = (HEAP32[$11 >> 2] | 0) >>> 0 < $8 >>> 0;
  $$0 = $13 ? $11 + 4 | 0 : $$0;
  $$014 = $13 ? $$014 + -1 - $10 | 0 : $10;
 }
 return $$0 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $5 = 0, $6 = 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $5 >> 8;
 if (!($5 & 1)) $$0 = $6; else $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0;
 $12 = HEAP32[$0 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 3]($12, $1, $2 + $$0 | 0, ($5 & 2 | 0) == 0 ? 2 : $3);
 return;
}

function __ZN10emscripten8internal7InvokerIdJiEE6invokeEPFdiEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1) | 0;
 $4 = +FUNCTION_TABLE_di[$0 & 3]($3);
 HEAPF64[$2 >> 3] = $4;
 $5 = +__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2);
 STACKTOP = sp;
 return +$5;
}

function __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev($0 + 32 | 0);
 __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($0 + 16 | 0);
 __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($0);
 return;
}

function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 HEAP8[$1 >> 0] = $3 + 255 | $3;
 $7 = HEAP32[$0 >> 2] | 0;
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $14 = HEAP32[$0 + 44 >> 2] | 0;
  HEAP32[$0 + 28 >> 2] = $14;
  HEAP32[$0 + 20 >> 2] = $14;
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0);
  $$0 = 0;
 } else {
  HEAP32[$0 >> 2] = $7 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _get_buff($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $7 = 0;
 L1 : while (1) {
  if (!(_fgets($0, 256, $1) | 0)) break;
  $$0 = _strlen($0) | 0;
  L4 : while (1) {
   if (!$$0) break;
   $6 = $$0 + -1 | 0;
   $7 = $0 + $6 | 0;
   switch (HEAP8[$7 >> 0] | 0) {
   case 13:
   case 10:
    break;
   default:
    break L4;
   }
   HEAP8[$7 >> 0] = 0;
   $$0 = $6;
  }
  switch (HEAP8[$0 >> 0] | 0) {
  case 0:
  case 35:
   break;
  default:
   break L1;
  }
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_pack_expansionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $12 = 0, $13 = 0;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 115) if ((HEAP8[$0 + 1 >> 0] | 0) == 112) {
  $12 = $0 + 2 | 0;
  $13 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($12, $1, $2) | 0;
  $$1 = ($13 | 0) == ($12 | 0) ? $0 : $13;
 } else $$1 = $0; else $$1 = $0; else $$1 = $0;
 return $$1 | 0;
}

function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $$0$lcssa = $2; else {
  $$06 = $2;
  $11 = $1;
  $7 = $0;
  while (1) {
   $10 = $$06 + -1 | 0;
   HEAP8[$10 >> 0] = $7 & 7 | 48;
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0;
   $11 = tempRet0;
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10;
    break;
   } else $$06 = $10;
  }
 }
 return $$0$lcssa | 0;
}

function _arg_n_724($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 $$0 = $1;
 while (1) {
  $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
  $10 = HEAP32[$9 >> 2] | 0;
  HEAP32[$2 >> 2] = $9 + 4;
  if ($$0 >>> 0 > 1) $$0 = $$0 + -1 | 0; else break;
 }
 STACKTOP = sp;
 return $10 | 0;
}

function _arImageProcLumaHistAndCDF($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$017 = 0, $2 = 0, $indvars$iv = 0;
 $2 = _arImageProcLumaHist($0, $1) | 0;
 if (($2 | 0) < 0) $$0 = $2; else {
  $$017 = 0;
  $indvars$iv = 0;
  do {
   $$017 = (HEAP32[$0 + 12 + ($indvars$iv << 2) >> 2] | 0) + $$017 | 0;
   HEAP32[$0 + 1036 + ($indvars$iv << 2) >> 2] = $$017;
   $indvars$iv = $indvars$iv + 1 | 0;
  } while (($indvars$iv | 0) != 256);
  $$0 = 0;
 }
 return $$0 | 0;
}

function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) $$0$lcssa = 0; else {
  $$04 = 0;
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0;
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0;
   $12 = $7 + 1 | 0;
   HEAP32[$0 >> 2] = $12;
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11;
    break;
   } else $$04 = $11;
  }
 }
 return $$0$lcssa | 0;
}

function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function ___ftello_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $12 = 0;
 if (!(HEAP32[$0 >> 2] & 128)) $11 = 1; else $11 = (HEAP32[$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$0 + 28 >> 2] | 0) >>> 0 ? 2 : 1;
 $12 = FUNCTION_TABLE_iiii[HEAP32[$0 + 40 >> 2] & 15]($0, 0, $11) | 0;
 if (($12 | 0) < 0) $$0 = $12; else $$0 = $12 - (HEAP32[$0 + 8 >> 2] | 0) + (HEAP32[$0 + 4 >> 2] | 0) + (HEAP32[$0 + 20 >> 2] | 0) - (HEAP32[$0 + 28 >> 2] | 0) | 0;
 return $$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $5 = 0;
 if (($0 | 0) != ($1 | 0)) {
  $4 = HEAP8[$1 + 11 >> 0] | 0;
  $5 = $4 << 24 >> 24 < 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($0, $5 ? HEAP32[$1 >> 2] | 0 : $1, $5 ? HEAP32[$1 + 4 >> 2] | 0 : $4 & 255);
 }
 return;
}

function _deleteHandle($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $5 = 0, $8 = 0;
 $1 = $0 + 216 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if ($2 | 0) {
  _arPattDetach($2) | 0;
  _arDeleteHandle(HEAP32[$1 >> 2] | 0) | 0;
  HEAP32[$1 >> 2] = 0;
 }
 $5 = $0 + 228 | 0;
 if (HEAP32[$5 >> 2] | 0) {
  _ar3DDeleteHandle($5) | 0;
  HEAP32[$5 >> 2] = 0;
 }
 $8 = $0 + 192 | 0;
 if (HEAP32[$8 >> 2] | 0) {
  _arParamLTFree($8) | 0;
  HEAP32[$8 >> 2] = 0;
 }
 return;
}

function _arVecInnerproduct($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$013 = 0.0, $15 = 0.0, $3 = 0;
 $3 = HEAP32[$0 + 4 >> 2] | 0;
 if (($3 | 0) != (HEAP32[$1 + 4 >> 2] | 0)) _exit(0);
 $$0 = 0;
 $$013 = 0.0;
 while (1) {
  if (($$0 | 0) >= ($3 | 0)) break;
  $15 = $$013 + +HEAPF64[(HEAP32[$0 >> 2] | 0) + ($$0 << 3) >> 3] * +HEAPF64[(HEAP32[$1 >> 2] | 0) + ($$0 << 3) >> 3];
  $$0 = $$0 + 1 | 0;
  $$013 = $15;
 }
 return +$$013;
}

function _shl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $3 = 0, $5 = 0, $7 = 0;
 $3 = $0 + 4 | 0;
 if ($1 >>> 0 > 31) {
  $5 = HEAP32[$0 >> 2] | 0;
  HEAP32[$3 >> 2] = $5;
  HEAP32[$0 >> 2] = 0;
  $$0 = $1 + -32 | 0;
  $10 = 0;
  $7 = $5;
 } else {
  $$0 = $1;
  $10 = HEAP32[$0 >> 2] | 0;
  $7 = HEAP32[$3 >> 2] | 0;
 }
 HEAP32[$3 >> 2] = $10 >>> (32 - $$0 | 0) | $7 << $$0;
 HEAP32[$0 >> 2] = $10 << $$0;
 return;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $5 = 0, $6 = 0;
 if (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE17pointer_in_bufferEPc($0, $1) | 0) {
  $5 = $1 + (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8align_upEj($2) | 0) | 0;
  $6 = $0 + 4096 | 0;
  if (($5 | 0) == (HEAP32[$6 >> 2] | 0)) HEAP32[$6 >> 2] = $1;
 } else _free($1);
 return;
}

function _shr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $3 = 0, $5 = 0, $7 = 0;
 $3 = $0 + 4 | 0;
 if ($1 >>> 0 > 31) {
  $5 = HEAP32[$3 >> 2] | 0;
  HEAP32[$0 >> 2] = $5;
  HEAP32[$3 >> 2] = 0;
  $$0 = $1 + -32 | 0;
  $10 = 0;
  $7 = $5;
 } else {
  $$0 = $1;
  $10 = HEAP32[$3 >> 2] | 0;
  $7 = HEAP32[$0 >> 2] | 0;
 }
 HEAP32[$0 >> 2] = $10 << 32 - $$0 | $7 >>> $$0;
 HEAP32[$3 >> 2] = $10 >>> $$0;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4);
 return;
}

function _ar3DCreateHandle2($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = _malloc(4) | 0;
 if (!$1) {
  _arLog(0, 3, 5051, sp);
  _exit(1);
 }
 $3 = _icpCreateHandle($0) | 0;
 HEAP32[$1 >> 2] = $3;
 if (!$3) {
  _free($1);
  $$0 = 0;
 } else $$0 = $1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _copysign($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $8 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $1;
 $8 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $3 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = $2;
 HEAP32[tempDoublePtr + 4 >> 2] = $8;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function _arLog($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if (($2 | 0) != 0 & (HEAP32[484] | 0) <= ($1 | 0)) if (HEAP8[$2 >> 0] | 0) {
  HEAP32[$3 >> 2] = $varargs;
  _arLogv(0, $1, $2, $3);
 }
 STACKTOP = sp;
 return;
}

function ___unlist_locked_file($0) {
 $0 = $0 | 0;
 var $$pre = 0, $$sink = 0, $10 = 0, $5 = 0;
 if (HEAP32[$0 + 68 >> 2] | 0) {
  $5 = HEAP32[$0 + 116 >> 2] | 0;
  $$pre = $0 + 112 | 0;
  if ($5 | 0) HEAP32[$5 + 112 >> 2] = HEAP32[$$pre >> 2];
  $10 = HEAP32[$$pre >> 2] | 0;
  if (!$10) $$sink = (___pthread_self_699() | 0) + 232 | 0; else $$sink = $10 + 116 | 0;
  HEAP32[$$sink >> 2] = $5;
 }
 return;
}

function __ZNSt3__218__libcpp_refstringC2EPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, $7 = 0;
 $2 = _strlen($1) | 0;
 $4 = __Znwj($2 + 13 | 0) | 0;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 + 8 >> 2] = 0;
 $7 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($4) | 0;
 _memcpy($7 | 0, $1 | 0, $2 + 1 | 0) | 0;
 HEAP32[$0 >> 2] = $7;
 return;
}

function __ZN10emscripten8internal7InvokerIiJEE6invokeEPFivE($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = FUNCTION_TABLE_i[$0 & 1]() | 0;
 HEAP32[$1 >> 2] = $2;
 $3 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($1) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function ___stdio_close($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $3 = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0;
 HEAP32[$vararg_buffer >> 2] = $3;
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) $$0 = 0; else {
  $3 = Math_imul($1, $0) | 0;
  if (($1 | $0) >>> 0 > 65535) $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; else $$0 = $3;
 }
 $8 = _malloc($$0) | 0;
 if (!$8) return $8 | 0;
 if (!(HEAP32[$8 + -4 >> 2] & 3)) return $8 | 0;
 _memset($8 | 0, 0, $$0 | 0) | 0;
 return $8 | 0;
}

function __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0, $1 + 4 | 0, $3);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $5 = 0;
 $2 = __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8align_upEj($1) | 0;
 $4 = $0 + 4096 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($0 + 4096 - $5 | 0) >>> 0 < $2 >>> 0) $$0 = _malloc($2) | 0; else {
  HEAP32[$4 >> 2] = $5 + $2;
  $$0 = $5;
 }
 return $$0 | 0;
}

function _arMatrixAlloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $6 = 0;
 $2 = _malloc(12) | 0;
 do if (!$2) $$0 = 0; else {
  $6 = _malloc(Math_imul($0 << 3, $1) | 0) | 0;
  HEAP32[$2 >> 2] = $6;
  if (!$6) {
   _free($2);
   $$0 = 0;
   break;
  } else {
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 + 8 >> 2] = $1;
   $$0 = $2;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function __ZSt9terminatev() {
 var $0 = 0, $2 = 0, $5 = 0;
 $0 = ___cxa_get_globals_fast() | 0;
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0;
  if ($2 | 0) {
   $5 = $2 + 48 | 0;
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) __ZSt11__terminatePFvvE(HEAP32[$2 + 12 >> 2] | 0);
  }
 }
 __ZSt11__terminatePFvvE(__ZSt13get_terminatev() | 0);
}

function __ZNSt3__214__split_bufferI12multi_markerRNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 $5 = HEAP32[$3 >> 2] | 0;
 while (1) {
  if (($5 | 0) == ($2 | 0)) break;
  $6 = $5 + -8 | 0;
  HEAP32[$3 >> 2] = $6;
  $5 = $6;
 }
 $7 = HEAP32[$0 >> 2] | 0;
 if ($7 | 0) __ZdlPv($7);
 return;
}

function __ZNSt3__218__libcpp_refstringD2Ev($0) {
 $0 = $0 | 0;
 var $3 = 0, $4 = 0, $5 = 0;
 if (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) | 0) {
  $3 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_350(HEAP32[$0 >> 2] | 0) | 0;
  $4 = $3 + 8 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $5 + -1;
  if (($5 + -1 | 0) < 0) __ZdlPv($3);
 }
 return;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3);
 return;
}

function _arUtilGetPixelSize($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 switch ($0 | 0) {
 case 1:
 case 0:
  {
   $$0 = 3;
   break;
  }
 case 6:
 case 4:
 case 3:
 case 2:
  {
   $$0 = 4;
   break;
  }
 case 14:
 case 13:
 case 12:
 case 5:
  {
   $$0 = 1;
   break;
  }
 case 11:
 case 10:
 case 9:
 case 8:
 case 7:
  {
   $$0 = 2;
   break;
  }
 default:
  $$0 = 0;
 }
 return $$0 | 0;
}

function ___uflow($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 if (!(___toread($0) | 0)) if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 32 >> 2] & 15]($0, $1, 1) | 0) == 1) $$0 = HEAPU8[$1 >> 0] | 0; else $$0 = -1; else $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $spec$select = 0;
 $5 = $0 + 20 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0;
 $spec$select = $7 >>> 0 > $2 >>> 0 ? $2 : $7;
 _memcpy($6 | 0, $1 | 0, $spec$select | 0) | 0;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $spec$select;
 return $2 | 0;
}

function ___memrchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$in = 0, $4 = 0;
 L1 : do if (!$2) $$0 = 0; else {
  $4 = $1 & 255;
  $$in = $2;
  while (1) {
   $$in = $$in + -1 | 0;
   if ((HEAP8[$0 + $$in >> 0] | 0) == $4 << 24 >> 24) break;
   if (!$$in) {
    $$0 = 0;
    break L1;
   }
  }
  $$0 = $0 + $$in | 0;
 } while (0);
 return $$0 | 0;
}

function __Znwj($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $2 = 0, $4 = 0, $spec$store$select = 0;
 $spec$store$select = ($0 | 0) == 0 ? 1 : $0;
 while (1) {
  $2 = _malloc($spec$store$select) | 0;
  if ($2 | 0) {
   $$lcssa = $2;
   break;
  }
  $4 = __ZSt15get_new_handlerv() | 0;
  if (!$4) {
   $$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$4 & 3]();
 }
 return $$lcssa | 0;
}

function _ferror($0) {
 $0 = $0 | 0;
 var $$lobit = 0, $$lobit9 = 0, $phitmp = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($0) | 0) == 0;
  $$lobit = (HEAP32[$0 >> 2] | 0) >>> 5 & 1;
  if ($phitmp) $$lobit9 = $$lobit; else {
   ___unlockfile($0);
   $$lobit9 = $$lobit;
  }
 } else $$lobit9 = (HEAP32[$0 >> 2] | 0) >>> 5 & 1;
 return $$lobit9 | 0;
}

function ___fseeko($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $8 = 0, $9 = 0, $phitmp = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($0) | 0) == 0;
  $8 = ___fseeko_unlocked($0, $1, $2) | 0;
  if ($phitmp) $9 = $8; else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else $9 = ___fseeko_unlocked($0, $1, $2) | 0;
 return $9 | 0;
}

function __ZNK10__cxxabiv112_GLOBAL__N_111string_pair4sizeEv($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $9 = 0;
 $2 = HEAP8[$0 + 11 >> 0] | 0;
 if ($2 << 24 >> 24 < 0) $16 = HEAP32[$0 + 4 >> 2] | 0; else $16 = $2 & 255;
 $9 = HEAP8[$0 + 12 + 11 >> 0] | 0;
 if ($9 << 24 >> 24 < 0) $15 = HEAP32[$0 + 16 >> 2] | 0; else $15 = $9 & 255;
 return $15 + $16 | 0;
}

function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 HEAP32[$3 >> 2] = $varargs;
 $4 = _vsnprintf($0, $1, $2, $3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _matrixCopy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$012 = 0;
 $$012 = 0;
 while (1) {
  if (($$012 | 0) == 3) break;
  $$0 = 0;
  while (1) {
   if (($$0 | 0) == 4) break;
   HEAPF64[$1 + ($$012 << 5) + ($$0 << 3) >> 3] = +HEAPF64[$0 + ($$012 << 5) + ($$0 << 3) >> 3];
   $$0 = $$0 + 1 | 0;
  }
  $$012 = $$012 + 1 | 0;
 }
 return;
}

function _rewind($0) {
 $0 = $0 | 0;
 var $phitmp = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($0) | 0) == 0;
  ___fseeko_unlocked($0, 0, 0) | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -33;
  if (!$phitmp) ___unlockfile($0);
 } else {
  ___fseeko_unlocked($0, 0, 0) | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -33;
 }
 return;
}

function _arDeleteHandle($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $3 = 0;
 if (!$0) $$0 = -1; else {
  $2 = $0 + 7062408 | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  if ($3 | 0) {
   _arImageProcFinal($3);
   HEAP32[$2 >> 2] = 0;
  }
  _free(HEAP32[$0 + 4834144 >> 2] | 0);
  _free(HEAP32[$0 + 4834148 >> 2] | 0);
  _free($0);
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($0, $1, $2, __ZNSt3__211char_traitsIcE6lengthEPKc($2) | 0) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0, $1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0 + 12 | 0, $1 + 12 | 0);
 return;
}

function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 HEAP32[$1 >> 2] = $varargs;
 $2 = HEAP32[520] | 0;
 _vfprintf($2, $0, $1) | 0;
 _fputc(10, $2) | 0;
 _abort();
}

function ___shlim($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 + 104 >> 2] = $1;
 $4 = HEAP32[$0 + 8 >> 2] | 0;
 $6 = HEAP32[$0 + 4 >> 2] | 0;
 $7 = $4 - $6 | 0;
 HEAP32[$0 + 108 >> 2] = $7;
 if (($1 | 0) != 0 & ($7 | 0) > ($1 | 0)) HEAP32[$0 + 100 >> 2] = $6 + $1; else HEAP32[$0 + 100 >> 2] = $4;
 return;
}

function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!(_pthread_once(18008, 2) | 0)) {
  $3 = _pthread_getspecific(HEAP32[4503] | 0) | 0;
  STACKTOP = sp;
  return $3 | 0;
 } else _abort_message(14737, sp);
 return 0;
}

function _a_ctz_l_811($0) {
 $0 = $0 | 0;
 var $$068 = 0, $$07 = 0, $$09 = 0, $4 = 0;
 if (!$0) $$07 = 32; else if (!($0 & 1)) {
  $$068 = $0;
  $$09 = 0;
  while (1) {
   $4 = $$09 + 1 | 0;
   if (!($$068 & 2)) {
    $$068 = $$068 >>> 1;
    $$09 = $4;
   } else {
    $$07 = $4;
    break;
   }
  }
 } else $$07 = 0;
 return $$07 | 0;
}

function __ZN10emscripten8internal7InvokerIvJiiEE6invokeEPFviiEii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1) | 0;
 $4 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2) | 0;
 FUNCTION_TABLE_vii[$0 & 7]($3, $4);
 return;
}

function _sscanf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $varargs;
 $3 = _vsscanf($0, $1, $2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _arParamLTFree($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 if (!$0) $$0 = -1; else {
  $2 = HEAP32[$0 >> 2] | 0;
  if (!$2) $$0 = -1; else {
   _free(HEAP32[$2 + 184 >> 2] | 0);
   _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 188 >> 2] | 0);
   _free(HEAP32[$0 >> 2] | 0);
   HEAP32[$0 >> 2] = 0;
   $$0 = 0;
  }
 }
 return $$0 | 0;
}

function __ZN10emscripten8internal7InvokerIvJifEE6invokeEPFvifEif($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 var $3 = 0, $4 = 0.0;
 $3 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1) | 0;
 $4 = +__ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($2);
 FUNCTION_TABLE_vid[$0 & 3]($3, $4);
 return;
}

function __ZN10emscripten8internal7InvokerIvJidEE6invokeEPFvidEid($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 var $3 = 0, $4 = 0.0;
 $3 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1) | 0;
 $4 = +__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2);
 FUNCTION_TABLE_vid[$0 & 3]($3, $4);
 return;
}

function __ZN10emscripten8constantIiEEvPKcRKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __ZN10emscripten8internal6TypeIDIRKiE3getEv() | 0;
 __embind_register_constant($0 | 0, $2 | 0, __ZN10emscripten8internal14asGenericValueIiEEjT_(__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($1) | 0) | 0);
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0;
  if ((HEAP32[$7 >> 2] | 0) != 1) HEAP32[$7 >> 2] = $3;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 _free($0);
 if (!(_pthread_setspecific(HEAP32[4503] | 0, 0) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(14836, sp);
}

function __ZN10emscripten8constantIdEEvPKcRKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __ZN10emscripten8internal6TypeIDIRKdE3getEv() | 0;
 __embind_register_constant($0 | 0, $2 | 0, __ZN10emscripten8internal14asGenericValueIdEEjT_(+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($1)) | 0);
 return;
}

function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEEC2EjRKS8_RKS9_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = HEAP32[$1 >> 2];
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0, $1, __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0) | 0;
}

function _arVecAlloc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _malloc(8) | 0;
 do if (!$1) $$0 = 0; else {
  $4 = _malloc($0 << 3) | 0;
  HEAP32[$1 >> 2] = $4;
  if (!$4) {
   _free($1);
   $$0 = 0;
   break;
  } else {
   HEAP32[$1 + 4 >> 2] = $0;
   $$0 = $1;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($0, $1, __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE10deallocateEPS8_j($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[$0 >> 2] | 0, $1, $2 << 4);
 return;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() | 0;
}

function ___ftello($0) {
 $0 = $0 | 0;
 var $6 = 0, $7 = 0, $phitmp = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($0) | 0) == 0;
  $6 = ___ftello_unlocked($0) | 0;
  if ($phitmp) $7 = $6; else {
   ___unlockfile($0);
   $7 = $6;
  }
 } else $7 = ___ftello_unlocked($0) | 0;
 return $7 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKc($0) {
 $0 = $0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKcj($0, __ZNSt3__211char_traitsIcE6lengthEPKc(16538) | 0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0 + 12 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
 return;
}

function _arMatrixAllocMul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0;
 $6 = _arMatrixAlloc(HEAP32[$0 + 4 >> 2] | 0, HEAP32[$1 + 8 >> 2] | 0) | 0;
 if (!$6) $$0 = 0; else if ((_arMatrixMul($6, $0, $1) | 0) < 0) {
  _arMatrixFree($6) | 0;
  $$0 = 0;
 } else $$0 = $6;
 return $$0 | 0;
}

function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEC2EjRKS6_RKS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = HEAP32[$1 >> 2];
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE10deallocateEPS6_j($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[$0 >> 2] | 0, $1, $2 << 4);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!(_pthread_key_create(18012, 12) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(14786, sp);
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE8allocateEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj(HEAP32[$0 >> 2] | 0, $1 << 4) | 0;
}

function _arMatrixAllocTrans($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0;
 $5 = _arMatrixAlloc(HEAP32[$0 + 8 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0) | 0;
 if (!$5) $$0 = 0; else if ((_arMatrixTrans($5, $0) | 0) < 0) {
  _arMatrixFree($5) | 0;
  $$0 = 0;
 } else $$0 = $5;
 return $$0 | 0;
}

function _arPattFree($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0;
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($1 << 2) | 0;
 if (!(HEAP32[$4 >> 2] | 0)) $$0 = -1; else {
  HEAP32[$4 >> 2] = 0;
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  $$0 = 1;
 }
 return $$0 | 0;
}

function _arMatrixAllocDup($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0;
 $5 = _arMatrixAlloc(HEAP32[$0 + 4 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0) | 0;
 if (!$5) $$0 = 0; else if ((_arMatrixDup($5, $0) | 0) < 0) {
  _arMatrixFree($5) | 0;
  $$0 = 0;
 } else $$0 = $5;
 return $$0 | 0;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE10deallocateEPS2_j($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[$0 >> 2] | 0, $1, $2 * 24 | 0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE8allocateEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj(HEAP32[$0 >> 2] | 0, $1 << 4) | 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0) {
 $0 = $0 | 0;
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj(HEAP32[$0 >> 2] | 0);
 return;
}

function _pntz($0) {
 $0 = $0 | 0;
 var $3 = 0, $7 = 0;
 $3 = _a_ctz_l_811((HEAP32[$0 >> 2] | 0) + -1 | 0) | 0;
 if (!$3) {
  $7 = _a_ctz_l_811(HEAP32[$0 + 4 >> 2] | 0) | 0;
  return (($7 | 0) == 0 ? 0 : $7 + 32 | 0) | 0;
 } else return $3 | 0;
 return 0;
}

function ___ofl_add($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0;
 $1 = ___ofl_lock() | 0;
 HEAP32[$0 + 56 >> 2] = HEAP32[$1 >> 2];
 $4 = HEAP32[$1 >> 2] | 0;
 if ($4 | 0) HEAP32[$4 + 52 >> 2] = $0;
 HEAP32[$1 >> 2] = $0;
 ___ofl_unlock();
 return $0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() | 0;
}

function _arPattAttach($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0;
 if (!$0) $$0 = -1; else {
  $3 = $0 + 7062384 | 0;
  if (!(HEAP32[$3 >> 2] | 0)) {
   HEAP32[$3 >> 2] = $1;
   $$0 = 0;
  } else $$0 = -1;
 }
 return $$0 | 0;
}

function _ar3DDeleteHandle($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) $$0 = -1; else {
  _icpDeleteHandle($1) | 0;
  _free(HEAP32[$0 >> 2] | 0);
  HEAP32[$0 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 FUNCTION_TABLE_v[$0 & 3]();
 _abort_message(14889, sp);
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE8allocateEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj(HEAP32[$0 >> 2] | 0, $1 * 24 | 0) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1;
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0);
 return ret | 0;
}

function __ZN10emscripten8internal7InvokerIvJiEE6invokeEPFviEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1) | 0;
 FUNCTION_TABLE_vi[$0 & 15]($2);
 return;
}

function _arPattDetach($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 if (!$0) $$0 = -1; else {
  $2 = $0 + 7062384 | 0;
  if (!(HEAP32[$2 >> 2] | 0)) $$0 = -1; else {
   HEAP32[$2 >> 2] = 0;
   $$0 = 0;
  }
 }
 return $$0 | 0;
}

function _arSetLabelingThreshModeAutoInterval($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) $$0 = -1; else {
  HEAP32[$0 + 7062392 >> 2] = $1;
  HEAP32[$0 + 7062396 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2IS4_EERKNS1_IT_Lj4096EEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 return;
}

function _byteSwapDouble($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 8) break;
  HEAP8[$1 + $$0 >> 0] = HEAP8[$0 + (7 - $$0) >> 0] | 0;
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function _arGetLabelingThreshMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($0 | 0) != 0 & ($1 | 0) != 0) {
  HEAP32[$1 >> 2] = HEAP32[$0 + 7062388 >> 2];
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function _byteSwapInt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 4) break;
  HEAP8[$1 + $$0 >> 0] = HEAP8[$0 + (3 - $$0) >> 0] | 0;
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) $$0 = 0; else $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0;
 return (($$0 | 0) == 0 ? $0 : $$0) | 0;
}

function _arImageProcInit($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _malloc(2064) | 0;
 if ($2 | 0) {
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
 }
 return $2 | 0;
}

function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0;
}

function _arGetMatrixCodeType($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($0 | 0) != 0 & ($1 | 0) != 0) {
  HEAP32[$1 >> 2] = HEAP32[$0 + 7062424 >> 2];
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function _arSetPattRatio($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $$0 = 0;
 if (!$0) $$0 = -1; else if ($1 <= 0.0 | $1 >= 1.0) $$0 = -1; else {
  HEAPF64[$0 + 7062416 >> 3] = $1;
  $$0 = 0;
 }
 return $$0 | 0;
}

function ___strdup($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $3 = 0;
 $2 = (_strlen($0) | 0) + 1 | 0;
 $3 = _malloc($2) | 0;
 if (!$3) $$0 = 0; else $$0 = _memcpy($3 | 0, $0 | 0, $2 | 0) | 0;
 return $$0 | 0;
}

function _arGetLabelingThresh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($0 | 0) != 0 & ($1 | 0) != 0) {
  HEAP32[$1 >> 2] = HEAP32[$0 + 16 >> 2];
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1;
 return;
}

function _arGetLabelingMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($0 | 0) != 0 & ($1 | 0) != 0) {
  HEAP32[$1 >> 2] = HEAP32[$0 + 12 >> 2];
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function __ZNSt3__213__vector_baseI12multi_markerNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  HEAP32[$0 + 4 >> 2] = $1;
  __ZdlPv($1);
 }
 return;
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}

function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0, $3 = 0;
 if ($0 >>> 0 > 4294963200) {
  $3 = ___errno_location() | 0;
  HEAP32[$3 >> 2] = 0 - $0;
  $$0 = -1;
 } else $$0 = $0;
 return $$0 | 0;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function _arSetPatternDetectionMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($0 | 0) != 0 & $1 >>> 0 < 5) {
  HEAP32[$0 + 24 >> 2] = $1;
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function __ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 268435455;
}

function _arGetDebugMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($0 | 0) != 0 & ($1 | 0) != 0) {
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc($0) {
 $0 = $0 | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() | 0, 3, $0 | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc($0) {
 $0 = $0 | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() | 0, 2, $0 | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc($0) {
 $0 = $0 | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() | 0, 5, $0 | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc($0) {
 $0 = $0 | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() | 0, 4, $0 | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc($0) {
 $0 = $0 | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() | 0, 1, $0 | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc($0) {
 $0 = $0 | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() | 0, 0, $0 | 0);
 return;
}

function _arSetLabelingThresh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($0 | 0) == 0 | $1 >>> 0 > 255) $$0 = -1; else {
  HEAP32[$0 + 16 >> 2] = $1;
  $$0 = 0;
 }
 return $$0 | 0;
}

function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $1 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return $1 | 0;
}

function ___DOUBLE_BITS_563($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $1 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return $1 | 0;
}

function __ZNSt3__211char_traitsIcE7compareEPKcS3_j($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 if (!$2) $$0 = 0; else $$0 = _memcmp($0, $1, $2) | 0;
 return $$0 | 0;
}

function _arSetImageProcMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($0 | 0) != 0 & $1 >>> 0 < 2) {
  HEAP32[$0 + 20 >> 2] = $1;
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiiEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiiiEEEE3getEv() | 0;
}

function _arSetLabelingMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($0 | 0) != 0 & $1 >>> 0 < 2) {
  HEAP32[$0 + 12 >> 2] = $1;
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJviiEEEE3getEv() | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvifEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvifEEEE3getEv() | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvidEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvidEEEE3getEv() | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiiEEEE3getEv() | 0;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function _icpDeleteHandle($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) $$0 = -1; else {
  _free($1);
  HEAP32[$0 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJviEEEE3getEv() | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiEEEE3getEv() | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdiEEEE3getEv() | 0;
}

function _arGetPatternDetectionMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) $$0 = -1; else {
  HEAP32[$1 >> 2] = HEAP32[$0 + 24 >> 2];
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv() | 0;
}

function _arGetPattRatio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) $$0 = -1; else {
  HEAPF64[$1 >> 3] = +HEAPF64[$0 + 7062416 >> 3];
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE17pointer_in_bufferEPc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 + 4096 | 0) >>> 0 >= $1 >>> 0 & $0 >>> 0 <= $1 >>> 0 | 0;
}

function _arGetImageProcMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) $$0 = -1; else {
  HEAP32[$1 >> 2] = HEAP32[$0 + 20 >> 2];
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() | 0, 5, 11236);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() | 0, 4, 11306);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() | 0, 6, 11174);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() | 0, 7, 11043);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() | 0, 7, 11111);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() | 0, 0, 11553);
 return;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($0) {
 $0 = $0 | 0;
 return 3;
}

function __ZN12_GLOBAL__N_116register_integerIlEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIlE3getEv() | 0, 16583, 4, -2147483648, 2147483647);
 return;
}

function __ZN12_GLOBAL__N_116register_integerIiEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIiE3getEv() | 0, 16566, 4, -2147483648, 2147483647);
 return;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($0) {
 $0 = $0 | 0;
 return 2;
}

function __ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 268435455;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function _arSetMatrixCodeType($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) $$0 = -1; else {
  HEAP32[$0 + 7062424 >> 2] = $1;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _arGetTransMatMultiSquareRobust($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return +(+_arGetTransMatMultiSquare2($0, $1, $2, $3, 1));
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EEC2ERNS0_5arenaILj4096EEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0 | 0;
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$0 >> 2] | 0);
 return;
}

function _icpSetInlierProbability($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $$0 = 0;
 if (!$0) $$0 = -1; else {
  HEAPF64[$0 + 128 >> 3] = $1;
  $$0 = 0;
 }
 return $$0 | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP8[$0 + 4 >> 0] = HEAP8[$1 >> 0] | 0;
 return;
}

function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0;
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0;
}

function __ZNSt3__211char_traitsIcE4moveEPcPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if ($2 | 0) _memmove($0 | 0, $1 | 0, $2 | 0) | 0;
 return $0 | 0;
}

function _arImageProcLumaHistAndCDFAndMedian($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _arImageProcLumaHistAndCDFAndPercentile($0, $1, .5, $2) | 0;
}

function __ZNSt3__211char_traitsIcE4copyEPcPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if ($2 | 0) _memcpy($0 | 0, $1 | 0, $2 | 0) | 0;
 return $0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjEC2ERj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
 return;
}

function __ZN12_GLOBAL__N_116register_integerIsEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIsE3getEv() | 0, 16361, 2, -32768, 32767);
 return;
}

function _arGetTransMatMultiSquare($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return +(+_arGetTransMatMultiSquare2($0, $1, $2, $3, 0));
}

function __ZN12_GLOBAL__N_116register_integerIcEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIcE3getEv() | 0, 16330, 1, -128, 127);
 return;
}

function __ZN12_GLOBAL__N_116register_integerIaEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIaE3getEv() | 0, 16335, 1, -128, 127);
 return;
}

function _icpGetXw2XcCleanup_221($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 _free($0);
 _free($1);
 _free($2);
 _free($3);
 return;
}

function __ZN12_GLOBAL__N_116register_integerItEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDItE3getEv() | 0, 16367, 2, 0, 65535);
 return;
}

function _arMatrixSelfInv($0) {
 $0 = $0 | 0;
 var $3 = 0;
 $3 = HEAP32[$0 + 4 >> 2] | 0;
 return ((_minv(HEAP32[$0 >> 2] | 0, $3, $3) | 0) == 0) << 31 >> 31 | 0;
}

function __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $1 >>> 0 <= $0 >>> 0 & $0 >>> 0 < $2 >>> 0 | 0;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 1](a1 | 0, a2 | 0, a3 | 0);
}

function __ZNSt11logic_errorC2EPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 3424;
 __ZNSt3__218__libcpp_refstringC2EPKc($0 + 4 | 0, $1);
 return;
}

function __ZN12_GLOBAL__N_116register_integerIhEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIhE3getEv() | 0, 16347, 1, 0, 255);
 return;
}

function __ZN12_GLOBAL__N_116register_integerImEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDImE3getEv() | 0, 16588, 4, 0, -1);
 return;
}

function __ZN12_GLOBAL__N_116register_integerIjEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIjE3getEv() | 0, 16570, 4, 0, -1);
 return;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() {
 return 2044;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() {
 return 2024;
}

function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0;
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0;
}

function _compE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0.0;
 $4 = +HEAPF64[$0 >> 3] - +HEAPF64[$1 >> 3];
 return ($4 < 0.0 ? -1 : $4 > 0.0 & 1) | 0;
}

function dynCall_viid(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 FUNCTION_TABLE_viid[index & 3](a1 | 0, a2 | 0, +a3);
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() | 0;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function ___cxx_global_var_init_1() {
 HEAP32[4344] = 0;
 HEAP32[4345] = 0;
 HEAP32[4346] = 0;
 HEAP32[4347] = 0;
 HEAP32[4348] = 1065353216;
 return;
}

function __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 178956970;
}

function __ZN12_GLOBAL__N_114register_floatIfEEvPKc() {
 __embind_register_float(__ZN10emscripten8internal6TypeIDIfE3getEv() | 0, 16612, 4);
 return;
}

function __ZN12_GLOBAL__N_114register_floatIdEEvPKc() {
 __embind_register_float(__ZN10emscripten8internal6TypeIDIdE3getEv() | 0, 16724, 8);
 return;
}

function ___cxx_global_var_init() {
 HEAP32[4339] = 0;
 HEAP32[4340] = 0;
 HEAP32[4341] = 0;
 HEAP32[4342] = 0;
 HEAP32[4343] = 1065353216;
 return;
}

function _strerror($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = (___pthread_self_85() | 0) + 188 | 0;
 return ___strerror_l($0, HEAP32[$2 >> 2] | 0) | 0;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0;
}

function b15(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(15);
}

function _dot($0, $1, $2, $3, $4, $5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 return +($0 * $3 + $1 * $4 + $2 * $5);
}

function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0;
}

function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 >> 2] >> 0] = HEAP8[$0 + 4 >> 0] | 0;
 return;
}

function dynCall_dii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +FUNCTION_TABLE_dii[index & 1](a1 | 0, a2 | 0);
}

function __ZN12arControllerD2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213__vector_baseI12multi_markerNS_9allocatorIS1_EEED2Ev($0 + 248 | 0);
 return;
}

function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) $$0 = 0; else $$0 = _wcrtomb($0, $1, 0) | 0;
 return $$0 | 0;
}

function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) ___fwritex($1, $2, $0) | 0;
 return;
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$0 + 4 >> 2];
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0;
 return (($1 | 0) == 0 ? $0 : $3) | 0;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function __GLOBAL__sub_I_ARToolKitJS_cpp() {
 ___cxx_global_var_init();
 ___cxx_global_var_init_1();
 ___cxx_global_var_init_22();
 return;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 return 144;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 return 168;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 3424;
 __ZNSt3__218__libcpp_refstringD2Ev($0 + 4 | 0);
 return;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 return 8;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 7](a1 | 0, a2 | 0);
}

function __ZNSt3__211char_traitsIcE6assignERcRKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = HEAP8[$1 >> 0] | 0;
 return;
}

function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() | 0;
}

function dynCall_vid(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 FUNCTION_TABLE_vid[index & 3](a1 | 0, +a2);
}

function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0;
}

function b14(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(14);
}

function _mbsinit($0) {
 $0 = $0 | 0;
 var $4 = 0;
 if (!$0) $4 = 1; else $4 = (HEAP32[$0 >> 2] | 0) == 0 & 1;
 return $4 | 0;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($0) {
 $0 = $0 | 0;
 return $0 + 12 | 0;
}

function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0 | 0;
 return __ZNKSt3__218__libcpp_refstring5c_strEv($0 + 4 | 0) | 0;
}

function __ZN10emscripten8internal6TypeIDIRKiE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIRKiE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIRKdE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIRKdE3getEv() | 0;
}

function _strncpy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 ___stpncpy($0, $1, $2) | 0;
 return $0 | 0;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 31](a1 | 0) | 0;
}

function ___cxx_global_var_init_125() {
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(0);
 return;
}

function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIvE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDItE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDItE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIsE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDImE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDImE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIlE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIjE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIiE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIhE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIfE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIdE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIcE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIbE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIaE3getEv() | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EEC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 + 4096 >> 2] = $0;
 return;
}

function b6(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(6);
 return 0;
}

function _norm($0, $1, $2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 return +(+Math_sqrt(+($0 * $0 + $1 * $1 + $2 * $2)));
}

function _arImageProcFinal($0) {
 $0 = $0 | 0;
 if ($0 | 0) {
  _free(HEAP32[$0 >> 2] | 0);
  _free($0);
 }
 return;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiiEE8getCountEv($0) {
 $0 = $0 | 0;
 return 4;
}

function __ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($0) {
 $0 = $0 | 0;
 return +(+HEAPF64[$0 >> 3]);
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 + 4096 >> 2] = 0;
 return;
}

function _isxdigit($0) {
 $0 = $0 | 0;
 return ((($0 | 32) + -97 | 0) >>> 0 < 6 | (_isdigit($0) | 0) != 0) & 1 | 0;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_350($0) {
 $0 = $0 | 0;
 return $0 + -12 | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiEE8getCountEv($0) {
 $0 = $0 | 0;
 return 3;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvifEE8getCountEv($0) {
 $0 = $0 | 0;
 return 3;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvidEE8getCountEv($0) {
 $0 = $0 | 0;
 return 3;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getCountEv($0) {
 $0 = $0 | 0;
 return 3;
}

function __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($0) {
 $0 = $0 | 0;
 return HEAP32[$0 >> 2] | 0;
}

function _strrchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___memrchr($0, $1, (_strlen($0) | 0) + 1 | 0) | 0;
}

function _arMatrixFree($0) {
 $0 = $0 | 0;
 if ($0 | 0) {
  _free(HEAP32[$0 >> 2] | 0);
  _free($0);
 }
 return 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviEE8getCountEv($0) {
 $0 = $0 | 0;
 return 2;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getCountEv($0) {
 $0 = $0 | 0;
 return 2;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getCountEv($0) {
 $0 = $0 | 0;
 return 2;
}

function dynCall_di(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return +FUNCTION_TABLE_di[index & 3](a1 | 0);
}

function _do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___string_read($0, $1, $2) | 0;
}

function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[4504] | 0;
 HEAP32[4504] = $0 + 0;
 return $0 | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getCountEv($0) {
 $0 = $0 | 0;
 return 1;
}

function __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($0) {
 $0 = $0 | 0;
 _free($0);
 return;
}

function __ZNSt3__24pairIKi12arControllerED2Ev($0) {
 $0 = $0 | 0;
 __ZN12arControllerD2Ev($0 + 8 | 0);
 return;
}

function __ZNKSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 536870911;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8align_upEj($0) {
 $0 = $0 | 0;
 return $0 + 15 & -16 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($0) {
 $0 = $0 | 0;
 return _malloc($0) | 0;
}

function ___cxx_global_var_init_22() {
 __ZN46EmscriptenBindingInitializer_constant_bindingsC2Ev(0);
 return;
}

function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[833] | 0;
 HEAP32[833] = $0 + 0;
 return $0 | 0;
}

function b13(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(13);
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 15](a1 | 0);
}

function _fseek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___fseeko($0, $1, $2) | 0;
}

function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNSt12length_errorD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0 | 0;
 _abort();
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0 | 0;
 _abort();
}

function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0 | 0;
 _abort();
}

function __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 return (x ? 31 - (Math_clz32(x ^ x - 1) | 0) | 0 : 32) | 0;
}

function _icpGetXw2XcCleanup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 _free($0);
 _free($1);
 return;
}

function _arMultiFreeConfig($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 >> 2] | 0);
 _free($0);
 return 0;
}

function __ZN10emscripten8internal14asGenericValueIdEEjT_($0) {
 $0 = +$0;
 return ~~$0 >>> 0 | 0;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiiiEEEE3getEv() {
 return 2064;
}

function b5(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(5);
 return 0;
}

function _isspace($0) {
 $0 = $0 | 0;
 return (($0 | 0) == 32 | ($0 + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function __ZNKSt3__218__libcpp_refstring5c_strEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 >> 2] | 0;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJviiEEEE3getEv() {
 return 1980;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvifEEEE3getEv() {
 return 1968;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiiEEEE3getEv() {
 return 2032;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvidEEEE3getEv() {
 return 2e3;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJviEEEE3getEv() {
 return 2016;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiEEEE3getEv() {
 return 2056;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdiEEEE3getEv() {
 return 1992;
}

function __ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($0) {
 $0 = +$0;
 return +$0;
}

function __ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($0) {
 $0 = +$0;
 return +$0;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv() {
 return 2012;
}

function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0;
}

function __ZN10emscripten8internal14asGenericValueIiEEjT_($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 return 104;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 return 112;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 return 128;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 return 120;
}

function _arVecFree($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 >> 2] | 0);
 _free($0);
 return 0;
}

function ___getTypeName($0) {
 $0 = $0 | 0;
 return ___strdup(HEAP32[$0 + 4 >> 2] | 0) | 0;
}

function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
 $0 = $0 | 0;
 return _strlen($0) | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 return 96;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 return 64;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 return 72;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 return 80;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 return 88;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 return 56;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 return 40;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 return 48;
}

function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 1]() | 0;
}

function _ar3DCreateHandle($0) {
 $0 = $0 | 0;
 return _ar3DCreateHandle2($0 + 8 | 0) | 0;
}

function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) {
 $0 = $0 | 0;
 return 1;
}

function b12(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(12);
}

function __ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv() {
 return 10058;
}

function __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() {
 return 8036;
}

function __ZN10emscripten8internal19getGenericSignatureIJviifEEEPKcv() {
 return 7944;
}

function __ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv() {
 return 8071;
}

function __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() {
 return 9887;
}

function b11(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = +p2;
 nullFunc_viid(11);
}

function __ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv() {
 return 8079;
}

function __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() {
 return 9723;
}

function __ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv() {
 return 8067;
}

function ___emscripten_environ_constructor() {
 ___buildEnvironment(18004);
 return;
}

function __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() {
 return 8076;
}

function _copysignl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_copysign($0, $1));
}

function _scalbnl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_scalbn($0, $1));
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}

function b1(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(1);
 return 0.0;
}

function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 return 136;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 3]();
}

function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}

function b4(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(4);
 return 0;
}

function __GLOBAL__sub_I_bind_cpp() {
 ___cxx_global_var_init_125();
 return;
}

function _isupper($0) {
 $0 = $0 | 0;
 return ($0 + -65 | 0) >>> 0 < 26 | 0;
}

function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZN10emscripten8internal11LightTypeIDIRKiE3getEv() {
 return 360;
}

function __ZN10emscripten8internal11LightTypeIDIRKdE3getEv() {
 return 400;
}

function _fmodl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_fmod($0, $1));
}

function _arPattCreateHandle() {
 return _arPattCreateHandle2(16, 50) | 0;
}

function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 return 304;
}

function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 return 352;
}

function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 return 344;
}

function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 return 384;
}

function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 return 376;
}

function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 return 368;
}

function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 return 360;
}

function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 return 328;
}

function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 return 392;
}

function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 return 400;
}

function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 return 320;
}

function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 return 312;
}

function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 return 336;
}

function b10(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(10);
}

function _setLogLevel($0) {
 $0 = $0 | 0;
 HEAP32[484] = $0;
 return;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function b9(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 nullFunc_vid(9);
}

function _ftell($0) {
 $0 = $0 | 0;
 return ___ftello($0) | 0;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function b0(p0) {
 p0 = p0 | 0;
 nullFunc_di(0);
 return 0.0;
}

function ___pthread_self_910() {
 return _pthread_self() | 0;
}

function ___pthread_self_907() {
 return _pthread_self() | 0;
}

function ___pthread_self_699() {
 return _pthread_self() | 0;
}

function ___pthread_self_85() {
 return _pthread_self() | 0;
}

function b3(p0) {
 p0 = p0 | 0;
 nullFunc_ii(3);
 return 0;
}

function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNSt9exceptionD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0);
 return;
}

function ___ofl_lock() {
 ___lock(17968);
 return 17976;
}

function ___ofl_unlock() {
 ___unlock(17968);
 return;
}

function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}

function ___lockfile($0) {
 $0 = $0 | 0;
 return 0;
}

function _getLogLevel() {
 return HEAP32[484] | 0;
}

function b8(p0) {
 p0 = p0 | 0;
 nullFunc_vi(8);
}

function getTempRet0() {
 return tempRet0 | 0;
}

function ___errno_location() {
 return 17964;
}

function stackSave() {
 return STACKTOP | 0;
}

function b2() {
 nullFunc_i(2);
 return 0;
}

function __get_daylight() {
 return 17996;
}

function __get_timezone() {
 return 18e3;
}

function __get_environ() {
 return 18004;
}

function _pthread_self() {
 return 2540;
}

function __get_tzname() {
 return 17988;
}

function b7() {
 nullFunc_v(7);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_di = [b0,_getProjectionNearPlane,_getProjectionFarPlane,_getPattRatio];
var FUNCTION_TABLE_dii = [b1,__ZN10emscripten8internal7InvokerIdJiEE6invokeEPFdiEi];
var FUNCTION_TABLE_i = [b2,_getLogLevel];
var FUNCTION_TABLE_ii = [b3,___stdio_close,__ZNKSt11logic_error4whatEv,_teardown,_getMultiMarkerCount,_loadCamera,_detectMarker,_getMarkerNum,_getDebugMode,_getProcessingImage,_getThresholdMode,_getThreshold,_getPatternDetectionMode,_getMatrixCodeType,_getLabelingMode,_getImageProcMode,__ZN10emscripten8internal7InvokerIiJEE6invokeEPFivE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_iii = [b4,_compE,_addMarker,_addMultiMarker,_getMultiMarkerNum,_setMarkerInfoVertex,_getTransMatMultiSquare,_getTransMatMultiSquareRobust,_getMarkerInfo,_setDebugMode,__ZN10emscripten8internal7InvokerIiJiEE6invokeEPFiiEi,__ZN10emscripten8internal7InvokerIiJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFiS8_EPNS0_11BindingTypeIS8_EUt_E,b4,b4,b4,b4];
var FUNCTION_TABLE_iiii = [b5,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,_setup,_setMarkerInfoDir,_getTransMatSquare,_getTransMatSquareCont,_getMultiEachMarkerInfo,__ZN10emscripten8internal7InvokerIiJiNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFiiS8_EiPNS0_11BindingTypeIS8_EUt_E,__ZN10emscripten8internal7InvokerIiJiiEE6invokeEPFiiiEii,___stdio_read,_do_read];
var FUNCTION_TABLE_iiiii = [b6,__ZN10emscripten8internal7InvokerIiJiiiEE6invokeEPFiiiiEiii];
var FUNCTION_TABLE_v = [b7,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b7];
var FUNCTION_TABLE_vi = [b8,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt12length_errorD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,_setLogLevel,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b8,b8,b8];
var FUNCTION_TABLE_vid = [b9,_setProjectionNearPlane,_setProjectionFarPlane,_setPattRatio];
var FUNCTION_TABLE_vii = [b10,_setThresholdMode,_setThreshold,_setPatternDetectionMode,_setMatrixCodeType,_setLabelingMode,_setImageProcMode,__ZN10emscripten8internal7InvokerIvJiEE6invokeEPFviEi];
var FUNCTION_TABLE_viid = [b11,__ZN10emscripten8internal7InvokerIvJidEE6invokeEPFvidEid,__ZN10emscripten8internal7InvokerIvJifEE6invokeEPFvifEif,b11];
var FUNCTION_TABLE_viii = [b12,__ZN10emscripten8internal7InvokerIvJiiEE6invokeEPFviiEii];
var FUNCTION_TABLE_viiii = [b13,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi];
var FUNCTION_TABLE_viiiii = [b14,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_viiiiii = [b15,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];

  return { __GLOBAL__sub_I_ARToolKitJS_cpp: __GLOBAL__sub_I_ARToolKitJS_cpp, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, ___cxa_demangle: ___cxa_demangle, ___emscripten_environ_constructor: ___emscripten_environ_constructor, ___errno_location: ___errno_location, ___getTypeName: ___getTypeName, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, __get_daylight: __get_daylight, __get_environ: __get_environ, __get_timezone: __get_timezone, __get_tzname: __get_tzname, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_replace_memory: _emscripten_replace_memory, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _sbrk: _sbrk, dynCall_di: dynCall_di, dynCall_dii: dynCall_dii, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vid: dynCall_vid, dynCall_vii: dynCall_vii, dynCall_viid: dynCall_viid, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_ARToolKitJS_cpp = asm["__GLOBAL__sub_I_ARToolKitJS_cpp"]; asm["__GLOBAL__sub_I_ARToolKitJS_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_ARToolKitJS_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real____cxa_demangle = asm["___cxa_demangle"]; asm["___cxa_demangle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_demangle.apply(null, arguments);
};

var real____emscripten_environ_constructor = asm["___emscripten_environ_constructor"]; asm["___emscripten_environ_constructor"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____emscripten_environ_constructor.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____getTypeName.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real___get_daylight = asm["__get_daylight"]; asm["__get_daylight"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_daylight.apply(null, arguments);
};

var real___get_environ = asm["__get_environ"]; asm["__get_environ"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_environ.apply(null, arguments);
};

var real___get_timezone = asm["__get_timezone"]; asm["__get_timezone"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_timezone.apply(null, arguments);
};

var real___get_tzname = asm["__get_tzname"]; asm["__get_tzname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_tzname.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_ARToolKitJS_cpp = Module["__GLOBAL__sub_I_ARToolKitJS_cpp"] = asm["__GLOBAL__sub_I_ARToolKitJS_cpp"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var ___cxa_demangle = Module["___cxa_demangle"] = asm["___cxa_demangle"];
var ___emscripten_environ_constructor = Module["___emscripten_environ_constructor"] = asm["___emscripten_environ_constructor"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var __get_daylight = Module["__get_daylight"] = asm["__get_daylight"];
var __get_environ = Module["__get_environ"] = asm["__get_environ"];
var __get_timezone = Module["__get_timezone"] = asm["__get_timezone"];
var __get_tzname = Module["__get_tzname"] = asm["__get_tzname"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






